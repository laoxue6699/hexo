{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.1 Node.js 的安装与使用.md","path":"images/1.1 Node.js 的安装与使用.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.1.1.png","path":"images/1.1.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.1.2.png","path":"images/1.1.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.1.3.png","path":"images/1.1.3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.1.4.png","path":"images/1.1.4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.1.5.png","path":"images/1.1.5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.2 MongoDB 的安装与使用.md","path":"images/1.2 MongoDB 的安装与使用.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.2.1.png","path":"images/1.2.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/2.1 require.md","path":"images/2.1 require.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/2.2 exports 和 module.exports.md","path":"images/2.2 exports 和 module.exports.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/2.2.1.png","path":"images/2.2.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/2.3 Promise.md","path":"images/2.3 Promise.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/2.4 环境变量.md","path":"images/2.4 环境变量.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/2.5 package.json.md","path":"images/2.5 package.json.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/2.6 npm 使用注意事项.md","path":"images/2.6 npm 使用注意事项.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.1 初始化一个 Express 项目.md","path":"images/3.1 初始化一个 Express 项目.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/2.6.1.png","path":"images/2.6.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.1.2.png","path":"images/3.1.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.2 路由.md","path":"images/3.2 路由.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.3 模板引擎.md","path":"images/3.3 模板引擎.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.3.1.png","path":"images/3.3.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.4 Express 浅析.md","path":"images/3.4 Express 浅析.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.1 开发环境.md","path":"images/4.1 开发环境.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.10 留言.md","path":"images/4.10 留言.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.11 404 页面.md","path":"images/4.11 404 页面.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.12 错误页面.md","path":"images/4.12 错误页面.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.13 日志.md","path":"images/4.13 日志.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.14 测试.md","path":"images/4.14 测试.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.14.1.png","path":"images/4.14.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.15 部署.md","path":"images/4.15 部署.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.15.1.png","path":"images/4.15.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.15.2.png","path":"images/4.15.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.15.5.png","path":"images/4.15.5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.2 准备工作.md","path":"images/4.2 准备工作.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.2.2.png","path":"images/4.2.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.3 配置文件.md","path":"images/4.3 配置文件.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.4 功能设计.md","path":"images/4.4 功能设计.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5 页面设计.md","path":"images/4.5 页面设计.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.1.png","path":"images/4.5.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.11.png","path":"images/4.5.11.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.2.png","path":"images/4.5.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.5.png","path":"images/4.5.5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.6.png","path":"images/4.5.6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.7.png","path":"images/4.5.7.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.6 连接数据库.md","path":"images/4.6 连接数据库.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.7 注册.md","path":"images/4.7 注册.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.7.1.png","path":"images/4.7.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.8 登出与登录.md","path":"images/4.8 登出与登录.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.8.1.png","path":"images/4.8.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.8.2.png","path":"images/4.8.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.8.3.png","path":"images/4.8.3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.9 文章.md","path":"images/4.9 文章.md","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/laoxue.png","path":"images/laoxue.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.2.2.png","path":"images/1.2.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.2.3.png","path":"images/1.2.3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.2.4.png","path":"images/1.2.4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/1.2.5.png","path":"images/1.2.5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.1.1.png","path":"images/3.1.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.4.1.png","path":"images/3.4.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/3.4.2.png","path":"images/3.4.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.14.2.png","path":"images/4.14.2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.15.3.png","path":"images/4.15.3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.15.6.png","path":"images/4.15.6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.2.1.png","path":"images/4.2.1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.10.png","path":"images/4.5.10.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.13.png","path":"images/4.5.13.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.3.png","path":"images/4.5.3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.4.png","path":"images/4.5.4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.8.png","path":"images/4.5.8.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.9.png","path":"images/4.5.9.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.14.3.png","path":"images/4.14.3.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.5.12.png","path":"images/4.5.12.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/4.15.4.png","path":"images/4.15.4.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c99863e843c4c8d6b8c1dfc6ae9b56978c489b02","modified":1569036060317},{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1565667334765},{"_id":"themes/next/.all-contributorsrc","hash":"a5a536579490546f2275da03765738ceabe45584","modified":1565527612685},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1565527612685},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1565527612685},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1565527612688},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1565527612688},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1565527612689},{"_id":"themes/next/README.md","hash":"2fcc7621e898732ef7976b89ca2511f84c577c35","modified":1571108058109},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1565527612690},{"_id":"themes/next/_config.yml","hash":"608b83c566877be50b88a86ebb6548a7069e9492","modified":1565532450450},{"_id":"themes/next/gulpfile.coffee","hash":"2ba4aeddc257a74a209edf5218137010662cd5fb","modified":1565527612694},{"_id":"themes/next/package.json","hash":"170e67ca35a7c1ddc7dae50a90f6d4270143331f","modified":1565527612716},{"_id":"source/about/index.md","hash":"2b7ffff61c8e7a659305c5160795a8342b8568d4","modified":1565668375547},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1565667339775},{"_id":"source/_posts/LoopBack3-0自定义角色与授权.md","hash":"87dd5ef30ec45b73a465b61a05ee48a9aeb701ae","modified":1569414766215},{"_id":"source/_posts/Loopback3-0创建API接口实战.md","hash":"0e92559b9f2a0da1e9987d10a1f0225038b574a4","modified":1569414776537},{"_id":"source/_posts/OKR-API-的设计与实现.md","hash":"f4f9925252a398c5ed3c897a77577ce98e1c8c8b","modified":1565582224975},{"_id":"source/_posts/git-帮助文档如何以HTML格式浏览.md","hash":"b1f32cd611d6dcf63683d9f4361442db7fbccdf6","modified":1569874732875},{"_id":"source/_posts/hexo常用命令.md","hash":"8af708ed542662dab86e3fc8a5c4f4e2767536b4","modified":1568885645630},{"_id":"source/_posts/vue-cli开发保健菜谱APP.md","hash":"e3fbe8326d0861a0ad79bc3c2fe50b8b4c21b17a","modified":1565652201352},{"_id":"source/_posts/三步搞定用Docker安装Drupal8运行环境.md","hash":"bf7b469dfd4c9fafc45e695365dba2048c311218","modified":1569968345615},{"_id":"source/_posts/三阶魔方还原.md","hash":"8783c1a0cd84ea527d858bdb0dce546358549bed","modified":1569734366541},{"_id":"source/tags/index.md","hash":"14566bf91404973134a5d0a92b4a242f69413825","modified":1565529643099},{"_id":"source/categories/index.md","hash":"75bc5931e8851a60ddd3443c61d69edf3949fce5","modified":1565529635461},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1565527612690},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"4094dab82cbdfdd0de117e94b508bbd5ceb3d363","modified":1565527612690},{"_id":"themes/next/docs/DATA-FILES.md","hash":"290237970f023ad1345dcb8825fe3004de69900c","modified":1565527612691},{"_id":"themes/next/docs/INSTALLATION.md","hash":"5385246ab4756e3e26ec9fe1f6a6759812177cc4","modified":1565527612691},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"1fb2c852fad03b73882069f1ec0659db2e1f2da0","modified":1565527612691},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1565527612691},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"a07ca23c38f6e4dddd4b74016b30e88cd3796f75","modified":1565527612692},{"_id":"themes/next/docs/MATH.md","hash":"6a6be5a98a44b063993eba755c280ac00b926c63","modified":1565527612691},{"_id":"themes/next/layout/_layout.swig","hash":"7c7eeb42b631c46ec02cb723b22b68ae80409aa3","modified":1565527612699},{"_id":"themes/next/layout/archive.swig","hash":"9941337701a8c0377a7af0024d948fcbb3a29a58","modified":1565527612715},{"_id":"themes/next/layout/page.swig","hash":"dc48085a0c69c60155d57aa546ded835a1ff767e","modified":1565527612716},{"_id":"themes/next/layout/category.swig","hash":"3020f7646dc3c79d44e3b5f1ce24b06d5b9fc13a","modified":1565527612715},{"_id":"themes/next/layout/index.swig","hash":"8cf3451dd2d5727920b351a8f5eefdddb5bf3638","modified":1565527612715},{"_id":"themes/next/layout/post.swig","hash":"4291b34b17fc6f1c06eb69852c894913e889a774","modified":1565527612716},{"_id":"themes/next/layout/tag.swig","hash":"02b5dfdfa1d1ff61f161f592d38b09454c941036","modified":1565527612716},{"_id":"themes/next/languages/de.yml","hash":"7d49f193a8f5adaf4f92e59190f30e0defff6750","modified":1565527612694},{"_id":"themes/next/languages/en.yml","hash":"4de207d89824422ccec5bc754a81af032d5e30f9","modified":1565527612694},{"_id":"themes/next/languages/default.yml","hash":"4de207d89824422ccec5bc754a81af032d5e30f9","modified":1565527612694},{"_id":"themes/next/languages/es.yml","hash":"170a623afb40566565a805461a030f649ec9a803","modified":1565527612695},{"_id":"themes/next/languages/fr.yml","hash":"03f5cf2aa02ca4ed6ba639a38e8cf5d6d873b442","modified":1565527612695},{"_id":"themes/next/languages/fa.yml","hash":"bdd06c1ff301a32d1d5940a234c938924265ef71","modified":1565527612695},{"_id":"themes/next/languages/hu.yml","hash":"1e7e7eaa12fa7eb8ba45b228f1ff47f39a841c72","modified":1565527612695},{"_id":"themes/next/languages/id.yml","hash":"32152e32a3b6da6ae81c37c13d1f8950a4d76ade","modified":1565527612695},{"_id":"themes/next/languages/it.yml","hash":"ffaaa9c07981b525762af48b0c78e92443659f93","modified":1565527612696},{"_id":"themes/next/languages/ja.yml","hash":"8ec35aa9d54f201d17e322882735018e63c6120d","modified":1565527612696},{"_id":"themes/next/languages/ko.yml","hash":"3be6b7695565777e4428c4934a43930517fb1d74","modified":1565527612696},{"_id":"themes/next/languages/nl.yml","hash":"d1b5dc6236dd6c0c5e32b9f5e9d8d60a77e06de6","modified":1565527612696},{"_id":"themes/next/languages/pt-BR.yml","hash":"ae238667c73a074cf383960ceabcaf98f4c3b7a5","modified":1565527612697},{"_id":"themes/next/languages/pt.yml","hash":"8f4b951c62e47c5dea0253bba87f0a2f3f31c8f3","modified":1565527612697},{"_id":"themes/next/languages/ru.yml","hash":"3a2e2fbfdd68183bcf33253d3a94f254cea6444f","modified":1565527612697},{"_id":"themes/next/languages/tr.yml","hash":"93975c9152d8d9f3715b6f4ae9d28bc96bc168b5","modified":1565527612698},{"_id":"themes/next/languages/uk.yml","hash":"5d994a97fe5725c6b3a1d63043c26f76bf52bba3","modified":1565527612698},{"_id":"themes/next/languages/vi.yml","hash":"a00c281324d182f147345ee6634c26450efc3160","modified":1565527612698},{"_id":"themes/next/languages/zh-CN.yml","hash":"0f177f2983d0fd61c6288e7310987a3bc0826be2","modified":1565580199243},{"_id":"themes/next/languages/zh-HK.yml","hash":"f78690189d8dccf95e5a5cf9f25d865eea19d85e","modified":1565527612699},{"_id":"themes/next/languages/zh-TW.yml","hash":"d1b69b3075b0fa0444ee32b4e25ac52886b1388a","modified":1565527612699},{"_id":"source/_posts/使用-Express-MongoDB-搭建多人博客.md","hash":"cdbd339c0eabd39fc4966297267b38ceaa2ed4c9","modified":1566045159583},{"_id":"themes/next/docs/AUTHORS.md","hash":"9b6dea4c6ad89b1cf588251e0886c028d8f427e2","modified":1565527612690},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"67d04e3e29a2675d1a9f87d1ae6ea0769e963ff1","modified":1565527612692},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1565527612692},{"_id":"themes/next/docs/ru/README.md","hash":"932d3965d8b1a1ff653c07a0cafcdbf5892d6945","modified":1565527612692},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1565527612692},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1565527612692},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1565527612693},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"2949ccf2cba5238f01a1386a9e91e646c7a22260","modified":1565527612693},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"c46f3f7496fc422207cc5954e10a2bc972b650aa","modified":1565527612693},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"c13546dd70a99a7d2d409cddf5d59f2f4d4d44a4","modified":1565527612693},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"e568a1b3c532e0ecf33cc237e1425b2579bd006d","modified":1565527612693},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"a658a72589738e11aefaa3a714b188ffd5aac822","modified":1565527612694},{"_id":"themes/next/docs/zh-CN/README.md","hash":"79a73361b24e7fb7022992702961faacd6a2f9fe","modified":1565527612694},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"ba918bbd8faf32c28335693f03ff37c6acaff7f3","modified":1565527612694},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"41625b8424b680e7c81fc9294e0bb1859434ce01","modified":1565527612700},{"_id":"themes/next/layout/_macro/post.swig","hash":"d2d485c376da5e568e5e3ce3ee664eeeff89d20a","modified":1565527612700},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a5ceff84bbe9ad2be780ff58aeea91972c32d44","modified":1565527612700},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"e3c54ae7eca24a85148ec3bfb6712abf07c418c9","modified":1565527612708},{"_id":"themes/next/layout/_scripts/index.swig","hash":"3807bed8ae3f632019f26e282ef613d2275287ee","modified":1565527612708},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"283e78eb795f52236026434dab6a0667f14d3c08","modified":1565527612708},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1565527612708},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"051d1c929f26bc5e18a7aa8ecee12f29a3aebf27","modified":1565527612710},{"_id":"themes/next/layout/_scripts/three.swig","hash":"45f5596a6e80c2da8cd08093ff190a9d3a438195","modified":1565527612709},{"_id":"themes/next/layout/_partials/comments.swig","hash":"62f1556e9b8cc3217dad9ab4db8f474088fa1383","modified":1565527612702},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ff9a950a81c1c66f2d3cbe9304c427c728716d7f","modified":1565527612702},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"40e940c3213b74933e529cd64f64c1f6f512b5ca","modified":1565527612702},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"769a983fe2f77908bfc8590ff37a0d8958b47598","modified":1565527612705},{"_id":"themes/next/layout/_partials/pjax.swig","hash":"6d7d2e1676f0abd7d4a4d607eca51065e02d07f4","modified":1565527612705},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1565527612705},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1565527612711},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"f7aad12d8cc5edc5af00e07a7902a392dd54ab8b","modified":1565527612711},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"e7103dc133c8a6109e2a2e086c8e65ac80dbf6bb","modified":1565527612713},{"_id":"themes/next/layout/_third-party/index.swig","hash":"56133a4237a5cdee2bd874a2b3c0be2ac967dd2b","modified":1565527612713},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"c31a52e52371ad6bb13c14a0db51fca6222d0dd0","modified":1565527612713},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1565527612714},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"dc9c90c69734e658ec82995f3cfa286003c01281","modified":1565527612715},{"_id":"themes/next/scripts/events/core.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1565527612716},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"834599d2b83f06e90f8cf618cddc106fe900ba5c","modified":1565527612718},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1565527612719},{"_id":"themes/next/scripts/filters/exturl.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1565527612719},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"51672320fff6b39f56fe6a2881c611afe4e79b8e","modified":1565527612719},{"_id":"themes/next/scripts/filters/minify.js","hash":"ef2c0280521462da88f220ba69b047d5d99adc76","modified":1565527612719},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1565527612720},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1565527612720},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1565527612720},{"_id":"themes/next/scripts/tags/full-image.js","hash":"70b1d6ed969143e3912daf051ccc3585d984c146","modified":1565527612720},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1565527612720},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1565527612720},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1565527612721},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1565527612721},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1565527612721},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1565527612721},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1565527612721},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1565527612722},{"_id":"themes/next/scripts/helpers/engine.js","hash":"896a581feb9432e58a325ad04d66d6310a12374e","modified":1565527612719},{"_id":"themes/next/scripts/helpers/font.js","hash":"53169e2d04f0c21e68beb07c212be0a6c2a9aaea","modified":1565527612719},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1565527612719},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1565527612743},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1565527612747},{"_id":"themes/next/source/js/algolia-search.js","hash":"955ae621677ae99416dd8f362eea02ef39811eca","modified":1565527612747},{"_id":"themes/next/source/js/local-search.js","hash":"a857346f051001d6fe0c7ef1780b313f9e5c7955","modified":1565527612748},{"_id":"themes/next/source/js/motion.js","hash":"4d1a9ab5ce397c093711769045288ce48fd392bd","modified":1565527612748},{"_id":"themes/next/source/js/next-boot.js","hash":"1fc6c1b80f265396cb193b37d4138cc3c8fe08c7","modified":1565527612748},{"_id":"themes/next/source/js/post-details.js","hash":"b72c145c7995fe6975b637ef3bcbb2c41b47c289","modified":1565527612749},{"_id":"themes/next/source/js/scrollspy.js","hash":"e630d9b05ab6bcc9ebab92435587d5a554eb0e3b","modified":1565527612749},{"_id":"themes/next/source/js/utils.js","hash":"fa0284bbf581b12594b46187dbaab7ef28a329c3","modified":1565527612750},{"_id":"themes/next/source/images/1.1 Node.js 的安装与使用.md","hash":"6937deb772a9d292dab30f2ee48ac18bb4a13763","modified":1566040305012},{"_id":"themes/next/source/images/1.1.1.png","hash":"239a7780e8b8a3ba1079b41aa6e613c00dad249a","modified":1566039716668},{"_id":"themes/next/source/images/1.1.2.png","hash":"8e19dac14106c439555ff50baf238431eb57380f","modified":1566039716668},{"_id":"themes/next/source/images/1.1.3.png","hash":"1faaa4d2ef5e740ba641486012995764d1f1bc1d","modified":1566039716668},{"_id":"themes/next/source/images/1.1.4.png","hash":"4fb1450a2a5d1527e7128dbaa99ea765312ad1e2","modified":1566039716668},{"_id":"themes/next/source/images/1.1.5.png","hash":"22912a3b7edcf2dd3854e3291051a87a454219a5","modified":1566039716668},{"_id":"themes/next/source/images/1.2 MongoDB 的安装与使用.md","hash":"4706d10e75c9b3d6f7d47aed8ed10c0180fb2c58","modified":1566040305024},{"_id":"themes/next/source/images/1.2.1.png","hash":"3f1a7364f1a913e7037c8ceaf3526092c237964b","modified":1566039716668},{"_id":"themes/next/source/images/2.1 require.md","hash":"021eebd0e6eee40eae9431baae68c6cd1fa467b9","modified":1566039716671},{"_id":"themes/next/source/images/2.2 exports 和 module.exports.md","hash":"79afdead3ebb16aae5872f7e2335583ddd7b2583","modified":1566040305037},{"_id":"themes/next/source/images/2.2.1.png","hash":"568341d0d53d7059c0d89e22fdb2c296e97603ab","modified":1566039716668},{"_id":"themes/next/source/images/2.3 Promise.md","hash":"a14ec34b7b885fbaec57d7418e0780a05a3af781","modified":1566039716671},{"_id":"themes/next/source/images/2.4 环境变量.md","hash":"df70a867b2070722e36a105f34ab292a37053cdc","modified":1566039716671},{"_id":"themes/next/source/images/2.5 package.json.md","hash":"c3c88ad0ae1b510caf012e317df5104cf0567947","modified":1566039716671},{"_id":"themes/next/source/images/2.6 npm 使用注意事项.md","hash":"d824ae55ebfa2af053d34168adfa94315baef411","modified":1566040305004},{"_id":"themes/next/source/images/3.1 初始化一个 Express 项目.md","hash":"5fbcb63d3c4896d83990a5ae7c5dd569434871b6","modified":1566040305027},{"_id":"themes/next/source/images/2.6.1.png","hash":"46fe39e7ea57247ea4dd4ca444b4420ae7006aff","modified":1566039716668},{"_id":"themes/next/source/images/3.1.2.png","hash":"26563c6954e498648bbc0637e10a3d1cb598d4b2","modified":1566039716668},{"_id":"themes/next/source/images/3.2 路由.md","hash":"43b41bb83f7aa4f85b55ea4d735a34f020491258","modified":1566039716671},{"_id":"themes/next/source/images/3.3 模板引擎.md","hash":"fc6489ce7e33b71952b8ae53b5e7159116eb78c0","modified":1566040305003},{"_id":"themes/next/source/images/3.3.1.png","hash":"404376182b2f01788c02273114c59e4695975bbc","modified":1566039716668},{"_id":"themes/next/source/images/3.4 Express 浅析.md","hash":"3e88d7cf845a045e9c84f16b6e9b205467ffcbc8","modified":1566040305024},{"_id":"themes/next/source/images/4.1 开发环境.md","hash":"691c912c049d62a5f0e097a9a731fa91260bb590","modified":1566039716671},{"_id":"themes/next/source/images/4.10 留言.md","hash":"f09f6773935fd2cbcfaf48341d058a20e1e48e90","modified":1566039716672},{"_id":"themes/next/source/images/4.11 404 页面.md","hash":"889bb3ba383c4239187c97afac1ce0be4c10d02a","modified":1566039716673},{"_id":"themes/next/source/images/4.12 错误页面.md","hash":"d87876f7b7d833b0ccaf40a2572a590423b10a8a","modified":1566039716673},{"_id":"themes/next/source/images/4.13 日志.md","hash":"ea7c8322d35e772def1057a95f1f0c7297e2b7eb","modified":1566039716673},{"_id":"themes/next/source/images/4.14 测试.md","hash":"8664e5dd198eb858639c33e6439f2cf6b87cc71e","modified":1566040305012},{"_id":"themes/next/source/images/4.14.1.png","hash":"ba05ab01fed7de9898911ae5f9a73d05bb1fdfc0","modified":1566039716670},{"_id":"themes/next/source/images/4.15 部署.md","hash":"5706951f58667575720ddd1b1b2fb456c6dec8ce","modified":1566040305037},{"_id":"themes/next/source/images/4.15.1.png","hash":"4b214b6085e89d0257382804012632140b85ac13","modified":1566039716670},{"_id":"themes/next/source/images/4.15.2.png","hash":"7a5daa7f367c2a484427c31058b03455fe4b2eff","modified":1566039716670},{"_id":"themes/next/source/images/4.15.5.png","hash":"3048cc57d3e51fe5c46e47efdd43192ff20d4579","modified":1566039716670},{"_id":"themes/next/source/images/4.2 准备工作.md","hash":"e07a38511cc34373c6d48ec323780b7bb0186f97","modified":1566040305004},{"_id":"themes/next/source/images/4.2.2.png","hash":"cebadaee10ebc6cb2d0e0b70d4642d6d83a9dcfc","modified":1566039716669},{"_id":"themes/next/source/images/4.3 配置文件.md","hash":"fc6f20cc25d68837db432e50bc85606233c7444e","modified":1566039716672},{"_id":"themes/next/source/images/4.4 功能设计.md","hash":"13e5f2168d295cf25a1379cb8c6d1d1e9d78cb47","modified":1566039716672},{"_id":"themes/next/source/images/4.5 页面设计.md","hash":"d4c155ba51c09abcfbb20b390f43259ec240d5c5","modified":1566040305003},{"_id":"themes/next/source/images/4.5.1.png","hash":"9ff75c0024002c920b930adb69b1c44008036257","modified":1566039716669},{"_id":"themes/next/source/images/4.5.11.png","hash":"00d4b22cad01f2b559952d72033be93552b8032a","modified":1566039716669},{"_id":"themes/next/source/images/4.5.2.png","hash":"a46207fd24584e7d5a2dbe3b224ebfa22537c09b","modified":1566039716669},{"_id":"themes/next/source/images/4.5.5.png","hash":"36df6fd6a1b96e0a0c8390db1072088f61509f7e","modified":1566039716669},{"_id":"themes/next/source/images/4.5.6.png","hash":"74ca78ad32838fbe26636d6b863ee3ab40d82047","modified":1566039716669},{"_id":"themes/next/source/images/4.5.7.png","hash":"9a70e8533033772a4b9205c57dd7f0ccfed6e079","modified":1566039716669},{"_id":"themes/next/source/images/4.6 连接数据库.md","hash":"ab8536d6f2a25d3b561c77800b00f14161ac1770","modified":1566039716672},{"_id":"themes/next/source/images/4.7 注册.md","hash":"8b803db1891b819216e8f6e165eccf22fa7a3a73","modified":1566040305037},{"_id":"themes/next/source/images/4.7.1.png","hash":"7c7b5cfafefd3b03b9115eec93034cfe90484115","modified":1566039716670},{"_id":"themes/next/source/images/4.8 登出与登录.md","hash":"2e8e1f28510d417a5b55b35aa6ac829cd2f83673","modified":1566040305012},{"_id":"themes/next/source/images/4.8.1.png","hash":"4d388778b2a17c3fd6f0ec9f353dcb22ccdff7d0","modified":1566039716670},{"_id":"themes/next/source/images/4.8.2.png","hash":"2a3ca53062b2677065fb97d0e387176a031b44a1","modified":1566039716670},{"_id":"themes/next/source/images/4.8.3.png","hash":"c96d4e449c95b23990863f508a325b592efbff2b","modified":1566039716670},{"_id":"themes/next/source/images/4.9 文章.md","hash":"592f7c57eadd3d4591faf6cef2e9152a4155aaa5","modified":1566039716672},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1565527612743},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1565527612744},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1565527612744},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1565527612744},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1565527612744},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1565527612745},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1565527612745},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1565527612745},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1565527612745},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1565527612746},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1565527612746},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1565527612746},{"_id":"themes/next/source/images/laoxue.png","hash":"4dec60a19ec2e1de5423a4a125db07c759bd99e1","modified":1565529018938},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1565527612746},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1565527612747},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1565527612747},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565527612737},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565527612737},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565527612742},{"_id":"themes/next/source/images/1.2.2.png","hash":"508bc1e2b0e4519f1e8cff259705e44ac46f14a4","modified":1566039716676},{"_id":"themes/next/source/images/1.2.3.png","hash":"e0daa2e189e7337b3c51b1ee1d2c2d03d6be3786","modified":1566039716676},{"_id":"themes/next/source/images/1.2.4.png","hash":"a3c5c83886a7e102747699d6a6afcc41c00ce9ae","modified":1566039716676},{"_id":"themes/next/source/images/1.2.5.png","hash":"d7bc2404be72dd647be384adb1d57423b63061ed","modified":1566039716676},{"_id":"themes/next/source/images/3.1.1.png","hash":"0c9e066d9c583f48b7844aa13236ca106a547bb7","modified":1566039716676},{"_id":"themes/next/source/images/3.4.1.png","hash":"0ba7648e9a15677a7f6ea32dc32fb0e90e0030ab","modified":1566039716677},{"_id":"themes/next/source/images/3.4.2.png","hash":"57bb0a2ab9c28e652f656c829a333087b3051bc9","modified":1566039716677},{"_id":"themes/next/source/images/4.14.2.png","hash":"c1f793d4bf26697673c7770d20efe80e698af653","modified":1566039716678},{"_id":"themes/next/source/images/4.15.3.png","hash":"301138efdb720902c65af3ea56c57c4fad2b512d","modified":1566039716679},{"_id":"themes/next/source/images/4.15.6.png","hash":"e7d804fa8a6d5a8e37f4a73823f74f5d63e0b56b","modified":1566039716679},{"_id":"themes/next/source/images/4.2.1.png","hash":"0c9e066d9c583f48b7844aa13236ca106a547bb7","modified":1566039716677},{"_id":"themes/next/source/images/4.5.10.png","hash":"d6c74237a9b7b6d488c90304af83a7dfd6556497","modified":1566039716678},{"_id":"themes/next/source/images/4.5.13.png","hash":"71546f9e9b6b34e6c5499fb8e0c238040ea972e9","modified":1566039716678},{"_id":"themes/next/source/images/4.5.3.png","hash":"40b9d9336577ec069eae650428f0d8e3c195b2f0","modified":1566039716677},{"_id":"themes/next/source/images/4.5.4.png","hash":"c4680cc129f8f0a924e565c4097871a3a15a50d2","modified":1566039716677},{"_id":"themes/next/source/images/4.5.8.png","hash":"29002bd4e0f290c21d4e87917f16e6e52d19ea71","modified":1566039716677},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"9e959646899a1dd381c0bea870408cd392c93c70","modified":1565527612699},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"1dc3875981923aee38b7b1e3ca3813b75ed6ab9c","modified":1565527612700},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1565527612709},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"5258d3dbfbb6d585f798c697463f8b67b7dea02b","modified":1565527612709},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1565527612709},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1565527612709},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"f2ff7799baac49eb9779f66e0cd083fac70b87a2","modified":1565527612709},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"509621f1a68e7ab41193a14a2c50a21aff976f9e","modified":1565527612709},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"b35b2bf2ce3d73cabe8c443a45c2a82d45baf151","modified":1565527612701},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1565527612701},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"2925f6353934b1b2adc2808059e64dd7d220edd7","modified":1565527612701},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1565527612702},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1565527612702},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"6f02724e24945d7e5f0dcd351deebc90996ad38d","modified":1565527612703},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"99a7af53611140e42a39a730e253264d0bcdbfe4","modified":1565527612703},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"8dd7ac5ccc52848b3d0fb0f102874c1a8c1c45b6","modified":1565527612703},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"3bb62caf1462aad21335a9b0236c6aed97de2e68","modified":1565527612704},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"a14a301e3d7187595b37b2ab419709a9c81a3a76","modified":1565527612704},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"a72e33e11df9d3639cdebab4f480e397c70deacb","modified":1565527612704},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"883ea1d024a8262eb8d3213de71c8ccb30daf095","modified":1565527612704},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d3c25d70f0fd76121e4cacb9f8af4ccbe2a3c74d","modified":1565527612705},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3ed15de413b9ca83641bbd0b740f94b450630357","modified":1565527612706},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"38683b340b199ab204a43f3d2cd41e21f01ceb06","modified":1565527612706},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"e2549106ea26ac48019aa3f8023b8fdc78c0f6db","modified":1565527612706},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"40483139657cde24356c6a4033a6386b909327a9","modified":1565527612706},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1565527612706},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"d9fe715fee716f78c7976c4e8838da71439ee0e0","modified":1565527612707},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7bce91d429216724db5e337ec64cf7f05b022c97","modified":1565527612707},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1565527612707},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1565527612707},{"_id":"themes/next/layout/_partials/share/index.swig","hash":"609ce79f47756977b90bce365614d4f8d1020196","modified":1565527612707},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"c6a8687c73e4f16a092fdece76edc71cc27af42c","modified":1565527612707},{"_id":"themes/next/layout/_partials/share/needsharebutton.swig","hash":"50b13bebddecfc08c4093c1df2af3b761b20c5b9","modified":1565527612707},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"84a4201867c034afbf25862b63af4a582f7086b1","modified":1565527612708},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-jquery.swig","hash":"b485797073495e24bf2f0b85880d513257bfed72","modified":1565527612710},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1565527612710},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1565527612710},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"753ae34ed3852ea3c75a9f29d057f53a9829f247","modified":1565527612710},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"3b9c50e3cbfa2c4d6cb0ffd443a994a212f3dbfc","modified":1565527612711},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"051fadd4cb777769fc4c0fe3cb0b309e3236e5c2","modified":1565527612711},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1565527612711},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"4dc2a96ad40b40d9b89da21105feee05df81ff35","modified":1565527612711},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1565527612712},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1565527612712},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1565527612712},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1565527612712},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4e076cb5d50588c8fc5e032b6c9e8f6601628561","modified":1565527612712},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"ca69cf56f4a0151df0c1b607cd0d8493ba268b97","modified":1565527612712},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ba169c93f5fd1024d312e890087072867bd1ddae","modified":1565527612712},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1565527612712},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"90eaaf01b2a4c570084d07fe48a2858fce5a7136","modified":1565527612713},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"bc23c9eb9c06b0b377695f44373c14c5cde1d0e3","modified":1565527612713},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"6a05a8847cbd915029a511e995d5ee1ce571292c","modified":1565527612713},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"569f209b16a99db744b4cd478bdb067b95504a05","modified":1565527612713},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"1dd71077528002ef8fbb94a98fd2f54f59a58798","modified":1565527612714},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1565527612714},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"353da7ea00400897ae920a085aa4bee2224da50d","modified":1565527612714},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1565527612714},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1565527612715},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"61aa4f32865149019d9dda3b49b9bbf5f396b012","modified":1565527612715},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"95ca62caaa4f52f7140df5071026fb4a75ab4e8b","modified":1565527612715},{"_id":"themes/next/scripts/events/lib/config.js","hash":"867b23bb231224064a79df5278ba0a02215044eb","modified":1565527612716},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1565527612717},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"251dcc22ed213da9b6135e1b958010e3352408d4","modified":1565527612717},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"00922e352b5585ae15cc19eaec8f5c31bd57814c","modified":1565527612717},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1565527612717},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"8f4643a844f90ca0ad853de1fe7c687c7569503d","modified":1565527612717},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"0388d10adf2330be20ec932010e35a81f4296c5d","modified":1565527612717},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a9ebe8e80edb5e19ec4b845090d260ae9de1566a","modified":1565527612717},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"8d5379344310ae67c1e8880e517d643e40670874","modified":1565527612718},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"4505867a0598b83583f9740ecba3e4f053d18ebe","modified":1565527612718},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"71ee48847a1e54962640a4b64298ecc3e76565f8","modified":1565527612718},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"0c12943b5d681cf070431c3ff9256eaf358d4a3c","modified":1565527612718},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"2aa608a4bc664e87e4e56b016a28dc7d798d9966","modified":1565527612718},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1565527612737},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2bb4c78b5da482751085beb73ab01ecd2dcbccda","modified":1565527612737},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"b82c5b13ca6d1a6424dcc1245fb7722cac090579","modified":1565527612738},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"451f1f904df8b39015ccff5ce804c047f132b1f4","modified":1565527612742},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"4c101c21b4f2712e47dba869ccc116b245fb0909","modified":1565527612742},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"db52bce619bb848189e83b7bfabd1b2a06fd5578","modified":1565527612743},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ea5adf4e5a9ba6dd07a74613f4b62f726fc639b7","modified":1565531810883},{"_id":"themes/next/source/js/schemes/muse.js","hash":"3367e85556ba4d138b4f9ad33d00b723bb75557a","modified":1565527612749},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b1bfc528190a93256fda7863685d5424636e87ed","modified":1565527612749},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1565527612750},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1565527612750},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1565527612750},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1565527612750},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1565527612751},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1565527612757},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1565527612758},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1565527612758},{"_id":"themes/next/source/images/4.5.9.png","hash":"6ab77e20173a1930a3fdad01c3126a8fed9d5c1d","modified":1566039716694},{"_id":"source/_posts/LoopBack3-0官方文档中文增强版.md","hash":"6860601e8667c6c54a55876883b8a10350c6a41d","modified":1565746293816},{"_id":"themes/next/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1565527612756},{"_id":"themes/next/source/images/4.14.3.png","hash":"dd711be3f1838dba1535019901f4cb8e4b91d444","modified":1566039717218},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1c178041435de8076a1ce31304184007a837fcbb","modified":1565527612722},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"58a80925a845d590d4a9736ae92a6b03dc7c575f","modified":1565527612722},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"2b14d2a3f814c9dbd92c00835878925f9f10ca28","modified":1565527612722},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"dc658f44f4cda38684a584c95a6823e96c970a6d","modified":1565527612722},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"1960299fe99163f44f1cd90210eea1ef4b2cb723","modified":1565527612723},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"390993b47942a47d23ed8904c92e0186b6e9af29","modified":1565527612726},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"4bec027d48ebb95acd5f5786456ee1eb19a23ee4","modified":1565527612730},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1565527612730},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"bdf464ee7972a007949acbe555d82e57621b3714","modified":1565527612736},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"442f7598991b92ec8bc3ce5343e18730da92e4fb","modified":1565527612736},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1238932450efc3f4c2e25c704794437ac78e6164","modified":1565527612736},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"4c4986b704c3cc3167c3c2a69c454446cf152528","modified":1565527612736},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"4f7140cc0db08b47a25c4c7aad71047d433051a1","modified":1565527612737},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"e9e3bcef3f9a3541a11e5f3edfed2a3d13d22b80","modified":1565527612737},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"173fe462331ba12d612f7ade8f18c0f9e259fa5d","modified":1565527612737},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"65328fbc073901d78729463e46cb28a4c37a6fac","modified":1565527612738},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1565527612738},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"87d19a45db10689aae9a09736efd1eb896a35b3d","modified":1565527612738},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1565527612739},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f87b7a7d30e9111f7af269dcf7bd8c1893343fe8","modified":1565527612739},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"d46c61153bdba976ea785431d5d4b2c2a47c39b2","modified":1565527612739},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"49c6c656ed6e7348f967c01f8302fe1f6a5e3cd9","modified":1565527612739},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"e65c64b37f5db66937aa30e94ecb414711e556c7","modified":1565531927567},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"cbeb23488b707418a60b59ef8d6abc4f0d671959","modified":1565527612741},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"2e0681fa265a55f0259969109a3b9e3788bf516c","modified":1565527612741},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"7fad214ad640f9cd35fd3357e3bab03bbe45a2da","modified":1565527612742},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"4b976940b728a78428e88f40acf9a801223af88a","modified":1565527612742},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"10b4794ba62726fc052c74d786d962ed79d0780b","modified":1565527612742},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"54c5e23ec3dcbbc77848ededba76e861cf0f4719","modified":1565527612740},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"bdc0ada1eec3c1d625bfe2c148cdfc1b3460fa32","modified":1565527612740},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"0138165021be463f19e092f8972ac41aea3fb68a","modified":1565527612740},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"45f03b3bb80e32fd5648ce723055d7552b87d97c","modified":1565527612740},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1565527612751},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1565527612751},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1565527612752},{"_id":"themes/next/source/images/4.5.12.png","hash":"4ee822edcf4e8aab206497ad09c66eb4497ea2d6","modified":1566039717205},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1565527612755},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"0442cccb1111eec0d38357fba810319d781b7ef9","modified":1565527612723},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"172a83db23cb3f8a95e7cd6046befbc841caa869","modified":1565527612723},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"4c7140804d1ca65396959a3e8f8b79b9c4d3233f","modified":1565527612723},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1565527612723},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"cf37dc0ef20a8423a28b056458e1fa609875789a","modified":1565527612724},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"080f22922d89ca714a2463d6eaedfd4cb68e8aef","modified":1565527612724},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"dada73ae88f01fab2ab4d2c83eddfc558de2110a","modified":1565527612724},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1565527612724},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"e13f52684dab8add24e90f1373ac8af578671c65","modified":1565527612724},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"65fa4eb4aaf254be86b407f616ffc7340de9fedd","modified":1565527612725},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"a67dc85f6d158dac20e951ab55988ff7e9e1739b","modified":1565527612725},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"d416014be2accb53931ac0b4c60a0c5e3cf2d180","modified":1565527612725},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"1f217159862b12a89350e11b5097a8f3031af28f","modified":1565527612725},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1565527612726},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"621dc55fe935afe68a19f67b7447524292bc7e56","modified":1565527612726},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"207019d9e4911060dc23f01f821727fe0fe4717c","modified":1565527612726},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1565527612726},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1565527612727},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"83afee4c02f63642267a4d1487d028dc83c7739c","modified":1565527612727},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"7cee1dc30f323e9f46e1fd4cf61c1a3d4cebb8b0","modified":1565527612727},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"f96b241dea210e494b9173be76cce65faee7157a","modified":1565527612727},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"bb892e5934a3b525afd1e578db991b747ea4c1eb","modified":1565527612727},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"8b0dde1df553a5a2f5e0765e4e4ce48e9ab2c90e","modified":1565527612728},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c60afb603d58cad3ad13e1a16c66832538510063","modified":1565527612728},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1565527612728},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"c898a67edb271c26f81e98acab93299a99fe3b95","modified":1565527612728},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"fdebe803d61e781883453d6301b7e2bcf5a8ec05","modified":1565527612729},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1565527612729},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"70d13702896e03013f694f89d5a68adbf0fff4af","modified":1565527612729},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"7581c1a77831ac128798e8c293923be763dea68c","modified":1565527612729},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"6d379b38cab56666e24463a7a4d52006e232a8b1","modified":1565527612729},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"dcf801bd2478e125dffc0e23c0e720d048cf580f","modified":1565527612729},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e292224b3d01a845b303a04ff83dc5c6945a553c","modified":1565527612730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2ef546b4cfa5038ebb050c592c5135bbeb51af41","modified":1565527612731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1565527612731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cd7ab38366a73edf3e7576d2629339660080b6f6","modified":1565527612731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"8fc3facb9e9d4dae2578d0a271648d997a7f9bf3","modified":1565527612731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"26226247288e1b2e8eca7af9caa7086b28578a42","modified":1565527612731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3108a247549fbdf11071d023add3f1b34ad2b23","modified":1565527612732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"b2eca1259b9df8df81c5768bbb9b7ef65826e360","modified":1565527612732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"bfa93a958115ddd562cd10f74b2eb887b6d3f187","modified":1565527612732},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"02e5a998748a67fa885fb06fae242bcf3f2786fb","modified":1565527612732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"92381084e1aaf6798f058668aacef15bf1721739","modified":1565527612732},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"0527bc64708a9446dc7bbb2c7e39ab3a61251c26","modified":1565527612733},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"5d63f7479ee0f645e7538c60e827036fad74766d","modified":1565527612733},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"78d309e22206a4addda3c393282518dae02250ed","modified":1565527612733},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"278c31ed96474cd8a2ba465ed4131327e9d598bd","modified":1565527612733},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1565527612733},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"f211554f09a9005fad30b3e8f031be7f3fb7016a","modified":1565527612734},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1565527612734},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"90edaf377646093a07ea4e26accb861be9ebbb2b","modified":1565527612734},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1565527612734},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"438f3f7209fa6b8ab092a6f200a8c8c009565291","modified":1565527612735},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1565527612735},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"c2fc1a5105d6691d680f7b77b9301db416ebac8b","modified":1565527612735},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"85b8606763f4177d2f9a11c1909a21ab1ae2011c","modified":1565527612735},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"d048206fad5ace7f8df16cbc0b074b46ade16f81","modified":1565527612736},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"dd55feb43312489b5ec5692cc9d83ad150d7b389","modified":1565527612739},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/_sidebar.styl","hash":"1c3371551dadb86a4bf662c1adaa0dc2d2654ff7","modified":1565527612740},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"a29de6af7503a854e962eca8a3b8b911525ef2e5","modified":1565527612741},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1565527612754},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1565527612757},{"_id":"themes/next/source/images/4.15.4.png","hash":"718fcd5cfc82a5562edb6b21debca6bfbad67505","modified":1566039717257},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1565527612753}],"Category":[{"name":"原创","_id":"ck1r9cm0y0007nw9wg4tduwha"},{"name":"转载","_id":"ck1r9cm6q0019nw9w6l8alyrr"}],"Data":[],"Page":[{"title":"自我介绍","_content":"\n黄于辉，网名：老学。软件工程硕士，信息系统项目管理师（高级）。\n[博客：https://huangxiaoman.cn](https://huangxiaoman.cn)\n[主页：https://laoxue6699.github.io](https://laoxue6699.github.io)\n\n- 热爱编程，学习研究能力强，紧跟时代步伐，不断钻研新技术，善于将所学知识运用到实际工作中。本科与硕士学习阶段，全面涉猎计算机软硬件基础知识，打下了坚实的基础。2016 年 5 月通过全国统一考试获得《信息系统项目管理师》（高级）证书，软件工程和项目管理技术得以进一步提升。\n- 独立开发多个企业应用，积累了较为丰富的项目经验。对服务器管理、数据库应用、后端开发语言有一定的了解。\n\n  - 精通 DIV+CSS 页面布局和弹性布局，熟悉 JavaScript，了解 w3c 和 ES6 标准。\n  - 熟练使用 Bootstrap 框架快速构架响应式布局网站。\n  - 熟练使用 vue 框架和 uni-app 框架，对 react-native 和 flutter 也有初步的研究.\n  - 熟练使用框架快速构建移动应用和小程序。\n  - 熟悉 nodejs 和 express 框架，熟练使用 loopback4（基于 express 框架）创建 restful 后台服务 API 接口。\n  - 了解 JAVA、PHP、PYTHON 等高级语言。\n  - 熟悉 MySql、MongDB 等数据库应用。\n  - 熟练使用 LAMP 搭建动态网站。\n  - 理解并运用 MVC 和 MVVM 模型，掌握模块化、组件化、工程化前端开发技术。\n  - 精通 DrupalCMS 开发框架的使用，在腾讯精品课发表了专题教程《Dupal8 主题开发实战视频教程》。\n","source":"about/index.md","raw":"---\ntitle: 自我介绍\n---\n\n黄于辉，网名：老学。软件工程硕士，信息系统项目管理师（高级）。\n[博客：https://huangxiaoman.cn](https://huangxiaoman.cn)\n[主页：https://laoxue6699.github.io](https://laoxue6699.github.io)\n\n- 热爱编程，学习研究能力强，紧跟时代步伐，不断钻研新技术，善于将所学知识运用到实际工作中。本科与硕士学习阶段，全面涉猎计算机软硬件基础知识，打下了坚实的基础。2016 年 5 月通过全国统一考试获得《信息系统项目管理师》（高级）证书，软件工程和项目管理技术得以进一步提升。\n- 独立开发多个企业应用，积累了较为丰富的项目经验。对服务器管理、数据库应用、后端开发语言有一定的了解。\n\n  - 精通 DIV+CSS 页面布局和弹性布局，熟悉 JavaScript，了解 w3c 和 ES6 标准。\n  - 熟练使用 Bootstrap 框架快速构架响应式布局网站。\n  - 熟练使用 vue 框架和 uni-app 框架，对 react-native 和 flutter 也有初步的研究.\n  - 熟练使用框架快速构建移动应用和小程序。\n  - 熟悉 nodejs 和 express 框架，熟练使用 loopback4（基于 express 框架）创建 restful 后台服务 API 接口。\n  - 了解 JAVA、PHP、PYTHON 等高级语言。\n  - 熟悉 MySql、MongDB 等数据库应用。\n  - 熟练使用 LAMP 搭建动态网站。\n  - 理解并运用 MVC 和 MVVM 模型，掌握模块化、组件化、工程化前端开发技术。\n  - 精通 DrupalCMS 开发框架的使用，在腾讯精品课发表了专题教程《Dupal8 主题开发实战视频教程》。\n","date":"2019-10-15T02:16:09.960Z","updated":"2019-08-13T03:52:55.547Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck1r9cm0m0000nw9wqe9hqo82","content":"<p>黄于辉，网名：老学。软件工程硕士，信息系统项目管理师（高级）。<br><a href=\"https://huangxiaoman.cn\" target=\"_blank\" rel=\"noopener\">博客：https://huangxiaoman.cn</a><br><a href=\"https://laoxue6699.github.io\">主页：https://laoxue6699.github.io</a></p>\n<ul>\n<li><p>热爱编程，学习研究能力强，紧跟时代步伐，不断钻研新技术，善于将所学知识运用到实际工作中。本科与硕士学习阶段，全面涉猎计算机软硬件基础知识，打下了坚实的基础。2016 年 5 月通过全国统一考试获得《信息系统项目管理师》（高级）证书，软件工程和项目管理技术得以进一步提升。</p>\n</li>\n<li><p>独立开发多个企业应用，积累了较为丰富的项目经验。对服务器管理、数据库应用、后端开发语言有一定的了解。</p>\n<ul>\n<li>精通 DIV+CSS 页面布局和弹性布局，熟悉 JavaScript，了解 w3c 和 ES6 标准。</li>\n<li>熟练使用 Bootstrap 框架快速构架响应式布局网站。</li>\n<li>熟练使用 vue 框架和 uni-app 框架，对 react-native 和 flutter 也有初步的研究.</li>\n<li>熟练使用框架快速构建移动应用和小程序。</li>\n<li>熟悉 nodejs 和 express 框架，熟练使用 loopback4（基于 express 框架）创建 restful 后台服务 API 接口。</li>\n<li>了解 JAVA、PHP、PYTHON 等高级语言。</li>\n<li>熟悉 MySql、MongDB 等数据库应用。</li>\n<li>熟练使用 LAMP 搭建动态网站。</li>\n<li>理解并运用 MVC 和 MVVM 模型，掌握模块化、组件化、工程化前端开发技术。</li>\n<li>精通 DrupalCMS 开发框架的使用，在腾讯精品课发表了专题教程《Dupal8 主题开发实战视频教程》。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>黄于辉，网名：老学。软件工程硕士，信息系统项目管理师（高级）。<br><a href=\"https://huangxiaoman.cn\" target=\"_blank\" rel=\"noopener\">博客：https://huangxiaoman.cn</a><br><a href=\"https://laoxue6699.github.io\">主页：https://laoxue6699.github.io</a></p>\n<ul>\n<li><p>热爱编程，学习研究能力强，紧跟时代步伐，不断钻研新技术，善于将所学知识运用到实际工作中。本科与硕士学习阶段，全面涉猎计算机软硬件基础知识，打下了坚实的基础。2016 年 5 月通过全国统一考试获得《信息系统项目管理师》（高级）证书，软件工程和项目管理技术得以进一步提升。</p>\n</li>\n<li><p>独立开发多个企业应用，积累了较为丰富的项目经验。对服务器管理、数据库应用、后端开发语言有一定的了解。</p>\n<ul>\n<li>精通 DIV+CSS 页面布局和弹性布局，熟悉 JavaScript，了解 w3c 和 ES6 标准。</li>\n<li>熟练使用 Bootstrap 框架快速构架响应式布局网站。</li>\n<li>熟练使用 vue 框架和 uni-app 框架，对 react-native 和 flutter 也有初步的研究.</li>\n<li>熟练使用框架快速构建移动应用和小程序。</li>\n<li>熟悉 nodejs 和 express 框架，熟练使用 loopback4（基于 express 框架）创建 restful 后台服务 API 接口。</li>\n<li>了解 JAVA、PHP、PYTHON 等高级语言。</li>\n<li>熟悉 MySql、MongDB 等数据库应用。</li>\n<li>熟练使用 LAMP 搭建动态网站。</li>\n<li>理解并运用 MVC 和 MVVM 模型，掌握模块化、组件化、工程化前端开发技术。</li>\n<li>精通 DrupalCMS 开发框架的使用，在腾讯精品课发表了专题教程《Dupal8 主题开发实战视频教程》。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"标签","date":"2019-08-11T13:19:51.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-08-11 21:19:51\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-08-11T13:20:43.099Z","path":"tags/index.html","layout":"page","_id":"ck1r9cm0s0002nw9w5gaz429i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2019-08-11T13:19:51.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-08-11 21:19:51\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-08-11T13:20:35.461Z","path":"categories/index.html","layout":"page","_id":"ck1r9cm0v0004nw9wkhvg7ak9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"git 帮助文档如何以HTML格式浏览","date":"2019-09-30T09:39:33.000Z","_content":"\n我们在命令行使用 git 命令非常方便。但查询 git 帮助文档时，由于命令行窗口的限制，帮助内容比较简略。本文介绍如何以 HTML 格式浏览 git 的帮助文档。\n\n<!-- more -->\n\n如果我们需要查看 git 中关于日志的帮助文档，通常的做法是在命令行窗口输入命令：\n\n```\ngit help log\n```\n\n在命令行窗口会显示出帮助的结果。\n\n如果我们需要将帮助的详细内容通过浏览器显示出来，需要进行配置。\n\n```\n# create directory to keep Git documentation html-files\n$ sudo mkdir -p /usr/local/git/share/doc # or whatever directory you choose\n\n# change to that directory\n$ cd /usr/local/git/share/doc\n\n# clone repo with documentation\n$ sudo git clone git://git.kernel.org/pub/scm/git/git-htmldocs.git git-doc\n\n# point your Git explicitly to a new documentation directory\n$ git config --global help.htmlpath /usr/local/git/share/doc/git-doc\n\n# tell Git to use html-formatted help by default\n$ git config --global help.format html\n```\n\n配置完成后，会在 git 配置文件`~/.gitconfig`中创建关于帮助文档的配置。\n\n```\n[help]\n    format = html\n    htmlpath = /usr/local/git/share/doc/git-doc\n```\n\n这时候我们再输入：\n\n```\n\ngit help log --web\n\n```\n\n或者：\n\n```\n\ngit help log\n\n```\n\n在浏览器页面就会看到相关帮助的详细内容了。\n![](https://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-30%E4%B8%8B%E5%8D%885.54.09.png)\n\n[参考文档：]()\n","source":"_posts/git-帮助文档如何以HTML格式浏览.md","raw":"---\ntitle: git 帮助文档如何以HTML格式浏览\ndate: 2019-09-30 17:39:33\ntags:\n---\n\n我们在命令行使用 git 命令非常方便。但查询 git 帮助文档时，由于命令行窗口的限制，帮助内容比较简略。本文介绍如何以 HTML 格式浏览 git 的帮助文档。\n\n<!-- more -->\n\n如果我们需要查看 git 中关于日志的帮助文档，通常的做法是在命令行窗口输入命令：\n\n```\ngit help log\n```\n\n在命令行窗口会显示出帮助的结果。\n\n如果我们需要将帮助的详细内容通过浏览器显示出来，需要进行配置。\n\n```\n# create directory to keep Git documentation html-files\n$ sudo mkdir -p /usr/local/git/share/doc # or whatever directory you choose\n\n# change to that directory\n$ cd /usr/local/git/share/doc\n\n# clone repo with documentation\n$ sudo git clone git://git.kernel.org/pub/scm/git/git-htmldocs.git git-doc\n\n# point your Git explicitly to a new documentation directory\n$ git config --global help.htmlpath /usr/local/git/share/doc/git-doc\n\n# tell Git to use html-formatted help by default\n$ git config --global help.format html\n```\n\n配置完成后，会在 git 配置文件`~/.gitconfig`中创建关于帮助文档的配置。\n\n```\n[help]\n    format = html\n    htmlpath = /usr/local/git/share/doc/git-doc\n```\n\n这时候我们再输入：\n\n```\n\ngit help log --web\n\n```\n\n或者：\n\n```\n\ngit help log\n\n```\n\n在浏览器页面就会看到相关帮助的详细内容了。\n![](https://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-30%E4%B8%8B%E5%8D%885.54.09.png)\n\n[参考文档：]()\n","slug":"git-帮助文档如何以HTML格式浏览","published":1,"updated":"2019-09-30T20:18:52.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm0o0001nw9wdw3c4q2o","content":"<p>我们在命令行使用 git 命令非常方便。但查询 git 帮助文档时，由于命令行窗口的限制，帮助内容比较简略。本文介绍如何以 HTML 格式浏览 git 的帮助文档。</p>\n<a id=\"more\"></a>\n\n<p>如果我们需要查看 git 中关于日志的帮助文档，通常的做法是在命令行窗口输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git help log</span><br></pre></td></tr></table></figure>\n\n<p>在命令行窗口会显示出帮助的结果。</p>\n<p>如果我们需要将帮助的详细内容通过浏览器显示出来，需要进行配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># create directory to keep Git documentation html-files</span><br><span class=\"line\">$ sudo mkdir -p /usr/local/git/share/doc # or whatever directory you choose</span><br><span class=\"line\"></span><br><span class=\"line\"># change to that directory</span><br><span class=\"line\">$ cd /usr/local/git/share/doc</span><br><span class=\"line\"></span><br><span class=\"line\"># clone repo with documentation</span><br><span class=\"line\">$ sudo git clone git://git.kernel.org/pub/scm/git/git-htmldocs.git git-doc</span><br><span class=\"line\"></span><br><span class=\"line\"># point your Git explicitly to a new documentation directory</span><br><span class=\"line\">$ git config --global help.htmlpath /usr/local/git/share/doc/git-doc</span><br><span class=\"line\"></span><br><span class=\"line\"># tell Git to use html-formatted help by default</span><br><span class=\"line\">$ git config --global help.format html</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，会在 git 配置文件<code>~/.gitconfig</code>中创建关于帮助文档的配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[help]</span><br><span class=\"line\">    format = html</span><br><span class=\"line\">    htmlpath = /usr/local/git/share/doc/git-doc</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们再输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git help log --web</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git help log</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器页面就会看到相关帮助的详细内容了。<br><img src=\"https://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-30%E4%B8%8B%E5%8D%885.54.09.png\" alt></p>\n<p><a href>参考文档：</a></p>\n","site":{"data":{}},"excerpt":"<p>我们在命令行使用 git 命令非常方便。但查询 git 帮助文档时，由于命令行窗口的限制，帮助内容比较简略。本文介绍如何以 HTML 格式浏览 git 的帮助文档。</p>","more":"<p>如果我们需要查看 git 中关于日志的帮助文档，通常的做法是在命令行窗口输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git help log</span><br></pre></td></tr></table></figure>\n\n<p>在命令行窗口会显示出帮助的结果。</p>\n<p>如果我们需要将帮助的详细内容通过浏览器显示出来，需要进行配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># create directory to keep Git documentation html-files</span><br><span class=\"line\">$ sudo mkdir -p /usr/local/git/share/doc # or whatever directory you choose</span><br><span class=\"line\"></span><br><span class=\"line\"># change to that directory</span><br><span class=\"line\">$ cd /usr/local/git/share/doc</span><br><span class=\"line\"></span><br><span class=\"line\"># clone repo with documentation</span><br><span class=\"line\">$ sudo git clone git://git.kernel.org/pub/scm/git/git-htmldocs.git git-doc</span><br><span class=\"line\"></span><br><span class=\"line\"># point your Git explicitly to a new documentation directory</span><br><span class=\"line\">$ git config --global help.htmlpath /usr/local/git/share/doc/git-doc</span><br><span class=\"line\"></span><br><span class=\"line\"># tell Git to use html-formatted help by default</span><br><span class=\"line\">$ git config --global help.format html</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，会在 git 配置文件<code>~/.gitconfig</code>中创建关于帮助文档的配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[help]</span><br><span class=\"line\">    format = html</span><br><span class=\"line\">    htmlpath = /usr/local/git/share/doc/git-doc</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们再输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git help log --web</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git help log</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器页面就会看到相关帮助的详细内容了。<br><img src=\"https://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-30%E4%B8%8B%E5%8D%885.54.09.png\" alt></p>\n<p><a href>参考文档：</a></p>"},{"title":"hexo常用命令","date":"2019-09-19T09:22:07.000Z","_content":"\n## 一、安装、升级\n\n```\nnpm install hexo -g #安装\nnpm update hexo -g #升级\nhexo init #初始化\n```\n\n<!-- more -->\n\n## 二、简写\n\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n```\n\n## 三、服务器\n\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n```\n\n## 四、监视文件变动\n\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n```\n\n## 五、完成后部署\n\n```\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n```\n\n## 六、草稿\n\n```\nhexo publish [layout] <title>\n```\n\n## 七、模板\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n```\n\n## 八、推送到服务器上\n\n```\nhexo n #写文章\nhexo g #生成\nhexo d #部署 #可与hexo g合并为 hexo d -g\n```\n\n## 九、报错\n\n1、找不到 git 部署\n\nERROR Deployer not found: git\n\n```\n解决方法\nnpm install hexo-deployer-git --save\n```\n\n2、部署类型设置 git\n\nhexo 3.0 部署类型不再是 github，\\_config.yml 中修改\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@***.github.com:***/***.github.io.git\n  branch: master\n```\n","source":"_posts/hexo常用命令.md","raw":"---\ntitle: hexo常用命令\ndate: 2019-09-19 17:22:07\ntags:\n---\n\n## 一、安装、升级\n\n```\nnpm install hexo -g #安装\nnpm update hexo -g #升级\nhexo init #初始化\n```\n\n<!-- more -->\n\n## 二、简写\n\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n```\n\n## 三、服务器\n\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\nhexo g #生成静态网页\nhexo d #开始部署\n```\n\n## 四、监视文件变动\n\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\nhexo generate --watch #监视文件变动\n```\n\n## 五、完成后部署\n\n```\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\n```\n\n## 六、草稿\n\n```\nhexo publish [layout] <title>\n```\n\n## 七、模板\n\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo new [layout] <title>\nhexo new photo \"My Gallery\"\nhexo new \"Hello World\" --lang tw\n```\n\n## 八、推送到服务器上\n\n```\nhexo n #写文章\nhexo g #生成\nhexo d #部署 #可与hexo g合并为 hexo d -g\n```\n\n## 九、报错\n\n1、找不到 git 部署\n\nERROR Deployer not found: git\n\n```\n解决方法\nnpm install hexo-deployer-git --save\n```\n\n2、部署类型设置 git\n\nhexo 3.0 部署类型不再是 github，\\_config.yml 中修改\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@***.github.com:***/***.github.io.git\n  branch: master\n```\n","slug":"hexo常用命令","published":1,"updated":"2019-09-19T09:34:05.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm0s0003nw9wsna6dnlq","content":"<h2 id=\"一、安装、升级\"><a href=\"#一、安装、升级\" class=\"headerlink\" title=\"一、安装、升级\"></a>一、安装、升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装</span><br><span class=\"line\">npm update hexo -g #升级</span><br><span class=\"line\">hexo init #初始化</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"二、简写\"><a href=\"#二、简写\" class=\"headerlink\" title=\"二、简写\"></a>二、简写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate#生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、服务器\"><a href=\"#三、服务器\" class=\"headerlink\" title=\"三、服务器\"></a>三、服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\">hexo g #生成静态网页</span><br><span class=\"line\">hexo d #开始部署</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、监视文件变动\"><a href=\"#四、监视文件变动\" class=\"headerlink\" title=\"四、监视文件变动\"></a>四、监视文件变动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class=\"line\">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、完成后部署\"><a href=\"#五、完成后部署\" class=\"headerlink\" title=\"五、完成后部署\"></a>五、完成后部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、草稿\"><a href=\"#六、草稿\" class=\"headerlink\" title=\"六、草稿\"></a>六、草稿</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七、模板\"><a href=\"#七、模板\" class=\"headerlink\" title=\"七、模板\"></a>七、模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">hexo new photo &quot;My Gallery&quot;</span><br><span class=\"line\">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、推送到服务器上\"><a href=\"#八、推送到服务器上\" class=\"headerlink\" title=\"八、推送到服务器上\"></a>八、推送到服务器上</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n #写文章</span><br><span class=\"line\">hexo g #生成</span><br><span class=\"line\">hexo d #部署 #可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"九、报错\"><a href=\"#九、报错\" class=\"headerlink\" title=\"九、报错\"></a>九、报错</h2><p>1、找不到 git 部署</p>\n<p>ERROR Deployer not found: git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>2、部署类型设置 git</p>\n<p>hexo 3.0 部署类型不再是 github，_config.yml 中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: http://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@***.github.com:***/***.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"一、安装、升级\"><a href=\"#一、安装、升级\" class=\"headerlink\" title=\"一、安装、升级\"></a>一、安装、升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装</span><br><span class=\"line\">npm update hexo -g #升级</span><br><span class=\"line\">hexo init #初始化</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"二、简写\"><a href=\"#二、简写\" class=\"headerlink\" title=\"二、简写\"></a>二、简写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate#生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、服务器\"><a href=\"#三、服务器\" class=\"headerlink\" title=\"三、服务器\"></a>三、服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\">hexo g #生成静态网页</span><br><span class=\"line\">hexo d #开始部署</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、监视文件变动\"><a href=\"#四、监视文件变动\" class=\"headerlink\" title=\"四、监视文件变动\"></a>四、监视文件变动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class=\"line\">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、完成后部署\"><a href=\"#五、完成后部署\" class=\"headerlink\" title=\"五、完成后部署\"></a>五、完成后部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo server -g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、草稿\"><a href=\"#六、草稿\" class=\"headerlink\" title=\"六、草稿\"></a>六、草稿</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七、模板\"><a href=\"#七、模板\" class=\"headerlink\" title=\"七、模板\"></a>七、模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">hexo new photo &quot;My Gallery&quot;</span><br><span class=\"line\">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、推送到服务器上\"><a href=\"#八、推送到服务器上\" class=\"headerlink\" title=\"八、推送到服务器上\"></a>八、推送到服务器上</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n #写文章</span><br><span class=\"line\">hexo g #生成</span><br><span class=\"line\">hexo d #部署 #可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"九、报错\"><a href=\"#九、报错\" class=\"headerlink\" title=\"九、报错\"></a>九、报错</h2><p>1、找不到 git 部署</p>\n<p>ERROR Deployer not found: git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>2、部署类型设置 git</p>\n<p>hexo 3.0 部署类型不再是 github，_config.yml 中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: http://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@***.github.com:***/***.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>"},{"title":"三步搞定用Docker安装Drupal8运行环境","date":"2019-10-01T01:27:54.000Z","_content":"\n本文介绍用 Docker 安装 Drupal8 运行环境的实现方法\n\n<iframe src=\"//player.bilibili.com/player.html?aid=69595627&cid=120616823&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[配套视频](https://www.bilibili.com/video/av69595627)\n\n## 一、关于 Docker\n\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\n<!-- more -->\n\n[百度百科关于 Docker](https://baike.baidu.com/item/Docker/13344470?fr=aladdin)\n\n## 二、关于 Drupal\n\nDrupal 是使用 PHP 语言编写的开源内容管理框架（CMF），它由内容管理系统（CMS）和 PHP 开发框架（Framework）共同构成。连续多年荣获全球最佳 CMS 大奖，是基于 PHP 语言最著名的 WEB 应用程序。截止 2011 年底，共有 13,802 位 WEB 专家参加了 Drupal 的开发工作；228 个国家使用 181 种语言的 729,791 位网站设计工作者使用 Drupal。著名案例包括：联合国、美国白宫、美国商务部、纽约时报、华纳、迪斯尼、联邦快递、索尼、美国哈佛大学、Ubuntu 等。\n\n[百度百科关于 Drupal](https://baike.baidu.com/item/Drupal)\n\n## 三、关于 Drupal 运行环境\n\n### Apache (Recommended)\n\n你可以使用 apache 的 mod_rewrite 扩展 drupal 的 clean url，在 Drupal8 里，clean urls 默认是开启的，且不能关闭，所以为了 Drupal 能正常工作，mod_rewrite 需要安装并开启。\n\n虚拟主机必须配置包含 AllowOverride All，允许 drupal 的.htaccess 文件起作用。\n\n### Database\n\nMySQL 5.5.3/MariaDB 5.5.20/Percona Server 5.5.8 or higher with PDO and an InnoDB-compatible primary storage engine,\n\nPostgreSQL 9.1.2 or higher with PDO,\n\n### SQLite 3.6.8 or higher\n\n### PHP\n\nDrupal 8: PHP 5.5.9 or higher\n\n## 三步搞定\n\n看到配置环境，很多初学者会望而却步。正是得益于 Docker 的镜像和容器技术，可以让我们省去配置环境的麻烦。而且，这个环境可以和上线环境一模一样，省去了我们部署和维护的烦恼。\n\n用 Docker 安装 Drupal8 运行环境只要三步，需要安装两个容器，前提是我们已经安装了 Docker。\n\n### 第一步 安装数据库\n\n在命令行输入以下命令：\n\n```\ndocker run \\\n-e MYSQL_ROOT_PASSWORD=admin \\\n-e MYSQL_DATABASE=drupal8 \\\n-e MYSQL_USER=drupal8 \\\n-e MYSQL_PASSWORD=drupal8 \\\n-v mariadb:/var/lib/mysql \\\n-d \\\n--name mariadb \\\nmariadb\n```\n\n第一行的意思是创建容器，\n第二行到第六行是数据库配置参数，\n-d 是在后台运行该容器，\n--name 给该容器取个名字，\n最后一行是镜像名称。\n\n完整的理解就是从 mariadb 镜像创建一个名称为 mariadb 的在后台运行的容器，按照既定的数据库配置参数。如果本地没有 mariadb 镜像，则自动从 Docker hub 上拉取后再创建容器。\n\n运行结果如下：\n\n```\nUnable to find image 'mariadb:latest' locally\nlatest: Pulling from library/mariadb\n5667fdb72017: Pull complete\nd83811f270d5: Pull complete\nee671aafb583: Pull complete\n7fc152dfb3a6: Pull complete\n9f669c535a8b: Pull complete\na6de1092ee4e: Pull complete\nee37a2c88dd9: Pull complete\nd927a3dd356c: Pull complete\nd83c9d39c64f: Pull complete\n1b0644883413: Pull complete\n09a38adc2558: Pull complete\n3c853415b952: Pull complete\n2690cf0bfab9: Pull complete\n3c68d64f060f: Pull complete\nDigest: sha256:a32daf0281803fd96e86daf6b0293b4d476cede1b5ce80b18452dfa1405360ff\nStatus: Downloaded newer image for mariadb:latest\n8cae72ad7ff02870c575c09eb3ad6f053c395287a3cfe17d7888991acc6cc254\n```\n\n### 第二步 安装网站运行服务器和 Drupal 源码\n\n在命令行输入以下命令：\n\n```\ndocker run \\\n--name drupal8 \\\n--link mariadb:mysql \\\n-p 80:80 \\\n-d \\\ndrupal\n```\n\n命令的意思是，drupal 镜像创建一个名称为 drupal8 的在后台运行的容器。如果本地没有 drupal 镜像，则自动从 Docker hub 上拉取后再创建容器。\n--link 连接名为 mariadb 容器（第一步已经创建），取一个链接名为 mysql，这个名字在第三部安装 Drupal 的过程中需要用到。切记！\n-p 将容器的 80 端口映射到宿主机的 80 端口，在宿主机的浏览器就可以直接访问 localhost 了。\n\n运行结果如下：\n\n```\nUnable to find image 'drupal:latest' locally\nlatest: Pulling from library/drupal\n8f91359f1fff: Pull complete\nbf2faaedf741: Pull complete\n24cd1299a53e: Pull complete\n17091cc665e4: Pull complete\nac9365919f9b: Pull complete\n4f1b34e209ee: Pull complete\n832757fa04a4: Pull complete\n640a8cc59ee4: Pull complete\n375d45a647bd: Pull complete\nc265603c2115: Pull complete\nb0b436e89a13: Pull complete\n752098124903: Pull complete\nbaaf39033af6: Pull complete\neac75ead14e0: Pull complete\n8494df29c26d: Pull complete\nb9dd3d0f6cb9: Pull complete\nDigest: sha256:899473656db6b2fb7343d9cfd8ab6493199b60500eed9d7202c0d2552c8c5b1d\nStatus: Downloaded newer image for drupal:latest\n84d185875cd1e27c301042c743aab01757d3e9814557698b8d40a6b7b977e4ca\n```\n\n由于我们在安装容器时没有制定镜像的版本号，所以自动拉取 latest 版本，意思是最新版本的镜像。\n\n安装完成两个容器之后我们可以查看 Docker 中的容器和镜像。\n查看容器：\n\n```\ndocker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES\n84d185875cd1        drupal              \"docker-php-entrypoi…\"   About an hour ago   Up About an hour    0.0.0.0:80->80/tcp   drupal8\n8cae72ad7ff0        mariadb             \"docker-entrypoint.s…\"   About an hour ago   Up About an hour    3306/tcp             mariadb\n```\n\n查看镜像：\n\n```\ndocker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ndrupal              latest              4ae9d94d03b6        3 days ago          453MB\nmariadb             latest              92495405fc36        12 days ago         356MB\n```\n\n### 第三部 配置网站\n\n在宿主机（就是我们当前使用的电脑）的浏览器中输入 localhost 开始进入 Drupal 安装页面。\n需要注意的是数据库连接配置：\n\n![](https://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-10-01%E4%B8%8A%E5%8D%8810.16.19.png)\n\n这里的数据库配置参数中，数据库名称、数据库用户名、数据库密码是我们在创建第一个容器时定义的，分别都是`drupal8`，高级选项中的主机名是我们在创建第二个容器时设定的 link 链接名`mysql`。\n","source":"_posts/三步搞定用Docker安装Drupal8运行环境.md","raw":"---\ntitle: 三步搞定用Docker安装Drupal8运行环境\ndate: 2019-10-01 09:27:54\ncategory:\n  - 原创\ntags:\n  - Drupal 8\n  - Docker\n---\n\n本文介绍用 Docker 安装 Drupal8 运行环境的实现方法\n\n<iframe src=\"//player.bilibili.com/player.html?aid=69595627&cid=120616823&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[配套视频](https://www.bilibili.com/video/av69595627)\n\n## 一、关于 Docker\n\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\n<!-- more -->\n\n[百度百科关于 Docker](https://baike.baidu.com/item/Docker/13344470?fr=aladdin)\n\n## 二、关于 Drupal\n\nDrupal 是使用 PHP 语言编写的开源内容管理框架（CMF），它由内容管理系统（CMS）和 PHP 开发框架（Framework）共同构成。连续多年荣获全球最佳 CMS 大奖，是基于 PHP 语言最著名的 WEB 应用程序。截止 2011 年底，共有 13,802 位 WEB 专家参加了 Drupal 的开发工作；228 个国家使用 181 种语言的 729,791 位网站设计工作者使用 Drupal。著名案例包括：联合国、美国白宫、美国商务部、纽约时报、华纳、迪斯尼、联邦快递、索尼、美国哈佛大学、Ubuntu 等。\n\n[百度百科关于 Drupal](https://baike.baidu.com/item/Drupal)\n\n## 三、关于 Drupal 运行环境\n\n### Apache (Recommended)\n\n你可以使用 apache 的 mod_rewrite 扩展 drupal 的 clean url，在 Drupal8 里，clean urls 默认是开启的，且不能关闭，所以为了 Drupal 能正常工作，mod_rewrite 需要安装并开启。\n\n虚拟主机必须配置包含 AllowOverride All，允许 drupal 的.htaccess 文件起作用。\n\n### Database\n\nMySQL 5.5.3/MariaDB 5.5.20/Percona Server 5.5.8 or higher with PDO and an InnoDB-compatible primary storage engine,\n\nPostgreSQL 9.1.2 or higher with PDO,\n\n### SQLite 3.6.8 or higher\n\n### PHP\n\nDrupal 8: PHP 5.5.9 or higher\n\n## 三步搞定\n\n看到配置环境，很多初学者会望而却步。正是得益于 Docker 的镜像和容器技术，可以让我们省去配置环境的麻烦。而且，这个环境可以和上线环境一模一样，省去了我们部署和维护的烦恼。\n\n用 Docker 安装 Drupal8 运行环境只要三步，需要安装两个容器，前提是我们已经安装了 Docker。\n\n### 第一步 安装数据库\n\n在命令行输入以下命令：\n\n```\ndocker run \\\n-e MYSQL_ROOT_PASSWORD=admin \\\n-e MYSQL_DATABASE=drupal8 \\\n-e MYSQL_USER=drupal8 \\\n-e MYSQL_PASSWORD=drupal8 \\\n-v mariadb:/var/lib/mysql \\\n-d \\\n--name mariadb \\\nmariadb\n```\n\n第一行的意思是创建容器，\n第二行到第六行是数据库配置参数，\n-d 是在后台运行该容器，\n--name 给该容器取个名字，\n最后一行是镜像名称。\n\n完整的理解就是从 mariadb 镜像创建一个名称为 mariadb 的在后台运行的容器，按照既定的数据库配置参数。如果本地没有 mariadb 镜像，则自动从 Docker hub 上拉取后再创建容器。\n\n运行结果如下：\n\n```\nUnable to find image 'mariadb:latest' locally\nlatest: Pulling from library/mariadb\n5667fdb72017: Pull complete\nd83811f270d5: Pull complete\nee671aafb583: Pull complete\n7fc152dfb3a6: Pull complete\n9f669c535a8b: Pull complete\na6de1092ee4e: Pull complete\nee37a2c88dd9: Pull complete\nd927a3dd356c: Pull complete\nd83c9d39c64f: Pull complete\n1b0644883413: Pull complete\n09a38adc2558: Pull complete\n3c853415b952: Pull complete\n2690cf0bfab9: Pull complete\n3c68d64f060f: Pull complete\nDigest: sha256:a32daf0281803fd96e86daf6b0293b4d476cede1b5ce80b18452dfa1405360ff\nStatus: Downloaded newer image for mariadb:latest\n8cae72ad7ff02870c575c09eb3ad6f053c395287a3cfe17d7888991acc6cc254\n```\n\n### 第二步 安装网站运行服务器和 Drupal 源码\n\n在命令行输入以下命令：\n\n```\ndocker run \\\n--name drupal8 \\\n--link mariadb:mysql \\\n-p 80:80 \\\n-d \\\ndrupal\n```\n\n命令的意思是，drupal 镜像创建一个名称为 drupal8 的在后台运行的容器。如果本地没有 drupal 镜像，则自动从 Docker hub 上拉取后再创建容器。\n--link 连接名为 mariadb 容器（第一步已经创建），取一个链接名为 mysql，这个名字在第三部安装 Drupal 的过程中需要用到。切记！\n-p 将容器的 80 端口映射到宿主机的 80 端口，在宿主机的浏览器就可以直接访问 localhost 了。\n\n运行结果如下：\n\n```\nUnable to find image 'drupal:latest' locally\nlatest: Pulling from library/drupal\n8f91359f1fff: Pull complete\nbf2faaedf741: Pull complete\n24cd1299a53e: Pull complete\n17091cc665e4: Pull complete\nac9365919f9b: Pull complete\n4f1b34e209ee: Pull complete\n832757fa04a4: Pull complete\n640a8cc59ee4: Pull complete\n375d45a647bd: Pull complete\nc265603c2115: Pull complete\nb0b436e89a13: Pull complete\n752098124903: Pull complete\nbaaf39033af6: Pull complete\neac75ead14e0: Pull complete\n8494df29c26d: Pull complete\nb9dd3d0f6cb9: Pull complete\nDigest: sha256:899473656db6b2fb7343d9cfd8ab6493199b60500eed9d7202c0d2552c8c5b1d\nStatus: Downloaded newer image for drupal:latest\n84d185875cd1e27c301042c743aab01757d3e9814557698b8d40a6b7b977e4ca\n```\n\n由于我们在安装容器时没有制定镜像的版本号，所以自动拉取 latest 版本，意思是最新版本的镜像。\n\n安装完成两个容器之后我们可以查看 Docker 中的容器和镜像。\n查看容器：\n\n```\ndocker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES\n84d185875cd1        drupal              \"docker-php-entrypoi…\"   About an hour ago   Up About an hour    0.0.0.0:80->80/tcp   drupal8\n8cae72ad7ff0        mariadb             \"docker-entrypoint.s…\"   About an hour ago   Up About an hour    3306/tcp             mariadb\n```\n\n查看镜像：\n\n```\ndocker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ndrupal              latest              4ae9d94d03b6        3 days ago          453MB\nmariadb             latest              92495405fc36        12 days ago         356MB\n```\n\n### 第三部 配置网站\n\n在宿主机（就是我们当前使用的电脑）的浏览器中输入 localhost 开始进入 Drupal 安装页面。\n需要注意的是数据库连接配置：\n\n![](https://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-10-01%E4%B8%8A%E5%8D%8810.16.19.png)\n\n这里的数据库配置参数中，数据库名称、数据库用户名、数据库密码是我们在创建第一个容器时定义的，分别都是`drupal8`，高级选项中的主机名是我们在创建第二个容器时设定的 link 链接名`mysql`。\n","slug":"三步搞定用Docker安装Drupal8运行环境","published":1,"updated":"2019-10-01T22:19:05.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm0v0005nw9wlnc875jr","content":"<p>本文介绍用 Docker 安装 Drupal8 运行环境的实现方法</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=69595627&cid=120616823&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p><a href=\"https://www.bilibili.com/video/av69595627\" target=\"_blank\" rel=\"noopener\">配套视频</a></p>\n<h2 id=\"一、关于-Docker\"><a href=\"#一、关于-Docker\" class=\"headerlink\" title=\"一、关于 Docker\"></a>一、关于 Docker</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"https://baike.baidu.com/item/Docker/13344470?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科关于 Docker</a></p>\n<h2 id=\"二、关于-Drupal\"><a href=\"#二、关于-Drupal\" class=\"headerlink\" title=\"二、关于 Drupal\"></a>二、关于 Drupal</h2><p>Drupal 是使用 PHP 语言编写的开源内容管理框架（CMF），它由内容管理系统（CMS）和 PHP 开发框架（Framework）共同构成。连续多年荣获全球最佳 CMS 大奖，是基于 PHP 语言最著名的 WEB 应用程序。截止 2011 年底，共有 13,802 位 WEB 专家参加了 Drupal 的开发工作；228 个国家使用 181 种语言的 729,791 位网站设计工作者使用 Drupal。著名案例包括：联合国、美国白宫、美国商务部、纽约时报、华纳、迪斯尼、联邦快递、索尼、美国哈佛大学、Ubuntu 等。</p>\n<p><a href=\"https://baike.baidu.com/item/Drupal\" target=\"_blank\" rel=\"noopener\">百度百科关于 Drupal</a></p>\n<h2 id=\"三、关于-Drupal-运行环境\"><a href=\"#三、关于-Drupal-运行环境\" class=\"headerlink\" title=\"三、关于 Drupal 运行环境\"></a>三、关于 Drupal 运行环境</h2><h3 id=\"Apache-Recommended\"><a href=\"#Apache-Recommended\" class=\"headerlink\" title=\"Apache (Recommended)\"></a>Apache (Recommended)</h3><p>你可以使用 apache 的 mod_rewrite 扩展 drupal 的 clean url，在 Drupal8 里，clean urls 默认是开启的，且不能关闭，所以为了 Drupal 能正常工作，mod_rewrite 需要安装并开启。</p>\n<p>虚拟主机必须配置包含 AllowOverride All，允许 drupal 的.htaccess 文件起作用。</p>\n<h3 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h3><p>MySQL 5.5.3/MariaDB 5.5.20/Percona Server 5.5.8 or higher with PDO and an InnoDB-compatible primary storage engine,</p>\n<p>PostgreSQL 9.1.2 or higher with PDO,</p>\n<h3 id=\"SQLite-3-6-8-or-higher\"><a href=\"#SQLite-3-6-8-or-higher\" class=\"headerlink\" title=\"SQLite 3.6.8 or higher\"></a>SQLite 3.6.8 or higher</h3><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><p>Drupal 8: PHP 5.5.9 or higher</p>\n<h2 id=\"三步搞定\"><a href=\"#三步搞定\" class=\"headerlink\" title=\"三步搞定\"></a>三步搞定</h2><p>看到配置环境，很多初学者会望而却步。正是得益于 Docker 的镜像和容器技术，可以让我们省去配置环境的麻烦。而且，这个环境可以和上线环境一模一样，省去了我们部署和维护的烦恼。</p>\n<p>用 Docker 安装 Drupal8 运行环境只要三步，需要安装两个容器，前提是我们已经安装了 Docker。</p>\n<h3 id=\"第一步-安装数据库\"><a href=\"#第一步-安装数据库\" class=\"headerlink\" title=\"第一步 安装数据库\"></a>第一步 安装数据库</h3><p>在命令行输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=admin \\</span><br><span class=\"line\">-e MYSQL_DATABASE=drupal8 \\</span><br><span class=\"line\">-e MYSQL_USER=drupal8 \\</span><br><span class=\"line\">-e MYSQL_PASSWORD=drupal8 \\</span><br><span class=\"line\">-v mariadb:/var/lib/mysql \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">--name mariadb \\</span><br><span class=\"line\">mariadb</span><br></pre></td></tr></table></figure>\n\n<p>第一行的意思是创建容器，<br>第二行到第六行是数据库配置参数，<br>-d 是在后台运行该容器，<br>–name 给该容器取个名字，<br>最后一行是镜像名称。</p>\n<p>完整的理解就是从 mariadb 镜像创建一个名称为 mariadb 的在后台运行的容器，按照既定的数据库配置参数。如果本地没有 mariadb 镜像，则自动从 Docker hub 上拉取后再创建容器。</p>\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to find image &apos;mariadb:latest&apos; locally</span><br><span class=\"line\">latest: Pulling from library/mariadb</span><br><span class=\"line\">5667fdb72017: Pull complete</span><br><span class=\"line\">d83811f270d5: Pull complete</span><br><span class=\"line\">ee671aafb583: Pull complete</span><br><span class=\"line\">7fc152dfb3a6: Pull complete</span><br><span class=\"line\">9f669c535a8b: Pull complete</span><br><span class=\"line\">a6de1092ee4e: Pull complete</span><br><span class=\"line\">ee37a2c88dd9: Pull complete</span><br><span class=\"line\">d927a3dd356c: Pull complete</span><br><span class=\"line\">d83c9d39c64f: Pull complete</span><br><span class=\"line\">1b0644883413: Pull complete</span><br><span class=\"line\">09a38adc2558: Pull complete</span><br><span class=\"line\">3c853415b952: Pull complete</span><br><span class=\"line\">2690cf0bfab9: Pull complete</span><br><span class=\"line\">3c68d64f060f: Pull complete</span><br><span class=\"line\">Digest: sha256:a32daf0281803fd96e86daf6b0293b4d476cede1b5ce80b18452dfa1405360ff</span><br><span class=\"line\">Status: Downloaded newer image for mariadb:latest</span><br><span class=\"line\">8cae72ad7ff02870c575c09eb3ad6f053c395287a3cfe17d7888991acc6cc254</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二步-安装网站运行服务器和-Drupal-源码\"><a href=\"#第二步-安装网站运行服务器和-Drupal-源码\" class=\"headerlink\" title=\"第二步 安装网站运行服务器和 Drupal 源码\"></a>第二步 安装网站运行服务器和 Drupal 源码</h3><p>在命令行输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name drupal8 \\</span><br><span class=\"line\">--link mariadb:mysql \\</span><br><span class=\"line\">-p 80:80 \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">drupal</span><br></pre></td></tr></table></figure>\n\n<p>命令的意思是，drupal 镜像创建一个名称为 drupal8 的在后台运行的容器。如果本地没有 drupal 镜像，则自动从 Docker hub 上拉取后再创建容器。<br>–link 连接名为 mariadb 容器（第一步已经创建），取一个链接名为 mysql，这个名字在第三部安装 Drupal 的过程中需要用到。切记！<br>-p 将容器的 80 端口映射到宿主机的 80 端口，在宿主机的浏览器就可以直接访问 localhost 了。</p>\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to find image &apos;drupal:latest&apos; locally</span><br><span class=\"line\">latest: Pulling from library/drupal</span><br><span class=\"line\">8f91359f1fff: Pull complete</span><br><span class=\"line\">bf2faaedf741: Pull complete</span><br><span class=\"line\">24cd1299a53e: Pull complete</span><br><span class=\"line\">17091cc665e4: Pull complete</span><br><span class=\"line\">ac9365919f9b: Pull complete</span><br><span class=\"line\">4f1b34e209ee: Pull complete</span><br><span class=\"line\">832757fa04a4: Pull complete</span><br><span class=\"line\">640a8cc59ee4: Pull complete</span><br><span class=\"line\">375d45a647bd: Pull complete</span><br><span class=\"line\">c265603c2115: Pull complete</span><br><span class=\"line\">b0b436e89a13: Pull complete</span><br><span class=\"line\">752098124903: Pull complete</span><br><span class=\"line\">baaf39033af6: Pull complete</span><br><span class=\"line\">eac75ead14e0: Pull complete</span><br><span class=\"line\">8494df29c26d: Pull complete</span><br><span class=\"line\">b9dd3d0f6cb9: Pull complete</span><br><span class=\"line\">Digest: sha256:899473656db6b2fb7343d9cfd8ab6493199b60500eed9d7202c0d2552c8c5b1d</span><br><span class=\"line\">Status: Downloaded newer image for drupal:latest</span><br><span class=\"line\">84d185875cd1e27c301042c743aab01757d3e9814557698b8d40a6b7b977e4ca</span><br></pre></td></tr></table></figure>\n\n<p>由于我们在安装容器时没有制定镜像的版本号，所以自动拉取 latest 版本，意思是最新版本的镜像。</p>\n<p>安装完成两个容器之后我们可以查看 Docker 中的容器和镜像。<br>查看容器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class=\"line\">84d185875cd1        drupal              &quot;docker-php-entrypoi…&quot;   About an hour ago   Up About an hour    0.0.0.0:80-&gt;80/tcp   drupal8</span><br><span class=\"line\">8cae72ad7ff0        mariadb             &quot;docker-entrypoint.s…&quot;   About an hour ago   Up About an hour    3306/tcp             mariadb</span><br></pre></td></tr></table></figure>\n\n<p>查看镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">drupal              latest              4ae9d94d03b6        3 days ago          453MB</span><br><span class=\"line\">mariadb             latest              92495405fc36        12 days ago         356MB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三部-配置网站\"><a href=\"#第三部-配置网站\" class=\"headerlink\" title=\"第三部 配置网站\"></a>第三部 配置网站</h3><p>在宿主机（就是我们当前使用的电脑）的浏览器中输入 localhost 开始进入 Drupal 安装页面。<br>需要注意的是数据库连接配置：</p>\n<p><img src=\"https://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-10-01%E4%B8%8A%E5%8D%8810.16.19.png\" alt></p>\n<p>这里的数据库配置参数中，数据库名称、数据库用户名、数据库密码是我们在创建第一个容器时定义的，分别都是<code>drupal8</code>，高级选项中的主机名是我们在创建第二个容器时设定的 link 链接名<code>mysql</code>。</p>\n","site":{"data":{}},"excerpt":"<p>本文介绍用 Docker 安装 Drupal8 运行环境的实现方法</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=69595627&cid=120616823&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p><a href=\"https://www.bilibili.com/video/av69595627\" target=\"_blank\" rel=\"noopener\">配套视频</a></p>\n<h2 id=\"一、关于-Docker\"><a href=\"#一、关于-Docker\" class=\"headerlink\" title=\"一、关于 Docker\"></a>一、关于 Docker</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>","more":"<p><a href=\"https://baike.baidu.com/item/Docker/13344470?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科关于 Docker</a></p>\n<h2 id=\"二、关于-Drupal\"><a href=\"#二、关于-Drupal\" class=\"headerlink\" title=\"二、关于 Drupal\"></a>二、关于 Drupal</h2><p>Drupal 是使用 PHP 语言编写的开源内容管理框架（CMF），它由内容管理系统（CMS）和 PHP 开发框架（Framework）共同构成。连续多年荣获全球最佳 CMS 大奖，是基于 PHP 语言最著名的 WEB 应用程序。截止 2011 年底，共有 13,802 位 WEB 专家参加了 Drupal 的开发工作；228 个国家使用 181 种语言的 729,791 位网站设计工作者使用 Drupal。著名案例包括：联合国、美国白宫、美国商务部、纽约时报、华纳、迪斯尼、联邦快递、索尼、美国哈佛大学、Ubuntu 等。</p>\n<p><a href=\"https://baike.baidu.com/item/Drupal\" target=\"_blank\" rel=\"noopener\">百度百科关于 Drupal</a></p>\n<h2 id=\"三、关于-Drupal-运行环境\"><a href=\"#三、关于-Drupal-运行环境\" class=\"headerlink\" title=\"三、关于 Drupal 运行环境\"></a>三、关于 Drupal 运行环境</h2><h3 id=\"Apache-Recommended\"><a href=\"#Apache-Recommended\" class=\"headerlink\" title=\"Apache (Recommended)\"></a>Apache (Recommended)</h3><p>你可以使用 apache 的 mod_rewrite 扩展 drupal 的 clean url，在 Drupal8 里，clean urls 默认是开启的，且不能关闭，所以为了 Drupal 能正常工作，mod_rewrite 需要安装并开启。</p>\n<p>虚拟主机必须配置包含 AllowOverride All，允许 drupal 的.htaccess 文件起作用。</p>\n<h3 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h3><p>MySQL 5.5.3/MariaDB 5.5.20/Percona Server 5.5.8 or higher with PDO and an InnoDB-compatible primary storage engine,</p>\n<p>PostgreSQL 9.1.2 or higher with PDO,</p>\n<h3 id=\"SQLite-3-6-8-or-higher\"><a href=\"#SQLite-3-6-8-or-higher\" class=\"headerlink\" title=\"SQLite 3.6.8 or higher\"></a>SQLite 3.6.8 or higher</h3><h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><p>Drupal 8: PHP 5.5.9 or higher</p>\n<h2 id=\"三步搞定\"><a href=\"#三步搞定\" class=\"headerlink\" title=\"三步搞定\"></a>三步搞定</h2><p>看到配置环境，很多初学者会望而却步。正是得益于 Docker 的镜像和容器技术，可以让我们省去配置环境的麻烦。而且，这个环境可以和上线环境一模一样，省去了我们部署和维护的烦恼。</p>\n<p>用 Docker 安装 Drupal8 运行环境只要三步，需要安装两个容器，前提是我们已经安装了 Docker。</p>\n<h3 id=\"第一步-安装数据库\"><a href=\"#第一步-安装数据库\" class=\"headerlink\" title=\"第一步 安装数据库\"></a>第一步 安装数据库</h3><p>在命令行输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=admin \\</span><br><span class=\"line\">-e MYSQL_DATABASE=drupal8 \\</span><br><span class=\"line\">-e MYSQL_USER=drupal8 \\</span><br><span class=\"line\">-e MYSQL_PASSWORD=drupal8 \\</span><br><span class=\"line\">-v mariadb:/var/lib/mysql \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">--name mariadb \\</span><br><span class=\"line\">mariadb</span><br></pre></td></tr></table></figure>\n\n<p>第一行的意思是创建容器，<br>第二行到第六行是数据库配置参数，<br>-d 是在后台运行该容器，<br>–name 给该容器取个名字，<br>最后一行是镜像名称。</p>\n<p>完整的理解就是从 mariadb 镜像创建一个名称为 mariadb 的在后台运行的容器，按照既定的数据库配置参数。如果本地没有 mariadb 镜像，则自动从 Docker hub 上拉取后再创建容器。</p>\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to find image &apos;mariadb:latest&apos; locally</span><br><span class=\"line\">latest: Pulling from library/mariadb</span><br><span class=\"line\">5667fdb72017: Pull complete</span><br><span class=\"line\">d83811f270d5: Pull complete</span><br><span class=\"line\">ee671aafb583: Pull complete</span><br><span class=\"line\">7fc152dfb3a6: Pull complete</span><br><span class=\"line\">9f669c535a8b: Pull complete</span><br><span class=\"line\">a6de1092ee4e: Pull complete</span><br><span class=\"line\">ee37a2c88dd9: Pull complete</span><br><span class=\"line\">d927a3dd356c: Pull complete</span><br><span class=\"line\">d83c9d39c64f: Pull complete</span><br><span class=\"line\">1b0644883413: Pull complete</span><br><span class=\"line\">09a38adc2558: Pull complete</span><br><span class=\"line\">3c853415b952: Pull complete</span><br><span class=\"line\">2690cf0bfab9: Pull complete</span><br><span class=\"line\">3c68d64f060f: Pull complete</span><br><span class=\"line\">Digest: sha256:a32daf0281803fd96e86daf6b0293b4d476cede1b5ce80b18452dfa1405360ff</span><br><span class=\"line\">Status: Downloaded newer image for mariadb:latest</span><br><span class=\"line\">8cae72ad7ff02870c575c09eb3ad6f053c395287a3cfe17d7888991acc6cc254</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二步-安装网站运行服务器和-Drupal-源码\"><a href=\"#第二步-安装网站运行服务器和-Drupal-源码\" class=\"headerlink\" title=\"第二步 安装网站运行服务器和 Drupal 源码\"></a>第二步 安装网站运行服务器和 Drupal 源码</h3><p>在命令行输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name drupal8 \\</span><br><span class=\"line\">--link mariadb:mysql \\</span><br><span class=\"line\">-p 80:80 \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">drupal</span><br></pre></td></tr></table></figure>\n\n<p>命令的意思是，drupal 镜像创建一个名称为 drupal8 的在后台运行的容器。如果本地没有 drupal 镜像，则自动从 Docker hub 上拉取后再创建容器。<br>–link 连接名为 mariadb 容器（第一步已经创建），取一个链接名为 mysql，这个名字在第三部安装 Drupal 的过程中需要用到。切记！<br>-p 将容器的 80 端口映射到宿主机的 80 端口，在宿主机的浏览器就可以直接访问 localhost 了。</p>\n<p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to find image &apos;drupal:latest&apos; locally</span><br><span class=\"line\">latest: Pulling from library/drupal</span><br><span class=\"line\">8f91359f1fff: Pull complete</span><br><span class=\"line\">bf2faaedf741: Pull complete</span><br><span class=\"line\">24cd1299a53e: Pull complete</span><br><span class=\"line\">17091cc665e4: Pull complete</span><br><span class=\"line\">ac9365919f9b: Pull complete</span><br><span class=\"line\">4f1b34e209ee: Pull complete</span><br><span class=\"line\">832757fa04a4: Pull complete</span><br><span class=\"line\">640a8cc59ee4: Pull complete</span><br><span class=\"line\">375d45a647bd: Pull complete</span><br><span class=\"line\">c265603c2115: Pull complete</span><br><span class=\"line\">b0b436e89a13: Pull complete</span><br><span class=\"line\">752098124903: Pull complete</span><br><span class=\"line\">baaf39033af6: Pull complete</span><br><span class=\"line\">eac75ead14e0: Pull complete</span><br><span class=\"line\">8494df29c26d: Pull complete</span><br><span class=\"line\">b9dd3d0f6cb9: Pull complete</span><br><span class=\"line\">Digest: sha256:899473656db6b2fb7343d9cfd8ab6493199b60500eed9d7202c0d2552c8c5b1d</span><br><span class=\"line\">Status: Downloaded newer image for drupal:latest</span><br><span class=\"line\">84d185875cd1e27c301042c743aab01757d3e9814557698b8d40a6b7b977e4ca</span><br></pre></td></tr></table></figure>\n\n<p>由于我们在安装容器时没有制定镜像的版本号，所以自动拉取 latest 版本，意思是最新版本的镜像。</p>\n<p>安装完成两个容器之后我们可以查看 Docker 中的容器和镜像。<br>查看容器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class=\"line\">84d185875cd1        drupal              &quot;docker-php-entrypoi…&quot;   About an hour ago   Up About an hour    0.0.0.0:80-&gt;80/tcp   drupal8</span><br><span class=\"line\">8cae72ad7ff0        mariadb             &quot;docker-entrypoint.s…&quot;   About an hour ago   Up About an hour    3306/tcp             mariadb</span><br></pre></td></tr></table></figure>\n\n<p>查看镜像：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">drupal              latest              4ae9d94d03b6        3 days ago          453MB</span><br><span class=\"line\">mariadb             latest              92495405fc36        12 days ago         356MB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三部-配置网站\"><a href=\"#第三部-配置网站\" class=\"headerlink\" title=\"第三部 配置网站\"></a>第三部 配置网站</h3><p>在宿主机（就是我们当前使用的电脑）的浏览器中输入 localhost 开始进入 Drupal 安装页面。<br>需要注意的是数据库连接配置：</p>\n<p><img src=\"https://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-10-01%E4%B8%8A%E5%8D%8810.16.19.png\" alt></p>\n<p>这里的数据库配置参数中，数据库名称、数据库用户名、数据库密码是我们在创建第一个容器时定义的，分别都是<code>drupal8</code>，高级选项中的主机名是我们在创建第二个容器时设定的 link 链接名<code>mysql</code>。</p>"},{"title":"vue-cli开发保健菜谱APP","date":"2018-12-10T03:02:21.000Z","cotegory":"Vue","_content":"\n## 保健菜谱\n\n[vue 代码链接: https://gitee.com/laoxue6699/meishi](https://gitee.com/laoxue6699/meishi)\n\n[uni-app 代码链接: https://gitee.com/laoxue6699/health_menu](https://gitee.com/laoxue6699/health_menu)\n\n### 项目介绍\n\n项目主要功能是为人们提供常用保健菜品的制作方法。通过视频、图片、文字展示菜品的制作过程。提供列表查询和全文搜索功能方便查询。可以收藏自己喜爱的视频和图文菜谱。\n\n<!--more-->\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi01.png)\n\n### 项目架构\n\n- 通过 Scrapy 爬取后台需要的数据，经过数据清洗和加工成 json 数据。\n-     利用json-server构建RESTful接口API。\n-     使用vue-li2脚手架工具构建前端APP项目。\n-     利用vuejs组件化技术，渐进构建项目界面。\n-     利用Axios请求远程数据。\n-     利用vue-router模块组织管理路由。\n\n### 技术要领\n\n#### 封装\n\n- 在小型项目中，诸如 Axios 请求数据用一行代码就可以搞定，就没不要封装。在大型项目中，如果大到需要用 vuex 来管理状态，还是需要一定的代码封装的。\n\n#### 跨域请求\n\n- 开发阶段可能会遇到跨域请求问题。通过修改 config 中 index.js 的代理参数得以解决。\n\n#### 组件拆分\n\n- 项目总体的组件可以划分成两类：路由组件和非路由组件。路由组件在 router 中配置路由，非路由组件在模板中嵌套。\n- 不能凡组件必拆分，要坚持“高内聚、低耦合”的原则。对拆分后影响代码整体性理解或需要复杂配置的，尽量不要拆分。\n\n#### 传参\n\n- 传参主要有三种：路由传参、组件传参、vuex 状态管理。小项目可以不用 vuex 进行状态管理。\n- 路由传参注意 path 和 query 配合，name 和 params 配合。\n- 组件传参，父传子用属性传值 props 接收。子传父通过\\$emit 传递事件和值，父组件通过监听事件来接收传值，可以单线联系。\n\n#### 生命周期\n\n- 一般可以请求数据的代码放在 vue 的生命周期 created 钩子函数中。\n\n#### 列表渲染\n\n- v-for 可以嵌套遍历。\n\n#### 动态样式绑定\n\n- 诸如底部选项卡的激活状态可以用动态样式绑定的方法来实现。\n\n#### 随机请求数据\n\n- 传统列表的数据都采取上拉加载下拉刷新的方式，对于数据量大的也可以先随机生成取值范围再请求数据的方法，这样可以给用户带来不同的体验。\n\n#### 全文搜索\n\n可以预定义一些常用的搜索关键词供用户点按，既可以引导用户输入规范的关键词，也可以简化操作，提高用户体验。\n\n#### 控制 video 播放\n\n在 vue 组件中，使用`v-show`来决定播放界面是否显示，当关闭播放组件时，正在播放的视频仍在播放。这是需要使用\\$refs 参数选取`video`元素来同时关闭视频播放。\n\n#### poster 不兼容的处理\n\nvue 在使用 HTHL5 的 `video`元素播视频时，poster 默认的封面在真机上显示不出来，需要在模板中`video`元素的位置预先加载与 poster 相同的封面图片，才不会显示白板背景。\n\n#### 收藏功能的实现\n\n收藏视频和图文菜谱，需要用到 HTML5 的`localStorage`进行存储，为了节省空间，只需要存储收藏菜谱的`id`即可。由于保存的数据格式都是字符串，所以取出时还要转换成数组，才能做进一步的操作。用先进先出法限制存储的条目数。\n\n### 项目界面\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi02.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi03.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi04.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi05.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi06.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi07.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi08.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi09.png)\n\n## Build Setup\n\n```bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n\n# build for production and view the bundle analyzer report\nnpm run build --report\n```\n","source":"_posts/vue-cli开发保健菜谱APP.md","raw":"---\ntitle: vue-cli开发保健菜谱APP\ndate: 2018-12-10 11:02:21\ntags: vue\ncotegory: Vue\n---\n\n## 保健菜谱\n\n[vue 代码链接: https://gitee.com/laoxue6699/meishi](https://gitee.com/laoxue6699/meishi)\n\n[uni-app 代码链接: https://gitee.com/laoxue6699/health_menu](https://gitee.com/laoxue6699/health_menu)\n\n### 项目介绍\n\n项目主要功能是为人们提供常用保健菜品的制作方法。通过视频、图片、文字展示菜品的制作过程。提供列表查询和全文搜索功能方便查询。可以收藏自己喜爱的视频和图文菜谱。\n\n<!--more-->\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi01.png)\n\n### 项目架构\n\n- 通过 Scrapy 爬取后台需要的数据，经过数据清洗和加工成 json 数据。\n-     利用json-server构建RESTful接口API。\n-     使用vue-li2脚手架工具构建前端APP项目。\n-     利用vuejs组件化技术，渐进构建项目界面。\n-     利用Axios请求远程数据。\n-     利用vue-router模块组织管理路由。\n\n### 技术要领\n\n#### 封装\n\n- 在小型项目中，诸如 Axios 请求数据用一行代码就可以搞定，就没不要封装。在大型项目中，如果大到需要用 vuex 来管理状态，还是需要一定的代码封装的。\n\n#### 跨域请求\n\n- 开发阶段可能会遇到跨域请求问题。通过修改 config 中 index.js 的代理参数得以解决。\n\n#### 组件拆分\n\n- 项目总体的组件可以划分成两类：路由组件和非路由组件。路由组件在 router 中配置路由，非路由组件在模板中嵌套。\n- 不能凡组件必拆分，要坚持“高内聚、低耦合”的原则。对拆分后影响代码整体性理解或需要复杂配置的，尽量不要拆分。\n\n#### 传参\n\n- 传参主要有三种：路由传参、组件传参、vuex 状态管理。小项目可以不用 vuex 进行状态管理。\n- 路由传参注意 path 和 query 配合，name 和 params 配合。\n- 组件传参，父传子用属性传值 props 接收。子传父通过\\$emit 传递事件和值，父组件通过监听事件来接收传值，可以单线联系。\n\n#### 生命周期\n\n- 一般可以请求数据的代码放在 vue 的生命周期 created 钩子函数中。\n\n#### 列表渲染\n\n- v-for 可以嵌套遍历。\n\n#### 动态样式绑定\n\n- 诸如底部选项卡的激活状态可以用动态样式绑定的方法来实现。\n\n#### 随机请求数据\n\n- 传统列表的数据都采取上拉加载下拉刷新的方式，对于数据量大的也可以先随机生成取值范围再请求数据的方法，这样可以给用户带来不同的体验。\n\n#### 全文搜索\n\n可以预定义一些常用的搜索关键词供用户点按，既可以引导用户输入规范的关键词，也可以简化操作，提高用户体验。\n\n#### 控制 video 播放\n\n在 vue 组件中，使用`v-show`来决定播放界面是否显示，当关闭播放组件时，正在播放的视频仍在播放。这是需要使用\\$refs 参数选取`video`元素来同时关闭视频播放。\n\n#### poster 不兼容的处理\n\nvue 在使用 HTHL5 的 `video`元素播视频时，poster 默认的封面在真机上显示不出来，需要在模板中`video`元素的位置预先加载与 poster 相同的封面图片，才不会显示白板背景。\n\n#### 收藏功能的实现\n\n收藏视频和图文菜谱，需要用到 HTML5 的`localStorage`进行存储，为了节省空间，只需要存储收藏菜谱的`id`即可。由于保存的数据格式都是字符串，所以取出时还要转换成数组，才能做进一步的操作。用先进先出法限制存储的条目数。\n\n### 项目界面\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi02.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi03.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi04.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi05.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi06.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi07.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi08.png)\n\n![输入图片说明](http://pw59ntmi6.bkt.clouddn.com/meishi09.png)\n\n## Build Setup\n\n```bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n\n# build for production and view the bundle analyzer report\nnpm run build --report\n```\n","slug":"vue-cli开发保健菜谱APP","published":1,"updated":"2019-08-12T23:23:21.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm0x0006nw9wyhzvzwqx","content":"<h2 id=\"保健菜谱\"><a href=\"#保健菜谱\" class=\"headerlink\" title=\"保健菜谱\"></a>保健菜谱</h2><p><a href=\"https://gitee.com/laoxue6699/meishi\" target=\"_blank\" rel=\"noopener\">vue 代码链接: https://gitee.com/laoxue6699/meishi</a></p>\n<p><a href=\"https://gitee.com/laoxue6699/health_menu\" target=\"_blank\" rel=\"noopener\">uni-app 代码链接: https://gitee.com/laoxue6699/health_menu</a></p>\n<h3 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>项目主要功能是为人们提供常用保健菜品的制作方法。通过视频、图片、文字展示菜品的制作过程。提供列表查询和全文搜索功能方便查询。可以收藏自己喜爱的视频和图文菜谱。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi01.png\" alt=\"输入图片说明\"></p>\n<h3 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h3><ul>\n<li>通过 Scrapy 爬取后台需要的数据，经过数据清洗和加工成 json 数据。</li>\n<li>利用json-server构建RESTful接口API。</li>\n<li>使用vue-li2脚手架工具构建前端APP项目。</li>\n<li>利用vuejs组件化技术，渐进构建项目界面。</li>\n<li>利用Axios请求远程数据。</li>\n<li>利用vue-router模块组织管理路由。</li>\n</ul>\n<h3 id=\"技术要领\"><a href=\"#技术要领\" class=\"headerlink\" title=\"技术要领\"></a>技术要领</h3><h4 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h4><ul>\n<li>在小型项目中，诸如 Axios 请求数据用一行代码就可以搞定，就没不要封装。在大型项目中，如果大到需要用 vuex 来管理状态，还是需要一定的代码封装的。</li>\n</ul>\n<h4 id=\"跨域请求\"><a href=\"#跨域请求\" class=\"headerlink\" title=\"跨域请求\"></a>跨域请求</h4><ul>\n<li>开发阶段可能会遇到跨域请求问题。通过修改 config 中 index.js 的代理参数得以解决。</li>\n</ul>\n<h4 id=\"组件拆分\"><a href=\"#组件拆分\" class=\"headerlink\" title=\"组件拆分\"></a>组件拆分</h4><ul>\n<li>项目总体的组件可以划分成两类：路由组件和非路由组件。路由组件在 router 中配置路由，非路由组件在模板中嵌套。</li>\n<li>不能凡组件必拆分，要坚持“高内聚、低耦合”的原则。对拆分后影响代码整体性理解或需要复杂配置的，尽量不要拆分。</li>\n</ul>\n<h4 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h4><ul>\n<li>传参主要有三种：路由传参、组件传参、vuex 状态管理。小项目可以不用 vuex 进行状态管理。</li>\n<li>路由传参注意 path 和 query 配合，name 和 params 配合。</li>\n<li>组件传参，父传子用属性传值 props 接收。子传父通过$emit 传递事件和值，父组件通过监听事件来接收传值，可以单线联系。</li>\n</ul>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>一般可以请求数据的代码放在 vue 的生命周期 created 钩子函数中。</li>\n</ul>\n<h4 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h4><ul>\n<li>v-for 可以嵌套遍历。</li>\n</ul>\n<h4 id=\"动态样式绑定\"><a href=\"#动态样式绑定\" class=\"headerlink\" title=\"动态样式绑定\"></a>动态样式绑定</h4><ul>\n<li>诸如底部选项卡的激活状态可以用动态样式绑定的方法来实现。</li>\n</ul>\n<h4 id=\"随机请求数据\"><a href=\"#随机请求数据\" class=\"headerlink\" title=\"随机请求数据\"></a>随机请求数据</h4><ul>\n<li>传统列表的数据都采取上拉加载下拉刷新的方式，对于数据量大的也可以先随机生成取值范围再请求数据的方法，这样可以给用户带来不同的体验。</li>\n</ul>\n<h4 id=\"全文搜索\"><a href=\"#全文搜索\" class=\"headerlink\" title=\"全文搜索\"></a>全文搜索</h4><p>可以预定义一些常用的搜索关键词供用户点按，既可以引导用户输入规范的关键词，也可以简化操作，提高用户体验。</p>\n<h4 id=\"控制-video-播放\"><a href=\"#控制-video-播放\" class=\"headerlink\" title=\"控制 video 播放\"></a>控制 video 播放</h4><p>在 vue 组件中，使用<code>v-show</code>来决定播放界面是否显示，当关闭播放组件时，正在播放的视频仍在播放。这是需要使用$refs 参数选取<code>video</code>元素来同时关闭视频播放。</p>\n<h4 id=\"poster-不兼容的处理\"><a href=\"#poster-不兼容的处理\" class=\"headerlink\" title=\"poster 不兼容的处理\"></a>poster 不兼容的处理</h4><p>vue 在使用 HTHL5 的 <code>video</code>元素播视频时，poster 默认的封面在真机上显示不出来，需要在模板中<code>video</code>元素的位置预先加载与 poster 相同的封面图片，才不会显示白板背景。</p>\n<h4 id=\"收藏功能的实现\"><a href=\"#收藏功能的实现\" class=\"headerlink\" title=\"收藏功能的实现\"></a>收藏功能的实现</h4><p>收藏视频和图文菜谱，需要用到 HTML5 的<code>localStorage</code>进行存储，为了节省空间，只需要存储收藏菜谱的<code>id</code>即可。由于保存的数据格式都是字符串，所以取出时还要转换成数组，才能做进一步的操作。用先进先出法限制存储的条目数。</p>\n<h3 id=\"项目界面\"><a href=\"#项目界面\" class=\"headerlink\" title=\"项目界面\"></a>项目界面</h3><p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi02.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi03.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi04.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi05.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi06.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi07.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi08.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi09.png\" alt=\"输入图片说明\"></p>\n<h2 id=\"Build-Setup\"><a href=\"#Build-Setup\" class=\"headerlink\" title=\"Build Setup\"></a>Build Setup</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># install dependencies</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># serve with hot reload at localhost:8080</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build for production with minification</span></span><br><span class=\"line\">npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build for production and view the bundle analyzer report</span></span><br><span class=\"line\">npm run build --report</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"保健菜谱\"><a href=\"#保健菜谱\" class=\"headerlink\" title=\"保健菜谱\"></a>保健菜谱</h2><p><a href=\"https://gitee.com/laoxue6699/meishi\" target=\"_blank\" rel=\"noopener\">vue 代码链接: https://gitee.com/laoxue6699/meishi</a></p>\n<p><a href=\"https://gitee.com/laoxue6699/health_menu\" target=\"_blank\" rel=\"noopener\">uni-app 代码链接: https://gitee.com/laoxue6699/health_menu</a></p>\n<h3 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>项目主要功能是为人们提供常用保健菜品的制作方法。通过视频、图片、文字展示菜品的制作过程。提供列表查询和全文搜索功能方便查询。可以收藏自己喜爱的视频和图文菜谱。</p>","more":"<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi01.png\" alt=\"输入图片说明\"></p>\n<h3 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h3><ul>\n<li>通过 Scrapy 爬取后台需要的数据，经过数据清洗和加工成 json 数据。</li>\n<li>利用json-server构建RESTful接口API。</li>\n<li>使用vue-li2脚手架工具构建前端APP项目。</li>\n<li>利用vuejs组件化技术，渐进构建项目界面。</li>\n<li>利用Axios请求远程数据。</li>\n<li>利用vue-router模块组织管理路由。</li>\n</ul>\n<h3 id=\"技术要领\"><a href=\"#技术要领\" class=\"headerlink\" title=\"技术要领\"></a>技术要领</h3><h4 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h4><ul>\n<li>在小型项目中，诸如 Axios 请求数据用一行代码就可以搞定，就没不要封装。在大型项目中，如果大到需要用 vuex 来管理状态，还是需要一定的代码封装的。</li>\n</ul>\n<h4 id=\"跨域请求\"><a href=\"#跨域请求\" class=\"headerlink\" title=\"跨域请求\"></a>跨域请求</h4><ul>\n<li>开发阶段可能会遇到跨域请求问题。通过修改 config 中 index.js 的代理参数得以解决。</li>\n</ul>\n<h4 id=\"组件拆分\"><a href=\"#组件拆分\" class=\"headerlink\" title=\"组件拆分\"></a>组件拆分</h4><ul>\n<li>项目总体的组件可以划分成两类：路由组件和非路由组件。路由组件在 router 中配置路由，非路由组件在模板中嵌套。</li>\n<li>不能凡组件必拆分，要坚持“高内聚、低耦合”的原则。对拆分后影响代码整体性理解或需要复杂配置的，尽量不要拆分。</li>\n</ul>\n<h4 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h4><ul>\n<li>传参主要有三种：路由传参、组件传参、vuex 状态管理。小项目可以不用 vuex 进行状态管理。</li>\n<li>路由传参注意 path 和 query 配合，name 和 params 配合。</li>\n<li>组件传参，父传子用属性传值 props 接收。子传父通过$emit 传递事件和值，父组件通过监听事件来接收传值，可以单线联系。</li>\n</ul>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>一般可以请求数据的代码放在 vue 的生命周期 created 钩子函数中。</li>\n</ul>\n<h4 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h4><ul>\n<li>v-for 可以嵌套遍历。</li>\n</ul>\n<h4 id=\"动态样式绑定\"><a href=\"#动态样式绑定\" class=\"headerlink\" title=\"动态样式绑定\"></a>动态样式绑定</h4><ul>\n<li>诸如底部选项卡的激活状态可以用动态样式绑定的方法来实现。</li>\n</ul>\n<h4 id=\"随机请求数据\"><a href=\"#随机请求数据\" class=\"headerlink\" title=\"随机请求数据\"></a>随机请求数据</h4><ul>\n<li>传统列表的数据都采取上拉加载下拉刷新的方式，对于数据量大的也可以先随机生成取值范围再请求数据的方法，这样可以给用户带来不同的体验。</li>\n</ul>\n<h4 id=\"全文搜索\"><a href=\"#全文搜索\" class=\"headerlink\" title=\"全文搜索\"></a>全文搜索</h4><p>可以预定义一些常用的搜索关键词供用户点按，既可以引导用户输入规范的关键词，也可以简化操作，提高用户体验。</p>\n<h4 id=\"控制-video-播放\"><a href=\"#控制-video-播放\" class=\"headerlink\" title=\"控制 video 播放\"></a>控制 video 播放</h4><p>在 vue 组件中，使用<code>v-show</code>来决定播放界面是否显示，当关闭播放组件时，正在播放的视频仍在播放。这是需要使用$refs 参数选取<code>video</code>元素来同时关闭视频播放。</p>\n<h4 id=\"poster-不兼容的处理\"><a href=\"#poster-不兼容的处理\" class=\"headerlink\" title=\"poster 不兼容的处理\"></a>poster 不兼容的处理</h4><p>vue 在使用 HTHL5 的 <code>video</code>元素播视频时，poster 默认的封面在真机上显示不出来，需要在模板中<code>video</code>元素的位置预先加载与 poster 相同的封面图片，才不会显示白板背景。</p>\n<h4 id=\"收藏功能的实现\"><a href=\"#收藏功能的实现\" class=\"headerlink\" title=\"收藏功能的实现\"></a>收藏功能的实现</h4><p>收藏视频和图文菜谱，需要用到 HTML5 的<code>localStorage</code>进行存储，为了节省空间，只需要存储收藏菜谱的<code>id</code>即可。由于保存的数据格式都是字符串，所以取出时还要转换成数组，才能做进一步的操作。用先进先出法限制存储的条目数。</p>\n<h3 id=\"项目界面\"><a href=\"#项目界面\" class=\"headerlink\" title=\"项目界面\"></a>项目界面</h3><p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi02.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi03.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi04.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi05.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi06.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi07.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi08.png\" alt=\"输入图片说明\"></p>\n<p><img src=\"http://pw59ntmi6.bkt.clouddn.com/meishi09.png\" alt=\"输入图片说明\"></p>\n<h2 id=\"Build-Setup\"><a href=\"#Build-Setup\" class=\"headerlink\" title=\"Build Setup\"></a>Build Setup</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># install dependencies</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># serve with hot reload at localhost:8080</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build for production with minification</span></span><br><span class=\"line\">npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build for production and view the bundle analyzer report</span></span><br><span class=\"line\">npm run build --report</span><br></pre></td></tr></table></figure>"},{"title":"三阶魔方还原","date":"2019-09-29T02:57:20.000Z","_content":"\n## 第一步 底部十字花\n\n假如底部为白色\n\n- 拼出顶部黄色十字，中心为黄色，四周棱块为白色。\n- 四面中心块与顶部十字棱块的侧面颜色分别对齐。\n- 逐面向下翻转。\n- 底面白色十字花包括花瓣完成。\n\n  <!-- more -->\n\n## 第二步 还原底面角块\n\n- 在顶部找出含有白色的角块\n- 移动该角块到其他两面颜色中心块颜色相同的夹角上\n- 角块放在我们这一面的右上角\n\n### 当白色朝右时\n\n- 对齐\n- 右上，顶左，右下。\n\n### 当白色朝前时\n\n- 对齐\n- 顶左，右上，顶右，右下。\n\n### 当白色朝上时\n\n- 对齐\n- 顶上，顶左左，右下，顶右。\n- 转化为白色朝右的情况了。\n\n## 第三步 第二层复原\n\n只有四个棱块需要归位。不含白色与黄色的棱块。\n\n- 在顶层找到不含黄色的棱块。\n- 对齐。侧面颜色与中心块颜色一致。\n\n### 还原到左边\n\n- 远离。即顶右。\n- 左手手法。\n- 转体。\n- 右手手法。\n\n### 还原到右边\n\n- 远离。即顶左。\n- 右手手法。\n- 转体。\n- 左手手法。\n\n### 右手手法\n\n- 右上，顶左，右下，顶右。\n\n### 左手手法\n\n- 左上，顶右，左下，顶左。\n\n### 顶层找不到相关棱块时\n\n- 目标棱块放在右手位置\n- 右手手法\n- 转体\n- 左手手法\n- 再按普通情况还原\n\n## 第四步 顶层十字\n\n- 直线横放。顺，右手手法，逆。\n- 拐弯放在九点钟位置。顺，两次右手手法，逆。\n- 只有一个中心点不认方向。上面两种解法一起做。\n\n### 顺和逆手法\n\n- 顺：前面向右转\n- 逆：前面向左转\n\n## 第五步 顶面还原\n\n两个角块、三个角块、四个角块不是黄色。\n\n### 三个角块不是黄色\n\n- 鱼鳍在前面左边。 小鱼一。\n- 鱼鳍在前面左边。 小鱼二。\n\n### 小鱼一\n\n- 鱼头朝左上。\n- 右下，顶右，右上，顶右，右下，顶右右，右上。\n\n### 小鱼二\n\n- 鱼头朝左下。\n- 右上，顶左，右下，顶左，右上，顶左左，右下。\n\n### 两个或四个角块不是黄色\n\n- 两碰，四不碰。左手大拇指碰不碰黄色。\n- 小鱼二。\n- 再做对应的小鱼手法。\n\n## 第六步 顶层角块还原\n\n- 相同颜色角块朝右。特殊情况先做下面两步。\n- 顶面朝自己\n- L 型变化： 上上，底底，右下，顶右，右上，底底，右下，顶左，右下。\n\n## 第七步 顶层棱块还原\n\n四个棱块变三个棱块\n\n- 小鱼一手法\n- 小鱼二手法\n\n三棱往左归位\n\n- 完成的一面朝后\n- 小鱼二\n- 小鱼一\n\n三棱往右归位\n\n- 完成的一面朝前\n- 小鱼一\n- 小鱼二\n","source":"_posts/三阶魔方还原.md","raw":"---\ntitle: 三阶魔方还原\ndate: 2019-09-29 10:57:20\ntags:\n  - 休闲\n---\n\n## 第一步 底部十字花\n\n假如底部为白色\n\n- 拼出顶部黄色十字，中心为黄色，四周棱块为白色。\n- 四面中心块与顶部十字棱块的侧面颜色分别对齐。\n- 逐面向下翻转。\n- 底面白色十字花包括花瓣完成。\n\n  <!-- more -->\n\n## 第二步 还原底面角块\n\n- 在顶部找出含有白色的角块\n- 移动该角块到其他两面颜色中心块颜色相同的夹角上\n- 角块放在我们这一面的右上角\n\n### 当白色朝右时\n\n- 对齐\n- 右上，顶左，右下。\n\n### 当白色朝前时\n\n- 对齐\n- 顶左，右上，顶右，右下。\n\n### 当白色朝上时\n\n- 对齐\n- 顶上，顶左左，右下，顶右。\n- 转化为白色朝右的情况了。\n\n## 第三步 第二层复原\n\n只有四个棱块需要归位。不含白色与黄色的棱块。\n\n- 在顶层找到不含黄色的棱块。\n- 对齐。侧面颜色与中心块颜色一致。\n\n### 还原到左边\n\n- 远离。即顶右。\n- 左手手法。\n- 转体。\n- 右手手法。\n\n### 还原到右边\n\n- 远离。即顶左。\n- 右手手法。\n- 转体。\n- 左手手法。\n\n### 右手手法\n\n- 右上，顶左，右下，顶右。\n\n### 左手手法\n\n- 左上，顶右，左下，顶左。\n\n### 顶层找不到相关棱块时\n\n- 目标棱块放在右手位置\n- 右手手法\n- 转体\n- 左手手法\n- 再按普通情况还原\n\n## 第四步 顶层十字\n\n- 直线横放。顺，右手手法，逆。\n- 拐弯放在九点钟位置。顺，两次右手手法，逆。\n- 只有一个中心点不认方向。上面两种解法一起做。\n\n### 顺和逆手法\n\n- 顺：前面向右转\n- 逆：前面向左转\n\n## 第五步 顶面还原\n\n两个角块、三个角块、四个角块不是黄色。\n\n### 三个角块不是黄色\n\n- 鱼鳍在前面左边。 小鱼一。\n- 鱼鳍在前面左边。 小鱼二。\n\n### 小鱼一\n\n- 鱼头朝左上。\n- 右下，顶右，右上，顶右，右下，顶右右，右上。\n\n### 小鱼二\n\n- 鱼头朝左下。\n- 右上，顶左，右下，顶左，右上，顶左左，右下。\n\n### 两个或四个角块不是黄色\n\n- 两碰，四不碰。左手大拇指碰不碰黄色。\n- 小鱼二。\n- 再做对应的小鱼手法。\n\n## 第六步 顶层角块还原\n\n- 相同颜色角块朝右。特殊情况先做下面两步。\n- 顶面朝自己\n- L 型变化： 上上，底底，右下，顶右，右上，底底，右下，顶左，右下。\n\n## 第七步 顶层棱块还原\n\n四个棱块变三个棱块\n\n- 小鱼一手法\n- 小鱼二手法\n\n三棱往左归位\n\n- 完成的一面朝后\n- 小鱼二\n- 小鱼一\n\n三棱往右归位\n\n- 完成的一面朝前\n- 小鱼一\n- 小鱼二\n","slug":"三阶魔方还原","published":1,"updated":"2019-09-29T05:19:26.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm110009nw9w4y140ihq","content":"<h2 id=\"第一步-底部十字花\"><a href=\"#第一步-底部十字花\" class=\"headerlink\" title=\"第一步 底部十字花\"></a>第一步 底部十字花</h2><p>假如底部为白色</p>\n<ul>\n<li><p>拼出顶部黄色十字，中心为黄色，四周棱块为白色。</p>\n</li>\n<li><p>四面中心块与顶部十字棱块的侧面颜色分别对齐。</p>\n</li>\n<li><p>逐面向下翻转。</p>\n</li>\n<li><p>底面白色十字花包括花瓣完成。</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"第二步-还原底面角块\"><a href=\"#第二步-还原底面角块\" class=\"headerlink\" title=\"第二步 还原底面角块\"></a>第二步 还原底面角块</h2><ul>\n<li>在顶部找出含有白色的角块</li>\n<li>移动该角块到其他两面颜色中心块颜色相同的夹角上</li>\n<li>角块放在我们这一面的右上角</li>\n</ul>\n<h3 id=\"当白色朝右时\"><a href=\"#当白色朝右时\" class=\"headerlink\" title=\"当白色朝右时\"></a>当白色朝右时</h3><ul>\n<li>对齐</li>\n<li>右上，顶左，右下。</li>\n</ul>\n<h3 id=\"当白色朝前时\"><a href=\"#当白色朝前时\" class=\"headerlink\" title=\"当白色朝前时\"></a>当白色朝前时</h3><ul>\n<li>对齐</li>\n<li>顶左，右上，顶右，右下。</li>\n</ul>\n<h3 id=\"当白色朝上时\"><a href=\"#当白色朝上时\" class=\"headerlink\" title=\"当白色朝上时\"></a>当白色朝上时</h3><ul>\n<li>对齐</li>\n<li>顶上，顶左左，右下，顶右。</li>\n<li>转化为白色朝右的情况了。</li>\n</ul>\n<h2 id=\"第三步-第二层复原\"><a href=\"#第三步-第二层复原\" class=\"headerlink\" title=\"第三步 第二层复原\"></a>第三步 第二层复原</h2><p>只有四个棱块需要归位。不含白色与黄色的棱块。</p>\n<ul>\n<li>在顶层找到不含黄色的棱块。</li>\n<li>对齐。侧面颜色与中心块颜色一致。</li>\n</ul>\n<h3 id=\"还原到左边\"><a href=\"#还原到左边\" class=\"headerlink\" title=\"还原到左边\"></a>还原到左边</h3><ul>\n<li>远离。即顶右。</li>\n<li>左手手法。</li>\n<li>转体。</li>\n<li>右手手法。</li>\n</ul>\n<h3 id=\"还原到右边\"><a href=\"#还原到右边\" class=\"headerlink\" title=\"还原到右边\"></a>还原到右边</h3><ul>\n<li>远离。即顶左。</li>\n<li>右手手法。</li>\n<li>转体。</li>\n<li>左手手法。</li>\n</ul>\n<h3 id=\"右手手法\"><a href=\"#右手手法\" class=\"headerlink\" title=\"右手手法\"></a>右手手法</h3><ul>\n<li>右上，顶左，右下，顶右。</li>\n</ul>\n<h3 id=\"左手手法\"><a href=\"#左手手法\" class=\"headerlink\" title=\"左手手法\"></a>左手手法</h3><ul>\n<li>左上，顶右，左下，顶左。</li>\n</ul>\n<h3 id=\"顶层找不到相关棱块时\"><a href=\"#顶层找不到相关棱块时\" class=\"headerlink\" title=\"顶层找不到相关棱块时\"></a>顶层找不到相关棱块时</h3><ul>\n<li>目标棱块放在右手位置</li>\n<li>右手手法</li>\n<li>转体</li>\n<li>左手手法</li>\n<li>再按普通情况还原</li>\n</ul>\n<h2 id=\"第四步-顶层十字\"><a href=\"#第四步-顶层十字\" class=\"headerlink\" title=\"第四步 顶层十字\"></a>第四步 顶层十字</h2><ul>\n<li>直线横放。顺，右手手法，逆。</li>\n<li>拐弯放在九点钟位置。顺，两次右手手法，逆。</li>\n<li>只有一个中心点不认方向。上面两种解法一起做。</li>\n</ul>\n<h3 id=\"顺和逆手法\"><a href=\"#顺和逆手法\" class=\"headerlink\" title=\"顺和逆手法\"></a>顺和逆手法</h3><ul>\n<li>顺：前面向右转</li>\n<li>逆：前面向左转</li>\n</ul>\n<h2 id=\"第五步-顶面还原\"><a href=\"#第五步-顶面还原\" class=\"headerlink\" title=\"第五步 顶面还原\"></a>第五步 顶面还原</h2><p>两个角块、三个角块、四个角块不是黄色。</p>\n<h3 id=\"三个角块不是黄色\"><a href=\"#三个角块不是黄色\" class=\"headerlink\" title=\"三个角块不是黄色\"></a>三个角块不是黄色</h3><ul>\n<li>鱼鳍在前面左边。 小鱼一。</li>\n<li>鱼鳍在前面左边。 小鱼二。</li>\n</ul>\n<h3 id=\"小鱼一\"><a href=\"#小鱼一\" class=\"headerlink\" title=\"小鱼一\"></a>小鱼一</h3><ul>\n<li>鱼头朝左上。</li>\n<li>右下，顶右，右上，顶右，右下，顶右右，右上。</li>\n</ul>\n<h3 id=\"小鱼二\"><a href=\"#小鱼二\" class=\"headerlink\" title=\"小鱼二\"></a>小鱼二</h3><ul>\n<li>鱼头朝左下。</li>\n<li>右上，顶左，右下，顶左，右上，顶左左，右下。</li>\n</ul>\n<h3 id=\"两个或四个角块不是黄色\"><a href=\"#两个或四个角块不是黄色\" class=\"headerlink\" title=\"两个或四个角块不是黄色\"></a>两个或四个角块不是黄色</h3><ul>\n<li>两碰，四不碰。左手大拇指碰不碰黄色。</li>\n<li>小鱼二。</li>\n<li>再做对应的小鱼手法。</li>\n</ul>\n<h2 id=\"第六步-顶层角块还原\"><a href=\"#第六步-顶层角块还原\" class=\"headerlink\" title=\"第六步 顶层角块还原\"></a>第六步 顶层角块还原</h2><ul>\n<li>相同颜色角块朝右。特殊情况先做下面两步。</li>\n<li>顶面朝自己</li>\n<li>L 型变化： 上上，底底，右下，顶右，右上，底底，右下，顶左，右下。</li>\n</ul>\n<h2 id=\"第七步-顶层棱块还原\"><a href=\"#第七步-顶层棱块还原\" class=\"headerlink\" title=\"第七步 顶层棱块还原\"></a>第七步 顶层棱块还原</h2><p>四个棱块变三个棱块</p>\n<ul>\n<li>小鱼一手法</li>\n<li>小鱼二手法</li>\n</ul>\n<p>三棱往左归位</p>\n<ul>\n<li>完成的一面朝后</li>\n<li>小鱼二</li>\n<li>小鱼一</li>\n</ul>\n<p>三棱往右归位</p>\n<ul>\n<li>完成的一面朝前</li>\n<li>小鱼一</li>\n<li>小鱼二</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第一步-底部十字花\"><a href=\"#第一步-底部十字花\" class=\"headerlink\" title=\"第一步 底部十字花\"></a>第一步 底部十字花</h2><p>假如底部为白色</p>\n<ul>\n<li><p>拼出顶部黄色十字，中心为黄色，四周棱块为白色。</p>\n</li>\n<li><p>四面中心块与顶部十字棱块的侧面颜色分别对齐。</p>\n</li>\n<li><p>逐面向下翻转。</p>\n</li>\n<li><p>底面白色十字花包括花瓣完成。</p>","more":"</li>\n</ul>\n<h2 id=\"第二步-还原底面角块\"><a href=\"#第二步-还原底面角块\" class=\"headerlink\" title=\"第二步 还原底面角块\"></a>第二步 还原底面角块</h2><ul>\n<li>在顶部找出含有白色的角块</li>\n<li>移动该角块到其他两面颜色中心块颜色相同的夹角上</li>\n<li>角块放在我们这一面的右上角</li>\n</ul>\n<h3 id=\"当白色朝右时\"><a href=\"#当白色朝右时\" class=\"headerlink\" title=\"当白色朝右时\"></a>当白色朝右时</h3><ul>\n<li>对齐</li>\n<li>右上，顶左，右下。</li>\n</ul>\n<h3 id=\"当白色朝前时\"><a href=\"#当白色朝前时\" class=\"headerlink\" title=\"当白色朝前时\"></a>当白色朝前时</h3><ul>\n<li>对齐</li>\n<li>顶左，右上，顶右，右下。</li>\n</ul>\n<h3 id=\"当白色朝上时\"><a href=\"#当白色朝上时\" class=\"headerlink\" title=\"当白色朝上时\"></a>当白色朝上时</h3><ul>\n<li>对齐</li>\n<li>顶上，顶左左，右下，顶右。</li>\n<li>转化为白色朝右的情况了。</li>\n</ul>\n<h2 id=\"第三步-第二层复原\"><a href=\"#第三步-第二层复原\" class=\"headerlink\" title=\"第三步 第二层复原\"></a>第三步 第二层复原</h2><p>只有四个棱块需要归位。不含白色与黄色的棱块。</p>\n<ul>\n<li>在顶层找到不含黄色的棱块。</li>\n<li>对齐。侧面颜色与中心块颜色一致。</li>\n</ul>\n<h3 id=\"还原到左边\"><a href=\"#还原到左边\" class=\"headerlink\" title=\"还原到左边\"></a>还原到左边</h3><ul>\n<li>远离。即顶右。</li>\n<li>左手手法。</li>\n<li>转体。</li>\n<li>右手手法。</li>\n</ul>\n<h3 id=\"还原到右边\"><a href=\"#还原到右边\" class=\"headerlink\" title=\"还原到右边\"></a>还原到右边</h3><ul>\n<li>远离。即顶左。</li>\n<li>右手手法。</li>\n<li>转体。</li>\n<li>左手手法。</li>\n</ul>\n<h3 id=\"右手手法\"><a href=\"#右手手法\" class=\"headerlink\" title=\"右手手法\"></a>右手手法</h3><ul>\n<li>右上，顶左，右下，顶右。</li>\n</ul>\n<h3 id=\"左手手法\"><a href=\"#左手手法\" class=\"headerlink\" title=\"左手手法\"></a>左手手法</h3><ul>\n<li>左上，顶右，左下，顶左。</li>\n</ul>\n<h3 id=\"顶层找不到相关棱块时\"><a href=\"#顶层找不到相关棱块时\" class=\"headerlink\" title=\"顶层找不到相关棱块时\"></a>顶层找不到相关棱块时</h3><ul>\n<li>目标棱块放在右手位置</li>\n<li>右手手法</li>\n<li>转体</li>\n<li>左手手法</li>\n<li>再按普通情况还原</li>\n</ul>\n<h2 id=\"第四步-顶层十字\"><a href=\"#第四步-顶层十字\" class=\"headerlink\" title=\"第四步 顶层十字\"></a>第四步 顶层十字</h2><ul>\n<li>直线横放。顺，右手手法，逆。</li>\n<li>拐弯放在九点钟位置。顺，两次右手手法，逆。</li>\n<li>只有一个中心点不认方向。上面两种解法一起做。</li>\n</ul>\n<h3 id=\"顺和逆手法\"><a href=\"#顺和逆手法\" class=\"headerlink\" title=\"顺和逆手法\"></a>顺和逆手法</h3><ul>\n<li>顺：前面向右转</li>\n<li>逆：前面向左转</li>\n</ul>\n<h2 id=\"第五步-顶面还原\"><a href=\"#第五步-顶面还原\" class=\"headerlink\" title=\"第五步 顶面还原\"></a>第五步 顶面还原</h2><p>两个角块、三个角块、四个角块不是黄色。</p>\n<h3 id=\"三个角块不是黄色\"><a href=\"#三个角块不是黄色\" class=\"headerlink\" title=\"三个角块不是黄色\"></a>三个角块不是黄色</h3><ul>\n<li>鱼鳍在前面左边。 小鱼一。</li>\n<li>鱼鳍在前面左边。 小鱼二。</li>\n</ul>\n<h3 id=\"小鱼一\"><a href=\"#小鱼一\" class=\"headerlink\" title=\"小鱼一\"></a>小鱼一</h3><ul>\n<li>鱼头朝左上。</li>\n<li>右下，顶右，右上，顶右，右下，顶右右，右上。</li>\n</ul>\n<h3 id=\"小鱼二\"><a href=\"#小鱼二\" class=\"headerlink\" title=\"小鱼二\"></a>小鱼二</h3><ul>\n<li>鱼头朝左下。</li>\n<li>右上，顶左，右下，顶左，右上，顶左左，右下。</li>\n</ul>\n<h3 id=\"两个或四个角块不是黄色\"><a href=\"#两个或四个角块不是黄色\" class=\"headerlink\" title=\"两个或四个角块不是黄色\"></a>两个或四个角块不是黄色</h3><ul>\n<li>两碰，四不碰。左手大拇指碰不碰黄色。</li>\n<li>小鱼二。</li>\n<li>再做对应的小鱼手法。</li>\n</ul>\n<h2 id=\"第六步-顶层角块还原\"><a href=\"#第六步-顶层角块还原\" class=\"headerlink\" title=\"第六步 顶层角块还原\"></a>第六步 顶层角块还原</h2><ul>\n<li>相同颜色角块朝右。特殊情况先做下面两步。</li>\n<li>顶面朝自己</li>\n<li>L 型变化： 上上，底底，右下，顶右，右上，底底，右下，顶左，右下。</li>\n</ul>\n<h2 id=\"第七步-顶层棱块还原\"><a href=\"#第七步-顶层棱块还原\" class=\"headerlink\" title=\"第七步 顶层棱块还原\"></a>第七步 顶层棱块还原</h2><p>四个棱块变三个棱块</p>\n<ul>\n<li>小鱼一手法</li>\n<li>小鱼二手法</li>\n</ul>\n<p>三棱往左归位</p>\n<ul>\n<li>完成的一面朝后</li>\n<li>小鱼二</li>\n<li>小鱼一</li>\n</ul>\n<p>三棱往右归位</p>\n<ul>\n<li>完成的一面朝前</li>\n<li>小鱼一</li>\n<li>小鱼二</li>\n</ul>"},{"title":"LoopBack3.0自定义角色与授权","date":"2019-09-22T09:37:07.000Z","_content":"\n在我的文章[《LoopBack3.0 创建 API 接口实战》](https://juejin.im/post/5d856d575188257e5c111867)里，对官方示例`咖啡馆点评项目`中的权限管理进行了配置，按照项目需求实现了权限控制。但是，我们在配置权限管理策略时，定义所有的评论者都不能对`CoffeeShop`模型进行增删改查的操作。\n\n<iframe src=\"//player.bilibili.com/player.html?aid=68852902&cid=119328164&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[到 bilibili.com 网站观看全部视频](https://www.bilibili.com/video/av68852902/)\n\n如何对 coffeeShops 的数据进行管理呢？这是我们常说的后台管理，需要一个管理员`admin`的角色来承担。本文继续就这个项目来介绍如何自定义一个角色`admin`,将该角色与用户关联，并赋予该角色超级管理员的权限，可以对包括`CoffeeShop`在内的所有模型进行增删改查的操作。\n\n<!-- more -->\n\n## 一、项目概述\n\n这是官方给出的一个关于咖啡店点评的示例。\n\n咖啡店点评是一个网站，我们可以用来发布咖啡店的评论。有三个数据模型：\n\n- CoffeeShop 咖啡店\n- Review 评论\n- Reviewer 评论者\n\n它们有如下关系：\n\n- CoffeeShop 拥有多个 review\n- CoffeeShop 拥有多个 reviewer\n- review 属于一个 CoffeeShop\n- review 属于一个 reviewer\n- reviewer 拥有多个 review\n\n一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过 ACLs 指定基本规则和权限：\n\n- 任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。\n- 任何人都可以注册为用户，然后能够登录或者注销。\n- 登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。\n\n## 二、创建角色\n\nLoopBack 允许我们定义静态和动态角色.静态角色存储在数据源中,并映射到用户.相反,动态角色不分配给用户,而是在访问期间确定。\n\nLoopBack 提供以下内置动态角色：\n\n<table>\n  <tbody>\n    <tr>\n      <th>Role object property</th>\n      <th>String value</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Role.OWNER</td>\n      <td>$owner</td>\n      <td>Owner of the object</td>\n    </tr>\n    <tr>\n      <td>Role.AUTHENTICATED</td>\n      <td>$authenticated</td>\n      <td>authenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.UNAUTHENTICATED</td>\n      <td>$unauthenticated</td>\n      <td>Unauthenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.EVERYONE</td>\n      <td>$everyone</td>\n      <td>Everyone</td>\n    </tr>\n  </tbody>\n</table>\n\n静态角色可以通过编码来创建。LoopBack 允许我们自己编写 js 脚本文件，脚本文件可以任意取名，放在`/server/boot/`目录下。当执行`node .`命令时， 会自动执行脚本文件中的代码。我们可以这样来编写`/server/boot/createAdmin.js`代码：\n\n```\nmodule.exports = function(app) {\n  var User = app.models.Reviewer;\n  var Role = app.models.Role;\n  var RoleMapping = app.models.RoleMapping;\n\n  User.create(\n    [{ username: \"admin\", email: \"aa@bb.cc\", password: \"admin\" }],\n    function(err, users) {\n      if (err) throw err;\n\n      console.log(\"Created users:\", users);\n\n      //create the admin role\n      Role.create(\n        {\n          name: \"admin\"\n        },\n        function(err, role) {\n          if (err) throw err;\n\n          console.log(\"Created role:\", role);\n\n          //make RoleMapping\n          role.principals.create(\n            {\n              principalType: RoleMapping.USER,\n              principalId: users[0].id\n            },\n            function(err, principal) {\n              if (err) throw err;\n\n              console.log(\"Created principal:\", principal);\n            }\n          );\n        }\n      );\n    }\n  );\n};\n\n\n```\n\n### 代码解析\n\n- 第 1 行是固定写法。定义一个函数并暴露出去，并传入`app`参数，用来调用 app 的模型。\n- 第 2-4 行分别定义用户、角色和映射三个变量并赋值。\n- 第 6 行到 11 行创建用户。如果创建用户成功，继续创建角色。\n- 第 14 行到 21 行创建角色。如果创建用户成功，继续创建映射。\n- 第 24 行到 32 行创建用户与角色之间的映射关系。\n\n角色创建成功后，我们在 MongoDB 数据库中，可以看到刚刚创建的 3 个文档：\n\n```\n> use cshop\nswitched to db cshop\n> show collections\nReviewer\nRole\nRoleMapping\n> db.Role.find()\n{ \"_id\" : ObjectId(\"5d875ecf98b8840aad726654\"), \"name\" : \"admin\", \"created\" : ISODate(\"2019-09-22T11:45:19.325Z\"), \"modified\" : ISODate(\"2019-09-22T11:45:19.325Z\") }\n```\n\n## 三、角色授权\n\n角色授权还是用`lb acl`命令。这次我们给`admin`角色赋予应用内的最大权限。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： （所有现有模型）\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 全部（匹配所有类型）\n? 选择角色 其他\n? 请输入角色名称： admin\n? 选择要应用的许可权 明确授权访问\n```\n\n授权之后，我们打开`/common/models/coffee-shop.json`文件，可以看到对`admin`角色的授权配置代码：\n\n```\n{\n      \"accessType\": \"*\",\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"admin\",\n      \"permission\": \"ALLOW\"\n    }\n```\n\n在`/common/models/review.json`和`/common/models/review.json`文件中同样可以看到对`admin`角色的授权配置代码。\n\n## 四、接口调试\n\n在项目根目录输入命令`node .`启动应用。根据提示在浏览器地址栏输入`http://localhost:3000/explorer/`，来到接口调试页面。\n\n### 未登录用户操作\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%887.58.43.png)\n\n- 点击 Reviewer，展开 Reviewer 相关的 API 接口。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.01.39.png)\n\n- 点击`get/Reviewers`，出现操作提示界面。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.04.08.png)\n\n- 点击`Try it out!`按钮，显示 401 错误，提示需要授权。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.04.46.png)\n\n### 用 admin 用户登录\n\n- 点击`Post/Reviewers/login`,出现登录操作提示界面。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.11.23.png)\n\n- 输入登录参数：\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.14.37.png)\n\n- 登录成功后返回 admin 的相关信息。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.11.52.png)\n\n- 复制 admin 返回信息中的`id`字符串值，本例中`2F410ZR1bEMJFrTY4LtVPRb6TPzsCPsXOEXpO1u9weD561dx1hkim87AY1fQGlt7`粘贴到窗口页面第一行的`accessToken`中，然后点击`Set Access Token`按钮。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.20.36.png)\n\n- 再次点击`get/Reviewers`，出现操作提示界面后，点击`Try it out!`按钮，不再提示需要授权的信息，成功返回应用中已有的两个用户的信息。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.23.30.png)\n\n### 注销登录\n\n- 点击`Post/Reviewers/logout`,注销登录。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.28.52.png)\n\n- 再次点击`get/Reviewers`，出现操作提示界面后，点击`Try it out!`按钮，再次提示需要授权的信息。\n\n### 权限验证\n\n我们对 admin 这个超级管理员角色的权限进行了初步验证。我们还可以参照这些方法对应用中其他的权限控制进行验证。\n\n在我的文章[《LoopBack3.0 创建 API 接口实战》](https://juejin.im/post/5d856d575188257e5c111867)里，对官方示例`咖啡馆点评项目`中的权限管理进行了配置，按照项目需求实现了权限控制。\n\n- 任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。\n- 任何人都可以注册为用户，然后能够登录或者注销。\n- 登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。\n\n我们都可以在接口调试页面进行验证。\n","source":"_posts/LoopBack3-0自定义角色与授权.md","raw":"---\ntitle: LoopBack3.0自定义角色与授权\ndate: 2019-09-22 17:37:07\ncategory:\n  - 原创\ntags:\n  - loopBack\n  - nodejs\n  - express\n  - RESTful\n---\n\n在我的文章[《LoopBack3.0 创建 API 接口实战》](https://juejin.im/post/5d856d575188257e5c111867)里，对官方示例`咖啡馆点评项目`中的权限管理进行了配置，按照项目需求实现了权限控制。但是，我们在配置权限管理策略时，定义所有的评论者都不能对`CoffeeShop`模型进行增删改查的操作。\n\n<iframe src=\"//player.bilibili.com/player.html?aid=68852902&cid=119328164&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[到 bilibili.com 网站观看全部视频](https://www.bilibili.com/video/av68852902/)\n\n如何对 coffeeShops 的数据进行管理呢？这是我们常说的后台管理，需要一个管理员`admin`的角色来承担。本文继续就这个项目来介绍如何自定义一个角色`admin`,将该角色与用户关联，并赋予该角色超级管理员的权限，可以对包括`CoffeeShop`在内的所有模型进行增删改查的操作。\n\n<!-- more -->\n\n## 一、项目概述\n\n这是官方给出的一个关于咖啡店点评的示例。\n\n咖啡店点评是一个网站，我们可以用来发布咖啡店的评论。有三个数据模型：\n\n- CoffeeShop 咖啡店\n- Review 评论\n- Reviewer 评论者\n\n它们有如下关系：\n\n- CoffeeShop 拥有多个 review\n- CoffeeShop 拥有多个 reviewer\n- review 属于一个 CoffeeShop\n- review 属于一个 reviewer\n- reviewer 拥有多个 review\n\n一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过 ACLs 指定基本规则和权限：\n\n- 任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。\n- 任何人都可以注册为用户，然后能够登录或者注销。\n- 登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。\n\n## 二、创建角色\n\nLoopBack 允许我们定义静态和动态角色.静态角色存储在数据源中,并映射到用户.相反,动态角色不分配给用户,而是在访问期间确定。\n\nLoopBack 提供以下内置动态角色：\n\n<table>\n  <tbody>\n    <tr>\n      <th>Role object property</th>\n      <th>String value</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Role.OWNER</td>\n      <td>$owner</td>\n      <td>Owner of the object</td>\n    </tr>\n    <tr>\n      <td>Role.AUTHENTICATED</td>\n      <td>$authenticated</td>\n      <td>authenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.UNAUTHENTICATED</td>\n      <td>$unauthenticated</td>\n      <td>Unauthenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.EVERYONE</td>\n      <td>$everyone</td>\n      <td>Everyone</td>\n    </tr>\n  </tbody>\n</table>\n\n静态角色可以通过编码来创建。LoopBack 允许我们自己编写 js 脚本文件，脚本文件可以任意取名，放在`/server/boot/`目录下。当执行`node .`命令时， 会自动执行脚本文件中的代码。我们可以这样来编写`/server/boot/createAdmin.js`代码：\n\n```\nmodule.exports = function(app) {\n  var User = app.models.Reviewer;\n  var Role = app.models.Role;\n  var RoleMapping = app.models.RoleMapping;\n\n  User.create(\n    [{ username: \"admin\", email: \"aa@bb.cc\", password: \"admin\" }],\n    function(err, users) {\n      if (err) throw err;\n\n      console.log(\"Created users:\", users);\n\n      //create the admin role\n      Role.create(\n        {\n          name: \"admin\"\n        },\n        function(err, role) {\n          if (err) throw err;\n\n          console.log(\"Created role:\", role);\n\n          //make RoleMapping\n          role.principals.create(\n            {\n              principalType: RoleMapping.USER,\n              principalId: users[0].id\n            },\n            function(err, principal) {\n              if (err) throw err;\n\n              console.log(\"Created principal:\", principal);\n            }\n          );\n        }\n      );\n    }\n  );\n};\n\n\n```\n\n### 代码解析\n\n- 第 1 行是固定写法。定义一个函数并暴露出去，并传入`app`参数，用来调用 app 的模型。\n- 第 2-4 行分别定义用户、角色和映射三个变量并赋值。\n- 第 6 行到 11 行创建用户。如果创建用户成功，继续创建角色。\n- 第 14 行到 21 行创建角色。如果创建用户成功，继续创建映射。\n- 第 24 行到 32 行创建用户与角色之间的映射关系。\n\n角色创建成功后，我们在 MongoDB 数据库中，可以看到刚刚创建的 3 个文档：\n\n```\n> use cshop\nswitched to db cshop\n> show collections\nReviewer\nRole\nRoleMapping\n> db.Role.find()\n{ \"_id\" : ObjectId(\"5d875ecf98b8840aad726654\"), \"name\" : \"admin\", \"created\" : ISODate(\"2019-09-22T11:45:19.325Z\"), \"modified\" : ISODate(\"2019-09-22T11:45:19.325Z\") }\n```\n\n## 三、角色授权\n\n角色授权还是用`lb acl`命令。这次我们给`admin`角色赋予应用内的最大权限。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： （所有现有模型）\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 全部（匹配所有类型）\n? 选择角色 其他\n? 请输入角色名称： admin\n? 选择要应用的许可权 明确授权访问\n```\n\n授权之后，我们打开`/common/models/coffee-shop.json`文件，可以看到对`admin`角色的授权配置代码：\n\n```\n{\n      \"accessType\": \"*\",\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"admin\",\n      \"permission\": \"ALLOW\"\n    }\n```\n\n在`/common/models/review.json`和`/common/models/review.json`文件中同样可以看到对`admin`角色的授权配置代码。\n\n## 四、接口调试\n\n在项目根目录输入命令`node .`启动应用。根据提示在浏览器地址栏输入`http://localhost:3000/explorer/`，来到接口调试页面。\n\n### 未登录用户操作\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%887.58.43.png)\n\n- 点击 Reviewer，展开 Reviewer 相关的 API 接口。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.01.39.png)\n\n- 点击`get/Reviewers`，出现操作提示界面。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.04.08.png)\n\n- 点击`Try it out!`按钮，显示 401 错误，提示需要授权。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.04.46.png)\n\n### 用 admin 用户登录\n\n- 点击`Post/Reviewers/login`,出现登录操作提示界面。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.11.23.png)\n\n- 输入登录参数：\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.14.37.png)\n\n- 登录成功后返回 admin 的相关信息。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.11.52.png)\n\n- 复制 admin 返回信息中的`id`字符串值，本例中`2F410ZR1bEMJFrTY4LtVPRb6TPzsCPsXOEXpO1u9weD561dx1hkim87AY1fQGlt7`粘贴到窗口页面第一行的`accessToken`中，然后点击`Set Access Token`按钮。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.20.36.png)\n\n- 再次点击`get/Reviewers`，出现操作提示界面后，点击`Try it out!`按钮，不再提示需要授权的信息，成功返回应用中已有的两个用户的信息。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.23.30.png)\n\n### 注销登录\n\n- 点击`Post/Reviewers/logout`,注销登录。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.28.52.png)\n\n- 再次点击`get/Reviewers`，出现操作提示界面后，点击`Try it out!`按钮，再次提示需要授权的信息。\n\n### 权限验证\n\n我们对 admin 这个超级管理员角色的权限进行了初步验证。我们还可以参照这些方法对应用中其他的权限控制进行验证。\n\n在我的文章[《LoopBack3.0 创建 API 接口实战》](https://juejin.im/post/5d856d575188257e5c111867)里，对官方示例`咖啡馆点评项目`中的权限管理进行了配置，按照项目需求实现了权限控制。\n\n- 任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。\n- 任何人都可以注册为用户，然后能够登录或者注销。\n- 登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。\n\n我们都可以在接口调试页面进行验证。\n","slug":"LoopBack3-0自定义角色与授权","published":1,"updated":"2019-09-25T12:32:46.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm1m000inw9wkbez792n","content":"<p>在我的文章<a href=\"https://juejin.im/post/5d856d575188257e5c111867\" target=\"_blank\" rel=\"noopener\">《LoopBack3.0 创建 API 接口实战》</a>里，对官方示例<code>咖啡馆点评项目</code>中的权限管理进行了配置，按照项目需求实现了权限控制。但是，我们在配置权限管理策略时，定义所有的评论者都不能对<code>CoffeeShop</code>模型进行增删改查的操作。</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=68852902&cid=119328164&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p><a href=\"https://www.bilibili.com/video/av68852902/\" target=\"_blank\" rel=\"noopener\">到 bilibili.com 网站观看全部视频</a></p>\n<p>如何对 coffeeShops 的数据进行管理呢？这是我们常说的后台管理，需要一个管理员<code>admin</code>的角色来承担。本文继续就这个项目来介绍如何自定义一个角色<code>admin</code>,将该角色与用户关联，并赋予该角色超级管理员的权限，可以对包括<code>CoffeeShop</code>在内的所有模型进行增删改查的操作。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一、项目概述\"><a href=\"#一、项目概述\" class=\"headerlink\" title=\"一、项目概述\"></a>一、项目概述</h2><p>这是官方给出的一个关于咖啡店点评的示例。</p>\n<p>咖啡店点评是一个网站，我们可以用来发布咖啡店的评论。有三个数据模型：</p>\n<ul>\n<li>CoffeeShop 咖啡店</li>\n<li>Review 评论</li>\n<li>Reviewer 评论者</li>\n</ul>\n<p>它们有如下关系：</p>\n<ul>\n<li>CoffeeShop 拥有多个 review</li>\n<li>CoffeeShop 拥有多个 reviewer</li>\n<li>review 属于一个 CoffeeShop</li>\n<li>review 属于一个 reviewer</li>\n<li>reviewer 拥有多个 review</li>\n</ul>\n<p>一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过 ACLs 指定基本规则和权限：</p>\n<ul>\n<li>任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。</li>\n<li>任何人都可以注册为用户，然后能够登录或者注销。</li>\n<li>登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。</li>\n</ul>\n<h2 id=\"二、创建角色\"><a href=\"#二、创建角色\" class=\"headerlink\" title=\"二、创建角色\"></a>二、创建角色</h2><p>LoopBack 允许我们定义静态和动态角色.静态角色存储在数据源中,并映射到用户.相反,动态角色不分配给用户,而是在访问期间确定。</p>\n<p>LoopBack 提供以下内置动态角色：</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Role object property</th>\n      <th>String value</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Role.OWNER</td>\n      <td>$owner</td>\n      <td>Owner of the object</td>\n    </tr>\n    <tr>\n      <td>Role.AUTHENTICATED</td>\n      <td>$authenticated</td>\n      <td>authenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.UNAUTHENTICATED</td>\n      <td>$unauthenticated</td>\n      <td>Unauthenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.EVERYONE</td>\n      <td>$everyone</td>\n      <td>Everyone</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>静态角色可以通过编码来创建。LoopBack 允许我们自己编写 js 脚本文件，脚本文件可以任意取名，放在<code>/server/boot/</code>目录下。当执行<code>node .</code>命令时， 会自动执行脚本文件中的代码。我们可以这样来编写<code>/server/boot/createAdmin.js</code>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(app) &#123;</span><br><span class=\"line\">  var User = app.models.Reviewer;</span><br><span class=\"line\">  var Role = app.models.Role;</span><br><span class=\"line\">  var RoleMapping = app.models.RoleMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">  User.create(</span><br><span class=\"line\">    [&#123; username: &quot;admin&quot;, email: &quot;aa@bb.cc&quot;, password: &quot;admin&quot; &#125;],</span><br><span class=\"line\">    function(err, users) &#123;</span><br><span class=\"line\">      if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">      console.log(&quot;Created users:&quot;, users);</span><br><span class=\"line\"></span><br><span class=\"line\">      //create the admin role</span><br><span class=\"line\">      Role.create(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: &quot;admin&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        function(err, role) &#123;</span><br><span class=\"line\">          if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">          console.log(&quot;Created role:&quot;, role);</span><br><span class=\"line\"></span><br><span class=\"line\">          //make RoleMapping</span><br><span class=\"line\">          role.principals.create(</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              principalType: RoleMapping.USER,</span><br><span class=\"line\">              principalId: users[0].id</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            function(err, principal) &#123;</span><br><span class=\"line\">              if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">              console.log(&quot;Created principal:&quot;, principal);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h3><ul>\n<li>第 1 行是固定写法。定义一个函数并暴露出去，并传入<code>app</code>参数，用来调用 app 的模型。</li>\n<li>第 2-4 行分别定义用户、角色和映射三个变量并赋值。</li>\n<li>第 6 行到 11 行创建用户。如果创建用户成功，继续创建角色。</li>\n<li>第 14 行到 21 行创建角色。如果创建用户成功，继续创建映射。</li>\n<li>第 24 行到 32 行创建用户与角色之间的映射关系。</li>\n</ul>\n<p>角色创建成功后，我们在 MongoDB 数据库中，可以看到刚刚创建的 3 个文档：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use cshop</span><br><span class=\"line\">switched to db cshop</span><br><span class=\"line\">&gt; show collections</span><br><span class=\"line\">Reviewer</span><br><span class=\"line\">Role</span><br><span class=\"line\">RoleMapping</span><br><span class=\"line\">&gt; db.Role.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5d875ecf98b8840aad726654&quot;), &quot;name&quot; : &quot;admin&quot;, &quot;created&quot; : ISODate(&quot;2019-09-22T11:45:19.325Z&quot;), &quot;modified&quot; : ISODate(&quot;2019-09-22T11:45:19.325Z&quot;) &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、角色授权\"><a href=\"#三、角色授权\" class=\"headerlink\" title=\"三、角色授权\"></a>三、角色授权</h2><p>角色授权还是用<code>lb acl</code>命令。这次我们给<code>admin</code>角色赋予应用内的最大权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： （所有现有模型）</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 全部（匹配所有类型）</span><br><span class=\"line\">? 选择角色 其他</span><br><span class=\"line\">? 请输入角色名称： admin</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<p>授权之后，我们打开<code>/common/models/coffee-shop.json</code>文件，可以看到对<code>admin</code>角色的授权配置代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;accessType&quot;: &quot;*&quot;,</span><br><span class=\"line\">      &quot;principalType&quot;: &quot;ROLE&quot;,</span><br><span class=\"line\">      &quot;principalId&quot;: &quot;admin&quot;,</span><br><span class=\"line\">      &quot;permission&quot;: &quot;ALLOW&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>/common/models/review.json</code>和<code>/common/models/review.json</code>文件中同样可以看到对<code>admin</code>角色的授权配置代码。</p>\n<h2 id=\"四、接口调试\"><a href=\"#四、接口调试\" class=\"headerlink\" title=\"四、接口调试\"></a>四、接口调试</h2><p>在项目根目录输入命令<code>node .</code>启动应用。根据提示在浏览器地址栏输入<code>http://localhost:3000/explorer/</code>，来到接口调试页面。</p>\n<h3 id=\"未登录用户操作\"><a href=\"#未登录用户操作\" class=\"headerlink\" title=\"未登录用户操作\"></a>未登录用户操作</h3><p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%887.58.43.png\" alt></p>\n<ul>\n<li>点击 Reviewer，展开 Reviewer 相关的 API 接口。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.01.39.png\" alt></p>\n<ul>\n<li>点击<code>get/Reviewers</code>，出现操作提示界面。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.04.08.png\" alt></p>\n<ul>\n<li>点击<code>Try it out!</code>按钮，显示 401 错误，提示需要授权。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.04.46.png\" alt></p>\n<h3 id=\"用-admin-用户登录\"><a href=\"#用-admin-用户登录\" class=\"headerlink\" title=\"用 admin 用户登录\"></a>用 admin 用户登录</h3><ul>\n<li>点击<code>Post/Reviewers/login</code>,出现登录操作提示界面。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.11.23.png\" alt></p>\n<ul>\n<li>输入登录参数：</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.14.37.png\" alt></p>\n<ul>\n<li>登录成功后返回 admin 的相关信息。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.11.52.png\" alt></p>\n<ul>\n<li>复制 admin 返回信息中的<code>id</code>字符串值，本例中<code>2F410ZR1bEMJFrTY4LtVPRb6TPzsCPsXOEXpO1u9weD561dx1hkim87AY1fQGlt7</code>粘贴到窗口页面第一行的<code>accessToken</code>中，然后点击<code>Set Access Token</code>按钮。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.20.36.png\" alt></p>\n<ul>\n<li>再次点击<code>get/Reviewers</code>，出现操作提示界面后，点击<code>Try it out!</code>按钮，不再提示需要授权的信息，成功返回应用中已有的两个用户的信息。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.23.30.png\" alt></p>\n<h3 id=\"注销登录\"><a href=\"#注销登录\" class=\"headerlink\" title=\"注销登录\"></a>注销登录</h3><ul>\n<li>点击<code>Post/Reviewers/logout</code>,注销登录。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.28.52.png\" alt></p>\n<ul>\n<li>再次点击<code>get/Reviewers</code>，出现操作提示界面后，点击<code>Try it out!</code>按钮，再次提示需要授权的信息。</li>\n</ul>\n<h3 id=\"权限验证\"><a href=\"#权限验证\" class=\"headerlink\" title=\"权限验证\"></a>权限验证</h3><p>我们对 admin 这个超级管理员角色的权限进行了初步验证。我们还可以参照这些方法对应用中其他的权限控制进行验证。</p>\n<p>在我的文章<a href=\"https://juejin.im/post/5d856d575188257e5c111867\" target=\"_blank\" rel=\"noopener\">《LoopBack3.0 创建 API 接口实战》</a>里，对官方示例<code>咖啡馆点评项目</code>中的权限管理进行了配置，按照项目需求实现了权限控制。</p>\n<ul>\n<li>任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。</li>\n<li>任何人都可以注册为用户，然后能够登录或者注销。</li>\n<li>登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。</li>\n</ul>\n<p>我们都可以在接口调试页面进行验证。</p>\n","site":{"data":{}},"excerpt":"<p>在我的文章<a href=\"https://juejin.im/post/5d856d575188257e5c111867\" target=\"_blank\" rel=\"noopener\">《LoopBack3.0 创建 API 接口实战》</a>里，对官方示例<code>咖啡馆点评项目</code>中的权限管理进行了配置，按照项目需求实现了权限控制。但是，我们在配置权限管理策略时，定义所有的评论者都不能对<code>CoffeeShop</code>模型进行增删改查的操作。</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=68852902&cid=119328164&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p><a href=\"https://www.bilibili.com/video/av68852902/\" target=\"_blank\" rel=\"noopener\">到 bilibili.com 网站观看全部视频</a></p>\n<p>如何对 coffeeShops 的数据进行管理呢？这是我们常说的后台管理，需要一个管理员<code>admin</code>的角色来承担。本文继续就这个项目来介绍如何自定义一个角色<code>admin</code>,将该角色与用户关联，并赋予该角色超级管理员的权限，可以对包括<code>CoffeeShop</code>在内的所有模型进行增删改查的操作。</p>","more":"<h2 id=\"一、项目概述\"><a href=\"#一、项目概述\" class=\"headerlink\" title=\"一、项目概述\"></a>一、项目概述</h2><p>这是官方给出的一个关于咖啡店点评的示例。</p>\n<p>咖啡店点评是一个网站，我们可以用来发布咖啡店的评论。有三个数据模型：</p>\n<ul>\n<li>CoffeeShop 咖啡店</li>\n<li>Review 评论</li>\n<li>Reviewer 评论者</li>\n</ul>\n<p>它们有如下关系：</p>\n<ul>\n<li>CoffeeShop 拥有多个 review</li>\n<li>CoffeeShop 拥有多个 reviewer</li>\n<li>review 属于一个 CoffeeShop</li>\n<li>review 属于一个 reviewer</li>\n<li>reviewer 拥有多个 review</li>\n</ul>\n<p>一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过 ACLs 指定基本规则和权限：</p>\n<ul>\n<li>任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。</li>\n<li>任何人都可以注册为用户，然后能够登录或者注销。</li>\n<li>登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。</li>\n</ul>\n<h2 id=\"二、创建角色\"><a href=\"#二、创建角色\" class=\"headerlink\" title=\"二、创建角色\"></a>二、创建角色</h2><p>LoopBack 允许我们定义静态和动态角色.静态角色存储在数据源中,并映射到用户.相反,动态角色不分配给用户,而是在访问期间确定。</p>\n<p>LoopBack 提供以下内置动态角色：</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Role object property</th>\n      <th>String value</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Role.OWNER</td>\n      <td>$owner</td>\n      <td>Owner of the object</td>\n    </tr>\n    <tr>\n      <td>Role.AUTHENTICATED</td>\n      <td>$authenticated</td>\n      <td>authenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.UNAUTHENTICATED</td>\n      <td>$unauthenticated</td>\n      <td>Unauthenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.EVERYONE</td>\n      <td>$everyone</td>\n      <td>Everyone</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>静态角色可以通过编码来创建。LoopBack 允许我们自己编写 js 脚本文件，脚本文件可以任意取名，放在<code>/server/boot/</code>目录下。当执行<code>node .</code>命令时， 会自动执行脚本文件中的代码。我们可以这样来编写<code>/server/boot/createAdmin.js</code>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(app) &#123;</span><br><span class=\"line\">  var User = app.models.Reviewer;</span><br><span class=\"line\">  var Role = app.models.Role;</span><br><span class=\"line\">  var RoleMapping = app.models.RoleMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">  User.create(</span><br><span class=\"line\">    [&#123; username: &quot;admin&quot;, email: &quot;aa@bb.cc&quot;, password: &quot;admin&quot; &#125;],</span><br><span class=\"line\">    function(err, users) &#123;</span><br><span class=\"line\">      if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">      console.log(&quot;Created users:&quot;, users);</span><br><span class=\"line\"></span><br><span class=\"line\">      //create the admin role</span><br><span class=\"line\">      Role.create(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: &quot;admin&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        function(err, role) &#123;</span><br><span class=\"line\">          if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">          console.log(&quot;Created role:&quot;, role);</span><br><span class=\"line\"></span><br><span class=\"line\">          //make RoleMapping</span><br><span class=\"line\">          role.principals.create(</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              principalType: RoleMapping.USER,</span><br><span class=\"line\">              principalId: users[0].id</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            function(err, principal) &#123;</span><br><span class=\"line\">              if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">              console.log(&quot;Created principal:&quot;, principal);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h3><ul>\n<li>第 1 行是固定写法。定义一个函数并暴露出去，并传入<code>app</code>参数，用来调用 app 的模型。</li>\n<li>第 2-4 行分别定义用户、角色和映射三个变量并赋值。</li>\n<li>第 6 行到 11 行创建用户。如果创建用户成功，继续创建角色。</li>\n<li>第 14 行到 21 行创建角色。如果创建用户成功，继续创建映射。</li>\n<li>第 24 行到 32 行创建用户与角色之间的映射关系。</li>\n</ul>\n<p>角色创建成功后，我们在 MongoDB 数据库中，可以看到刚刚创建的 3 个文档：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use cshop</span><br><span class=\"line\">switched to db cshop</span><br><span class=\"line\">&gt; show collections</span><br><span class=\"line\">Reviewer</span><br><span class=\"line\">Role</span><br><span class=\"line\">RoleMapping</span><br><span class=\"line\">&gt; db.Role.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5d875ecf98b8840aad726654&quot;), &quot;name&quot; : &quot;admin&quot;, &quot;created&quot; : ISODate(&quot;2019-09-22T11:45:19.325Z&quot;), &quot;modified&quot; : ISODate(&quot;2019-09-22T11:45:19.325Z&quot;) &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、角色授权\"><a href=\"#三、角色授权\" class=\"headerlink\" title=\"三、角色授权\"></a>三、角色授权</h2><p>角色授权还是用<code>lb acl</code>命令。这次我们给<code>admin</code>角色赋予应用内的最大权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： （所有现有模型）</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 全部（匹配所有类型）</span><br><span class=\"line\">? 选择角色 其他</span><br><span class=\"line\">? 请输入角色名称： admin</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<p>授权之后，我们打开<code>/common/models/coffee-shop.json</code>文件，可以看到对<code>admin</code>角色的授权配置代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;accessType&quot;: &quot;*&quot;,</span><br><span class=\"line\">      &quot;principalType&quot;: &quot;ROLE&quot;,</span><br><span class=\"line\">      &quot;principalId&quot;: &quot;admin&quot;,</span><br><span class=\"line\">      &quot;permission&quot;: &quot;ALLOW&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>/common/models/review.json</code>和<code>/common/models/review.json</code>文件中同样可以看到对<code>admin</code>角色的授权配置代码。</p>\n<h2 id=\"四、接口调试\"><a href=\"#四、接口调试\" class=\"headerlink\" title=\"四、接口调试\"></a>四、接口调试</h2><p>在项目根目录输入命令<code>node .</code>启动应用。根据提示在浏览器地址栏输入<code>http://localhost:3000/explorer/</code>，来到接口调试页面。</p>\n<h3 id=\"未登录用户操作\"><a href=\"#未登录用户操作\" class=\"headerlink\" title=\"未登录用户操作\"></a>未登录用户操作</h3><p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%887.58.43.png\" alt></p>\n<ul>\n<li>点击 Reviewer，展开 Reviewer 相关的 API 接口。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.01.39.png\" alt></p>\n<ul>\n<li>点击<code>get/Reviewers</code>，出现操作提示界面。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.04.08.png\" alt></p>\n<ul>\n<li>点击<code>Try it out!</code>按钮，显示 401 错误，提示需要授权。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.04.46.png\" alt></p>\n<h3 id=\"用-admin-用户登录\"><a href=\"#用-admin-用户登录\" class=\"headerlink\" title=\"用 admin 用户登录\"></a>用 admin 用户登录</h3><ul>\n<li>点击<code>Post/Reviewers/login</code>,出现登录操作提示界面。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.11.23.png\" alt></p>\n<ul>\n<li>输入登录参数：</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.14.37.png\" alt></p>\n<ul>\n<li>登录成功后返回 admin 的相关信息。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.11.52.png\" alt></p>\n<ul>\n<li>复制 admin 返回信息中的<code>id</code>字符串值，本例中<code>2F410ZR1bEMJFrTY4LtVPRb6TPzsCPsXOEXpO1u9weD561dx1hkim87AY1fQGlt7</code>粘贴到窗口页面第一行的<code>accessToken</code>中，然后点击<code>Set Access Token</code>按钮。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.20.36.png\" alt></p>\n<ul>\n<li>再次点击<code>get/Reviewers</code>，出现操作提示界面后，点击<code>Try it out!</code>按钮，不再提示需要授权的信息，成功返回应用中已有的两个用户的信息。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.23.30.png\" alt></p>\n<h3 id=\"注销登录\"><a href=\"#注销登录\" class=\"headerlink\" title=\"注销登录\"></a>注销登录</h3><ul>\n<li>点击<code>Post/Reviewers/logout</code>,注销登录。</li>\n</ul>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-22%E4%B8%8B%E5%8D%888.28.52.png\" alt></p>\n<ul>\n<li>再次点击<code>get/Reviewers</code>，出现操作提示界面后，点击<code>Try it out!</code>按钮，再次提示需要授权的信息。</li>\n</ul>\n<h3 id=\"权限验证\"><a href=\"#权限验证\" class=\"headerlink\" title=\"权限验证\"></a>权限验证</h3><p>我们对 admin 这个超级管理员角色的权限进行了初步验证。我们还可以参照这些方法对应用中其他的权限控制进行验证。</p>\n<p>在我的文章<a href=\"https://juejin.im/post/5d856d575188257e5c111867\" target=\"_blank\" rel=\"noopener\">《LoopBack3.0 创建 API 接口实战》</a>里，对官方示例<code>咖啡馆点评项目</code>中的权限管理进行了配置，按照项目需求实现了权限控制。</p>\n<ul>\n<li>任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。</li>\n<li>任何人都可以注册为用户，然后能够登录或者注销。</li>\n<li>登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。</li>\n</ul>\n<p>我们都可以在接口调试页面进行验证。</p>"},{"title":"loopback3 快速创建标准的RESTful数据访问接口","date":"2019-08-11T06:29:43.000Z","_content":"\n## 项目介绍\n\n这是一个对 OKR 工作法进行辅助管理的全栈项目。项目实行前后端分离，后端用 loopBack3 框架开发 API 数据访问接口，前端分别用 Vue 全家桶、react 全家桶、un-app 框架、react-native 框架和 flutter 框架来实现移动端的跨平台应用。 涉及到当前前端开发的主流技术。本文介绍后端开发的全过程。\n\n<!--more-->\n\n## 设计思想\n\n创建 OKR 管理 APP 需要搭建后台数据服务器，采用 RESTful 标准接口，利用 loopBack3 框架搭建。\n\n### 为什么是 LoopBack？\n\nLoopBack 框架是由一组 Node.js 的模块构成的。你可以单独使用这些模块或把它们组合在一起使用。 应用通过 LoopBack model API 可以使用以下三种方式访问数据。\n\n- 将模型作为一个标准的 Node 对象使用\n- 通过 HTTP REST API 调用\n- 通过封装好的 API SDK，包括 iOS, Android 和 Angular\n\n应用程序通过 LoopBack model API 用以上三种方式查询数据，储存数据，上传文件，发送 email, 推送消息，注册/登陆用户等远程或本地的服务。用户也可以通过 Strong Remoting 将后端的 API 通过 REST, WebSocket(或其他传输协议)供客户端调用。\n\n### OKR 是什么？\n\nOKR（Objectives and Key Results）即目标与关键成果法，是一套明确和跟踪目标及其完成情况的管理工具和方法，由英特尔公司发明。\n\nOKR 的主要目标是明确公司和团队的“目标”以及明确每个目标达成的可衡量的“关键结果”。一本关于 OKR 的书将 OKR 定义为“一个重要的思考框架与不断发展的学科，旨在确保员工共同工作，并集中精力做出可衡量的贡献。 ”OKR 可以在整个组织中共享，这样团队就可以在整个组织中明确目标，帮助协调和集中精力。\n\n### 需求定义\n\n#### OKR 管理功能\n\n- 用户需要注册登录才能进行操作。\n- 用户注册信息：用户名、密码、email、所属部门。\n- 角色：所有用户、任何未经认证的用户、任何已认证的用户、拥有该对象的用户、系统管理员。\n- 系统根据不同角色分配相应的权限（静态和动态）。\n- 系统管理员负责设置对用户和数据字典的管理。\n- 任何已认证的用户可以查看所有已经创建的 OKR 列表和详情并可以发表评论。\n- 拥有该对象的用户可以录入和管理本人的 OKR。\n- OKR 基本信息：OKR 标题（一）、目标（多）、关键结果（多）。\n- OKR 辅助信息：开始日期、结束日期、部门、类型、责任人、评论（多）。\n\n#### 基础数据\n\n系统管理员可以对基础数据进行增删改查。基础数据包括：\n\n- 公司基本信息\n- 部门基本信息\n- OKR 类型\n\n### 数据模型\n\n根据需求需要建立 Okr、Object（目标）、KeyResult(关键结果)、Comment（评论）、Company（公司）、Department（部门）、（okrUser）用户等 7 个数据模型。其中 okrUser 继承自 lb3 默认的 user 模型。数据模型需要我们通过 lb 生成器来创建。\n\n### 模型关系\n\n- 一个公司有多个部门，一个部门属于一个公司。\n- 一个部门有多个用户，一个 OKR 用户属于一个部门。\n- 一个用户有多个 OKR，一个 OKR 属于一个 OKR 用户。\n- 一个 OKR 有多个目标。\n- 一个目标有多个关键结果。\n- 一个 OKR 有多个评论。\n- 一个评论属于一个 OKR 用户。\n\n## 实现步骤\n\n### 创建应用\n\n#### 应用的相关信息\n\n- 项目名称: `lb-okr-api`\n\n```\n$ lb\n? 您的应用程序的名称是什么？ lb-okr-api\n? 输入目录名称以包含项目： lb-okr-api\n   create lb-okr-api/\n     info 将工作目录更改为 lb-okr-api\n\n? 您想要使用哪个版本的 LoopBack？ 3.x (Active Long Term Support)\n? 您想要什么种类的应用程序？ api-server (使用本地用户认证的 LoopBack API 服务器)\n正在生成 .yo-rc.json\n\nI'm all done. Running npm install for you to install the required dependencies. If this fails, try running the command yourself.\n\n后续步骤：\n\n  将目录更改为您的应用程序\n    $ cd lb-okr-api\n\n  在应用程序中创建模型\n    $ lb model\n\n  运行应用程序\n    $ node .\n```\n\n### 添加数据库连接\n\nlb 可以连接多种常用的数据库，包括关系型数据库 MySQL 和非关系型数据库 MongoDB 等。\n\n```\n$ lb datasource\n? 输入数据源名称： okrdb\n? 为 okrdb 选择连接器： MongoDB （StrongLoop 支持）\n? Connection String url to override other settings (eg: mongodb://username:password@hostname:por\nt/database):\n? host: localhost\n? port: 27017\n? user:\n? password: [hidden]\n? database: lb_okr\n? 安装 loopback-connector-mongodb@^4.0.0 Yes\n```\n\n在`lb-okr-api/server/datasources.json`文件中自动添加了如下代码：\n\n```\n{\n  \"db\": {\n    \"name\": \"db\",\n    \"connector\": \"memory\"\n  },\n  \"okrdb\": {\n    \"host\": \"localhost\",\n    \"port\": 27017,\n    \"url\": \"\",\n    \"database\": \"lb_okr\",\n    \"password\": \"\",\n    \"name\": \"okrdb\",\n    \"user\": \"\",\n    \"connector\": \"mongodb\"\n  }\n}\n```\n\n删除该文件中`db`键值对，再将`okrdb`改成`db`。完成后是下面的样子：\n\n```\n{\n  \"db\": {\n    \"host\": \"localhost\",\n    \"port\": 27017,\n    \"url\": \"\",\n    \"database\": \"lb_okr\",\n    \"password\": \"\",\n    \"name\": \"okrdb\",\n    \"user\": \"\",\n    \"connector\": \"mongodb\"\n  }\n}\n```\n\n### 添加模型（models）\n\n```\n$ lb model\n? 请输入模型名称： okr\n? 选择要向其附加 okr 的数据源： db (mongodb)\n? 选择模型的基类 PersistedModel\n? 通过 REST API 公开 okr？ Yes\n? 定制复数形式（用于构建 REST URL）：\n? 公共模型或仅服务器？ 公共\n现在添加一些 okr 属性。\n\n在完成时输入空的属性名称。\n? 属性名称： name\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： startDate\n? 属性类型： date\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： endDate\n? 属性类型： date\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： department\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： category\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： people\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称：\n\n重复此操作，创建所有的数据模型。\n```\n\n#### 模型信息\n\n- Name: `okr`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `name`\n      - String\n      - required\n    - `startDate`\n      - Date\n      - required\n    - `endDate`\n      - Date\n      - required\n    - `department`\n      - String\n      - required\n    - `category`\n      - String\n      - required\n    - `people`\n      - String\n      - required\n\n- Name: `okrObject`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `content`\n      - String\n      - required\n\n- Name: `keyResult`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `content`\n      - String\n      - required\n\n- Name: `comment`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n\n    - `content`\n      - String\n      - required\n    - `people`\n      - String\n      - required\n\n- Name: `company`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `name`\n      - String\n      - required\n\n- Name: `department`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `name`\n      - String\n      - required\n\n- Name: `category`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `name`\n      - String\n      - required\n\n- Name: `okrUser`\n  - Datasource: `db`\n  - Base class: `User`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n\n### 创建模型关系\n\n```\n$ lb relation\n? 选择从中创建关系的模型： okr\n? 关系类型： has many\n? 选择与之创建关系的模型： okrObject\n? 输入关系的属性名称： okrObjects\n? （可选）输入定制外键：\n? 需要直通模型？ No\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\n```\n$ lb relation\n? 选择从中创建关系的模型： okrObject\n? 关系类型： belongs to\n? 选择与之创建关系的模型： okr\n? 输入关系的属性名称： okr\n? （可选）输入定制外键：\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\n#### 定义模型关系\n\n- okr\n\n```\n\"relations\": {\n    \"okrObjects\": {\n      \"type\": \"hasMany\",\n      \"model\": \"okrObject\",\n      \"foreignKey\": \"\"\n    },\n    \"keyResults\": {\n      \"type\": \"hasMany\",\n      \"model\": \"keyResult\",\n      \"foreignKey\": \"\"\n    },\n    \"comments\": {\n      \"type\": \"hasMany\",\n      \"model\": \"comment\",\n      \"foreignKey\": \"\"\n    },\n    \"okr-category\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"category\",\n      \"foreignKey\": \"\"\n    }\n  },\n```\n\n- okrObject\n\n```\n\"relations\": {\n    \"okr\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"okr\",\n      \"foreignKey\": \"\"\n    },\n    \"keyResults\": {\n      \"type\": \"hasMany\",\n      \"model\": \"keyResult\",\n      \"foreignKey\": \"\"\n    }\n  },\n```\n\n- keyResult\n\n```\n\"relations\": {\n    \"okrObject\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"okrObject\",\n      \"foreignKey\": \"\"\n    },\n    \"okr\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"okr\",\n      \"foreignKey\": \"\"\n    }\n  },\n```\n\n其他模型关系定义参见源代码。\n\n### 权限管理\n\n#### 用户角色\n\nOKR-API 包含以下用户角色:\n\n- `所有用户`\n- `任何未经认证的用户`\n- `任何已认证的用户`\n- `拥有该对象的用户`\n- `系统管理员`\n\n每个用户的权限取决于他的角色。登录用户需要进行 ACL（访问控制列表）认证。认证成功后，接口会返回一个 token 作为凭据。\n\n在用户角色中，`系统管理员`属于`其他`类型的角色，lb 不会自动提供，需要手工创建。创建自定义角色的方法如下：\n\n在`/server/boot`启动文件夹中，添加一个 js 文件。在 js 文件中添加如下代码。该代码执行一次后会添加首个 OKR 用户和自定义角色 admin，并把这个角色分配给首个 OKR 用户。\n\n在 okrdb 数据库中，可以看到有三个表（collections），分别对应 okr 用户、角色、和角色分配模型。我们可以看到模型数据被持久化到了数据库中。所以，执行一次该代码后，就把这个 js 文件删除。\n\n```\nmodule.exports = function(app) {\n  var User = app.models.Okruser;\n  var Role = app.models.Role;\n  var RoleMapping = app.models.RoleMapping;\n\n  User.create([\n    {username: 'admin', email: 'aa@bb.cc', password: 'admin'}\n  ], function(err, users) {\n    if (err) throw err;\n\n    console.log('Created users:', users);\n\n    //create the admin role\n    Role.create({\n      name: 'admin'\n    }, function(err, role) {\n      if (err) throw err;\n\n      console.log('Created role:', role);\n\n      //make admin\n      role.principals.create({\n        principalType: RoleMapping.USER,\n        principalId: users[0].id\n      }, function(err, principal) {\n        if (err) throw err;\n\n        console.log('Created principal:', principal);\n      });\n    });\n  });\n};\n```\n\n#### 对系统管理员进行授权\n\n我们在上述代码中创建了一个系统管理员的用户。可以用这个邮箱和密码进行登录，登录验证通过后可以得到一个 token 的返回。\n\n自定义了角色后，需要给角色授权。假设授予系统管理员对所有模型的所有接口进行操作，可以这样做：\n\n```\n$ lb acl\n? 选择要应用 ACL 条目的模型： （所有现有模型）\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 全部（匹配所有类型）\n? 选择角色 其他\n? 请输入角色名称： admin\n? 选择要应用的许可权 明确授权访问\n```\n\n### 创建 ACL （访问控制列表）\n\n通过 lb 生成器，首先对所有模型、所有操作、所有用户设置拒绝访问权限。\n\n```\n$ lb acl\n? 选择要应用 ACL 条目的模型： （所有现有模型）\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 全部（匹配所有类型）\n? 选择角色 所有用户\n? 选择要应用的许可权 明确拒绝访问\n```\n\n接下来根据角色开放应有的模型和操作访问限制。\n\n#### ACL 策略\n\n- 授权 `系统管理员` 对所有模型进行全权操作\n\n  - 选择要应用 ACL 条目的模型： （所有现有模型）\n  - 选择 ACL 作用域： 所有方法和属性\n  - 选择访问类型： 全部（匹配所有类型）\n  - 选择角色 其他\n  - 请输入角色名称： admin\n  - 选择要应用的许可权 明确授权访问\n\n- 授权 `所有用户` 对 `okrUser` 模型进行注册操作。\n- 授权 `任何已认证的用户` 对 `okrUser` 模型进行登录、注销操作。\n- 授权 `拥有该对象的用户` 对 `okrUser` 模型进行修改密码、查询自身用户信息操作。\n- 授权 `任何已认证的用户` 对 `okr、okrObject、keyResult、comment` 模型进行读操作。\n- 授权 `拥有该对象的用户` 对 `okr、okrObject、keyResult、comment` 模型进行写操作。\n\n### 测试 API 接口\n\n启动服务 (`node .`) 并在浏览器打开网址 [`localhost:3000`](http://localhost:3000) 可以测试已经创建的 OKR_API。\n","source":"_posts/OKR-API-的设计与实现.md","raw":"---\ntitle: loopback3 快速创建标准的RESTful数据访问接口\ndate: 2019-08-11 14:29:43\ncategory:\n  - 原创\ntags:\n  - loopBack\n  - nodejs\n  - express\n  - RESTful\n---\n\n## 项目介绍\n\n这是一个对 OKR 工作法进行辅助管理的全栈项目。项目实行前后端分离，后端用 loopBack3 框架开发 API 数据访问接口，前端分别用 Vue 全家桶、react 全家桶、un-app 框架、react-native 框架和 flutter 框架来实现移动端的跨平台应用。 涉及到当前前端开发的主流技术。本文介绍后端开发的全过程。\n\n<!--more-->\n\n## 设计思想\n\n创建 OKR 管理 APP 需要搭建后台数据服务器，采用 RESTful 标准接口，利用 loopBack3 框架搭建。\n\n### 为什么是 LoopBack？\n\nLoopBack 框架是由一组 Node.js 的模块构成的。你可以单独使用这些模块或把它们组合在一起使用。 应用通过 LoopBack model API 可以使用以下三种方式访问数据。\n\n- 将模型作为一个标准的 Node 对象使用\n- 通过 HTTP REST API 调用\n- 通过封装好的 API SDK，包括 iOS, Android 和 Angular\n\n应用程序通过 LoopBack model API 用以上三种方式查询数据，储存数据，上传文件，发送 email, 推送消息，注册/登陆用户等远程或本地的服务。用户也可以通过 Strong Remoting 将后端的 API 通过 REST, WebSocket(或其他传输协议)供客户端调用。\n\n### OKR 是什么？\n\nOKR（Objectives and Key Results）即目标与关键成果法，是一套明确和跟踪目标及其完成情况的管理工具和方法，由英特尔公司发明。\n\nOKR 的主要目标是明确公司和团队的“目标”以及明确每个目标达成的可衡量的“关键结果”。一本关于 OKR 的书将 OKR 定义为“一个重要的思考框架与不断发展的学科，旨在确保员工共同工作，并集中精力做出可衡量的贡献。 ”OKR 可以在整个组织中共享，这样团队就可以在整个组织中明确目标，帮助协调和集中精力。\n\n### 需求定义\n\n#### OKR 管理功能\n\n- 用户需要注册登录才能进行操作。\n- 用户注册信息：用户名、密码、email、所属部门。\n- 角色：所有用户、任何未经认证的用户、任何已认证的用户、拥有该对象的用户、系统管理员。\n- 系统根据不同角色分配相应的权限（静态和动态）。\n- 系统管理员负责设置对用户和数据字典的管理。\n- 任何已认证的用户可以查看所有已经创建的 OKR 列表和详情并可以发表评论。\n- 拥有该对象的用户可以录入和管理本人的 OKR。\n- OKR 基本信息：OKR 标题（一）、目标（多）、关键结果（多）。\n- OKR 辅助信息：开始日期、结束日期、部门、类型、责任人、评论（多）。\n\n#### 基础数据\n\n系统管理员可以对基础数据进行增删改查。基础数据包括：\n\n- 公司基本信息\n- 部门基本信息\n- OKR 类型\n\n### 数据模型\n\n根据需求需要建立 Okr、Object（目标）、KeyResult(关键结果)、Comment（评论）、Company（公司）、Department（部门）、（okrUser）用户等 7 个数据模型。其中 okrUser 继承自 lb3 默认的 user 模型。数据模型需要我们通过 lb 生成器来创建。\n\n### 模型关系\n\n- 一个公司有多个部门，一个部门属于一个公司。\n- 一个部门有多个用户，一个 OKR 用户属于一个部门。\n- 一个用户有多个 OKR，一个 OKR 属于一个 OKR 用户。\n- 一个 OKR 有多个目标。\n- 一个目标有多个关键结果。\n- 一个 OKR 有多个评论。\n- 一个评论属于一个 OKR 用户。\n\n## 实现步骤\n\n### 创建应用\n\n#### 应用的相关信息\n\n- 项目名称: `lb-okr-api`\n\n```\n$ lb\n? 您的应用程序的名称是什么？ lb-okr-api\n? 输入目录名称以包含项目： lb-okr-api\n   create lb-okr-api/\n     info 将工作目录更改为 lb-okr-api\n\n? 您想要使用哪个版本的 LoopBack？ 3.x (Active Long Term Support)\n? 您想要什么种类的应用程序？ api-server (使用本地用户认证的 LoopBack API 服务器)\n正在生成 .yo-rc.json\n\nI'm all done. Running npm install for you to install the required dependencies. If this fails, try running the command yourself.\n\n后续步骤：\n\n  将目录更改为您的应用程序\n    $ cd lb-okr-api\n\n  在应用程序中创建模型\n    $ lb model\n\n  运行应用程序\n    $ node .\n```\n\n### 添加数据库连接\n\nlb 可以连接多种常用的数据库，包括关系型数据库 MySQL 和非关系型数据库 MongoDB 等。\n\n```\n$ lb datasource\n? 输入数据源名称： okrdb\n? 为 okrdb 选择连接器： MongoDB （StrongLoop 支持）\n? Connection String url to override other settings (eg: mongodb://username:password@hostname:por\nt/database):\n? host: localhost\n? port: 27017\n? user:\n? password: [hidden]\n? database: lb_okr\n? 安装 loopback-connector-mongodb@^4.0.0 Yes\n```\n\n在`lb-okr-api/server/datasources.json`文件中自动添加了如下代码：\n\n```\n{\n  \"db\": {\n    \"name\": \"db\",\n    \"connector\": \"memory\"\n  },\n  \"okrdb\": {\n    \"host\": \"localhost\",\n    \"port\": 27017,\n    \"url\": \"\",\n    \"database\": \"lb_okr\",\n    \"password\": \"\",\n    \"name\": \"okrdb\",\n    \"user\": \"\",\n    \"connector\": \"mongodb\"\n  }\n}\n```\n\n删除该文件中`db`键值对，再将`okrdb`改成`db`。完成后是下面的样子：\n\n```\n{\n  \"db\": {\n    \"host\": \"localhost\",\n    \"port\": 27017,\n    \"url\": \"\",\n    \"database\": \"lb_okr\",\n    \"password\": \"\",\n    \"name\": \"okrdb\",\n    \"user\": \"\",\n    \"connector\": \"mongodb\"\n  }\n}\n```\n\n### 添加模型（models）\n\n```\n$ lb model\n? 请输入模型名称： okr\n? 选择要向其附加 okr 的数据源： db (mongodb)\n? 选择模型的基类 PersistedModel\n? 通过 REST API 公开 okr？ Yes\n? 定制复数形式（用于构建 REST URL）：\n? 公共模型或仅服务器？ 公共\n现在添加一些 okr 属性。\n\n在完成时输入空的属性名称。\n? 属性名称： name\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： startDate\n? 属性类型： date\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： endDate\n? 属性类型： date\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： department\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： category\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称： people\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 okr 属性。\n在完成时输入空的属性名称。\n? 属性名称：\n\n重复此操作，创建所有的数据模型。\n```\n\n#### 模型信息\n\n- Name: `okr`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `name`\n      - String\n      - required\n    - `startDate`\n      - Date\n      - required\n    - `endDate`\n      - Date\n      - required\n    - `department`\n      - String\n      - required\n    - `category`\n      - String\n      - required\n    - `people`\n      - String\n      - required\n\n- Name: `okrObject`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `content`\n      - String\n      - required\n\n- Name: `keyResult`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `content`\n      - String\n      - required\n\n- Name: `comment`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n\n    - `content`\n      - String\n      - required\n    - `people`\n      - String\n      - required\n\n- Name: `company`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `name`\n      - String\n      - required\n\n- Name: `department`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `name`\n      - String\n      - required\n\n- Name: `category`\n\n  - Datasource: `db`\n  - Base class: `PersistedModel`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n  - Properties\n    - `name`\n      - String\n      - required\n\n- Name: `okrUser`\n  - Datasource: `db`\n  - Base class: `User`\n  - Expose via REST: `Yes`\n  - Custom plural form: _Leave blank_\n\n### 创建模型关系\n\n```\n$ lb relation\n? 选择从中创建关系的模型： okr\n? 关系类型： has many\n? 选择与之创建关系的模型： okrObject\n? 输入关系的属性名称： okrObjects\n? （可选）输入定制外键：\n? 需要直通模型？ No\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\n```\n$ lb relation\n? 选择从中创建关系的模型： okrObject\n? 关系类型： belongs to\n? 选择与之创建关系的模型： okr\n? 输入关系的属性名称： okr\n? （可选）输入定制外键：\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\n#### 定义模型关系\n\n- okr\n\n```\n\"relations\": {\n    \"okrObjects\": {\n      \"type\": \"hasMany\",\n      \"model\": \"okrObject\",\n      \"foreignKey\": \"\"\n    },\n    \"keyResults\": {\n      \"type\": \"hasMany\",\n      \"model\": \"keyResult\",\n      \"foreignKey\": \"\"\n    },\n    \"comments\": {\n      \"type\": \"hasMany\",\n      \"model\": \"comment\",\n      \"foreignKey\": \"\"\n    },\n    \"okr-category\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"category\",\n      \"foreignKey\": \"\"\n    }\n  },\n```\n\n- okrObject\n\n```\n\"relations\": {\n    \"okr\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"okr\",\n      \"foreignKey\": \"\"\n    },\n    \"keyResults\": {\n      \"type\": \"hasMany\",\n      \"model\": \"keyResult\",\n      \"foreignKey\": \"\"\n    }\n  },\n```\n\n- keyResult\n\n```\n\"relations\": {\n    \"okrObject\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"okrObject\",\n      \"foreignKey\": \"\"\n    },\n    \"okr\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"okr\",\n      \"foreignKey\": \"\"\n    }\n  },\n```\n\n其他模型关系定义参见源代码。\n\n### 权限管理\n\n#### 用户角色\n\nOKR-API 包含以下用户角色:\n\n- `所有用户`\n- `任何未经认证的用户`\n- `任何已认证的用户`\n- `拥有该对象的用户`\n- `系统管理员`\n\n每个用户的权限取决于他的角色。登录用户需要进行 ACL（访问控制列表）认证。认证成功后，接口会返回一个 token 作为凭据。\n\n在用户角色中，`系统管理员`属于`其他`类型的角色，lb 不会自动提供，需要手工创建。创建自定义角色的方法如下：\n\n在`/server/boot`启动文件夹中，添加一个 js 文件。在 js 文件中添加如下代码。该代码执行一次后会添加首个 OKR 用户和自定义角色 admin，并把这个角色分配给首个 OKR 用户。\n\n在 okrdb 数据库中，可以看到有三个表（collections），分别对应 okr 用户、角色、和角色分配模型。我们可以看到模型数据被持久化到了数据库中。所以，执行一次该代码后，就把这个 js 文件删除。\n\n```\nmodule.exports = function(app) {\n  var User = app.models.Okruser;\n  var Role = app.models.Role;\n  var RoleMapping = app.models.RoleMapping;\n\n  User.create([\n    {username: 'admin', email: 'aa@bb.cc', password: 'admin'}\n  ], function(err, users) {\n    if (err) throw err;\n\n    console.log('Created users:', users);\n\n    //create the admin role\n    Role.create({\n      name: 'admin'\n    }, function(err, role) {\n      if (err) throw err;\n\n      console.log('Created role:', role);\n\n      //make admin\n      role.principals.create({\n        principalType: RoleMapping.USER,\n        principalId: users[0].id\n      }, function(err, principal) {\n        if (err) throw err;\n\n        console.log('Created principal:', principal);\n      });\n    });\n  });\n};\n```\n\n#### 对系统管理员进行授权\n\n我们在上述代码中创建了一个系统管理员的用户。可以用这个邮箱和密码进行登录，登录验证通过后可以得到一个 token 的返回。\n\n自定义了角色后，需要给角色授权。假设授予系统管理员对所有模型的所有接口进行操作，可以这样做：\n\n```\n$ lb acl\n? 选择要应用 ACL 条目的模型： （所有现有模型）\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 全部（匹配所有类型）\n? 选择角色 其他\n? 请输入角色名称： admin\n? 选择要应用的许可权 明确授权访问\n```\n\n### 创建 ACL （访问控制列表）\n\n通过 lb 生成器，首先对所有模型、所有操作、所有用户设置拒绝访问权限。\n\n```\n$ lb acl\n? 选择要应用 ACL 条目的模型： （所有现有模型）\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 全部（匹配所有类型）\n? 选择角色 所有用户\n? 选择要应用的许可权 明确拒绝访问\n```\n\n接下来根据角色开放应有的模型和操作访问限制。\n\n#### ACL 策略\n\n- 授权 `系统管理员` 对所有模型进行全权操作\n\n  - 选择要应用 ACL 条目的模型： （所有现有模型）\n  - 选择 ACL 作用域： 所有方法和属性\n  - 选择访问类型： 全部（匹配所有类型）\n  - 选择角色 其他\n  - 请输入角色名称： admin\n  - 选择要应用的许可权 明确授权访问\n\n- 授权 `所有用户` 对 `okrUser` 模型进行注册操作。\n- 授权 `任何已认证的用户` 对 `okrUser` 模型进行登录、注销操作。\n- 授权 `拥有该对象的用户` 对 `okrUser` 模型进行修改密码、查询自身用户信息操作。\n- 授权 `任何已认证的用户` 对 `okr、okrObject、keyResult、comment` 模型进行读操作。\n- 授权 `拥有该对象的用户` 对 `okr、okrObject、keyResult、comment` 模型进行写操作。\n\n### 测试 API 接口\n\n启动服务 (`node .`) 并在浏览器打开网址 [`localhost:3000`](http://localhost:3000) 可以测试已经创建的 OKR_API。\n","slug":"OKR-API-的设计与实现","published":1,"updated":"2019-08-12T03:57:04.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm1n000jnw9wlp0tbrsv","content":"<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>这是一个对 OKR 工作法进行辅助管理的全栈项目。项目实行前后端分离，后端用 loopBack3 框架开发 API 数据访问接口，前端分别用 Vue 全家桶、react 全家桶、un-app 框架、react-native 框架和 flutter 框架来实现移动端的跨平台应用。 涉及到当前前端开发的主流技术。本文介绍后端开发的全过程。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h2><p>创建 OKR 管理 APP 需要搭建后台数据服务器，采用 RESTful 标准接口，利用 loopBack3 框架搭建。</p>\n<h3 id=\"为什么是-LoopBack？\"><a href=\"#为什么是-LoopBack？\" class=\"headerlink\" title=\"为什么是 LoopBack？\"></a>为什么是 LoopBack？</h3><p>LoopBack 框架是由一组 Node.js 的模块构成的。你可以单独使用这些模块或把它们组合在一起使用。 应用通过 LoopBack model API 可以使用以下三种方式访问数据。</p>\n<ul>\n<li>将模型作为一个标准的 Node 对象使用</li>\n<li>通过 HTTP REST API 调用</li>\n<li>通过封装好的 API SDK，包括 iOS, Android 和 Angular</li>\n</ul>\n<p>应用程序通过 LoopBack model API 用以上三种方式查询数据，储存数据，上传文件，发送 email, 推送消息，注册/登陆用户等远程或本地的服务。用户也可以通过 Strong Remoting 将后端的 API 通过 REST, WebSocket(或其他传输协议)供客户端调用。</p>\n<h3 id=\"OKR-是什么？\"><a href=\"#OKR-是什么？\" class=\"headerlink\" title=\"OKR 是什么？\"></a>OKR 是什么？</h3><p>OKR（Objectives and Key Results）即目标与关键成果法，是一套明确和跟踪目标及其完成情况的管理工具和方法，由英特尔公司发明。</p>\n<p>OKR 的主要目标是明确公司和团队的“目标”以及明确每个目标达成的可衡量的“关键结果”。一本关于 OKR 的书将 OKR 定义为“一个重要的思考框架与不断发展的学科，旨在确保员工共同工作，并集中精力做出可衡量的贡献。 ”OKR 可以在整个组织中共享，这样团队就可以在整个组织中明确目标，帮助协调和集中精力。</p>\n<h3 id=\"需求定义\"><a href=\"#需求定义\" class=\"headerlink\" title=\"需求定义\"></a>需求定义</h3><h4 id=\"OKR-管理功能\"><a href=\"#OKR-管理功能\" class=\"headerlink\" title=\"OKR 管理功能\"></a>OKR 管理功能</h4><ul>\n<li>用户需要注册登录才能进行操作。</li>\n<li>用户注册信息：用户名、密码、email、所属部门。</li>\n<li>角色：所有用户、任何未经认证的用户、任何已认证的用户、拥有该对象的用户、系统管理员。</li>\n<li>系统根据不同角色分配相应的权限（静态和动态）。</li>\n<li>系统管理员负责设置对用户和数据字典的管理。</li>\n<li>任何已认证的用户可以查看所有已经创建的 OKR 列表和详情并可以发表评论。</li>\n<li>拥有该对象的用户可以录入和管理本人的 OKR。</li>\n<li>OKR 基本信息：OKR 标题（一）、目标（多）、关键结果（多）。</li>\n<li>OKR 辅助信息：开始日期、结束日期、部门、类型、责任人、评论（多）。</li>\n</ul>\n<h4 id=\"基础数据\"><a href=\"#基础数据\" class=\"headerlink\" title=\"基础数据\"></a>基础数据</h4><p>系统管理员可以对基础数据进行增删改查。基础数据包括：</p>\n<ul>\n<li>公司基本信息</li>\n<li>部门基本信息</li>\n<li>OKR 类型</li>\n</ul>\n<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><p>根据需求需要建立 Okr、Object（目标）、KeyResult(关键结果)、Comment（评论）、Company（公司）、Department（部门）、（okrUser）用户等 7 个数据模型。其中 okrUser 继承自 lb3 默认的 user 模型。数据模型需要我们通过 lb 生成器来创建。</p>\n<h3 id=\"模型关系\"><a href=\"#模型关系\" class=\"headerlink\" title=\"模型关系\"></a>模型关系</h3><ul>\n<li>一个公司有多个部门，一个部门属于一个公司。</li>\n<li>一个部门有多个用户，一个 OKR 用户属于一个部门。</li>\n<li>一个用户有多个 OKR，一个 OKR 属于一个 OKR 用户。</li>\n<li>一个 OKR 有多个目标。</li>\n<li>一个目标有多个关键结果。</li>\n<li>一个 OKR 有多个评论。</li>\n<li>一个评论属于一个 OKR 用户。</li>\n</ul>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><h4 id=\"应用的相关信息\"><a href=\"#应用的相关信息\" class=\"headerlink\" title=\"应用的相关信息\"></a>应用的相关信息</h4><ul>\n<li>项目名称: <code>lb-okr-api</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb</span><br><span class=\"line\">? 您的应用程序的名称是什么？ lb-okr-api</span><br><span class=\"line\">? 输入目录名称以包含项目： lb-okr-api</span><br><span class=\"line\">   create lb-okr-api/</span><br><span class=\"line\">     info 将工作目录更改为 lb-okr-api</span><br><span class=\"line\"></span><br><span class=\"line\">? 您想要使用哪个版本的 LoopBack？ 3.x (Active Long Term Support)</span><br><span class=\"line\">? 您想要什么种类的应用程序？ api-server (使用本地用户认证的 LoopBack API 服务器)</span><br><span class=\"line\">正在生成 .yo-rc.json</span><br><span class=\"line\"></span><br><span class=\"line\">I&apos;m all done. Running npm install for you to install the required dependencies. If this fails, try running the command yourself.</span><br><span class=\"line\"></span><br><span class=\"line\">后续步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">  将目录更改为您的应用程序</span><br><span class=\"line\">    $ cd lb-okr-api</span><br><span class=\"line\"></span><br><span class=\"line\">  在应用程序中创建模型</span><br><span class=\"line\">    $ lb model</span><br><span class=\"line\"></span><br><span class=\"line\">  运行应用程序</span><br><span class=\"line\">    $ node .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加数据库连接\"><a href=\"#添加数据库连接\" class=\"headerlink\" title=\"添加数据库连接\"></a>添加数据库连接</h3><p>lb 可以连接多种常用的数据库，包括关系型数据库 MySQL 和非关系型数据库 MongoDB 等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb datasource</span><br><span class=\"line\">? 输入数据源名称： okrdb</span><br><span class=\"line\">? 为 okrdb 选择连接器： MongoDB （StrongLoop 支持）</span><br><span class=\"line\">? Connection String url to override other settings (eg: mongodb://username:password@hostname:por</span><br><span class=\"line\">t/database):</span><br><span class=\"line\">? host: localhost</span><br><span class=\"line\">? port: 27017</span><br><span class=\"line\">? user:</span><br><span class=\"line\">? password: [hidden]</span><br><span class=\"line\">? database: lb_okr</span><br><span class=\"line\">? 安装 loopback-connector-mongodb@^4.0.0 Yes</span><br></pre></td></tr></table></figure>\n\n<p>在<code>lb-okr-api/server/datasources.json</code>文件中自动添加了如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;db&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;memory&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;okrdb&quot;: &#123;</span><br><span class=\"line\">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;url&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;database&quot;: &quot;lb_okr&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;okrdb&quot;,</span><br><span class=\"line\">    &quot;user&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;mongodb&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除该文件中<code>db</code>键值对，再将<code>okrdb</code>改成<code>db</code>。完成后是下面的样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;url&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;database&quot;: &quot;lb_okr&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;okrdb&quot;,</span><br><span class=\"line\">    &quot;user&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;mongodb&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加模型（models）\"><a href=\"#添加模型（models）\" class=\"headerlink\" title=\"添加模型（models）\"></a>添加模型（models）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb model</span><br><span class=\"line\">? 请输入模型名称： okr</span><br><span class=\"line\">? 选择要向其附加 okr 的数据源： db (mongodb)</span><br><span class=\"line\">? 选择模型的基类 PersistedModel</span><br><span class=\"line\">? 通过 REST API 公开 okr？ Yes</span><br><span class=\"line\">? 定制复数形式（用于构建 REST URL）：</span><br><span class=\"line\">? 公共模型或仅服务器？ 公共</span><br><span class=\"line\">现在添加一些 okr 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： name</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： startDate</span><br><span class=\"line\">? 属性类型： date</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： endDate</span><br><span class=\"line\">? 属性类型： date</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： department</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： category</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： people</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称：</span><br><span class=\"line\"></span><br><span class=\"line\">重复此操作，创建所有的数据模型。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模型信息\"><a href=\"#模型信息\" class=\"headerlink\" title=\"模型信息\"></a>模型信息</h4><ul>\n<li><p>Name: <code>okr</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>name</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>startDate</code><ul>\n<li>Date</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>endDate</code><ul>\n<li>Date</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>department</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>category</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>people</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>okrObject</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>content</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>keyResult</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>content</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>comment</code></p>\n<ul>\n<li><p>Datasource: <code>db</code></p>\n</li>\n<li><p>Base class: <code>PersistedModel</code></p>\n</li>\n<li><p>Expose via REST: <code>Yes</code></p>\n</li>\n<li><p>Custom plural form: <em>Leave blank</em></p>\n</li>\n<li><p>Properties</p>\n<ul>\n<li><code>content</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>people</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>company</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>name</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>department</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>name</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>category</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>name</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>okrUser</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>User</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建模型关系\"><a href=\"#创建模型关系\" class=\"headerlink\" title=\"创建模型关系\"></a>创建模型关系</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： okr</span><br><span class=\"line\">? 关系类型： has many</span><br><span class=\"line\">? 选择与之创建关系的模型： okrObject</span><br><span class=\"line\">? 输入关系的属性名称： okrObjects</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 需要直通模型？ No</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： okrObject</span><br><span class=\"line\">? 关系类型： belongs to</span><br><span class=\"line\">? 选择与之创建关系的模型： okr</span><br><span class=\"line\">? 输入关系的属性名称： okr</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义模型关系\"><a href=\"#定义模型关系\" class=\"headerlink\" title=\"定义模型关系\"></a>定义模型关系</h4><ul>\n<li>okr</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;okrObjects&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;okrObject&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;keyResults&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;keyResult&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;comments&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;comment&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;okr-category&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;category&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>okrObject</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;okr&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;okr&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;keyResults&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;keyResult&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>keyResult</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;okrObject&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;okrObject&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;okr&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;okr&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>其他模型关系定义参见源代码。</p>\n<h3 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h3><h4 id=\"用户角色\"><a href=\"#用户角色\" class=\"headerlink\" title=\"用户角色\"></a>用户角色</h4><p>OKR-API 包含以下用户角色:</p>\n<ul>\n<li><code>所有用户</code></li>\n<li><code>任何未经认证的用户</code></li>\n<li><code>任何已认证的用户</code></li>\n<li><code>拥有该对象的用户</code></li>\n<li><code>系统管理员</code></li>\n</ul>\n<p>每个用户的权限取决于他的角色。登录用户需要进行 ACL（访问控制列表）认证。认证成功后，接口会返回一个 token 作为凭据。</p>\n<p>在用户角色中，<code>系统管理员</code>属于<code>其他</code>类型的角色，lb 不会自动提供，需要手工创建。创建自定义角色的方法如下：</p>\n<p>在<code>/server/boot</code>启动文件夹中，添加一个 js 文件。在 js 文件中添加如下代码。该代码执行一次后会添加首个 OKR 用户和自定义角色 admin，并把这个角色分配给首个 OKR 用户。</p>\n<p>在 okrdb 数据库中，可以看到有三个表（collections），分别对应 okr 用户、角色、和角色分配模型。我们可以看到模型数据被持久化到了数据库中。所以，执行一次该代码后，就把这个 js 文件删除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(app) &#123;</span><br><span class=\"line\">  var User = app.models.Okruser;</span><br><span class=\"line\">  var Role = app.models.Role;</span><br><span class=\"line\">  var RoleMapping = app.models.RoleMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">  User.create([</span><br><span class=\"line\">    &#123;username: &apos;admin&apos;, email: &apos;aa@bb.cc&apos;, password: &apos;admin&apos;&#125;</span><br><span class=\"line\">  ], function(err, users) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;Created users:&apos;, users);</span><br><span class=\"line\"></span><br><span class=\"line\">    //create the admin role</span><br><span class=\"line\">    Role.create(&#123;</span><br><span class=\"line\">      name: &apos;admin&apos;</span><br><span class=\"line\">    &#125;, function(err, role) &#123;</span><br><span class=\"line\">      if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">      console.log(&apos;Created role:&apos;, role);</span><br><span class=\"line\"></span><br><span class=\"line\">      //make admin</span><br><span class=\"line\">      role.principals.create(&#123;</span><br><span class=\"line\">        principalType: RoleMapping.USER,</span><br><span class=\"line\">        principalId: users[0].id</span><br><span class=\"line\">      &#125;, function(err, principal) &#123;</span><br><span class=\"line\">        if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">        console.log(&apos;Created principal:&apos;, principal);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对系统管理员进行授权\"><a href=\"#对系统管理员进行授权\" class=\"headerlink\" title=\"对系统管理员进行授权\"></a>对系统管理员进行授权</h4><p>我们在上述代码中创建了一个系统管理员的用户。可以用这个邮箱和密码进行登录，登录验证通过后可以得到一个 token 的返回。</p>\n<p>自定义了角色后，需要给角色授权。假设授予系统管理员对所有模型的所有接口进行操作，可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： （所有现有模型）</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 全部（匹配所有类型）</span><br><span class=\"line\">? 选择角色 其他</span><br><span class=\"line\">? 请输入角色名称： admin</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-ACL-（访问控制列表）\"><a href=\"#创建-ACL-（访问控制列表）\" class=\"headerlink\" title=\"创建 ACL （访问控制列表）\"></a>创建 ACL （访问控制列表）</h3><p>通过 lb 生成器，首先对所有模型、所有操作、所有用户设置拒绝访问权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： （所有现有模型）</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 全部（匹配所有类型）</span><br><span class=\"line\">? 选择角色 所有用户</span><br><span class=\"line\">? 选择要应用的许可权 明确拒绝访问</span><br></pre></td></tr></table></figure>\n\n<p>接下来根据角色开放应有的模型和操作访问限制。</p>\n<h4 id=\"ACL-策略\"><a href=\"#ACL-策略\" class=\"headerlink\" title=\"ACL 策略\"></a>ACL 策略</h4><ul>\n<li><p>授权 <code>系统管理员</code> 对所有模型进行全权操作</p>\n<ul>\n<li>选择要应用 ACL 条目的模型： （所有现有模型）</li>\n<li>选择 ACL 作用域： 所有方法和属性</li>\n<li>选择访问类型： 全部（匹配所有类型）</li>\n<li>选择角色 其他</li>\n<li>请输入角色名称： admin</li>\n<li>选择要应用的许可权 明确授权访问</li>\n</ul>\n</li>\n<li><p>授权 <code>所有用户</code> 对 <code>okrUser</code> 模型进行注册操作。</p>\n</li>\n<li><p>授权 <code>任何已认证的用户</code> 对 <code>okrUser</code> 模型进行登录、注销操作。</p>\n</li>\n<li><p>授权 <code>拥有该对象的用户</code> 对 <code>okrUser</code> 模型进行修改密码、查询自身用户信息操作。</p>\n</li>\n<li><p>授权 <code>任何已认证的用户</code> 对 <code>okr、okrObject、keyResult、comment</code> 模型进行读操作。</p>\n</li>\n<li><p>授权 <code>拥有该对象的用户</code> 对 <code>okr、okrObject、keyResult、comment</code> 模型进行写操作。</p>\n</li>\n</ul>\n<h3 id=\"测试-API-接口\"><a href=\"#测试-API-接口\" class=\"headerlink\" title=\"测试 API 接口\"></a>测试 API 接口</h3><p>启动服务 (<code>node .</code>) 并在浏览器打开网址 <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\"><code>localhost:3000</code></a> 可以测试已经创建的 OKR_API。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>这是一个对 OKR 工作法进行辅助管理的全栈项目。项目实行前后端分离，后端用 loopBack3 框架开发 API 数据访问接口，前端分别用 Vue 全家桶、react 全家桶、un-app 框架、react-native 框架和 flutter 框架来实现移动端的跨平台应用。 涉及到当前前端开发的主流技术。本文介绍后端开发的全过程。</p>","more":"<h2 id=\"设计思想\"><a href=\"#设计思想\" class=\"headerlink\" title=\"设计思想\"></a>设计思想</h2><p>创建 OKR 管理 APP 需要搭建后台数据服务器，采用 RESTful 标准接口，利用 loopBack3 框架搭建。</p>\n<h3 id=\"为什么是-LoopBack？\"><a href=\"#为什么是-LoopBack？\" class=\"headerlink\" title=\"为什么是 LoopBack？\"></a>为什么是 LoopBack？</h3><p>LoopBack 框架是由一组 Node.js 的模块构成的。你可以单独使用这些模块或把它们组合在一起使用。 应用通过 LoopBack model API 可以使用以下三种方式访问数据。</p>\n<ul>\n<li>将模型作为一个标准的 Node 对象使用</li>\n<li>通过 HTTP REST API 调用</li>\n<li>通过封装好的 API SDK，包括 iOS, Android 和 Angular</li>\n</ul>\n<p>应用程序通过 LoopBack model API 用以上三种方式查询数据，储存数据，上传文件，发送 email, 推送消息，注册/登陆用户等远程或本地的服务。用户也可以通过 Strong Remoting 将后端的 API 通过 REST, WebSocket(或其他传输协议)供客户端调用。</p>\n<h3 id=\"OKR-是什么？\"><a href=\"#OKR-是什么？\" class=\"headerlink\" title=\"OKR 是什么？\"></a>OKR 是什么？</h3><p>OKR（Objectives and Key Results）即目标与关键成果法，是一套明确和跟踪目标及其完成情况的管理工具和方法，由英特尔公司发明。</p>\n<p>OKR 的主要目标是明确公司和团队的“目标”以及明确每个目标达成的可衡量的“关键结果”。一本关于 OKR 的书将 OKR 定义为“一个重要的思考框架与不断发展的学科，旨在确保员工共同工作，并集中精力做出可衡量的贡献。 ”OKR 可以在整个组织中共享，这样团队就可以在整个组织中明确目标，帮助协调和集中精力。</p>\n<h3 id=\"需求定义\"><a href=\"#需求定义\" class=\"headerlink\" title=\"需求定义\"></a>需求定义</h3><h4 id=\"OKR-管理功能\"><a href=\"#OKR-管理功能\" class=\"headerlink\" title=\"OKR 管理功能\"></a>OKR 管理功能</h4><ul>\n<li>用户需要注册登录才能进行操作。</li>\n<li>用户注册信息：用户名、密码、email、所属部门。</li>\n<li>角色：所有用户、任何未经认证的用户、任何已认证的用户、拥有该对象的用户、系统管理员。</li>\n<li>系统根据不同角色分配相应的权限（静态和动态）。</li>\n<li>系统管理员负责设置对用户和数据字典的管理。</li>\n<li>任何已认证的用户可以查看所有已经创建的 OKR 列表和详情并可以发表评论。</li>\n<li>拥有该对象的用户可以录入和管理本人的 OKR。</li>\n<li>OKR 基本信息：OKR 标题（一）、目标（多）、关键结果（多）。</li>\n<li>OKR 辅助信息：开始日期、结束日期、部门、类型、责任人、评论（多）。</li>\n</ul>\n<h4 id=\"基础数据\"><a href=\"#基础数据\" class=\"headerlink\" title=\"基础数据\"></a>基础数据</h4><p>系统管理员可以对基础数据进行增删改查。基础数据包括：</p>\n<ul>\n<li>公司基本信息</li>\n<li>部门基本信息</li>\n<li>OKR 类型</li>\n</ul>\n<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><p>根据需求需要建立 Okr、Object（目标）、KeyResult(关键结果)、Comment（评论）、Company（公司）、Department（部门）、（okrUser）用户等 7 个数据模型。其中 okrUser 继承自 lb3 默认的 user 模型。数据模型需要我们通过 lb 生成器来创建。</p>\n<h3 id=\"模型关系\"><a href=\"#模型关系\" class=\"headerlink\" title=\"模型关系\"></a>模型关系</h3><ul>\n<li>一个公司有多个部门，一个部门属于一个公司。</li>\n<li>一个部门有多个用户，一个 OKR 用户属于一个部门。</li>\n<li>一个用户有多个 OKR，一个 OKR 属于一个 OKR 用户。</li>\n<li>一个 OKR 有多个目标。</li>\n<li>一个目标有多个关键结果。</li>\n<li>一个 OKR 有多个评论。</li>\n<li>一个评论属于一个 OKR 用户。</li>\n</ul>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><h4 id=\"应用的相关信息\"><a href=\"#应用的相关信息\" class=\"headerlink\" title=\"应用的相关信息\"></a>应用的相关信息</h4><ul>\n<li>项目名称: <code>lb-okr-api</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb</span><br><span class=\"line\">? 您的应用程序的名称是什么？ lb-okr-api</span><br><span class=\"line\">? 输入目录名称以包含项目： lb-okr-api</span><br><span class=\"line\">   create lb-okr-api/</span><br><span class=\"line\">     info 将工作目录更改为 lb-okr-api</span><br><span class=\"line\"></span><br><span class=\"line\">? 您想要使用哪个版本的 LoopBack？ 3.x (Active Long Term Support)</span><br><span class=\"line\">? 您想要什么种类的应用程序？ api-server (使用本地用户认证的 LoopBack API 服务器)</span><br><span class=\"line\">正在生成 .yo-rc.json</span><br><span class=\"line\"></span><br><span class=\"line\">I&apos;m all done. Running npm install for you to install the required dependencies. If this fails, try running the command yourself.</span><br><span class=\"line\"></span><br><span class=\"line\">后续步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">  将目录更改为您的应用程序</span><br><span class=\"line\">    $ cd lb-okr-api</span><br><span class=\"line\"></span><br><span class=\"line\">  在应用程序中创建模型</span><br><span class=\"line\">    $ lb model</span><br><span class=\"line\"></span><br><span class=\"line\">  运行应用程序</span><br><span class=\"line\">    $ node .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加数据库连接\"><a href=\"#添加数据库连接\" class=\"headerlink\" title=\"添加数据库连接\"></a>添加数据库连接</h3><p>lb 可以连接多种常用的数据库，包括关系型数据库 MySQL 和非关系型数据库 MongoDB 等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb datasource</span><br><span class=\"line\">? 输入数据源名称： okrdb</span><br><span class=\"line\">? 为 okrdb 选择连接器： MongoDB （StrongLoop 支持）</span><br><span class=\"line\">? Connection String url to override other settings (eg: mongodb://username:password@hostname:por</span><br><span class=\"line\">t/database):</span><br><span class=\"line\">? host: localhost</span><br><span class=\"line\">? port: 27017</span><br><span class=\"line\">? user:</span><br><span class=\"line\">? password: [hidden]</span><br><span class=\"line\">? database: lb_okr</span><br><span class=\"line\">? 安装 loopback-connector-mongodb@^4.0.0 Yes</span><br></pre></td></tr></table></figure>\n\n<p>在<code>lb-okr-api/server/datasources.json</code>文件中自动添加了如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;db&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;memory&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;okrdb&quot;: &#123;</span><br><span class=\"line\">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;url&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;database&quot;: &quot;lb_okr&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;okrdb&quot;,</span><br><span class=\"line\">    &quot;user&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;mongodb&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除该文件中<code>db</code>键值对，再将<code>okrdb</code>改成<code>db</code>。完成后是下面的样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;url&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;database&quot;: &quot;lb_okr&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;okrdb&quot;,</span><br><span class=\"line\">    &quot;user&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;mongodb&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加模型（models）\"><a href=\"#添加模型（models）\" class=\"headerlink\" title=\"添加模型（models）\"></a>添加模型（models）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb model</span><br><span class=\"line\">? 请输入模型名称： okr</span><br><span class=\"line\">? 选择要向其附加 okr 的数据源： db (mongodb)</span><br><span class=\"line\">? 选择模型的基类 PersistedModel</span><br><span class=\"line\">? 通过 REST API 公开 okr？ Yes</span><br><span class=\"line\">? 定制复数形式（用于构建 REST URL）：</span><br><span class=\"line\">? 公共模型或仅服务器？ 公共</span><br><span class=\"line\">现在添加一些 okr 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： name</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： startDate</span><br><span class=\"line\">? 属性类型： date</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： endDate</span><br><span class=\"line\">? 属性类型： date</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： department</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： category</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： people</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 okr 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称：</span><br><span class=\"line\"></span><br><span class=\"line\">重复此操作，创建所有的数据模型。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模型信息\"><a href=\"#模型信息\" class=\"headerlink\" title=\"模型信息\"></a>模型信息</h4><ul>\n<li><p>Name: <code>okr</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>name</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>startDate</code><ul>\n<li>Date</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>endDate</code><ul>\n<li>Date</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>department</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>category</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>people</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>okrObject</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>content</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>keyResult</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>content</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>comment</code></p>\n<ul>\n<li><p>Datasource: <code>db</code></p>\n</li>\n<li><p>Base class: <code>PersistedModel</code></p>\n</li>\n<li><p>Expose via REST: <code>Yes</code></p>\n</li>\n<li><p>Custom plural form: <em>Leave blank</em></p>\n</li>\n<li><p>Properties</p>\n<ul>\n<li><code>content</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n<li><code>people</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>company</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>name</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>department</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>name</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>category</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>PersistedModel</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n<li>Properties<ul>\n<li><code>name</code><ul>\n<li>String</li>\n<li>required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>okrUser</code></p>\n<ul>\n<li>Datasource: <code>db</code></li>\n<li>Base class: <code>User</code></li>\n<li>Expose via REST: <code>Yes</code></li>\n<li>Custom plural form: <em>Leave blank</em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建模型关系\"><a href=\"#创建模型关系\" class=\"headerlink\" title=\"创建模型关系\"></a>创建模型关系</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： okr</span><br><span class=\"line\">? 关系类型： has many</span><br><span class=\"line\">? 选择与之创建关系的模型： okrObject</span><br><span class=\"line\">? 输入关系的属性名称： okrObjects</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 需要直通模型？ No</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： okrObject</span><br><span class=\"line\">? 关系类型： belongs to</span><br><span class=\"line\">? 选择与之创建关系的模型： okr</span><br><span class=\"line\">? 输入关系的属性名称： okr</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义模型关系\"><a href=\"#定义模型关系\" class=\"headerlink\" title=\"定义模型关系\"></a>定义模型关系</h4><ul>\n<li>okr</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;okrObjects&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;okrObject&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;keyResults&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;keyResult&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;comments&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;comment&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;okr-category&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;category&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>okrObject</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;okr&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;okr&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;keyResults&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;keyResult&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>keyResult</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;okrObject&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;okrObject&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;okr&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;okr&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>其他模型关系定义参见源代码。</p>\n<h3 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h3><h4 id=\"用户角色\"><a href=\"#用户角色\" class=\"headerlink\" title=\"用户角色\"></a>用户角色</h4><p>OKR-API 包含以下用户角色:</p>\n<ul>\n<li><code>所有用户</code></li>\n<li><code>任何未经认证的用户</code></li>\n<li><code>任何已认证的用户</code></li>\n<li><code>拥有该对象的用户</code></li>\n<li><code>系统管理员</code></li>\n</ul>\n<p>每个用户的权限取决于他的角色。登录用户需要进行 ACL（访问控制列表）认证。认证成功后，接口会返回一个 token 作为凭据。</p>\n<p>在用户角色中，<code>系统管理员</code>属于<code>其他</code>类型的角色，lb 不会自动提供，需要手工创建。创建自定义角色的方法如下：</p>\n<p>在<code>/server/boot</code>启动文件夹中，添加一个 js 文件。在 js 文件中添加如下代码。该代码执行一次后会添加首个 OKR 用户和自定义角色 admin，并把这个角色分配给首个 OKR 用户。</p>\n<p>在 okrdb 数据库中，可以看到有三个表（collections），分别对应 okr 用户、角色、和角色分配模型。我们可以看到模型数据被持久化到了数据库中。所以，执行一次该代码后，就把这个 js 文件删除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(app) &#123;</span><br><span class=\"line\">  var User = app.models.Okruser;</span><br><span class=\"line\">  var Role = app.models.Role;</span><br><span class=\"line\">  var RoleMapping = app.models.RoleMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">  User.create([</span><br><span class=\"line\">    &#123;username: &apos;admin&apos;, email: &apos;aa@bb.cc&apos;, password: &apos;admin&apos;&#125;</span><br><span class=\"line\">  ], function(err, users) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;Created users:&apos;, users);</span><br><span class=\"line\"></span><br><span class=\"line\">    //create the admin role</span><br><span class=\"line\">    Role.create(&#123;</span><br><span class=\"line\">      name: &apos;admin&apos;</span><br><span class=\"line\">    &#125;, function(err, role) &#123;</span><br><span class=\"line\">      if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">      console.log(&apos;Created role:&apos;, role);</span><br><span class=\"line\"></span><br><span class=\"line\">      //make admin</span><br><span class=\"line\">      role.principals.create(&#123;</span><br><span class=\"line\">        principalType: RoleMapping.USER,</span><br><span class=\"line\">        principalId: users[0].id</span><br><span class=\"line\">      &#125;, function(err, principal) &#123;</span><br><span class=\"line\">        if (err) throw err;</span><br><span class=\"line\"></span><br><span class=\"line\">        console.log(&apos;Created principal:&apos;, principal);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对系统管理员进行授权\"><a href=\"#对系统管理员进行授权\" class=\"headerlink\" title=\"对系统管理员进行授权\"></a>对系统管理员进行授权</h4><p>我们在上述代码中创建了一个系统管理员的用户。可以用这个邮箱和密码进行登录，登录验证通过后可以得到一个 token 的返回。</p>\n<p>自定义了角色后，需要给角色授权。假设授予系统管理员对所有模型的所有接口进行操作，可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： （所有现有模型）</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 全部（匹配所有类型）</span><br><span class=\"line\">? 选择角色 其他</span><br><span class=\"line\">? 请输入角色名称： admin</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-ACL-（访问控制列表）\"><a href=\"#创建-ACL-（访问控制列表）\" class=\"headerlink\" title=\"创建 ACL （访问控制列表）\"></a>创建 ACL （访问控制列表）</h3><p>通过 lb 生成器，首先对所有模型、所有操作、所有用户设置拒绝访问权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： （所有现有模型）</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 全部（匹配所有类型）</span><br><span class=\"line\">? 选择角色 所有用户</span><br><span class=\"line\">? 选择要应用的许可权 明确拒绝访问</span><br></pre></td></tr></table></figure>\n\n<p>接下来根据角色开放应有的模型和操作访问限制。</p>\n<h4 id=\"ACL-策略\"><a href=\"#ACL-策略\" class=\"headerlink\" title=\"ACL 策略\"></a>ACL 策略</h4><ul>\n<li><p>授权 <code>系统管理员</code> 对所有模型进行全权操作</p>\n<ul>\n<li>选择要应用 ACL 条目的模型： （所有现有模型）</li>\n<li>选择 ACL 作用域： 所有方法和属性</li>\n<li>选择访问类型： 全部（匹配所有类型）</li>\n<li>选择角色 其他</li>\n<li>请输入角色名称： admin</li>\n<li>选择要应用的许可权 明确授权访问</li>\n</ul>\n</li>\n<li><p>授权 <code>所有用户</code> 对 <code>okrUser</code> 模型进行注册操作。</p>\n</li>\n<li><p>授权 <code>任何已认证的用户</code> 对 <code>okrUser</code> 模型进行登录、注销操作。</p>\n</li>\n<li><p>授权 <code>拥有该对象的用户</code> 对 <code>okrUser</code> 模型进行修改密码、查询自身用户信息操作。</p>\n</li>\n<li><p>授权 <code>任何已认证的用户</code> 对 <code>okr、okrObject、keyResult、comment</code> 模型进行读操作。</p>\n</li>\n<li><p>授权 <code>拥有该对象的用户</code> 对 <code>okr、okrObject、keyResult、comment</code> 模型进行写操作。</p>\n</li>\n</ul>\n<h3 id=\"测试-API-接口\"><a href=\"#测试-API-接口\" class=\"headerlink\" title=\"测试 API 接口\"></a>测试 API 接口</h3><p>启动服务 (<code>node .</code>) 并在浏览器打开网址 <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\"><code>localhost:3000</code></a> 可以测试已经创建的 OKR_API。</p>"},{"title":"LoopBack3.0创建API接口实战","date":"2019-09-20T05:23:35.000Z","_content":"\nLoopBack 是一个高度可扩展的开源 Node.js 框架，它使您能够以很少的编码或不编写任何代码来创建动态的端到端 REST API。\n\n<iframe src=\"//player.bilibili.com/player.html?aid=68852902&cid=119328164&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[到 bilibili.com 网站观看全部视频](https://www.bilibili.com/video/av68852902/)\n\n<!-- more -->\n\nLoopBack 框架是由一组 Node.js 的模块构成的。你可以单独使用这些模块或把它们组合在一起使用。 应用通过 LoopBack model API 可以使用以下三种方式访问数据。\n\n- 将模型作为一个标准的 Node 对象使用\n- 通过 HTTP REST API 调用\n- 通过封装好的 API SDK，包括 iOS, Android 和 Angular\n\n应用程序通过 LoopBack model API 用以上三种方式查询数据，储存数据，上传文件，发送 email, 推送消息，注册/登陆用户等远程或本地的服务。用户也可以通过 Strong Remoting 将后端的 API 通过 REST, WebSocket(或其他传输协议)供客户端调用。\n\n## 一、项目概述\n\n这是官方给出的一个关于咖啡店点评的示例。\n\n咖啡店点评是一个网站，我们可以用来发布咖啡店的评论。有三个数据模型：\n\n- CoffeeShop 咖啡店\n- Review 评论\n- Reviewer 评论者\n\n它们有如下关系：\n\n- CoffeeShop 拥有多个 review\n- CoffeeShop 拥有多个 reviewer\n- review 属于一个 CoffeeShop\n- review 属于一个 reviewer\n- reviewer 拥有多个 review\n\n一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过 ACLs 指定基本规则和权限：\n\n- 任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。\n- 任何人都可以注册为用户，然后能够登录或者注销。\n- 登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。\n\n## 二、创建项目\n\n### 安装 Loopback CLI 工具\n\n在 nodejs 环境下安装 Loopback CLI 工具。\n\n```\nnpm install -g loopback-cli\n```\n\n安装成功后，输入 lb -help 查看 Loopback CLI 工具的命令：\n\n```\nlb -help\nAvailable commands:\n  lb acl\n  lb app\n  lb bluemix\n  lb boot-script\n  lb datasource\n  lb export-api-def\n  lb middleware\n  lb model\n  lb oracle\n  lb property\n  lb relation\n  lb remote-method\n  lb soap\n  lb swagger\n  lb zosconnectee\n```\n\n### 创建 LoopBack 项目\n\n在命令行输入：\n\n```\nlb\n```\n\n回车后按照提示输入项目名称，其他选择回车。\n\n```\n? 您的应用程序的名称是什么？ CoffeeShop\n? 输入目录名称以包含项目： CoffeeShop\n   create CoffeeShop/\n     info 将工作目录更改为 CoffeeShop\n\n? 您想要使用哪个版本的 LoopBack？ 3.x (Active Long Term Support)\n? 您想要什么种类的应用程序？ api-server (使用本地用户认证的 LoopBack API 服务器)\n正在生成 .yo-rc.json\n```\n\n安装成功后按照提示操作后续步骤：\n\n```\n后续步骤：\n\n  将目录更改为您的应用程序\n    $ cd CoffeeShop\n\n  在应用程序中创建模型\n    $ lb model\n\n  运行应用程序\n    $ node .\n```\n\n进入项目根目录，运行应用程序。\n\n```\nnode .\nhsts deprecated The \"includeSubdomains\" parameter is deprecated. Use \"includeSubDomains\" (with a capital D) instead. node_modules/loopback/lib/server-app.js:74:25\nWeb server listening at: http://localhost:3000\nBrowse your REST API at http://localhost:3000/explorer\n```\n\n打开浏览器，输入上面提示的地址可以访问 LoopBack 的 API 接口测试页面。由于我们还没有创建任何模型，所以只能在页面上看到框架自带的 user 的 API 调用接口。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-20%E4%B8%8B%E5%8D%882.14.34.png)\n\n在项目根目录命令行通过 control+C 退出服务。\n\n## 三、连接数据源\n\nLoopBack 可以自动连接市面上绝大多数数据源。我们一 MongoDb 为例来为项目添加数据持久化库。\n\n```\nlb datasource\n? 输入数据源名称： md\n? 为 md 选择连接器： MongoDB （StrongLoop 支持）\n? Connection String url to override other settings (eg: mongodb://username:password@hostname:port/da\ntabase):\n? host: localhost\n? port: 27017\n? user:\n? password: [hidden]\n? database: cshop\n? 安装 loopback-connector-mongodb@^4.0.0 Yes\n+ loopback-connector-mongodb@4.2.0\nadded 7 packages from 11 contributors in 2.342s\n```\n\n首先，必须保证开发环境有 MongoDB 数据库并已经启动，数据库不需要实现创建，框架会根据输入的数据库名称自动创建。由于 MongoDB 的连接插件没有安装，所以这里选择 Yes 来安装。\n\n在项目目录的 server 子目录下有如下文件：\n\n```\nserver % tree\n.\n├── boot\n│   ├── authentication.js\n│   └── root.js\n├── component-config.json\n├── config.json\n├── datasources.json\n├── middleware.development.json\n├── middleware.json\n├── model-config.json\n└── server.js\n\n```\n\n其中，`datasources.json` 是数据源的配置文件，我们在代码编辑器中打开这个文件，会看到我们创建的 md 数据源。\n\n```\n{\n  \"db\": {\n    \"name\": \"db\",\n    \"connector\": \"memory\"\n  },\n  \"md\": {\n    \"host\": \"localhost\",\n    \"port\": 27017,\n    \"url\": \"\",\n    \"database\": \"cshop\",\n    \"password\": \"\",\n    \"name\": \"md\",\n    \"user\": \"\",\n    \"connector\": \"mongodb\"\n  }\n}\n```\n\n由于框架原先定义了一个数据源 db，我们不需要了，把 db 数据源删掉，将 md 数据源改名为 db。修改之后代码如下：\n\n```\n {\n  \"db\": {\n    \"host\": \"localhost\",\n    \"port\": 27017,\n    \"url\": \"\",\n    \"database\": \"cshop\",\n    \"password\": \"\",\n    \"name\": \"md\",\n    \"user\": \"\",\n    \"connector\": \"mongodb\"\n  }\n}\n```\n\n创建好数据源，框架帮我们自动连接数据库，我们对数据的持久化操作也会自动保存到数据库中。\n\n## 四、创建模型\n\n### CoffeeShop 模型\n\n<table>\n<tr>\n<th>属性名</th>\n<th>属性类型</th>\n<th>是否必填</th>\n</tr>\n<tr>\n<td> name </td>\n<td> String </td>\n<td> y </td>\n</tr>\n<tr>\n<td> city </td>\n<td> String </td>\n<td> y </td>\n</tr>\n</table>\n\n```\nlb model\n? 请输入模型名称： CoffeeShop\n? 选择要向其附加 CoffeeShop 的数据源： db (mongodb)\n? 选择模型的基类 PersistedModel\n? 通过 REST API 公开 CoffeeShop？ Yes\n? 定制复数形式（用于构建 REST URL）：\n? 公共模型或仅服务器？ 公共\n现在添加一些 CoffeeShop 属性。\n\n在完成时输入空的属性名称。\n? 属性名称： name\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 CoffeeShop 属性。\n在完成时输入空的属性名称。\n? 属性名称： city\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 CoffeeShop 属性。\n在完成时输入空的属性名称。\n? 属性名称\n```\n\n### review 模型\n\n<table>\n<tr>\n<th>属性名</th>\n<th>属性类型</th>\n<th>是否必填</th>\n</tr>\n<tr>\n<td> date </td>\n<td> date </td>\n<td> y </td>\n</tr>\n<tr>\n<td> rating </td>\n<td> number </td>\n<td> n </td>\n</tr>\n<tr>\n<td> comments </td>\n<td> string </td>\n<td> y </td>\n</tr>\n</table>\n\n```\nlb model\n? 请输入模型名称： Review\n? 选择要向其附加 Review 的数据源： db (mongodb)\n? 选择模型的基类 PersistedModel\n? 通过 REST API 公开 Review？ Yes\n? 定制复数形式（用于构建 REST URL）：\n? 公共模型或仅服务器？ 公共\n现在添加一些 Review 属性。\n\n在完成时输入空的属性名称。\n? 属性名称： date\n? 属性类型： date\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 Review 属性。\n在完成时输入空的属性名称。\n? 属性名称： rating\n? 属性类型： number\n? 是否为必需？ No\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 Review 属性。\n在完成时输入空的属性名称。\n? 属性名称： comments\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 Review 属性。\n在完成时输入空的属性名称。\n? 属性名称：\n```\n\n### reviewer 模型\n\nreviewer 模型继承自框架自带的 user 模型。在选择模型的基类时不能选择 `PersistedModel`，而要选择 `user`，不用添加任何属性，直接回车即可。\n\n```\nlb model\n? 请输入模型名称： Reviewer\n? 选择要向其附加 Reviewer 的数据源： db (mongodb)\n? 选择模型的基类 User\n? 通过 REST API 公开 Reviewer？ Yes\n? 定制复数形式（用于构建 REST URL）：\n? 公共模型或仅服务器？ 公共\n现在添加一些 Reviewer 属性。\n\n在完成时输入空的属性名称。\n? 属性名称：\n```\n\n在项目根目录命令行通过 node . 来启动服务。在浏览器中再次打开 http://localhost:3000/explorer。\n\n可以看到 API 调试界面除了先前的 user 接口外，增加了我们刚刚创建的 3 个模型的接口。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-20%E4%B8%8B%E5%8D%883.25.55.png)\n\n## 五、定义模型之间的关系\n\nLoopBack 支持许多不同类型的模型关系：BelongsTo, HasMany, HasManyThrough, and HasAndBelongsToMany 等等。根据项目需求可以定义如下关系：\n\n- CoffeeShop `HasMany` review\n- CoffeeShop `HasMany` reviewer\n- review `BelongsTo` CoffeeShop\n- review `BelongsTo` reviewer\n- reviewer `HasMany` review\n\nCoffeeShop 拥有多个 review，没有中间模型和外键。\n\n```\nlb relation\n? 选择从中创建关系的模型： CoffeeShop\n? 关系类型： has many\n? 选择与之创建关系的模型： Review\n? 输入关系的属性名称： reviews\n? （可选）输入定制外键：\n? 需要直通模型？ No\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\nCoffeeShop 拥有多个 reviewer，没有中间模型和外键。\n\n```\nlb relation\n? 选择从中创建关系的模型： CoffeeShop\n? 关系类型： has many\n? 选择与之创建关系的模型： Reviewer\n? 输入关系的属性名称： reviewers\n? （可选）输入定制外键：\n? 需要直通模型？ No\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\nreview 属于一个 CoffeeShop，没有中间模型和外键。\n\n```\nlb relation\n? 选择从中创建关系的模型： Review\n? 关系类型： belongs to\n? 选择与之创建关系的模型： CoffeeShop\n? 输入关系的属性名称： coffeeShop\n? （可选）输入定制外键：\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\nreview 属于一个 reviewer，外键是 `publisherId`，没有中间模型。\n\n```\nlb relation\n? 选择从中创建关系的模型： Review\n? 关系类型： belongs to\n? 选择与之创建关系的模型： Reviewer\n? 输入关系的属性名称： reviewer\n? （可选）输入定制外键： publisherId\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\nreviewer 拥有多个 review，外键是 publisherId，没有中间模型。\n\n```\nlb relation\n? 选择从中创建关系的模型： Reviewer\n? 关系类型： has many\n? 选择与之创建关系的模型： Review\n? 输入关系的属性名称： reviews\n? （可选）输入定制外键： publisherId\n? 需要直通模型？ No\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\n我们在项目根目录的 common 子目录的 model 目录下可以看到我们创建的与模型相关的 6 个文件：\n\n```\ncommon % tree\n.\n└── models\n    ├── coffee-shop.js\n    ├── coffee-shop.json\n    ├── review.js\n    ├── review.json\n    ├── reviewer.js\n    └── reviewer.json\n```\n\n在 coffee-shop.json 文件中定义的关系：\n\n```\n \"relations\": {\n    \"reviews\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Review\",\n      \"foreignKey\": \"\"\n    },\n    \"reviewers\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Reviewer\",\n      \"foreignKey\": \"\"\n    }\n  },\n```\n\n在`review.json`文件中定义的关系：\n\n```\n\"relations\": {\n    \"coffeeShop\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"CoffeeShop\",\n      \"foreignKey\": \"\"\n    },\n    \"reviewer\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Reviewer\",\n      \"foreignKey\": \"publisherId\"\n    }\n  },\n```\n\n在`reviewer.json`文件中定义的关系：\n\n```\n\"relations\": {\n    \"reviews\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Review\",\n      \"foreignKey\": \"publisherId\"\n    }\n  },\n```\n\n## 六、定义操作权限\n\nloopback 应用通过模型访问数据，因此控制对数据的访问意味着对模型进行权限的控制：也就是说，指定什么角色可以在模型上执行读取和写入数据的方法。loopback 权限控制由权限控制列表或 ACL 决定。\n\n根据项目需求，权限控制应执行以下规则：\n\n任何人都可以阅读评论。但是创建、编辑和删除的操作必须在登录之后才有权限。\n任何人都可以注册为用户，可以登录和登出。\n登录用户可以创建新的评论，编辑或删除自己的评论。然而，他们不能修改咖啡店的评论。\n\n首先，拒绝所有人操作所有接口，这通常是定义 ACL 的起点，因为您可以选择性地允许特定操作的访问。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： （所有现有模型）\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 全部（匹配所有类型）\n? 选择角色 所有用户\n? 选择要应用的许可权 明确拒绝访问\n```\n\n现在允许所有人对 reviews 进行读操作。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： Review\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 读取\n? 选择角色 所有用户\n? 选择要应用的许可权 明确授权访问\n```\n\n允许通过身份验证的用户对 coffeeshops 进行读操作，也就是说，已登录的用户可以浏览所有咖啡店。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： CoffeeShop\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 读取\n? 选择角色 任何已认证的用户\n? 选择要应用的许可权 明确授权访问\n```\n\n允许经过身份验证的用户对 reviews 进行创建操作，也就是说，已登录的用户可以添加一条评论。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： Review\n? 选择 ACL 作用域： 单个方法\n? 输入方法名称 create\n? 选择角色 任何已认证的用户\n? 选择要应用的许可权 明确授权访问\n```\n\n使 review 的作者有权限（其“所有者”）对其进行任何更改。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： Review\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 写入\n? 选择角色 拥有该对象的用户\n? 选择要应用的许可权 明确授权访问\n```\n\n## 七、自动填充字段内容\n\n我们需要用户在添加评论时，自动填充日期字段的内容为当前的日期。同时，由于评论和评论者之间是通过`publisherId`这个外键进行关联的，用户在添加评论时，需要将评论者的用户 Id 作为其内容进行填充。\n\n我们将定义一个远程钩子，每当在 Review 模型上调用 create()方法时（在创建新的评论时），它将被调用。\n\n通常，我们可以定义两种远程钩子：\n\n- `beforeRemote()`在远程方法之前运行。\n- `afterRemote()`在远程方法之后运行。\n\n在这两种情况下，有两个参数可以供我们使用：一个与要钩子函数的远程方法匹配的字符串，和一个回调函数。\n\n### 创建一个远程钩子\n\n这里，我们将在 review 模型中定义一个远程钩子，具体来说是 Review.beforeRemote。\n\n- 设置 publisherId 为请求中的 userId\n- 设置日期为当前日期。\n\n修改 common/models/review.js：\n\n```\nmodule.exports = function(Review) {\n  Review.beforeRemote('create', function(context, user, next) {\n    context.args.data.date = Date.now().toLocalString(); //转换成本地时间\n    context.args.data.publisherId = context.req.accessToken.userId;\n    next();\n  });\n};\n```\n\n在创建 Review 模型的新实例之前调用此函数。\n\n## 八、后台管理\n\n如何对 coffeeshops 的数据进行管理呢？这是我们常说的后台管理，需要一个管理员`admin`的角色来承担。\n这部分内容将通过另外一篇文章进行介绍。\n","source":"_posts/Loopback3-0创建API接口实战.md","raw":"---\ntitle: LoopBack3.0创建API接口实战\ndate: 2019-09-20 13:23:35\ncategory:\n  - 原创\ntags:\n  - loopBack\n  - nodejs\n  - express\n  - RESTful\n---\n\nLoopBack 是一个高度可扩展的开源 Node.js 框架，它使您能够以很少的编码或不编写任何代码来创建动态的端到端 REST API。\n\n<iframe src=\"//player.bilibili.com/player.html?aid=68852902&cid=119328164&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[到 bilibili.com 网站观看全部视频](https://www.bilibili.com/video/av68852902/)\n\n<!-- more -->\n\nLoopBack 框架是由一组 Node.js 的模块构成的。你可以单独使用这些模块或把它们组合在一起使用。 应用通过 LoopBack model API 可以使用以下三种方式访问数据。\n\n- 将模型作为一个标准的 Node 对象使用\n- 通过 HTTP REST API 调用\n- 通过封装好的 API SDK，包括 iOS, Android 和 Angular\n\n应用程序通过 LoopBack model API 用以上三种方式查询数据，储存数据，上传文件，发送 email, 推送消息，注册/登陆用户等远程或本地的服务。用户也可以通过 Strong Remoting 将后端的 API 通过 REST, WebSocket(或其他传输协议)供客户端调用。\n\n## 一、项目概述\n\n这是官方给出的一个关于咖啡店点评的示例。\n\n咖啡店点评是一个网站，我们可以用来发布咖啡店的评论。有三个数据模型：\n\n- CoffeeShop 咖啡店\n- Review 评论\n- Reviewer 评论者\n\n它们有如下关系：\n\n- CoffeeShop 拥有多个 review\n- CoffeeShop 拥有多个 reviewer\n- review 属于一个 CoffeeShop\n- review 属于一个 reviewer\n- reviewer 拥有多个 review\n\n一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过 ACLs 指定基本规则和权限：\n\n- 任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。\n- 任何人都可以注册为用户，然后能够登录或者注销。\n- 登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。\n\n## 二、创建项目\n\n### 安装 Loopback CLI 工具\n\n在 nodejs 环境下安装 Loopback CLI 工具。\n\n```\nnpm install -g loopback-cli\n```\n\n安装成功后，输入 lb -help 查看 Loopback CLI 工具的命令：\n\n```\nlb -help\nAvailable commands:\n  lb acl\n  lb app\n  lb bluemix\n  lb boot-script\n  lb datasource\n  lb export-api-def\n  lb middleware\n  lb model\n  lb oracle\n  lb property\n  lb relation\n  lb remote-method\n  lb soap\n  lb swagger\n  lb zosconnectee\n```\n\n### 创建 LoopBack 项目\n\n在命令行输入：\n\n```\nlb\n```\n\n回车后按照提示输入项目名称，其他选择回车。\n\n```\n? 您的应用程序的名称是什么？ CoffeeShop\n? 输入目录名称以包含项目： CoffeeShop\n   create CoffeeShop/\n     info 将工作目录更改为 CoffeeShop\n\n? 您想要使用哪个版本的 LoopBack？ 3.x (Active Long Term Support)\n? 您想要什么种类的应用程序？ api-server (使用本地用户认证的 LoopBack API 服务器)\n正在生成 .yo-rc.json\n```\n\n安装成功后按照提示操作后续步骤：\n\n```\n后续步骤：\n\n  将目录更改为您的应用程序\n    $ cd CoffeeShop\n\n  在应用程序中创建模型\n    $ lb model\n\n  运行应用程序\n    $ node .\n```\n\n进入项目根目录，运行应用程序。\n\n```\nnode .\nhsts deprecated The \"includeSubdomains\" parameter is deprecated. Use \"includeSubDomains\" (with a capital D) instead. node_modules/loopback/lib/server-app.js:74:25\nWeb server listening at: http://localhost:3000\nBrowse your REST API at http://localhost:3000/explorer\n```\n\n打开浏览器，输入上面提示的地址可以访问 LoopBack 的 API 接口测试页面。由于我们还没有创建任何模型，所以只能在页面上看到框架自带的 user 的 API 调用接口。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-20%E4%B8%8B%E5%8D%882.14.34.png)\n\n在项目根目录命令行通过 control+C 退出服务。\n\n## 三、连接数据源\n\nLoopBack 可以自动连接市面上绝大多数数据源。我们一 MongoDb 为例来为项目添加数据持久化库。\n\n```\nlb datasource\n? 输入数据源名称： md\n? 为 md 选择连接器： MongoDB （StrongLoop 支持）\n? Connection String url to override other settings (eg: mongodb://username:password@hostname:port/da\ntabase):\n? host: localhost\n? port: 27017\n? user:\n? password: [hidden]\n? database: cshop\n? 安装 loopback-connector-mongodb@^4.0.0 Yes\n+ loopback-connector-mongodb@4.2.0\nadded 7 packages from 11 contributors in 2.342s\n```\n\n首先，必须保证开发环境有 MongoDB 数据库并已经启动，数据库不需要实现创建，框架会根据输入的数据库名称自动创建。由于 MongoDB 的连接插件没有安装，所以这里选择 Yes 来安装。\n\n在项目目录的 server 子目录下有如下文件：\n\n```\nserver % tree\n.\n├── boot\n│   ├── authentication.js\n│   └── root.js\n├── component-config.json\n├── config.json\n├── datasources.json\n├── middleware.development.json\n├── middleware.json\n├── model-config.json\n└── server.js\n\n```\n\n其中，`datasources.json` 是数据源的配置文件，我们在代码编辑器中打开这个文件，会看到我们创建的 md 数据源。\n\n```\n{\n  \"db\": {\n    \"name\": \"db\",\n    \"connector\": \"memory\"\n  },\n  \"md\": {\n    \"host\": \"localhost\",\n    \"port\": 27017,\n    \"url\": \"\",\n    \"database\": \"cshop\",\n    \"password\": \"\",\n    \"name\": \"md\",\n    \"user\": \"\",\n    \"connector\": \"mongodb\"\n  }\n}\n```\n\n由于框架原先定义了一个数据源 db，我们不需要了，把 db 数据源删掉，将 md 数据源改名为 db。修改之后代码如下：\n\n```\n {\n  \"db\": {\n    \"host\": \"localhost\",\n    \"port\": 27017,\n    \"url\": \"\",\n    \"database\": \"cshop\",\n    \"password\": \"\",\n    \"name\": \"md\",\n    \"user\": \"\",\n    \"connector\": \"mongodb\"\n  }\n}\n```\n\n创建好数据源，框架帮我们自动连接数据库，我们对数据的持久化操作也会自动保存到数据库中。\n\n## 四、创建模型\n\n### CoffeeShop 模型\n\n<table>\n<tr>\n<th>属性名</th>\n<th>属性类型</th>\n<th>是否必填</th>\n</tr>\n<tr>\n<td> name </td>\n<td> String </td>\n<td> y </td>\n</tr>\n<tr>\n<td> city </td>\n<td> String </td>\n<td> y </td>\n</tr>\n</table>\n\n```\nlb model\n? 请输入模型名称： CoffeeShop\n? 选择要向其附加 CoffeeShop 的数据源： db (mongodb)\n? 选择模型的基类 PersistedModel\n? 通过 REST API 公开 CoffeeShop？ Yes\n? 定制复数形式（用于构建 REST URL）：\n? 公共模型或仅服务器？ 公共\n现在添加一些 CoffeeShop 属性。\n\n在完成时输入空的属性名称。\n? 属性名称： name\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 CoffeeShop 属性。\n在完成时输入空的属性名称。\n? 属性名称： city\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 CoffeeShop 属性。\n在完成时输入空的属性名称。\n? 属性名称\n```\n\n### review 模型\n\n<table>\n<tr>\n<th>属性名</th>\n<th>属性类型</th>\n<th>是否必填</th>\n</tr>\n<tr>\n<td> date </td>\n<td> date </td>\n<td> y </td>\n</tr>\n<tr>\n<td> rating </td>\n<td> number </td>\n<td> n </td>\n</tr>\n<tr>\n<td> comments </td>\n<td> string </td>\n<td> y </td>\n</tr>\n</table>\n\n```\nlb model\n? 请输入模型名称： Review\n? 选择要向其附加 Review 的数据源： db (mongodb)\n? 选择模型的基类 PersistedModel\n? 通过 REST API 公开 Review？ Yes\n? 定制复数形式（用于构建 REST URL）：\n? 公共模型或仅服务器？ 公共\n现在添加一些 Review 属性。\n\n在完成时输入空的属性名称。\n? 属性名称： date\n? 属性类型： date\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 Review 属性。\n在完成时输入空的属性名称。\n? 属性名称： rating\n? 属性类型： number\n? 是否为必需？ No\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 Review 属性。\n在完成时输入空的属性名称。\n? 属性名称： comments\n? 属性类型： string\n? 是否为必需？ Yes\n? 缺省值[对于无，保留为空白]：\n\n下面添加另一个 Review 属性。\n在完成时输入空的属性名称。\n? 属性名称：\n```\n\n### reviewer 模型\n\nreviewer 模型继承自框架自带的 user 模型。在选择模型的基类时不能选择 `PersistedModel`，而要选择 `user`，不用添加任何属性，直接回车即可。\n\n```\nlb model\n? 请输入模型名称： Reviewer\n? 选择要向其附加 Reviewer 的数据源： db (mongodb)\n? 选择模型的基类 User\n? 通过 REST API 公开 Reviewer？ Yes\n? 定制复数形式（用于构建 REST URL）：\n? 公共模型或仅服务器？ 公共\n现在添加一些 Reviewer 属性。\n\n在完成时输入空的属性名称。\n? 属性名称：\n```\n\n在项目根目录命令行通过 node . 来启动服务。在浏览器中再次打开 http://localhost:3000/explorer。\n\n可以看到 API 调试界面除了先前的 user 接口外，增加了我们刚刚创建的 3 个模型的接口。\n\n![](http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-20%E4%B8%8B%E5%8D%883.25.55.png)\n\n## 五、定义模型之间的关系\n\nLoopBack 支持许多不同类型的模型关系：BelongsTo, HasMany, HasManyThrough, and HasAndBelongsToMany 等等。根据项目需求可以定义如下关系：\n\n- CoffeeShop `HasMany` review\n- CoffeeShop `HasMany` reviewer\n- review `BelongsTo` CoffeeShop\n- review `BelongsTo` reviewer\n- reviewer `HasMany` review\n\nCoffeeShop 拥有多个 review，没有中间模型和外键。\n\n```\nlb relation\n? 选择从中创建关系的模型： CoffeeShop\n? 关系类型： has many\n? 选择与之创建关系的模型： Review\n? 输入关系的属性名称： reviews\n? （可选）输入定制外键：\n? 需要直通模型？ No\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\nCoffeeShop 拥有多个 reviewer，没有中间模型和外键。\n\n```\nlb relation\n? 选择从中创建关系的模型： CoffeeShop\n? 关系类型： has many\n? 选择与之创建关系的模型： Reviewer\n? 输入关系的属性名称： reviewers\n? （可选）输入定制外键：\n? 需要直通模型？ No\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\nreview 属于一个 CoffeeShop，没有中间模型和外键。\n\n```\nlb relation\n? 选择从中创建关系的模型： Review\n? 关系类型： belongs to\n? 选择与之创建关系的模型： CoffeeShop\n? 输入关系的属性名称： coffeeShop\n? （可选）输入定制外键：\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\nreview 属于一个 reviewer，外键是 `publisherId`，没有中间模型。\n\n```\nlb relation\n? 选择从中创建关系的模型： Review\n? 关系类型： belongs to\n? 选择与之创建关系的模型： Reviewer\n? 输入关系的属性名称： reviewer\n? （可选）输入定制外键： publisherId\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\nreviewer 拥有多个 review，外键是 publisherId，没有中间模型。\n\n```\nlb relation\n? 选择从中创建关系的模型： Reviewer\n? 关系类型： has many\n? 选择与之创建关系的模型： Review\n? 输入关系的属性名称： reviews\n? （可选）输入定制外键： publisherId\n? 需要直通模型？ No\n? 允许在 REST API 中嵌套关系： No\n? 禁止包含关系： No\n```\n\n我们在项目根目录的 common 子目录的 model 目录下可以看到我们创建的与模型相关的 6 个文件：\n\n```\ncommon % tree\n.\n└── models\n    ├── coffee-shop.js\n    ├── coffee-shop.json\n    ├── review.js\n    ├── review.json\n    ├── reviewer.js\n    └── reviewer.json\n```\n\n在 coffee-shop.json 文件中定义的关系：\n\n```\n \"relations\": {\n    \"reviews\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Review\",\n      \"foreignKey\": \"\"\n    },\n    \"reviewers\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Reviewer\",\n      \"foreignKey\": \"\"\n    }\n  },\n```\n\n在`review.json`文件中定义的关系：\n\n```\n\"relations\": {\n    \"coffeeShop\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"CoffeeShop\",\n      \"foreignKey\": \"\"\n    },\n    \"reviewer\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Reviewer\",\n      \"foreignKey\": \"publisherId\"\n    }\n  },\n```\n\n在`reviewer.json`文件中定义的关系：\n\n```\n\"relations\": {\n    \"reviews\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Review\",\n      \"foreignKey\": \"publisherId\"\n    }\n  },\n```\n\n## 六、定义操作权限\n\nloopback 应用通过模型访问数据，因此控制对数据的访问意味着对模型进行权限的控制：也就是说，指定什么角色可以在模型上执行读取和写入数据的方法。loopback 权限控制由权限控制列表或 ACL 决定。\n\n根据项目需求，权限控制应执行以下规则：\n\n任何人都可以阅读评论。但是创建、编辑和删除的操作必须在登录之后才有权限。\n任何人都可以注册为用户，可以登录和登出。\n登录用户可以创建新的评论，编辑或删除自己的评论。然而，他们不能修改咖啡店的评论。\n\n首先，拒绝所有人操作所有接口，这通常是定义 ACL 的起点，因为您可以选择性地允许特定操作的访问。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： （所有现有模型）\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 全部（匹配所有类型）\n? 选择角色 所有用户\n? 选择要应用的许可权 明确拒绝访问\n```\n\n现在允许所有人对 reviews 进行读操作。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： Review\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 读取\n? 选择角色 所有用户\n? 选择要应用的许可权 明确授权访问\n```\n\n允许通过身份验证的用户对 coffeeshops 进行读操作，也就是说，已登录的用户可以浏览所有咖啡店。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： CoffeeShop\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 读取\n? 选择角色 任何已认证的用户\n? 选择要应用的许可权 明确授权访问\n```\n\n允许经过身份验证的用户对 reviews 进行创建操作，也就是说，已登录的用户可以添加一条评论。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： Review\n? 选择 ACL 作用域： 单个方法\n? 输入方法名称 create\n? 选择角色 任何已认证的用户\n? 选择要应用的许可权 明确授权访问\n```\n\n使 review 的作者有权限（其“所有者”）对其进行任何更改。\n\n```\nlb acl\n? 选择要应用 ACL 条目的模型： Review\n? 选择 ACL 作用域： 所有方法和属性\n? 选择访问类型： 写入\n? 选择角色 拥有该对象的用户\n? 选择要应用的许可权 明确授权访问\n```\n\n## 七、自动填充字段内容\n\n我们需要用户在添加评论时，自动填充日期字段的内容为当前的日期。同时，由于评论和评论者之间是通过`publisherId`这个外键进行关联的，用户在添加评论时，需要将评论者的用户 Id 作为其内容进行填充。\n\n我们将定义一个远程钩子，每当在 Review 模型上调用 create()方法时（在创建新的评论时），它将被调用。\n\n通常，我们可以定义两种远程钩子：\n\n- `beforeRemote()`在远程方法之前运行。\n- `afterRemote()`在远程方法之后运行。\n\n在这两种情况下，有两个参数可以供我们使用：一个与要钩子函数的远程方法匹配的字符串，和一个回调函数。\n\n### 创建一个远程钩子\n\n这里，我们将在 review 模型中定义一个远程钩子，具体来说是 Review.beforeRemote。\n\n- 设置 publisherId 为请求中的 userId\n- 设置日期为当前日期。\n\n修改 common/models/review.js：\n\n```\nmodule.exports = function(Review) {\n  Review.beforeRemote('create', function(context, user, next) {\n    context.args.data.date = Date.now().toLocalString(); //转换成本地时间\n    context.args.data.publisherId = context.req.accessToken.userId;\n    next();\n  });\n};\n```\n\n在创建 Review 模型的新实例之前调用此函数。\n\n## 八、后台管理\n\n如何对 coffeeshops 的数据进行管理呢？这是我们常说的后台管理，需要一个管理员`admin`的角色来承担。\n这部分内容将通过另外一篇文章进行介绍。\n","slug":"Loopback3-0创建API接口实战","published":1,"updated":"2019-09-25T12:32:56.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm310012nw9wuq9u7u96","content":"<p>LoopBack 是一个高度可扩展的开源 Node.js 框架，它使您能够以很少的编码或不编写任何代码来创建动态的端到端 REST API。</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=68852902&cid=119328164&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p><a href=\"https://www.bilibili.com/video/av68852902/\" target=\"_blank\" rel=\"noopener\">到 bilibili.com 网站观看全部视频</a></p>\n<a id=\"more\"></a>\n\n<p>LoopBack 框架是由一组 Node.js 的模块构成的。你可以单独使用这些模块或把它们组合在一起使用。 应用通过 LoopBack model API 可以使用以下三种方式访问数据。</p>\n<ul>\n<li>将模型作为一个标准的 Node 对象使用</li>\n<li>通过 HTTP REST API 调用</li>\n<li>通过封装好的 API SDK，包括 iOS, Android 和 Angular</li>\n</ul>\n<p>应用程序通过 LoopBack model API 用以上三种方式查询数据，储存数据，上传文件，发送 email, 推送消息，注册/登陆用户等远程或本地的服务。用户也可以通过 Strong Remoting 将后端的 API 通过 REST, WebSocket(或其他传输协议)供客户端调用。</p>\n<h2 id=\"一、项目概述\"><a href=\"#一、项目概述\" class=\"headerlink\" title=\"一、项目概述\"></a>一、项目概述</h2><p>这是官方给出的一个关于咖啡店点评的示例。</p>\n<p>咖啡店点评是一个网站，我们可以用来发布咖啡店的评论。有三个数据模型：</p>\n<ul>\n<li>CoffeeShop 咖啡店</li>\n<li>Review 评论</li>\n<li>Reviewer 评论者</li>\n</ul>\n<p>它们有如下关系：</p>\n<ul>\n<li>CoffeeShop 拥有多个 review</li>\n<li>CoffeeShop 拥有多个 reviewer</li>\n<li>review 属于一个 CoffeeShop</li>\n<li>review 属于一个 reviewer</li>\n<li>reviewer 拥有多个 review</li>\n</ul>\n<p>一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过 ACLs 指定基本规则和权限：</p>\n<ul>\n<li>任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。</li>\n<li>任何人都可以注册为用户，然后能够登录或者注销。</li>\n<li>登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。</li>\n</ul>\n<h2 id=\"二、创建项目\"><a href=\"#二、创建项目\" class=\"headerlink\" title=\"二、创建项目\"></a>二、创建项目</h2><h3 id=\"安装-Loopback-CLI-工具\"><a href=\"#安装-Loopback-CLI-工具\" class=\"headerlink\" title=\"安装 Loopback CLI 工具\"></a>安装 Loopback CLI 工具</h3><p>在 nodejs 环境下安装 Loopback CLI 工具。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g loopback-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后，输入 lb -help 查看 Loopback CLI 工具的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb -help</span><br><span class=\"line\">Available commands:</span><br><span class=\"line\">  lb acl</span><br><span class=\"line\">  lb app</span><br><span class=\"line\">  lb bluemix</span><br><span class=\"line\">  lb boot-script</span><br><span class=\"line\">  lb datasource</span><br><span class=\"line\">  lb export-api-def</span><br><span class=\"line\">  lb middleware</span><br><span class=\"line\">  lb model</span><br><span class=\"line\">  lb oracle</span><br><span class=\"line\">  lb property</span><br><span class=\"line\">  lb relation</span><br><span class=\"line\">  lb remote-method</span><br><span class=\"line\">  lb soap</span><br><span class=\"line\">  lb swagger</span><br><span class=\"line\">  lb zosconnectee</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-LoopBack-项目\"><a href=\"#创建-LoopBack-项目\" class=\"headerlink\" title=\"创建 LoopBack 项目\"></a>创建 LoopBack 项目</h3><p>在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb</span><br></pre></td></tr></table></figure>\n\n<p>回车后按照提示输入项目名称，其他选择回车。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 您的应用程序的名称是什么？ CoffeeShop</span><br><span class=\"line\">? 输入目录名称以包含项目： CoffeeShop</span><br><span class=\"line\">   create CoffeeShop/</span><br><span class=\"line\">     info 将工作目录更改为 CoffeeShop</span><br><span class=\"line\"></span><br><span class=\"line\">? 您想要使用哪个版本的 LoopBack？ 3.x (Active Long Term Support)</span><br><span class=\"line\">? 您想要什么种类的应用程序？ api-server (使用本地用户认证的 LoopBack API 服务器)</span><br><span class=\"line\">正在生成 .yo-rc.json</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后按照提示操作后续步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后续步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">  将目录更改为您的应用程序</span><br><span class=\"line\">    $ cd CoffeeShop</span><br><span class=\"line\"></span><br><span class=\"line\">  在应用程序中创建模型</span><br><span class=\"line\">    $ lb model</span><br><span class=\"line\"></span><br><span class=\"line\">  运行应用程序</span><br><span class=\"line\">    $ node .</span><br></pre></td></tr></table></figure>\n\n<p>进入项目根目录，运行应用程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node .</span><br><span class=\"line\">hsts deprecated The &quot;includeSubdomains&quot; parameter is deprecated. Use &quot;includeSubDomains&quot; (with a capital D) instead. node_modules/loopback/lib/server-app.js:74:25</span><br><span class=\"line\">Web server listening at: http://localhost:3000</span><br><span class=\"line\">Browse your REST API at http://localhost:3000/explorer</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器，输入上面提示的地址可以访问 LoopBack 的 API 接口测试页面。由于我们还没有创建任何模型，所以只能在页面上看到框架自带的 user 的 API 调用接口。</p>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-20%E4%B8%8B%E5%8D%882.14.34.png\" alt></p>\n<p>在项目根目录命令行通过 control+C 退出服务。</p>\n<h2 id=\"三、连接数据源\"><a href=\"#三、连接数据源\" class=\"headerlink\" title=\"三、连接数据源\"></a>三、连接数据源</h2><p>LoopBack 可以自动连接市面上绝大多数数据源。我们一 MongoDb 为例来为项目添加数据持久化库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb datasource</span><br><span class=\"line\">? 输入数据源名称： md</span><br><span class=\"line\">? 为 md 选择连接器： MongoDB （StrongLoop 支持）</span><br><span class=\"line\">? Connection String url to override other settings (eg: mongodb://username:password@hostname:port/da</span><br><span class=\"line\">tabase):</span><br><span class=\"line\">? host: localhost</span><br><span class=\"line\">? port: 27017</span><br><span class=\"line\">? user:</span><br><span class=\"line\">? password: [hidden]</span><br><span class=\"line\">? database: cshop</span><br><span class=\"line\">? 安装 loopback-connector-mongodb@^4.0.0 Yes</span><br><span class=\"line\">+ loopback-connector-mongodb@4.2.0</span><br><span class=\"line\">added 7 packages from 11 contributors in 2.342s</span><br></pre></td></tr></table></figure>\n\n<p>首先，必须保证开发环境有 MongoDB 数据库并已经启动，数据库不需要实现创建，框架会根据输入的数据库名称自动创建。由于 MongoDB 的连接插件没有安装，所以这里选择 Yes 来安装。</p>\n<p>在项目目录的 server 子目录下有如下文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server % tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── boot</span><br><span class=\"line\">│   ├── authentication.js</span><br><span class=\"line\">│   └── root.js</span><br><span class=\"line\">├── component-config.json</span><br><span class=\"line\">├── config.json</span><br><span class=\"line\">├── datasources.json</span><br><span class=\"line\">├── middleware.development.json</span><br><span class=\"line\">├── middleware.json</span><br><span class=\"line\">├── model-config.json</span><br><span class=\"line\">└── server.js</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>datasources.json</code> 是数据源的配置文件，我们在代码编辑器中打开这个文件，会看到我们创建的 md 数据源。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;db&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;memory&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;md&quot;: &#123;</span><br><span class=\"line\">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;url&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;database&quot;: &quot;cshop&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;md&quot;,</span><br><span class=\"line\">    &quot;user&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;mongodb&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于框架原先定义了一个数据源 db，我们不需要了，把 db 数据源删掉，将 md 数据源改名为 db。修改之后代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;url&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;database&quot;: &quot;cshop&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;md&quot;,</span><br><span class=\"line\">    &quot;user&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;mongodb&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建好数据源，框架帮我们自动连接数据库，我们对数据的持久化操作也会自动保存到数据库中。</p>\n<h2 id=\"四、创建模型\"><a href=\"#四、创建模型\" class=\"headerlink\" title=\"四、创建模型\"></a>四、创建模型</h2><h3 id=\"CoffeeShop-模型\"><a href=\"#CoffeeShop-模型\" class=\"headerlink\" title=\"CoffeeShop 模型\"></a>CoffeeShop 模型</h3><table>\n<tr>\n<th>属性名</th>\n<th>属性类型</th>\n<th>是否必填</th>\n</tr>\n<tr>\n<td> name </td>\n<td> String </td>\n<td> y </td>\n</tr>\n<tr>\n<td> city </td>\n<td> String </td>\n<td> y </td>\n</tr>\n</table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb model</span><br><span class=\"line\">? 请输入模型名称： CoffeeShop</span><br><span class=\"line\">? 选择要向其附加 CoffeeShop 的数据源： db (mongodb)</span><br><span class=\"line\">? 选择模型的基类 PersistedModel</span><br><span class=\"line\">? 通过 REST API 公开 CoffeeShop？ Yes</span><br><span class=\"line\">? 定制复数形式（用于构建 REST URL）：</span><br><span class=\"line\">? 公共模型或仅服务器？ 公共</span><br><span class=\"line\">现在添加一些 CoffeeShop 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： name</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 CoffeeShop 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： city</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 CoffeeShop 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"review-模型\"><a href=\"#review-模型\" class=\"headerlink\" title=\"review 模型\"></a>review 模型</h3><table>\n<tr>\n<th>属性名</th>\n<th>属性类型</th>\n<th>是否必填</th>\n</tr>\n<tr>\n<td> date </td>\n<td> date </td>\n<td> y </td>\n</tr>\n<tr>\n<td> rating </td>\n<td> number </td>\n<td> n </td>\n</tr>\n<tr>\n<td> comments </td>\n<td> string </td>\n<td> y </td>\n</tr>\n</table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb model</span><br><span class=\"line\">? 请输入模型名称： Review</span><br><span class=\"line\">? 选择要向其附加 Review 的数据源： db (mongodb)</span><br><span class=\"line\">? 选择模型的基类 PersistedModel</span><br><span class=\"line\">? 通过 REST API 公开 Review？ Yes</span><br><span class=\"line\">? 定制复数形式（用于构建 REST URL）：</span><br><span class=\"line\">? 公共模型或仅服务器？ 公共</span><br><span class=\"line\">现在添加一些 Review 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： date</span><br><span class=\"line\">? 属性类型： date</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 Review 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： rating</span><br><span class=\"line\">? 属性类型： number</span><br><span class=\"line\">? 是否为必需？ No</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 Review 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： comments</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 Review 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称：</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reviewer-模型\"><a href=\"#reviewer-模型\" class=\"headerlink\" title=\"reviewer 模型\"></a>reviewer 模型</h3><p>reviewer 模型继承自框架自带的 user 模型。在选择模型的基类时不能选择 <code>PersistedModel</code>，而要选择 <code>user</code>，不用添加任何属性，直接回车即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb model</span><br><span class=\"line\">? 请输入模型名称： Reviewer</span><br><span class=\"line\">? 选择要向其附加 Reviewer 的数据源： db (mongodb)</span><br><span class=\"line\">? 选择模型的基类 User</span><br><span class=\"line\">? 通过 REST API 公开 Reviewer？ Yes</span><br><span class=\"line\">? 定制复数形式（用于构建 REST URL）：</span><br><span class=\"line\">? 公共模型或仅服务器？ 公共</span><br><span class=\"line\">现在添加一些 Reviewer 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称：</span><br></pre></td></tr></table></figure>\n\n<p>在项目根目录命令行通过 node . 来启动服务。在浏览器中再次打开 <a href=\"http://localhost:3000/explorer。\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/explorer。</a></p>\n<p>可以看到 API 调试界面除了先前的 user 接口外，增加了我们刚刚创建的 3 个模型的接口。</p>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-20%E4%B8%8B%E5%8D%883.25.55.png\" alt></p>\n<h2 id=\"五、定义模型之间的关系\"><a href=\"#五、定义模型之间的关系\" class=\"headerlink\" title=\"五、定义模型之间的关系\"></a>五、定义模型之间的关系</h2><p>LoopBack 支持许多不同类型的模型关系：BelongsTo, HasMany, HasManyThrough, and HasAndBelongsToMany 等等。根据项目需求可以定义如下关系：</p>\n<ul>\n<li>CoffeeShop <code>HasMany</code> review</li>\n<li>CoffeeShop <code>HasMany</code> reviewer</li>\n<li>review <code>BelongsTo</code> CoffeeShop</li>\n<li>review <code>BelongsTo</code> reviewer</li>\n<li>reviewer <code>HasMany</code> review</li>\n</ul>\n<p>CoffeeShop 拥有多个 review，没有中间模型和外键。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： CoffeeShop</span><br><span class=\"line\">? 关系类型： has many</span><br><span class=\"line\">? 选择与之创建关系的模型： Review</span><br><span class=\"line\">? 输入关系的属性名称： reviews</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 需要直通模型？ No</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>CoffeeShop 拥有多个 reviewer，没有中间模型和外键。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： CoffeeShop</span><br><span class=\"line\">? 关系类型： has many</span><br><span class=\"line\">? 选择与之创建关系的模型： Reviewer</span><br><span class=\"line\">? 输入关系的属性名称： reviewers</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 需要直通模型？ No</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>review 属于一个 CoffeeShop，没有中间模型和外键。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： Review</span><br><span class=\"line\">? 关系类型： belongs to</span><br><span class=\"line\">? 选择与之创建关系的模型： CoffeeShop</span><br><span class=\"line\">? 输入关系的属性名称： coffeeShop</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>review 属于一个 reviewer，外键是 <code>publisherId</code>，没有中间模型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： Review</span><br><span class=\"line\">? 关系类型： belongs to</span><br><span class=\"line\">? 选择与之创建关系的模型： Reviewer</span><br><span class=\"line\">? 输入关系的属性名称： reviewer</span><br><span class=\"line\">? （可选）输入定制外键： publisherId</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>reviewer 拥有多个 review，外键是 publisherId，没有中间模型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： Reviewer</span><br><span class=\"line\">? 关系类型： has many</span><br><span class=\"line\">? 选择与之创建关系的模型： Review</span><br><span class=\"line\">? 输入关系的属性名称： reviews</span><br><span class=\"line\">? （可选）输入定制外键： publisherId</span><br><span class=\"line\">? 需要直通模型？ No</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>我们在项目根目录的 common 子目录的 model 目录下可以看到我们创建的与模型相关的 6 个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">common % tree</span><br><span class=\"line\">.</span><br><span class=\"line\">└── models</span><br><span class=\"line\">    ├── coffee-shop.js</span><br><span class=\"line\">    ├── coffee-shop.json</span><br><span class=\"line\">    ├── review.js</span><br><span class=\"line\">    ├── review.json</span><br><span class=\"line\">    ├── reviewer.js</span><br><span class=\"line\">    └── reviewer.json</span><br></pre></td></tr></table></figure>\n\n<p>在 coffee-shop.json 文件中定义的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">   &quot;reviews&quot;: &#123;</span><br><span class=\"line\">     &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">     &quot;model&quot;: &quot;Review&quot;,</span><br><span class=\"line\">     &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   &quot;reviewers&quot;: &#123;</span><br><span class=\"line\">     &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">     &quot;model&quot;: &quot;Reviewer&quot;,</span><br><span class=\"line\">     &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>在<code>review.json</code>文件中定义的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;coffeeShop&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;CoffeeShop&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;reviewer&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;Reviewer&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;publisherId&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>在<code>reviewer.json</code>文件中定义的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;reviews&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;Review&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;publisherId&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、定义操作权限\"><a href=\"#六、定义操作权限\" class=\"headerlink\" title=\"六、定义操作权限\"></a>六、定义操作权限</h2><p>loopback 应用通过模型访问数据，因此控制对数据的访问意味着对模型进行权限的控制：也就是说，指定什么角色可以在模型上执行读取和写入数据的方法。loopback 权限控制由权限控制列表或 ACL 决定。</p>\n<p>根据项目需求，权限控制应执行以下规则：</p>\n<p>任何人都可以阅读评论。但是创建、编辑和删除的操作必须在登录之后才有权限。<br>任何人都可以注册为用户，可以登录和登出。<br>登录用户可以创建新的评论，编辑或删除自己的评论。然而，他们不能修改咖啡店的评论。</p>\n<p>首先，拒绝所有人操作所有接口，这通常是定义 ACL 的起点，因为您可以选择性地允许特定操作的访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： （所有现有模型）</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 全部（匹配所有类型）</span><br><span class=\"line\">? 选择角色 所有用户</span><br><span class=\"line\">? 选择要应用的许可权 明确拒绝访问</span><br></pre></td></tr></table></figure>\n\n<p>现在允许所有人对 reviews 进行读操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： Review</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 读取</span><br><span class=\"line\">? 选择角色 所有用户</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<p>允许通过身份验证的用户对 coffeeshops 进行读操作，也就是说，已登录的用户可以浏览所有咖啡店。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： CoffeeShop</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 读取</span><br><span class=\"line\">? 选择角色 任何已认证的用户</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<p>允许经过身份验证的用户对 reviews 进行创建操作，也就是说，已登录的用户可以添加一条评论。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： Review</span><br><span class=\"line\">? 选择 ACL 作用域： 单个方法</span><br><span class=\"line\">? 输入方法名称 create</span><br><span class=\"line\">? 选择角色 任何已认证的用户</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<p>使 review 的作者有权限（其“所有者”）对其进行任何更改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： Review</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 写入</span><br><span class=\"line\">? 选择角色 拥有该对象的用户</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七、自动填充字段内容\"><a href=\"#七、自动填充字段内容\" class=\"headerlink\" title=\"七、自动填充字段内容\"></a>七、自动填充字段内容</h2><p>我们需要用户在添加评论时，自动填充日期字段的内容为当前的日期。同时，由于评论和评论者之间是通过<code>publisherId</code>这个外键进行关联的，用户在添加评论时，需要将评论者的用户 Id 作为其内容进行填充。</p>\n<p>我们将定义一个远程钩子，每当在 Review 模型上调用 create()方法时（在创建新的评论时），它将被调用。</p>\n<p>通常，我们可以定义两种远程钩子：</p>\n<ul>\n<li><code>beforeRemote()</code>在远程方法之前运行。</li>\n<li><code>afterRemote()</code>在远程方法之后运行。</li>\n</ul>\n<p>在这两种情况下，有两个参数可以供我们使用：一个与要钩子函数的远程方法匹配的字符串，和一个回调函数。</p>\n<h3 id=\"创建一个远程钩子\"><a href=\"#创建一个远程钩子\" class=\"headerlink\" title=\"创建一个远程钩子\"></a>创建一个远程钩子</h3><p>这里，我们将在 review 模型中定义一个远程钩子，具体来说是 Review.beforeRemote。</p>\n<ul>\n<li>设置 publisherId 为请求中的 userId</li>\n<li>设置日期为当前日期。</li>\n</ul>\n<p>修改 common/models/review.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(Review) &#123;</span><br><span class=\"line\">  Review.beforeRemote(&apos;create&apos;, function(context, user, next) &#123;</span><br><span class=\"line\">    context.args.data.date = Date.now().toLocalString(); //转换成本地时间</span><br><span class=\"line\">    context.args.data.publisherId = context.req.accessToken.userId;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在创建 Review 模型的新实例之前调用此函数。</p>\n<h2 id=\"八、后台管理\"><a href=\"#八、后台管理\" class=\"headerlink\" title=\"八、后台管理\"></a>八、后台管理</h2><p>如何对 coffeeshops 的数据进行管理呢？这是我们常说的后台管理，需要一个管理员<code>admin</code>的角色来承担。<br>这部分内容将通过另外一篇文章进行介绍。</p>\n","site":{"data":{}},"excerpt":"<p>LoopBack 是一个高度可扩展的开源 Node.js 框架，它使您能够以很少的编码或不编写任何代码来创建动态的端到端 REST API。</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=68852902&cid=119328164&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p><a href=\"https://www.bilibili.com/video/av68852902/\" target=\"_blank\" rel=\"noopener\">到 bilibili.com 网站观看全部视频</a></p>","more":"<p>LoopBack 框架是由一组 Node.js 的模块构成的。你可以单独使用这些模块或把它们组合在一起使用。 应用通过 LoopBack model API 可以使用以下三种方式访问数据。</p>\n<ul>\n<li>将模型作为一个标准的 Node 对象使用</li>\n<li>通过 HTTP REST API 调用</li>\n<li>通过封装好的 API SDK，包括 iOS, Android 和 Angular</li>\n</ul>\n<p>应用程序通过 LoopBack model API 用以上三种方式查询数据，储存数据，上传文件，发送 email, 推送消息，注册/登陆用户等远程或本地的服务。用户也可以通过 Strong Remoting 将后端的 API 通过 REST, WebSocket(或其他传输协议)供客户端调用。</p>\n<h2 id=\"一、项目概述\"><a href=\"#一、项目概述\" class=\"headerlink\" title=\"一、项目概述\"></a>一、项目概述</h2><p>这是官方给出的一个关于咖啡店点评的示例。</p>\n<p>咖啡店点评是一个网站，我们可以用来发布咖啡店的评论。有三个数据模型：</p>\n<ul>\n<li>CoffeeShop 咖啡店</li>\n<li>Review 评论</li>\n<li>Reviewer 评论者</li>\n</ul>\n<p>它们有如下关系：</p>\n<ul>\n<li>CoffeeShop 拥有多个 review</li>\n<li>CoffeeShop 拥有多个 reviewer</li>\n<li>review 属于一个 CoffeeShop</li>\n<li>review 属于一个 reviewer</li>\n<li>reviewer 拥有多个 review</li>\n</ul>\n<p>一般来说，用户可以创建，编辑，删除和阅读咖啡店的评论，并通过 ACLs 指定基本规则和权限：</p>\n<ul>\n<li>任何人都可以阅读评论，但必须先登录才能创建，编辑或删除它们。</li>\n<li>任何人都可以注册为用户，然后能够登录或者注销。</li>\n<li>登录用户可以创建新的评论，编辑或删除自己的评论，但是他们不能修改咖啡店相关内容。</li>\n</ul>\n<h2 id=\"二、创建项目\"><a href=\"#二、创建项目\" class=\"headerlink\" title=\"二、创建项目\"></a>二、创建项目</h2><h3 id=\"安装-Loopback-CLI-工具\"><a href=\"#安装-Loopback-CLI-工具\" class=\"headerlink\" title=\"安装 Loopback CLI 工具\"></a>安装 Loopback CLI 工具</h3><p>在 nodejs 环境下安装 Loopback CLI 工具。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g loopback-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后，输入 lb -help 查看 Loopback CLI 工具的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb -help</span><br><span class=\"line\">Available commands:</span><br><span class=\"line\">  lb acl</span><br><span class=\"line\">  lb app</span><br><span class=\"line\">  lb bluemix</span><br><span class=\"line\">  lb boot-script</span><br><span class=\"line\">  lb datasource</span><br><span class=\"line\">  lb export-api-def</span><br><span class=\"line\">  lb middleware</span><br><span class=\"line\">  lb model</span><br><span class=\"line\">  lb oracle</span><br><span class=\"line\">  lb property</span><br><span class=\"line\">  lb relation</span><br><span class=\"line\">  lb remote-method</span><br><span class=\"line\">  lb soap</span><br><span class=\"line\">  lb swagger</span><br><span class=\"line\">  lb zosconnectee</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-LoopBack-项目\"><a href=\"#创建-LoopBack-项目\" class=\"headerlink\" title=\"创建 LoopBack 项目\"></a>创建 LoopBack 项目</h3><p>在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb</span><br></pre></td></tr></table></figure>\n\n<p>回车后按照提示输入项目名称，其他选择回车。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 您的应用程序的名称是什么？ CoffeeShop</span><br><span class=\"line\">? 输入目录名称以包含项目： CoffeeShop</span><br><span class=\"line\">   create CoffeeShop/</span><br><span class=\"line\">     info 将工作目录更改为 CoffeeShop</span><br><span class=\"line\"></span><br><span class=\"line\">? 您想要使用哪个版本的 LoopBack？ 3.x (Active Long Term Support)</span><br><span class=\"line\">? 您想要什么种类的应用程序？ api-server (使用本地用户认证的 LoopBack API 服务器)</span><br><span class=\"line\">正在生成 .yo-rc.json</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后按照提示操作后续步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后续步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">  将目录更改为您的应用程序</span><br><span class=\"line\">    $ cd CoffeeShop</span><br><span class=\"line\"></span><br><span class=\"line\">  在应用程序中创建模型</span><br><span class=\"line\">    $ lb model</span><br><span class=\"line\"></span><br><span class=\"line\">  运行应用程序</span><br><span class=\"line\">    $ node .</span><br></pre></td></tr></table></figure>\n\n<p>进入项目根目录，运行应用程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node .</span><br><span class=\"line\">hsts deprecated The &quot;includeSubdomains&quot; parameter is deprecated. Use &quot;includeSubDomains&quot; (with a capital D) instead. node_modules/loopback/lib/server-app.js:74:25</span><br><span class=\"line\">Web server listening at: http://localhost:3000</span><br><span class=\"line\">Browse your REST API at http://localhost:3000/explorer</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器，输入上面提示的地址可以访问 LoopBack 的 API 接口测试页面。由于我们还没有创建任何模型，所以只能在页面上看到框架自带的 user 的 API 调用接口。</p>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-20%E4%B8%8B%E5%8D%882.14.34.png\" alt></p>\n<p>在项目根目录命令行通过 control+C 退出服务。</p>\n<h2 id=\"三、连接数据源\"><a href=\"#三、连接数据源\" class=\"headerlink\" title=\"三、连接数据源\"></a>三、连接数据源</h2><p>LoopBack 可以自动连接市面上绝大多数数据源。我们一 MongoDb 为例来为项目添加数据持久化库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb datasource</span><br><span class=\"line\">? 输入数据源名称： md</span><br><span class=\"line\">? 为 md 选择连接器： MongoDB （StrongLoop 支持）</span><br><span class=\"line\">? Connection String url to override other settings (eg: mongodb://username:password@hostname:port/da</span><br><span class=\"line\">tabase):</span><br><span class=\"line\">? host: localhost</span><br><span class=\"line\">? port: 27017</span><br><span class=\"line\">? user:</span><br><span class=\"line\">? password: [hidden]</span><br><span class=\"line\">? database: cshop</span><br><span class=\"line\">? 安装 loopback-connector-mongodb@^4.0.0 Yes</span><br><span class=\"line\">+ loopback-connector-mongodb@4.2.0</span><br><span class=\"line\">added 7 packages from 11 contributors in 2.342s</span><br></pre></td></tr></table></figure>\n\n<p>首先，必须保证开发环境有 MongoDB 数据库并已经启动，数据库不需要实现创建，框架会根据输入的数据库名称自动创建。由于 MongoDB 的连接插件没有安装，所以这里选择 Yes 来安装。</p>\n<p>在项目目录的 server 子目录下有如下文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server % tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── boot</span><br><span class=\"line\">│   ├── authentication.js</span><br><span class=\"line\">│   └── root.js</span><br><span class=\"line\">├── component-config.json</span><br><span class=\"line\">├── config.json</span><br><span class=\"line\">├── datasources.json</span><br><span class=\"line\">├── middleware.development.json</span><br><span class=\"line\">├── middleware.json</span><br><span class=\"line\">├── model-config.json</span><br><span class=\"line\">└── server.js</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>datasources.json</code> 是数据源的配置文件，我们在代码编辑器中打开这个文件，会看到我们创建的 md 数据源。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;db&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;memory&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;md&quot;: &#123;</span><br><span class=\"line\">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;url&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;database&quot;: &quot;cshop&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;md&quot;,</span><br><span class=\"line\">    &quot;user&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;mongodb&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于框架原先定义了一个数据源 db，我们不需要了，把 db 数据源删掉，将 md 数据源改名为 db。修改之后代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">  &quot;db&quot;: &#123;</span><br><span class=\"line\">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;port&quot;: 27017,</span><br><span class=\"line\">    &quot;url&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;database&quot;: &quot;cshop&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;md&quot;,</span><br><span class=\"line\">    &quot;user&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;connector&quot;: &quot;mongodb&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建好数据源，框架帮我们自动连接数据库，我们对数据的持久化操作也会自动保存到数据库中。</p>\n<h2 id=\"四、创建模型\"><a href=\"#四、创建模型\" class=\"headerlink\" title=\"四、创建模型\"></a>四、创建模型</h2><h3 id=\"CoffeeShop-模型\"><a href=\"#CoffeeShop-模型\" class=\"headerlink\" title=\"CoffeeShop 模型\"></a>CoffeeShop 模型</h3><table>\n<tr>\n<th>属性名</th>\n<th>属性类型</th>\n<th>是否必填</th>\n</tr>\n<tr>\n<td> name </td>\n<td> String </td>\n<td> y </td>\n</tr>\n<tr>\n<td> city </td>\n<td> String </td>\n<td> y </td>\n</tr>\n</table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb model</span><br><span class=\"line\">? 请输入模型名称： CoffeeShop</span><br><span class=\"line\">? 选择要向其附加 CoffeeShop 的数据源： db (mongodb)</span><br><span class=\"line\">? 选择模型的基类 PersistedModel</span><br><span class=\"line\">? 通过 REST API 公开 CoffeeShop？ Yes</span><br><span class=\"line\">? 定制复数形式（用于构建 REST URL）：</span><br><span class=\"line\">? 公共模型或仅服务器？ 公共</span><br><span class=\"line\">现在添加一些 CoffeeShop 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： name</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 CoffeeShop 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： city</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 CoffeeShop 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"review-模型\"><a href=\"#review-模型\" class=\"headerlink\" title=\"review 模型\"></a>review 模型</h3><table>\n<tr>\n<th>属性名</th>\n<th>属性类型</th>\n<th>是否必填</th>\n</tr>\n<tr>\n<td> date </td>\n<td> date </td>\n<td> y </td>\n</tr>\n<tr>\n<td> rating </td>\n<td> number </td>\n<td> n </td>\n</tr>\n<tr>\n<td> comments </td>\n<td> string </td>\n<td> y </td>\n</tr>\n</table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb model</span><br><span class=\"line\">? 请输入模型名称： Review</span><br><span class=\"line\">? 选择要向其附加 Review 的数据源： db (mongodb)</span><br><span class=\"line\">? 选择模型的基类 PersistedModel</span><br><span class=\"line\">? 通过 REST API 公开 Review？ Yes</span><br><span class=\"line\">? 定制复数形式（用于构建 REST URL）：</span><br><span class=\"line\">? 公共模型或仅服务器？ 公共</span><br><span class=\"line\">现在添加一些 Review 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： date</span><br><span class=\"line\">? 属性类型： date</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 Review 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： rating</span><br><span class=\"line\">? 属性类型： number</span><br><span class=\"line\">? 是否为必需？ No</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 Review 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称： comments</span><br><span class=\"line\">? 属性类型： string</span><br><span class=\"line\">? 是否为必需？ Yes</span><br><span class=\"line\">? 缺省值[对于无，保留为空白]：</span><br><span class=\"line\"></span><br><span class=\"line\">下面添加另一个 Review 属性。</span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称：</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reviewer-模型\"><a href=\"#reviewer-模型\" class=\"headerlink\" title=\"reviewer 模型\"></a>reviewer 模型</h3><p>reviewer 模型继承自框架自带的 user 模型。在选择模型的基类时不能选择 <code>PersistedModel</code>，而要选择 <code>user</code>，不用添加任何属性，直接回车即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb model</span><br><span class=\"line\">? 请输入模型名称： Reviewer</span><br><span class=\"line\">? 选择要向其附加 Reviewer 的数据源： db (mongodb)</span><br><span class=\"line\">? 选择模型的基类 User</span><br><span class=\"line\">? 通过 REST API 公开 Reviewer？ Yes</span><br><span class=\"line\">? 定制复数形式（用于构建 REST URL）：</span><br><span class=\"line\">? 公共模型或仅服务器？ 公共</span><br><span class=\"line\">现在添加一些 Reviewer 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">在完成时输入空的属性名称。</span><br><span class=\"line\">? 属性名称：</span><br></pre></td></tr></table></figure>\n\n<p>在项目根目录命令行通过 node . 来启动服务。在浏览器中再次打开 <a href=\"http://localhost:3000/explorer。\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/explorer。</a></p>\n<p>可以看到 API 调试界面除了先前的 user 接口外，增加了我们刚刚创建的 3 个模型的接口。</p>\n<p><img src=\"http://huangxiaoman.cn/%E6%88%AA%E5%B1%8F2019-09-20%E4%B8%8B%E5%8D%883.25.55.png\" alt></p>\n<h2 id=\"五、定义模型之间的关系\"><a href=\"#五、定义模型之间的关系\" class=\"headerlink\" title=\"五、定义模型之间的关系\"></a>五、定义模型之间的关系</h2><p>LoopBack 支持许多不同类型的模型关系：BelongsTo, HasMany, HasManyThrough, and HasAndBelongsToMany 等等。根据项目需求可以定义如下关系：</p>\n<ul>\n<li>CoffeeShop <code>HasMany</code> review</li>\n<li>CoffeeShop <code>HasMany</code> reviewer</li>\n<li>review <code>BelongsTo</code> CoffeeShop</li>\n<li>review <code>BelongsTo</code> reviewer</li>\n<li>reviewer <code>HasMany</code> review</li>\n</ul>\n<p>CoffeeShop 拥有多个 review，没有中间模型和外键。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： CoffeeShop</span><br><span class=\"line\">? 关系类型： has many</span><br><span class=\"line\">? 选择与之创建关系的模型： Review</span><br><span class=\"line\">? 输入关系的属性名称： reviews</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 需要直通模型？ No</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>CoffeeShop 拥有多个 reviewer，没有中间模型和外键。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： CoffeeShop</span><br><span class=\"line\">? 关系类型： has many</span><br><span class=\"line\">? 选择与之创建关系的模型： Reviewer</span><br><span class=\"line\">? 输入关系的属性名称： reviewers</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 需要直通模型？ No</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>review 属于一个 CoffeeShop，没有中间模型和外键。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： Review</span><br><span class=\"line\">? 关系类型： belongs to</span><br><span class=\"line\">? 选择与之创建关系的模型： CoffeeShop</span><br><span class=\"line\">? 输入关系的属性名称： coffeeShop</span><br><span class=\"line\">? （可选）输入定制外键：</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>review 属于一个 reviewer，外键是 <code>publisherId</code>，没有中间模型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： Review</span><br><span class=\"line\">? 关系类型： belongs to</span><br><span class=\"line\">? 选择与之创建关系的模型： Reviewer</span><br><span class=\"line\">? 输入关系的属性名称： reviewer</span><br><span class=\"line\">? （可选）输入定制外键： publisherId</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>reviewer 拥有多个 review，外键是 publisherId，没有中间模型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb relation</span><br><span class=\"line\">? 选择从中创建关系的模型： Reviewer</span><br><span class=\"line\">? 关系类型： has many</span><br><span class=\"line\">? 选择与之创建关系的模型： Review</span><br><span class=\"line\">? 输入关系的属性名称： reviews</span><br><span class=\"line\">? （可选）输入定制外键： publisherId</span><br><span class=\"line\">? 需要直通模型？ No</span><br><span class=\"line\">? 允许在 REST API 中嵌套关系： No</span><br><span class=\"line\">? 禁止包含关系： No</span><br></pre></td></tr></table></figure>\n\n<p>我们在项目根目录的 common 子目录的 model 目录下可以看到我们创建的与模型相关的 6 个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">common % tree</span><br><span class=\"line\">.</span><br><span class=\"line\">└── models</span><br><span class=\"line\">    ├── coffee-shop.js</span><br><span class=\"line\">    ├── coffee-shop.json</span><br><span class=\"line\">    ├── review.js</span><br><span class=\"line\">    ├── review.json</span><br><span class=\"line\">    ├── reviewer.js</span><br><span class=\"line\">    └── reviewer.json</span><br></pre></td></tr></table></figure>\n\n<p>在 coffee-shop.json 文件中定义的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">   &quot;reviews&quot;: &#123;</span><br><span class=\"line\">     &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">     &quot;model&quot;: &quot;Review&quot;,</span><br><span class=\"line\">     &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   &quot;reviewers&quot;: &#123;</span><br><span class=\"line\">     &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">     &quot;model&quot;: &quot;Reviewer&quot;,</span><br><span class=\"line\">     &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>在<code>review.json</code>文件中定义的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;coffeeShop&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;CoffeeShop&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;reviewer&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;belongsTo&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;Reviewer&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;publisherId&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>在<code>reviewer.json</code>文件中定义的关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;relations&quot;: &#123;</span><br><span class=\"line\">    &quot;reviews&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;hasMany&quot;,</span><br><span class=\"line\">      &quot;model&quot;: &quot;Review&quot;,</span><br><span class=\"line\">      &quot;foreignKey&quot;: &quot;publisherId&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、定义操作权限\"><a href=\"#六、定义操作权限\" class=\"headerlink\" title=\"六、定义操作权限\"></a>六、定义操作权限</h2><p>loopback 应用通过模型访问数据，因此控制对数据的访问意味着对模型进行权限的控制：也就是说，指定什么角色可以在模型上执行读取和写入数据的方法。loopback 权限控制由权限控制列表或 ACL 决定。</p>\n<p>根据项目需求，权限控制应执行以下规则：</p>\n<p>任何人都可以阅读评论。但是创建、编辑和删除的操作必须在登录之后才有权限。<br>任何人都可以注册为用户，可以登录和登出。<br>登录用户可以创建新的评论，编辑或删除自己的评论。然而，他们不能修改咖啡店的评论。</p>\n<p>首先，拒绝所有人操作所有接口，这通常是定义 ACL 的起点，因为您可以选择性地允许特定操作的访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： （所有现有模型）</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 全部（匹配所有类型）</span><br><span class=\"line\">? 选择角色 所有用户</span><br><span class=\"line\">? 选择要应用的许可权 明确拒绝访问</span><br></pre></td></tr></table></figure>\n\n<p>现在允许所有人对 reviews 进行读操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： Review</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 读取</span><br><span class=\"line\">? 选择角色 所有用户</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<p>允许通过身份验证的用户对 coffeeshops 进行读操作，也就是说，已登录的用户可以浏览所有咖啡店。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： CoffeeShop</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 读取</span><br><span class=\"line\">? 选择角色 任何已认证的用户</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<p>允许经过身份验证的用户对 reviews 进行创建操作，也就是说，已登录的用户可以添加一条评论。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： Review</span><br><span class=\"line\">? 选择 ACL 作用域： 单个方法</span><br><span class=\"line\">? 输入方法名称 create</span><br><span class=\"line\">? 选择角色 任何已认证的用户</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<p>使 review 的作者有权限（其“所有者”）对其进行任何更改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lb acl</span><br><span class=\"line\">? 选择要应用 ACL 条目的模型： Review</span><br><span class=\"line\">? 选择 ACL 作用域： 所有方法和属性</span><br><span class=\"line\">? 选择访问类型： 写入</span><br><span class=\"line\">? 选择角色 拥有该对象的用户</span><br><span class=\"line\">? 选择要应用的许可权 明确授权访问</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七、自动填充字段内容\"><a href=\"#七、自动填充字段内容\" class=\"headerlink\" title=\"七、自动填充字段内容\"></a>七、自动填充字段内容</h2><p>我们需要用户在添加评论时，自动填充日期字段的内容为当前的日期。同时，由于评论和评论者之间是通过<code>publisherId</code>这个外键进行关联的，用户在添加评论时，需要将评论者的用户 Id 作为其内容进行填充。</p>\n<p>我们将定义一个远程钩子，每当在 Review 模型上调用 create()方法时（在创建新的评论时），它将被调用。</p>\n<p>通常，我们可以定义两种远程钩子：</p>\n<ul>\n<li><code>beforeRemote()</code>在远程方法之前运行。</li>\n<li><code>afterRemote()</code>在远程方法之后运行。</li>\n</ul>\n<p>在这两种情况下，有两个参数可以供我们使用：一个与要钩子函数的远程方法匹配的字符串，和一个回调函数。</p>\n<h3 id=\"创建一个远程钩子\"><a href=\"#创建一个远程钩子\" class=\"headerlink\" title=\"创建一个远程钩子\"></a>创建一个远程钩子</h3><p>这里，我们将在 review 模型中定义一个远程钩子，具体来说是 Review.beforeRemote。</p>\n<ul>\n<li>设置 publisherId 为请求中的 userId</li>\n<li>设置日期为当前日期。</li>\n</ul>\n<p>修改 common/models/review.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(Review) &#123;</span><br><span class=\"line\">  Review.beforeRemote(&apos;create&apos;, function(context, user, next) &#123;</span><br><span class=\"line\">    context.args.data.date = Date.now().toLocalString(); //转换成本地时间</span><br><span class=\"line\">    context.args.data.publisherId = context.req.accessToken.userId;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在创建 Review 模型的新实例之前调用此函数。</p>\n<h2 id=\"八、后台管理\"><a href=\"#八、后台管理\" class=\"headerlink\" title=\"八、后台管理\"></a>八、后台管理</h2><p>如何对 coffeeshops 的数据进行管理呢？这是我们常说的后台管理，需要一个管理员<code>admin</code>的角色来承担。<br>这部分内容将通过另外一篇文章进行介绍。</p>"},{"title":"使用 Express + MongoDB 搭建多人博客","date":"2019-08-17T10:49:40.000Z","_content":"\n[转自 https://github.com/nswbmw](https://github.com/nswbmw)\n\n# Node.js\n## 安装 Node.js\n\n有三种方式安装 Node.js：一是通过安装包安装，二是通过源码编译安装，三是在 Linux 下可以通过 yum|apt-get 安装，在 Mac 下可以通过 [Homebrew](http://brew.sh/) 安装。对于 Windows 和 Mac 用户，推荐使用安装包安装，Linux 用户推荐使用源码编译安装。\n\n<!-- more -->\n\n### Windows 和 Mac 安装：\n\n#### 第一步：\n\n打开 [Node.js 官网](https://nodejs.org/en/)，可以看到以下两个下载选项：\n\n![](/images/1.1.1.png)\n\n左边的是 LTS 版，用过 ubuntu 的同学可能比较熟悉，即长期支持版本，大多数人用这个就可以了。右边是最新版，支持最新的语言特性（比如对 ES6 的支持更全面），想尝试新特性的开发者可以安装这个版本。我们选择左边的 v6.9.1 LTS 点击下载。\n\n> 小提示：从 [http://node.green](http://node.green) 上可以看到 Node.js 各个版本对 ES6 的支持情况。\n\n#### 第二步：\n\n安装 Node.js，这个没什么好说的，一直点击 `继续` 即可。\n\n![](/images/1.1.2.png)\n\n#### 第三步：####\n\n提示安装成功后，打开终端输入以下命令，可以看到 node 和 npm 都已经安装好了：\n\n![](/images/1.1.3.png)\n\n### Linux 安装：\n\nLinux 用户可通过源码编译安装：\n\n```sh\ncurl -O https://nodejs.org/dist/v6.9.1/node-v6.9.1.tar.gz\ntar -xzvf node-v6.9.1.tar.gz\ncd node-v6.9.1\n./configure\nmake\nmake install\n```\n\n> 注意: 如果编译过程报错，可能是缺少某些依赖包。因为报错内容不尽相同，请读者自行求助搜索引擎或 [stackoverflow](http://stackoverflow.com/)。\n\n## n 和 nvm\n\n通常我们使用稳定的 LTS 版本的 Node.js 即可，但有的情况下我们又想尝试一下新的特性，我们总不能来回安装不同版本的 Node.js 吧，这个时候我们就需要 [n](https://github.com/tj/n) 或者 [nvm](https://github.com/creationix/nvm) 了。n 和 nvm 是两个常用的 Node.js 版本管理工具，关于 n 和 nvm 的使用以及区别，[这篇文章](http://taobaofed.org/blog/2015/11/17/nvm-or-n/) 讲得特别详细，这里不再赘述。\n\n## nrm\n\n[nrm](https://github.com/Pana/nrm) 是一个管理 npm 源的工具。用过 ruby 和 gem 的同学会比较熟悉，通常我们会把 gem 源切到国内的淘宝镜像，这样在安装和更新一些包的时候比较快。nrm 同理，用来切换官方 npm 源和国内的 npm 源（如: [cnpm](http://cnpmjs.org/)），当然也可以用来切换官方 npm 源和公司私有 npm 源。\n\n全局安装 nrm:\n\n```sh\nnpm i nrm -g\n```\n\n查看当前 nrm 内置的几个 npm 源的地址：\n\n![](/images/1.1.4.png)\n\n切换到 cnpm：\n\n![](/images/1.1.5.png)\n\n## 安装与启动 MongoDB\n\n- Windows 用户向导：https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/\n- Linux 用户向导：https://docs.mongodb.com/manual/administration/install-on-linux/\n- Mac 用户向导：https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\n\n### Robomongo 和 Mongochef\n\n#### Robomongo\n\n[Robomongo](https://robomongo.org/) 是一个基于 Shell 的跨平台开源 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac，嵌入了 JavaScript 引擎和 MongoDB mongo，只要你会使用 mongo shell，你就会使用 Robomongo，它还提供了语法高亮、自动补全、差别视图等。\n\n[Robomongo 下载地址](https://robomongo.org/download)\n\n下载并安装成功后点击左上角的 `Create` 创建一个连接，给该连接起个名字如: `localhost`，使用默认地址（localhost）和端口（27017）即可，点击 `Save` 保存。\n\n![](/images/1.2.1.png)\n\n双击 `localhost` 连接到 MongoDB 并进入交互界面，尝试插入一条数据并查询出来，如下所示:\n\n![](/images/1.2.2.png)\n\n#### MongoChef\n\n[MongoChef](http://3t.io/mongochef/) 是另一款强大的 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac。\n\n[MongoChef 下载地址](http://3t.io/mongochef/#mongochef-download-compare)，我们选择左侧的非商业用途的免费版下载。\n\n![](/images/1.2.3.png)\n\n安装成功后跟 Robomongo 一样，也需要创建一个新的连接的配置，成功后双击进入到 MongoChef 主页面，如下所示:\n\n![](/images/1.2.4.png)\n\n还可以使用 shell 模式:\n\n![](/images/1.2.5.png)\n\n> 小提示: MongoChef 相较于 Robomongo 更强大一些，但 Robomongo 比较轻量也能满足大部分的常规需求，所以哪一个适合自己还需读者自行尝试。\n\n## require\n\nrequire 用来加载一个文件的代码，关于 require 的机制这里不展开讲解，请仔细阅读 [官方文档](https://nodejs.org/api/modules.html)。\n\n简单概括以下几点:\n\n- require 可加载 .js、.json 和 .node 后缀的文件\n- require 的过程是同步的，所以这样是错误的:\n\n```sh\nsetTimeout(() => {\n  module.exports = { a: 'hello' }\n}, 0)\n```\n\nrequire 这个文件得到的是空对象 `{}`\n\n- require 目录的机制是:\n  - 如果目录下有 package.json 并指定了 main 字段，则用之\n  - 如果不存在 package.json，则依次尝试加载目录下的 index.js 和 index.node\n- require 过的文件会加载到缓存，所以多次 require 同一个文件（模块）不会重复加载\n- 判断是否是程序的入口文件有两种方式:\n  - require.main === module（推荐）\n  - module.parent === null\n\n## 循环引用\n\n循环引用（或循环依赖）简单点来说就是 a 文件 require 了 b 文件，然后 b 文件又反过来 require 了 a 文件。我们用 a->b 代表 b require 了 a。\n\n简单的情况:\n\n```\na->b\nb->a\n```\n\n复杂点的情况:\n\n```\na->b\nb->c\nc->a\n```\n\n循环引用并不会报错，导致的结果是 require 的结果是空对象 `{}`，原因是 b require 了 a，a 又去 require 了 b，此时 b 还没初始化好，所以只能拿到初始值 `{}`。当产生循环引用时一般有两种方法解决：\n\n1. 通过分离共用的代码到另一个文件解决，如上面简单的情况，可拆出共用的代码到 c 中，如下:\n\n```\nc->a\nc->b\n```\n\n2. 不在最外层 require，在用到的地方 require，通常在函数的内部\n\n总的来说，循环依赖的陷阱并不大容易出现，但一旦出现了，对于新手来说还真不好定位。它的存在给我们提了个醒，要时刻注意你项目的依赖关系不要过于复杂，哪天你发现一个你明明已经 exports 了的方法报 `undefined is not a function`，我们就该提醒一下自己：哦，也许是它来了。\n\n官方示例: [https://nodejs.org/api/modules.html#modules_cycles](https://nodejs.org/api/modules.html#modules_cycles)\n\nrequire 用来加载代码，而 exports 和 module.exports 则用来导出代码。\n\n很多新手可能会迷惑于 exports 和 module.exports 的区别，为了更好的理解 exports 和 module.exports 的关系，我们先来巩固下 js 的基础。示例：\n\n**test.js**\n\n```js\nvar a = { name: 1 };\nvar b = a;\n\nconsole.log(a);\nconsole.log(b);\n\nb.name = 2;\nconsole.log(a);\nconsole.log(b);\n\nvar b = { name: 3 };\nconsole.log(a);\nconsole.log(b);\n```\n\n运行 test.js 结果为：\n\n```\n{ name: 1 }\n{ name: 1 }\n{ name: 2 }\n{ name: 2 }\n{ name: 2 }\n{ name: 3 }\n```\n\n**解释**：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。\n\n明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：\n\n1. module.exports 初始值为一个空对象 {}\n2. exports 是指向的 module.exports 的引用\n3. require() 返回的是 module.exports 而不是 exports\n\nNode.js 官方文档的截图证实了我们的观点:\n\n![](/images/2.2.1.png)\n\n## 导出\nexports = module.exports = {...}\n\n我们经常看到这样的写法：\n\n```js\nexports = module.exports = {...}\n```\n\n上面的代码等价于:\n\n```js\nmodule.exports = {...}\nexports = module.exports\n```\n\n原理很简单：module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，那么通过 exports = module.exports 让 exports 重新指向 module.exports。\n\n> 小提示：ES6 的 import 和 export 不在本文的讲解范围，有兴趣的读者可以去学习阮一峰老师的[《ECMAScript6 入门》](http://es6.ruanyifeng.com/)。\n\n# Promise\n\n网上已经有许多关于 Promise 的资料了，这里不在赘述。以下 4 个链接供读者学习：\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise （基础）\n2. http://liubin.org/promises-book/ （开源 Promise 迷你书）\n3. http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/ （进阶）\n4. https://promisesaplus.com/ （官方定义规范）\n\nPromise 用于异步流程控制，生成器与 yield 也能实现流程控制（基于 co），但不在本教程讲解范围内，读者可参考我的另一部教程 [N-club](https://github.com/nswbmw/N-club)。async/await 结合 Promise 也可以实现流程控制，有兴趣请查阅 [《ECMAScript6 入门》](http://es6.ruanyifeng.com/#docs/async#async函数)。\n\n## 深入 Promise\n\n- [Promise 必知必会（十道题）](https://zhuanlan.zhihu.com/p/30797777)\n- [深入 Promise(一)——Promise 实现详解](https://zhuanlan.zhihu.com/p/25178630)\n- [深入 Promise(二)——进击的 Promise](https://zhuanlan.zhihu.com/p/25198178)\n- [深入 Promise(三)——命名 Promise](https://zhuanlan.zhihu.com/p/25199781)\n\n环境变量不属于 Node.js 的知识范畴，只不过我们在开发 Node.js 应用时经常与环境变量打交道，所以这里简单介绍下。\n\n环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数。在 Mac 和 Linux 的终端直接输入 env，会列出当前的环境变量，如：USER=xxx。简单来讲，环境变量就是传递参数给运行程序的。\n\n在 Node.js 中，我们经常这么用:\n\n```sh\nNODE_ENV=test node app\n```\n\n通过以上命令启动程序，指定当前环境变量 `NODE_ENV` 的值为 test，那么在 app.js 中可通过 `process.env` 来获取环境变量:\n\n```\nconsole.log(process.env.NODE_ENV) //test\n```\n\n另一个常见的例子是使用 [debug](https://www.npmjs.com/package/debug) 模块时:\n\n```sh\nDEBUG=* node app\n```\n\nWindows 用户需要首先设置环境变量，然后再执行程序：\n\n```sh\nset DEBUG=*\nset NODE_ENV=test\nnode app\n```\n\n或者使用 [cross-env](https://www.npmjs.com/package/cross-env)：\n\n```sh\nnpm i cross-env -g\n```\n\n使用方式：\n\n```sh\ncross-env NODE_ENV=test node app\n```\n\npackage.json 对于 Node.js 应用来说是一个不可或缺的文件，它存储了该 Node.js 应用的名字、版本、描述、作者、入口文件、脚本、版权等等信息。npm 官网有 package.json 每个字段的详细介绍：[https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)。\n\n## semver\n\n语义化版本（semver）即 dependencies、devDependencies 和 peerDependencies 里的如：`\"co\": \"^4.6.0\"`。\n\nsemver 格式：`主版本号.次版本号.修订号`。版本号递增规则如下：\n\n- `主版本号`：做了不兼容的 API 修改\n- `次版本号`：做了向下兼容的功能性新增\n- `修订号`：做了向下兼容的 bug 修正\n\n更多阅读：\n\n1. http://semver.org/lang/zh-CN/\n2. http://taobaofed.org/blog/2016/08/04/instructions-of-semver/\n\n# npm\n\n作为 Node.js 的开发者，我们在发布 npm 模块的时候一定要遵守语义化版本的命名规则，即：有 breaking change 发大版本，有新增的功能发小版本，有小的 bug 修复或优化则发修订版本。\n\n## npm init\n\n使用 `npm init` 初始化一个空项目是一个好的习惯，即使你对 package.json 及其他属性非常熟悉，`npm init` 也是你开始写新的 Node.js 应用或模块的一个快捷的办法。`npm init` 有智能的默认选项，比如从根目录名称推断模块名称，通过 `~/.npmrc` 读取你的信息，用你的 Git 设置来确定 repository 等等。\n\n## npm install\n\n`npm install` 是我们最常用的 npm 命令之一，因此我们需要好好了解下这个命令。终端输入 `npm install -h` 查看使用方式:\n\n![](/images/2.6.1.png)\n\n可以看出：我们通过 `npm install` 可以安装 npm 上发布的某个版本、某个 tag、某个版本区间的模块，甚至可以安装本地目录、压缩包和 git/github 的库作为依赖。\n\n> 小提示: `npm i` 是 `npm install` 的简写，建议使用 `npm i`。\n\n直接使用 `npm i` 安装的模块是不会写入 package.json 的 dependencies (或 devDependencies)，需要额外加个参数:\n\n1. `npm i express --save`/`npm i express -S` (安装 express，同时将 `\"express\": \"^4.14.0\"` 写入 dependencies )\n2. `npm i express --save-dev`/`npm i express -D` (安装 express，同时将 `\"express\": \"^4.14.0\"` 写入 devDependencies )\n3. `npm i express --save --save-exact` (安装 express，同时将 `\"express\": \"4.14.0\"` 写入 dependencies )\n\n第三种方式将固定版本号写入 dependencies，建议线上的 Node.js 应用都采取这种锁定版本号的方式，因为你不可能保证第三方模块下个小版本是没有验证 bug 的，即使是很流行的模块。拿 Mongoose 来说，Mongoose 4.1.4 引入了一个 bug 导致调用一个文档 entry 的 remove 会删除整个集合的文档，见：[https://github.com/Automattic/mongoose/blob/master/History.md#415--2015-09-01](https://github.com/Automattic/mongoose/blob/master/History.md#415--2015-09-01)。\n\n> 后面会介绍更安全的 `npm shrinkwrap` 的用法。\n\n运行以下命令：\n\n```sh\nnpm config set save-exact true\n```\n\n这样每次 `npm i xxx --save` 的时候会锁定依赖的版本号，相当于加了 `--save-exact` 参数。\n\n> 小提示：`npm config set` 命令将配置写到了 ~/.npmrc 文件，运行 `npm config list` 查看。\n\n## npm scripts\n\nnpm 提供了灵活而强大的 scripts 功能，见 [官方文档](https://docs.npmjs.com/misc/scripts)。\n\nnpm 的 scripts 有一些内置的缩写命令，如常用的：\n\n- `npm start` 等价于 `npm run start`\n- `npm test` 等价于 `npm run test`\n\n## npm shrinkwrap\n\n前面说过要锁定依赖的版本，但这并不能完全防止意外情况的发生，因为锁定的只是最外一层的依赖，而里层依赖的模块的 package.json 有可能写的是 `\"mongoose\": \"*\"`。为了彻底锁定依赖的版本，让你的应用在任何机器上安装的都是同样版本的模块（不管嵌套多少层），通过运行 `npm shrinkwrap`，会在当前目录下产生一个 `npm-shrinkwrap.json`，里面包含了通过 node_modules 计算出的模块的依赖树及版本。上面的截图也显示：只要目录下有 npm-shrinkwrap.json 则运行 `npm install` 的时候会优先使用 npm-shrinkwrap.json 进行安装，没有则使用 package.json 进行安装。\n\n更多阅读：\n\n1. https://docs.npmjs.com/cli/shrinkwrap\n2. http://tech.meituan.com/npm-shrinkwrap.html\n\n> 注意: 如果 node_modules 下存在某个模块（如直接通过 `npm install xxx` 安装的）而 package.json 中没有，运行 `npm shrinkwrap` 则会报错。另外，`npm shrinkwrap` 只会生成 dependencies 的依赖，不会生成 devDependencies 的。\n\n# express\n\n首先，我们新建一个目录 myblog，在该目录下运行 `npm init` 生成一个 package.json，如下所示：\n\n![](/images/3.1.1.png)\n\n> 注意：括号里的是默认值，如果使用默认值则直接回车即可，否则输入自定义内容后回车。\n\n然后安装 express 并写入 package.json：\n\n```sh\nnpm i express@4.14.0 --save\n```\n\n新建 index.js，添加如下代码：\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.get(\"/\", function(req, res) {\n  res.send(\"hello, express\");\n});\n\napp.listen(3000);\n```\n\n以上代码的意思是：生成一个 express 实例 app，挂载了一个根路由控制器，然后监听 3000 端口并启动程序。运行 `node index`，打开浏览器访问 `localhost:3000` 时，页面应显示 hello, express。\n\n这是最简单的一个使用 express 的例子，后面会介绍路由及模板的使用。\n\n## supervisor\n\n在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 [supervisor](https://www.npmjs.com/package/supervisor) 可以解决这个繁琐的问题，全局安装 supervisor：\n\n```sh\nnpm i -g supervisor\n```\n\n运行 `supervisor index` 启动程序，如下所示：\n\n![](/images/3.1.2.png)\n\nsupervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。\n\n前面我们只是挂载了根路径的路由控制器，现在修改 index.js 如下：\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.get(\"/\", function(req, res) {\n  res.send(\"hello, express\");\n});\n\napp.get(\"/users/:name\", function(req, res) {\n  res.send(\"hello, \" + req.params.name);\n});\n\napp.listen(3000);\n```\n\n以上代码的意思是：当访问根路径时，依然返回 hello, express，当访问如 `localhost:3000/users/nswbmw` 路径时，返回 hello, nswbmw。路径中 `:name` 起了占位符的作用，这个占位符的名字是 name，可以通过 `req.params.name` 取到实际的值。\n\n> 小提示：express 使用了 [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) 模块实现的路由匹配。\n\n不难看出：req 包含了请求来的相关信息，res 则用来返回该请求的响应，更多请查阅 [express 官方文档](http://expressjs.com/en/4x/api.html)。下面介绍几个常用的 req 的属性：\n\n- `req.query`: 解析后的 url 中的 querystring，如 `?name=haha`，req.query 的值为 `{name: 'haha'}`\n- `req.params`: 解析 url 中的占位符，如 `/:name`，访问 /haha，req.params 的值为 `{name: 'haha'}`\n- `req.body`: 解析后请求体，需使用相关的模块，如 [body-parser](https://www.npmjs.com/package/body-parser)，请求体为 `{\"name\": \"haha\"}`，则 req.body 为 `{name: 'haha'}`\n\n## express.Router\n\n上面只是很简单的路由使用的例子（将所有路由控制函数都放到了 index.js），但在实际开发中通常有几十甚至上百的路由，都写在 index.js 既臃肿又不好维护，这时可以使用 express.Router 实现更优雅的路由解决方案。在 myblog 目录下创建空文件夹 routes，在 routes 目录下创建 index.js 和 users.js。最后代码如下：\n\n**index.js**\n\n```js\nconst express = require(\"express\");\nconst app = express();\nconst indexRouter = require(\"./routes/index\");\nconst userRouter = require(\"./routes/users\");\n\napp.use(\"/\", indexRouter);\napp.use(\"/users\", userRouter);\n\napp.listen(3000);\n```\n\n**routes/index.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/\", function(req, res) {\n  res.send(\"hello, express\");\n});\n\nmodule.exports = router;\n```\n\n**routes/users.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/:name\", function(req, res) {\n  res.send(\"hello, \" + req.params.name);\n});\n\nmodule.exports = router;\n```\n\n以上代码的意思是：我们将 `/` 和 `/users/:name` 的路由分别放到了 routes/index.js 和 routes/users.js 中，每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 `app.use` 挂载到不同的路径。这两种代码实现了相同的功能，但在实际开发中推荐使用 express.Router 将不同的路由分离到不同的路由文件中。\n\n更多 express.Router 的用法见 [express 官方文档](http://expressjs.com/en/4x/api.html#router)。\n\n模板引擎（Template Engine）是一个将页面模板和数据结合起来生成 html 的工具。上例中，我们只是返回纯文本给浏览器，现在我们修改代码返回一个 html 页面给浏览器。\n\n## ejs\n\n模板引擎有很多，[ejs](https://www.npmjs.com/package/ejs) 是其中一种，因为它使用起来十分简单，而且与 express 集成良好，所以我们使用 ejs。安装 ejs：\n\n```sh\nnpm i ejs --save\n```\n\n修改 index.js 如下：\n\n**index.js**\n\n```js\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst app = express();\nconst indexRouter = require(\"./routes/index\");\nconst userRouter = require(\"./routes/users\");\n\napp.set(\"views\", path.join(__dirname, \"views\")); // 设置存放模板文件的目录\napp.set(\"view engine\", \"ejs\"); // 设置模板引擎为 ejs\n\napp.use(\"/\", indexRouter);\napp.use(\"/users\", userRouter);\n\napp.listen(3000);\n```\n\n通过 `app.set` 设置模板引擎为 ejs 和存放模板的目录。在 myblog 下新建 views 文件夹，在 views 下新建 users.ejs，添加如下代码：\n\n**views/users.ejs**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style type=\"text/css\">\n      body {\n        padding: 50px;\n        font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;\n      }\n    </style>\n  </head>\n  <body>\n    <h1><%= name.toUpperCase() %></h1>\n    <p>hello, <%= name %></p>\n  </body>\n</html>\n```\n\n修改 routes/users.js 如下：\n\n**routes/users.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/:name\", function(req, res) {\n  res.render(\"users\", {\n    name: req.params.name\n  });\n});\n\nmodule.exports = router;\n```\n\n通过调用 `res.render` 函数渲染 ejs 模板，res.render 第一个参数是模板的名字，这里是 users 则会匹配 views/users.ejs，第二个参数是传给模板的数据，这里传入 name，则在 ejs 模板中可使用 name。`res.render` 的作用就是将模板和数据结合生成 html，同时设置响应头中的 `Content-Type: text/html`，告诉浏览器我返回的是 html，不是纯文本，要按 html 展示。现在我们访问 `localhost:3000/users/haha`，如下图所示：\n\n![](/images/3.3.1.png)\n\n上面代码可以看到，我们在模板 `<%= name.toUpperCase() %>` 中使用了 JavaScript 的语法 `.toUpperCase()` 将名字转化为大写，那这个 `<%= xxx %>` 是什么东西呢？ejs 有 3 种常用标签：\n\n1. `<% code %>`：运行 JavaScript 代码，不输出\n2. `<%= code %>`：显示转义后的 HTML 内容\n3. `<%- code %>`：显示原始 HTML 内容\n\n> 注意：`<%= code %>` 和 `<%- code %>` 都可以是 JavaScript 表达式生成的字符串，当变量 code 为普通字符串时，两者没有区别。当 code 比如为 `<h1>hello</h1>` 这种字符串时，`<%= code %>` 会原样输出 `<h1>hello</h1>`，而 `<%- code %>` 则会显示 H1 大的 hello 字符串。\n\n下面的例子解释了 `<% code %>` 的用法：\n\n**Data**\n\n```\nsupplies: ['mop', 'broom', 'duster']\n```\n\n**Template**\n\n```ejs\n<ul>\n<% for(var i=0; i<supplies.length; i++) {%>\n   <li><%= supplies[i] %></li>\n<% } %>\n</ul>\n```\n\n**Result**\n\n```html\n<ul>\n  <li>mop</li>\n  <li>broom</li>\n  <li>duster</li>\n</ul>\n```\n\n更多 ejs 的标签请看 [官方文档](https://www.npmjs.com/package/ejs#tags)。\n\n## includes\n\n我们使用模板引擎通常不是一个页面对应一个模板，这样就失去了模板的优势，而是把模板拆成可复用的模板片段组合使用，如在 views 下新建 header.ejs 和 footer.ejs，并修改 users.ejs：\n\n**views/header.ejs**\n\n```ejs\n<!DOCTYPE html>\n<html>\n  <head>\n    <style type=\"text/css\">\n      body {padding: 50px;font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;}\n    </style>\n  </head>\n  <body>\n```\n\n**views/footer.ejs**\n\n```ejs\n  </body>\n</html>\n```\n\n**views/users.ejs**\n\n```ejs\n<%- include('header') %>\n  <h1><%= name.toUpperCase() %></h1>\n  <p>hello, <%= name %></p>\n<%- include('footer') %>\n```\n\n我们将原来的 users.ejs 拆成出了 header.ejs 和 footer.ejs，并在 users.ejs 通过 ejs 内置的 include 方法引入，从而实现了跟以前一个模板文件相同的功能。\n\n> 小提示：拆分模板组件通常有两个好处：\n>\n> 1. 模板可复用，减少重复代码\n> 2. 主模板结构清晰\n\n> 注意：要用 `<%- include('header') %>` 而不是 `<%= include('header') %>`\n> 前面我们讲解了 express 中路由和模板引擎 ejs 的用法，但 express 的精髓并不在此，在于中间件的设计理念。\n\n## 中间件与 next\n\nexpress 中的中间件（middleware）就是用来处理请求的，当一个中间件处理完，可以通过调用 `next()` 传递给下一个中间件，如果没有调用 `next()`，则请求不会往下传递，如内置的 `res.render` 其实就是渲染完 html 直接返回给客户端，没有调用 `next()`，从而没有传递给下一个中间件。看个小例子，修改 index.js 如下：\n\n**index.js**\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.use(function(req, res, next) {\n  console.log(\"1\");\n  next();\n});\n\napp.use(function(req, res, next) {\n  console.log(\"2\");\n  res.status(200).end();\n});\n\napp.listen(3000);\n```\n\n此时访问 `localhost:3000`，终端会输出：\n\n```\n1\n2\n```\n\n通过 `app.use` 加载中间件，在中间件中通过 next 将请求传递到下一个中间件，next 可接受一个参数接收错误信息，如果使用了 `next(error)`，则会返回错误而不会传递到下一个中间件，修改 index.js 如下：\n\n**index.js**\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.use(function(req, res, next) {\n  console.log(\"1\");\n  next(new Error(\"haha\"));\n});\n\napp.use(function(req, res, next) {\n  console.log(\"2\");\n  res.status(200).end();\n});\n\napp.listen(3000);\n```\n\n此时访问 `localhost:3000`，终端会输出错误信息：\n\n![](/images/3.4.1.png)\n\n浏览器会显示：\n\n![](/images/3.4.2.png)\n\n> 小提示：`app.use` 有非常灵活的使用方式，详情见 [官方文档](http://expressjs.com/en/4x/api.html#app.use)。\n\nexpress 有成百上千的第三方中间件，在开发过程中我们首先应该去 npm 上寻找是否有类似实现的中间件，尽量避免造轮子，节省开发时间。下面给出几个常用的搜索 npm 模块的网站：\n\n1. [http://npmjs.com](http://npmjs.com)(npm 官网)\n2. [http://node-modules.com](http://node-modules.com)\n3. [https://npms.io](https://npms.io)\n4. [https://nodejsmodules.org](https://nodejsmodules.org)\n\n> 小提示：express@4 之前的版本基于 connect 这个模块实现的中间件的架构，express@4 及以上的版本则移除了对 connect 的依赖自己实现了，理论上基于 connect 的中间件（通常以 `connect-` 开头，如 `connect-mongo`）仍可结合 express 使用。\n\n> 注意：中间件的加载顺序很重要！比如：通常把日志中间件放到比较靠前的位置，后面将会介绍的 `connect-flash` 中间件是基于 session 的，所以需要在 `express-session` 后加载。\n\n## 错误处理\n\n上面的例子中，应用程序为我们自动返回了错误栈信息（express 内置了一个默认的错误处理器），假如我们想手动控制返回的错误内容，则需要加载一个自定义错误处理的中间件，修改 index.js 如下：\n\n**index.js**\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.use(function(req, res, next) {\n  console.log(\"1\");\n  next(new Error(\"haha\"));\n});\n\napp.use(function(req, res, next) {\n  console.log(\"2\");\n  res.status(200).end();\n});\n\n//错误处理\napp.use(function(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send(\"Something broke!\");\n});\n\napp.listen(3000);\n```\n\n此时访问 `localhost:3000`，浏览器会显示 `Something broke!`。\n\n> 小提示：关于 express 的错误处理，详情见 [官方文档](http://expressjs.com/en/guide/error-handling.html)。\n> 从本章开始，正式学习如何使用 Express + MongoDB 搭建一个博客。\n\n\n## 目录结构\n\n我们停止 supervisor 并删除 myblog 目录从头来过。重新创建 myblog，运行 `npm init`，如下：\n\n![](/images/4.2.1.png)\n\n在 myblog 目录下创建以下目录及空文件（package.json 除外）：\n\n![](/images/4.2.2.png)\n\n对应文件及文件夹的用处：\n\n1. `models`: 存放操作数据库的文件\n2. `public`: 存放静态文件，如样式、图片等\n3. `routes`: 存放路由文件\n4. `views`: 存放模板文件\n5. `index.js`: 程序主文件\n6. `package.json`: 存储项目名、描述、作者、依赖等等信息\n\n> 小提示：不知读者发现了没有，我们遵循了 MVC（模型(model)－视图(view)－控制器(controller/route)） 的开发模式。\n\n## 安装依赖模块\n\n运行以下命令安装所需模块：\n\n```sh\nnpm i config-lite connect-flash connect-mongo ejs express express-session marked moment mongolass objectid-to-timestamp sha1 winston express-winston --save\nnpm i https://github.com:utatti/express-formidable.git --save # 从 GitHub 安装 express-formidable 最新版，v1.0.0 有 bug\n```\n\n对应模块的用处：\n\n1. `express`: web 框架\n2. `express-session`: session 中间件\n3. `connect-mongo`: 将 session 存储于 mongodb，结合 express-session 使用\n4. `connect-flash`: 页面通知的中间件，基于 session 实现\n5. `ejs`: 模板\n6. `express-formidable`: 接收表单及文件上传的中间件\n7. `config-lite`: 读取配置文件\n8. `marked`: markdown 解析\n9. `moment`: 时间格式化\n10. `mongolass`: mongodb 驱动\n11. `objectid-to-timestamp`: 根据 ObjectId 生成时间戳\n12. `sha1`: sha1 加密，用于密码加密\n13. `winston`: 日志\n14. `express-winston`: express 的 winston 日志中间件\n\n后面会详细讲解这些模块的用法。\n\n## ESLint\n\nESLint 是一个代码规范和语法错误检查工具。使用 ESLint 可以规范我们的代码书写，可以在编写代码期间就能发现一些低级错误。\n\nESLint 需要结合编辑器或 IDE 使用，如：\n\n- Sublime Text 需要装两个插件：SublimeLinter + SublimeLinter-contrib-eslint\n- VS Code 需要装一个插件：ESLint\n\n> 小提示：Sublime Text 安装插件通过 ctrl+shift+p 调出 Package Control，输入 install 选择 Install Package 回车。输入对应插件名搜索，回车安装。\n> 小提示：VS Code 安装插件需要点击左侧『扩展』页\n\n全局安装 eslint：\n\n```sh\nnpm i eslint -g\n```\n\n运行：\n\n```sh\neslint --init\n```\n\n初始化 eslint 配置，依次选择：\n\n-> Use a popular style guide  \n-> Standard  \n-> JSON\n\n> 注意：如果 Windows 用户使用其他命令行工具无法上下切换选项，切换回 cmd。\n\neslint 会创建一个 .eslintrc.json 的配置文件，同时自动安装并添加相关的模块到 devDependencies。这里我们使用 Standard 规范，其主要特点是不加分号。\n\n## EditorConfig\n\nEditorConfig 是一个保持缩进风格的一致的工具，当多人共同开发一个项目的时候，往往会出现每个人用不同编辑器的情况，而且有的人用 tab 缩进，有的人用 2 个空格缩进，有的人用 4 个空格缩进，EditorConfig 就是为了解决这个问题而诞生。\n\nEditorConfig 需要结合编辑器或 IDE 使用，如：\n\n- Sublime Text 需要装一个插件：EditorConfig\n- VS Code 需要装一个插件：EditorConfig for VS Code\n\n在 myblog 目录下新建 .editorconfig 的文件，添加如下内容：\n\n```\n# editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ntab_width = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[Makefile]\nindent_style = tab\n```\n\n这里我们使用 2 个空格缩进，tab 长度也是 2 个空格。trim_trailing_whitespace 用来删除每一行最后多余的空格，insert_final_newline 用来在代码最后插入一个空的换行。\n不管是小项目还是大项目，将配置与代码分离是一个非常好的做法。我们通常将配置写到一个配置文件里，如 config.js 或 config.json ，并放到项目的根目录下。但实际开发时我们会有许多环境，如本地开发环境、测试环境和线上环境等，不同环境的配置不同（如：MongoDB 的地址），我们不可能每次部署时都要去修改引用 config.test.js 或者 config.production.js。config-lite 模块正是你需要的。\n\n## config-lite\n\n[config-lite](https://www.npmjs.com/package/config-lite) 是一个轻量的读取配置文件的模块。config-lite 会根据环境变量（`NODE_ENV`）的不同加载 config 目录下不同的配置文件。如果不设置 `NODE_ENV`，则读取默认的 default 配置文件，如果设置了 `NODE_ENV`，则会合并指定的配置文件和 default 配置文件作为配置，config-lite 支持 .js、.json、.node、.yml、.yaml 后缀的文件。\n\n如果程序以 `NODE_ENV=test node app` 启动，则 config-lite 会依次降级查找 `config/test.js`、`config/test.json`、`config/test.node`、`config/test.yml`、`config/test.yaml` 并合并 default 配置; 如果程序以 `NODE_ENV=production node app` 启动，则 config-lite 会依次降级查找 `config/production.js`、`config/production.json`、`config/production.node`、`config/production.yml`、`config/production.yaml` 并合并 default 配置。\n\nconfig-lite 还支持冒泡查找配置，即从传入的路径开始，从该目录不断往上一级目录查找 config 目录，直到找到或者到达根目录为止。\n\n在 myblog 下新建 config 目录，在该目录下新建 default.js，添加如下代码：\n\n**config/default.js**\n\n```js\nmodule.exports = {\n  port: 3000,\n  session: {\n    secret: \"myblog\",\n    key: \"myblog\",\n    maxAge: 2592000000\n  },\n  mongodb: \"mongodb://localhost:27017/myblog\"\n};\n```\n\n配置释义：\n\n1. `port`: 程序启动要监听的端口号\n2. `session`: express-session 的配置信息，后面介绍\n3. `mongodb`: mongodb 的地址，以 `mongodb://` 协议开头，`myblog` 为 db 名\n\n## 功能与路由设计\n\n在开发博客之前，我们首先需要明确博客要实现哪些功能。由于本教程面向初学者，所以只实现了博客最基本的功能，其余的功能（如归档、标签、分页等等）读者可自行实现。\n\n功能及路由设计如下：\n\n1. 注册\n   1. 注册页：`GET /signup`\n   2. 注册（包含上传头像）：`POST /signup`\n2. 登录\n   1. 登录页：`GET /signin`\n   2. 登录：`POST /signin`\n3. 登出：`GET /signout`\n4. 查看文章\n   1. 主页：`GET /posts`\n   2. 个人主页：`GET /posts?author=xxx`\n   3. 查看一篇文章（包含留言）：`GET /posts/:postId`\n5. 发表文章\n   1. 发表文章页：`GET /posts/create`\n   2. 发表文章：`POST /posts/create`\n6. 修改文章\n   1. 修改文章页：`GET /posts/:postId/edit`\n   2. 修改文章：`POST /posts/:postId/edit`\n7. 删除文章：`GET /posts/:postId/remove`\n8. 留言\n   1. 创建留言：`POST /comments`\n   2. 删除留言：`GET /comments/:commentId/remove`\n\n由于我们博客页面是后端渲染的，所以只通过简单的 `<a>(GET)` 和 `<form>(POST)` 与后端进行交互，如果使用 jQuery 或者其他前端框架（如 Angular、Vue、React 等等）可通过 Ajax 与后端交互，则 api 的设计应尽量遵循 Restful 风格。\n\n### Restful\n\nRestful 是一种 api 的设计风格，提出了一组 api 的设计原则和约束条件。\n\n如上面删除文章的路由设计：\n\n```\nGET /posts/:postId/remove\n```\n\nRestful 风格的设计：\n\n```\nDELETE /posts/:postId\n```\n\n可以看出，Restful 风格的 api 更直观且优雅。\n\n更多阅读：\n\n1. http://www.ruanyifeng.com/blog/2011/09/restful\n2. http://www.ruanyifeng.com/blog/2014/05/restful_api.html\n3. http://developer.51cto.com/art/200908/141825.htm\n4. http://blog.jobbole.com/41233/\n\n## 会话\n\n由于 HTTP 协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户，这个机制就是会话（Session）。\n\n### cookie 与 session 的区别\n\n1. cookie 存储在浏览器（有大小限制），session 存储在服务端（没有大小限制）\n2. 通常 session 的实现是基于 cookie 的，session id 存储于 cookie 中\n3. session 更安全，cookie 可以直接在浏览器查看甚至编辑\n\n更多 session 的资料，参考：https://www.zhihu.com/question/19786827\n\n我们通过引入 express-session 中间件实现对会话的支持：\n\n```js\napp.use(session(options));\n```\n\nsession 中间件会在 req 上添加 session 对象，即 req.session 初始值为 `{}`，当我们登录后设置 `req.session.user = 用户信息`，返回浏览器的头信息中会带上 `set-cookie` 将 session id 写到浏览器 cookie 中，那么该用户下次请求时，通过带上来的 cookie 中的 session id 我们就可以查找到该用户，并将用户信息保存到 `req.session.user`。\n\n## 页面通知\n\n我们还需要这样一个功能：当我们操作成功时需要显示一个成功的通知，如登录成功跳转到主页时，需要显示一个 `登陆成功` 的通知；当我们操作失败时需要显示一个失败的通知，如注册时用户名被占用了，需要显示一个 `用户名已占用` 的通知。通知只显示一次，刷新后消失，我们可以通过 connect-flash 中间件实现这个功能。\n\n[connect-flash](https://www.npmjs.com/package/connect-flash) 是基于 session 实现的，它的原理很简单：设置初始值 `req.session.flash={}`，通过 `req.flash(name, value)` 设置这个对象下的字段和值，通过 `req.flash(name)` 获取这个对象下的值，同时删除这个字段，实现了只显示一次刷新后消失的功能。\n\n### express-session、connect-mongo 和 connect-flash 的区别与联系\n\n1. `express-session`: 会话（session）支持中间件\n2. `connect-mongo`: 将 session 存储于 mongodb，需结合 express-session 使用，我们也可以将 session 存储于 redis，如 [connect-redis](https://www.npmjs.com/package/connect-redis)\n3. `connect-flash`: 基于 session 实现的用于通知功能的中间件，需结合 express-session 使用\n\n## 权限控制\n\n不管是论坛还是博客网站，我们没有登录的话只能浏览，登陆后才能发帖或写文章，即使登录了你也不能修改或删除其他人的文章，这就是权限控制。我们也来给博客添加权限控制，如何实现页面的权限控制呢？我们可以把用户状态的检查封装成一个中间件，在每个需要权限控制的路由加载该中间件，即可实现页面的权限控制。在 myblog 下新建 middlewares 目录，在该目录下新建 check.js，添加如下代码：\n\n**middlewares/check.js**\n\n```js\nmodule.exports = {\n  checkLogin: function checkLogin(req, res, next) {\n    if (!req.session.user) {\n      req.flash(\"error\", \"未登录\");\n      return res.redirect(\"/signin\");\n    }\n    next();\n  },\n\n  checkNotLogin: function checkNotLogin(req, res, next) {\n    if (req.session.user) {\n      req.flash(\"error\", \"已登录\");\n      return res.redirect(\"back\"); // 返回之前的页面\n    }\n    next();\n  }\n};\n```\n\n可以看出：\n\n1. `checkLogin`: 当用户信息（`req.session.user`）不存在，即认为用户没有登录，则跳转到登录页，同时显示 `未登录` 的通知，用于需要用户登录才能操作的页面\n2. `checkNotLogin`: 当用户信息（`req.session.user`）存在，即认为用户已经登录，则跳转到之前的页面，同时显示 `已登录` 的通知，如已登录用户就禁止访问登录、注册页面\n\n最终我们创建以下路由文件：\n\n**routes/index.js**\n\n```js\nmodule.exports = function(app) {\n  app.get(\"/\", function(req, res) {\n    res.redirect(\"/posts\");\n  });\n  app.use(\"/signup\", require(\"./signup\"));\n  app.use(\"/signin\", require(\"./signin\"));\n  app.use(\"/signout\", require(\"./signout\"));\n  app.use(\"/posts\", require(\"./posts\"));\n  app.use(\"/comments\", require(\"./comments\"));\n};\n```\n\n**routes/posts.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst checkLogin = require(\"../middlewares/check\").checkLogin;\n\n// GET /posts 所有用户或者特定用户的文章页\n//   eg: GET /posts?author=xxx\nrouter.get(\"/\", function(req, res, next) {\n  res.send(\"主页\");\n});\n\n// POST /posts/create 发表一篇文章\nrouter.post(\"/create\", checkLogin, function(req, res, next) {\n  res.send(\"发表文章\");\n});\n\n// GET /posts/create 发表文章页\nrouter.get(\"/create\", checkLogin, function(req, res, next) {\n  res.send(\"发表文章页\");\n});\n\n// GET /posts/:postId 单独一篇的文章页\nrouter.get(\"/:postId\", function(req, res, next) {\n  res.send(\"文章详情页\");\n});\n\n// GET /posts/:postId/edit 更新文章页\nrouter.get(\"/:postId/edit\", checkLogin, function(req, res, next) {\n  res.send(\"更新文章页\");\n});\n\n// POST /posts/:postId/edit 更新一篇文章\nrouter.post(\"/:postId/edit\", checkLogin, function(req, res, next) {\n  res.send(\"更新文章\");\n});\n\n// GET /posts/:postId/remove 删除一篇文章\nrouter.get(\"/:postId/remove\", checkLogin, function(req, res, next) {\n  res.send(\"删除文章\");\n});\n\nmodule.exports = router;\n```\n\n**routes/comments.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\nconst checkLogin = require(\"../middlewares/check\").checkLogin;\n\n// POST /comments 创建一条留言\nrouter.post(\"/\", checkLogin, function(req, res, next) {\n  res.send(\"创建留言\");\n});\n\n// GET /comments/:commentId/remove 删除一条留言\nrouter.get(\"/:commentId/remove\", checkLogin, function(req, res, next) {\n  res.send(\"删除留言\");\n});\n\nmodule.exports = router;\n```\n\n**routes/signin.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst checkNotLogin = require(\"../middlewares/check\").checkNotLogin;\n\n// GET /signin 登录页\nrouter.get(\"/\", checkNotLogin, function(req, res, next) {\n  res.send(\"登录页\");\n});\n\n// POST /signin 用户登录\nrouter.post(\"/\", checkNotLogin, function(req, res, next) {\n  res.send(\"登录\");\n});\n\nmodule.exports = router;\n```\n\n**routes/signup.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst checkNotLogin = require(\"../middlewares/check\").checkNotLogin;\n\n// GET /signup 注册页\nrouter.get(\"/\", checkNotLogin, function(req, res, next) {\n  res.send(\"注册页\");\n});\n\n// POST /signup 用户注册\nrouter.post(\"/\", checkNotLogin, function(req, res, next) {\n  res.send(\"注册\");\n});\n\nmodule.exports = router;\n```\n\n**routes/signout.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst checkLogin = require(\"../middlewares/check\").checkLogin;\n\n// GET /signout 登出\nrouter.get(\"/\", checkLogin, function(req, res, next) {\n  res.send(\"登出\");\n});\n\nmodule.exports = router;\n```\n\n最后，修改 index.js 如下：\n\n**index.js**\n\n```js\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst session = require(\"express-session\");\nconst MongoStore = require(\"connect-mongo\")(session);\nconst flash = require(\"connect-flash\");\nconst config = require(\"config-lite\")(__dirname);\nconst routes = require(\"./routes\");\nconst pkg = require(\"./package\");\n\nconst app = express();\n\n// 设置模板目录\napp.set(\"views\", path.join(__dirname, \"views\"));\n// 设置模板引擎为 ejs\napp.set(\"view engine\", \"ejs\");\n\n// 设置静态文件目录\napp.use(express.static(path.join(__dirname, \"public\")));\n// session 中间件\napp.use(\n  session({\n    name: config.session.key, // 设置 cookie 中保存 session id 的字段名称\n    secret: config.session.secret, // 通过设置 secret 来计算 hash 值并放在 cookie 中，使产生的 signedCookie 防篡改\n    resave: true, // 强制更新 session\n    saveUninitialized: false, // 设置为 false，强制创建一个 session，即使用户未登录\n    cookie: {\n      maxAge: config.session.maxAge // 过期时间，过期后 cookie 中的 session id 自动删除\n    },\n    store: new MongoStore({\n      // 将 session 存储到 mongodb\n      url: config.mongodb // mongodb 地址\n    })\n  })\n);\n// flash 中间件，用来显示通知\napp.use(flash());\n\n// 路由\nroutes(app);\n\n// 监听端口，启动程序\napp.listen(config.port, function() {\n  console.log(`${pkg.name} listening on port ${config.port}`);\n});\n```\n\n> 注意：中间件的加载顺序很重要。如上面设置静态文件目录的中间件应该放到 routes(app) 之前加载，这样静态文件的请求就不会落到业务逻辑的路由里；flash 中间件应该放到 session 中间件之后加载，因为 flash 是基于 session 实现的。\n\n运行 `supervisor index` 启动博客，访问以下地址查看效果：\n\n1. http://localhost:3000/posts\n2. http://localhost:3000/signout\n3. http://localhost:3000/signup\n   我们使用 jQuery + Semantic-UI 实现前端页面的设计，最终效果图如下:\n\n**注册页**\n\n![](/images/4.5.1.png)\n\n**登录页**\n\n![](/images/4.5.2.png)\n\n**未登录时的主页（或用户页）**\n\n![](/images/4.5.3.png)\n\n**登录后的主页（或用户页）**\n\n![](/images/4.5.4.png)\n\n**发表文章页**\n\n![](/images/4.5.5.png)\n\n**编辑文章页**\n\n![](/images/4.5.6.png)\n\n**未登录时的文章页**\n\n![](/images/4.5.7.png)\n\n**登录后的文章页**\n\n![](/images/4.5.8.png)\n\n**通知**\n\n![](/images/4.5.9.png)\n![](/images/4.5.10.png)\n![](/images/4.5.11.png)\n\n## 组件\n\n前面提到过，我们可以将模板拆分成一些组件，然后使用 ejs 的 include 方法将组件组合起来进行渲染。我们将页面切分成以下组件：\n\n**主页**\n\n![](/images/4.5.12.png)\n\n**文章页**\n\n![](/images/4.5.13.png)\n\n根据上面的组件切分图，我们创建以下样式及模板文件：\n\n**public/css/style.css**\n\n```css\n/* ---------- 全局样式 ---------- */\n\nbody {\n  width: 1100px;\n  height: 100%;\n  margin: 0 auto;\n  padding-top: 40px;\n}\n\na:hover {\n  border-bottom: 3px solid #4fc08d;\n}\n\n.button {\n  background-color: #4fc08d !important;\n  color: #fff !important;\n}\n\n.avatar {\n  border-radius: 3px;\n  width: 48px;\n  height: 48px;\n  float: right;\n}\n\n/* ---------- nav ---------- */\n\n.nav {\n  margin-bottom: 20px;\n  color: #999;\n  text-align: center;\n}\n\n.nav h1 {\n  color: #4fc08d;\n  display: inline-block;\n  margin: 10px 0;\n}\n\n/* ---------- nav-setting ---------- */\n\n.nav-setting {\n  position: fixed;\n  right: 30px;\n  top: 35px;\n  z-index: 999;\n}\n\n.nav-setting .ui.dropdown.button {\n  padding: 10px 10px 0 10px;\n  background-color: #fff !important;\n}\n\n.nav-setting .icon.bars {\n  color: #000;\n  font-size: 18px;\n}\n\n/* ---------- post-content ---------- */\n\n.post-content h3 a {\n  color: #4fc08d !important;\n}\n\n.post-content .tag {\n  font-size: 13px;\n  margin-right: 5px;\n  color: #999;\n}\n\n.post-content .tag.right {\n  float: right;\n  margin-right: 0;\n}\n\n.post-content .tag.right a {\n  color: #999;\n}\n```\n\n**views/header.ejs**\n\n```ejs\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title><%= blog.title %></title>\n    <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/semantic-ui/2.1.8/semantic.min.css\">\n    <link rel=\"stylesheet\" href=\"/css/style.css\">\n    <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script>\n    <script src=\"//cdn.bootcss.com/semantic-ui/2.1.8/semantic.min.js\"></script>\n  </head>\n  <body>\n  <%- include('components/nav') %>\n  <%- include('components/nav-setting') %>\n  <%- include('components/notification') %>\n```\n\n**views/footer.ejs**\n\n```ejs\n  <script type=\"text/javascript\">\n   $(document).ready(function () {\n      // 点击按钮弹出下拉框\n      $('.ui.dropdown').dropdown();\n\n      // 鼠标悬浮在头像上，弹出气泡提示框\n      $('.post-content .avatar-link').popup({\n        inline: true,\n        position: 'bottom right',\n        lastResort: 'bottom right'\n      });\n    })\n  </script>\n  </body>\n</html>\n```\n\n> 注意：上面 `<script></script>` 是 semantic-ui 操控页面控件的代码，一定要放到 footer.ejs 的 `</body>` 的前面，因为只有页面加载完后才能通过 JQuery 获取 DOM 元素。\n\n在 views 目录下新建 components 目录用来存放组件（即可以复用的模板片段），在该目录下创建以下文件：\n\n**views/components/nav.ejs**\n\n```ejs\n<div class=\"nav\">\n  <div class=\"ui grid\">\n    <div class=\"four wide column\"></div>\n\n    <div class=\"eight wide column\">\n      <a href=\"/posts\"><h1><%= blog.title %></h1></a>\n      <p><%= blog.description %></p>\n    </div>\n  </div>\n</div>\n```\n\n**views/components/nav-setting.ejs**\n\n```ejs\n<div class=\"nav-setting\">\n  <div class=\"ui buttons\">\n    <div class=\"ui floating dropdown button\">\n      <i class=\"icon bars\"></i>\n      <div class=\"menu\">\n        <% if (user) { %>\n          <a class=\"item\" href=\"/posts?author=<%= user._id %>\">个人主页</a>\n          <div class=\"divider\"></div>\n          <a class=\"item\" href=\"/posts/create\">发表文章</a>\n          <a class=\"item\" href=\"/signout\">登出</a>\n        <% } else { %>\n          <a class=\"item\" href=\"/signin\">登录</a>\n          <a class=\"item\" href=\"/signup\">注册</a>\n        <% } %>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n**views/components/notification.ejs**\n\n```ejs\n<div class=\"ui grid\">\n  <div class=\"four wide column\"></div>\n  <div class=\"eight wide column\">\n\n  <% if (success) { %>\n    <div class=\"ui success message\">\n      <p><%= success %></p>\n    </div>\n  <% } %>\n\n  <% if (error) { %>\n    <div class=\"ui error message\">\n      <p><%= error %></p>\n    </div>\n  <% } %>\n\n  </div>\n</div>\n```\n\n## app.locals 和 res.locals\n\n上面的 ejs 模板中我们用到了 blog、user、success、error 变量，我们将 blog 变量挂载到 `app.locals` 下，将 user、success、error 挂载到 `res.locals` 下。为什么要这么做呢？`app.locals` 和 `res.locals` 是什么？它们有什么区别？\n\nexpress 中有两个对象可用于模板的渲染：`app.locals` 和 `res.locals`。我们从 express 源码一探究竟：\n\n**express/lib/application.js**\n\n```js\napp.render = function render(name, options, callback) {\n  ...\n  var opts = options;\n  var renderOptions = {};\n  ...\n  // merge app.locals\n  merge(renderOptions, this.locals);\n\n  // merge options._locals\n  if (opts._locals) {\n    merge(renderOptions, opts._locals);\n  }\n\n  // merge options\n  merge(renderOptions, opts);\n  ...\n  tryRender(view, renderOptions, done);\n};\n```\n\n**express/lib/response.js**\n\n```js\nres.render = function render(view, options, callback) {\n  var app = this.req.app;\n  var opts = options || {};\n  ...\n  // merge res.locals\n  opts._locals = self.locals;\n  ...\n  // render\n  app.render(view, opts, done);\n};\n```\n\n可以看出：在调用 `res.render` 的时候，express 合并（merge）了 3 处的结果后传入要渲染的模板，优先级：`res.render` 传入的对象> `res.locals` 对象 > `app.locals` 对象，所以 `app.locals` 和 `res.locals` 几乎没有区别，都用来渲染模板，使用上的区别在于：`app.locals` 上通常挂载常量信息（如博客名、描述、作者这种不会变的信息），`res.locals` 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，`res.locals.user = req.session.user`）。\n\n修改 index.js，在 `routes(app)` 上一行添加如下代码：\n\n```js\n// 设置模板全局常量\napp.locals.blog = {\n  title: pkg.name,\n  description: pkg.description\n};\n\n// 添加模板必需的三个变量\napp.use(function(req, res, next) {\n  res.locals.user = req.session.user;\n  res.locals.success = req.flash(\"success\").toString();\n  res.locals.error = req.flash(\"error\").toString();\n  next();\n});\n```\n\n这样在调用 `res.render` 的时候就不用传入这四个变量了，express 为我们自动 merge 并传入了模板，所以我们可以在模板中直接使用这四个变量。\n我们使用 [Mongolass](https://github.com/mongolass/mongolass) 这个模块操作 mongodb 进行增删改查。在 myblog 下新建 lib 目录，在该目录下新建 mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nconst config = require('config-lite')(__dirname)\nconst Mongolass = require('mongolass')\nconst mongolass = new Mongolass()\nmongolass.connect(config.mongodb)\n```\n\n## 为什么使用 Mongolass\n\n早期我使用官方的 [mongodb](https://www.npmjs.com/package/mongodb)（也叫 node-mongodb-native）库，后来也陆续尝试使用了许多其他 mongodb 的驱动库，[Mongoose](https://www.npmjs.com/package/mongoose) 是比较优秀的一个，使用 Mongoose 的时间也比较长。比较这两者，各有优缺点。\n\n### node-mongodb-native:\n\n**优点：**\n\n1. 简单。参照文档即可上手，没有 Mongoose 的 Schema 那些对新手不友好的东西。\n2. 强大。毕竟是官方库，包含了所有且最新的 api，其他大部分的库都是在这个库的基础上改造的，包括 Mongoose。\n3. 文档健全。\n\n**缺点：**\n\n1. 起初只支持 callback，会写出以下这种代码：\n```js\nmongodb.open(function (err, db) {\n  if (err) {\n    return callback(err)\n  }\n  db.collection('users', function (err, collection) {\n    if (err) {\n      return callback(err)\n    }\n    collection.find({ name: 'xxx' }, function (err, users) {\n      if (err) {\n        return callback(err)\n      }\n    })\n  ...\n```\n\n或者：\n\n```js\nMongoClient.connect('mongodb://localhost:27017', function (err, mongodb) {\n  if (err) {\n    return callback(err)\n  }\n  mongodb.db('test').collection('users').find({ name: 'xxx' }, function (err, users) {\n    if (err) {\n      return callback(err)\n    }\n  })\n  ...\n```\n\n现在支持 Promise 了，和 co 一起使用好很多。\n\n2. 不支持文档校验。Mongoose 通过 Schema 支持文档校验，虽说 mongodb 是 no schema 的，但在生产环境中使用 Schema 有两点好处。一是对文档做校验，防止非正常情况下写入错误的数据到数据库，二是可以简化一些代码，如类型为 ObjectId 的字段查询或更新时可通过对应的字符串操作，不用每次包装成 ObjectId 对象。\n\n### Mongoose:\n\n**优点：**\n\n1. 封装了数据库的操作，给人的感觉是同步的，其实内部是异步的。如 mongoose 与 MongoDB 建立连接：\n```js\nconst mongoose = require('mongoose')\nmongoose.connect('mongodb://localhost/test')\nconst BlogModel = mongoose.model('Blog', { title: String, content: String })\nBlogModel.find()\n```\n2. 支持 Promise。这个也无需多说，Promise 是未来趋势，可结合 co 使用，也可结合 async/await 使用。\n3. 支持文档校验。如上所述。\n\n**缺点（个人观点）：**\n\n1. 功能多，复杂。Mongoose 功能很强大，包括静态方法，实例方法，虚拟属性，hook 函数等等，混用带来的后果是逻辑复杂，代码难以维护。\n2. 较弱的 plugin 系统。如：`schema.pre('save', function(next) {})` 和 `schema.post('find', function(next) {})`，只支持异步 `next()`，灵活性大打折扣。\n3. 其他：对新手来说难以理解的 Schema、Model、Entity 之间的关系；容易混淆的 toJSON 和 toObject，以及有带有虚拟属性的情况；用和不用 exec 的情况以及直接用 then 的情况；返回的结果是 Mongoose 包装后的对象，在此对象上修改结果却无效等等。\n\n### Mongolass\n\nMongolass 保持了与 mongodb 一样的 api，又借鉴了许多 Mongoose 的优点，同时又保持了精简。\n\n**优点：**\n\n1. 支持 Promise。\n2. 官方一致的 api。\n2. 简单。参考 Mongolass 的 readme 即可上手，比 Mongoose 精简的多，本身代码也不多。\n3. 可选的 Schema。Mongolass 中的 Schema （基于 [another-json-schema](https://www.npmjs.com/package/another-json-schema)）是可选的，并且只用来做文档校验。如果定义了 schema 并关联到某个 model，则插入、更新和覆盖等操作都会校验文档是否满足 schema，同时 schema 也会尝试格式化该字段，类似于 Mongoose，如定义了一个字段为 ObjectId 类型，也可以用 ObjectId 的字符串无缝使用一样。如果没有 schema，则用法跟原生 mongodb 库一样。\n4. 简单却强大的插件系统。可以定义全局插件（对所有 model 生效），也可以定义某个 model 上的插件（只对该 model 生效）。Mongolass 插件的设计思路借鉴了中间件的概念（类似于 Koa），通过定义 `beforeXXX` 和 `afterXXX` （XXX为操作符首字母大写，如：`afterFind`）函数实现，函数返回 yieldable 的对象即可，所以每个插件内可以做一些其他的 IO 操作。不同的插件顺序会有不同的结果，而且每个插件的输入输出都是 plain object，而非类 Mongoose 包装后的对象，没有虚拟属性，无需调用 toJSON 或 toObject。Mongolass 中的 `.populate()`就是一个内置的插件。\n5. 详细的错误信息。用过 Mongoose 的人一定遇到过这样的错：\n   `CastError: Cast to ObjectId failed for value \"xxx\" at path \"_id\"`\n   只知道一个期望是 ObjectId 的字段传入了非期望的值，通常很难定位出错的代码，即使定位到也得不到错误现场。得益于 [another-json-schema](https://www.npmjs.com/package/another-json-schema)，使用 Mongolass 在查询或者更新时，某个字段不匹配它定义的 schema 时（还没落到 mongodb）会给出详细的错误信息，如下所示：\n```js\nconst Mongolass = require('mongolass')\nconst mongolass = new Mongolass('mongodb://localhost:27017/test')\n\nconst User = mongolass.model('User', {\n  name: { type: 'string' },\n  age: { type: 'number' }\n})\n\nUser\n  .insertOne({ name: 'nswbmw', age: 'wrong age' })\n  .exec()\n  .then(console.log)\n  .catch(function (e) {\n    console.error(e)\n    console.error(e.stack)\n  })\n/*\n{ [Error: ($.age: \"wrong age\") ✖ (type: number)]\n  validator: 'type',\n  actual: 'wrong age',\n  expected: { type: 'number' },\n  path: '$.age',\n  schema: 'UserSchema',\n  model: 'User',\n  plugin: 'MongolassSchema',\n  type: 'beforeInsertOne',\n  args: [] }\nError: ($.age: \"wrong age\") ✖ (type: number)\n    at Model.insertOne (/Users/nswbmw/Desktop/mongolass-demo/node_modules/mongolass/lib/query.js:108:16)\n    at Object.<anonymous> (/Users/nswbmw/Desktop/mongolass-demo/app.js:10:4)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Function.Module.runMain (module.js:441:10)\n    at startup (node.js:139:18)\n    at node.js:974:3\n */\n```\n可以看出，错误的原因是在 insertOne 一条用户数据到用户表的时候，age 期望是一个 number 类型的值，而我们传入的字符串 `wrong age`，然后从错误栈中可以快速定位到是 app.js 第 10 行代码抛出的错。\n\n**缺点：**\n\n1. ~~schema 功能较弱，缺少如 required、default 功能。~~\n\n### 扩展阅读\n\n[从零开始写一个 Node.js 的 MongoDB 驱动库](https://zhuanlan.zhihu.com/p/24308524)\n\n## 用户模型设计\n\n我们只存储用户的名称、密码（加密后的）、头像、性别和个人简介这几个字段，对应修改 lib/mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nexports.User = mongolass.model('User', {\n  name: { type: 'string', required: true },\n  password: { type: 'string', required: true },\n  avatar: { type: 'string', required: true },\n  gender: { type: 'string', enum: ['m', 'f', 'x'], default: 'x' },\n  bio: { type: 'string', required: true }\n})\nexports.User.index({ name: 1 }, { unique: true }).exec()// 根据用户名找到用户，用户名全局唯一\n```\n\n我们定义了用户表的 schema，生成并导出了 User 这个 model，同时设置了 name 的唯一索引，保证用户名是不重复的。\n\n> 小提示：`required: true` 表示该字段是必需的，`default: xxx` 用于创建文档时设置默认值。更多关于 Mongolass 的 schema 的用法，请查阅 [another-json-schema](https://github.com/nswbmw/another-json-schema)。\n\n> 小提示：Mongolass 中的 model 你可以认为相当于 mongodb 中的 collection，只不过添加了插件的功能。\n\n## 注册页\n\n首先，我们来完成注册。新建 views/signup.ejs，添加如下代码：\n\n**views/signup.ejs**\n\n```ejs\n<%- include('header') %>\n\n<div class=\"ui grid\">\n  <div class=\"four wide column\"></div>\n  <div class=\"eight wide column\">\n    <form class=\"ui form segment\" method=\"post\" enctype=\"multipart/form-data\">\n      <div class=\"field required\">\n        <label>用户名</label>\n        <input placeholder=\"用户名\" type=\"text\" name=\"name\">\n      </div>\n      <div class=\"field required\">\n        <label>密码</label>\n        <input placeholder=\"密码\" type=\"password\" name=\"password\">\n      </div>\n      <div class=\"field required\">\n        <label>重复密码</label>\n        <input placeholder=\"重复密码\" type=\"password\" name=\"repassword\">\n      </div>\n      <div class=\"field required\">\n        <label>性别</label>\n        <select class=\"ui compact selection dropdown\" name=\"gender\">\n          <option value=\"m\">男</option>\n          <option value=\"f\">女</option>\n          <option value=\"x\">保密</option>\n        </select>\n      </div>\n      <div class=\"field required\">\n        <label>头像</label>\n        <input type=\"file\" name=\"avatar\">\n      </div>\n      <div class=\"field required\">\n        <label>个人简介</label>\n        <textarea name=\"bio\" rows=\"5\"></textarea>\n      </div>\n      <input type=\"submit\" class=\"ui button fluid\" value=\"注册\">\n    </form>\n  </div>\n</div>\n\n<%- include('footer') %>\n```\n\n> 注意：form 表单要添加 `enctype=\"multipart/form-data\"` 属性才能上传文件。\n\n修改 routes/signup.js 中获取注册页的路由如下：\n\n**routes/signup.js**\n\n```js\n// GET /signup 注册页\nrouter.get('/', checkNotLogin, function (req, res, next) {\n  res.render('signup')\n})\n```\n\n现在访问 `localhost:3000/signup` 看看效果吧。\n\n## 注册与文件上传\n\n我们使用 [express-formidable](https://github.com/utatti/express-formidable) 处理 form 表单（包括文件上传）。修改 index.js ，在 `app.use(flash())` 下一行添加如下代码：\n\n**index.js**\n\n```js\n// 处理表单及文件上传的中间件\napp.use(require('express-formidable')({\n  uploadDir: path.join(__dirname, 'public/img'), // 上传文件目录\n  keepExtensions: true// 保留后缀\n}))\n```\n\n新建 models/users.js，添加如下代码：\n\n**models/users.js**\n\n```js\nconst User = require('../lib/mongo').User\n\nmodule.exports = {\n  // 注册一个用户\n  create: function create (user) {\n    return User.create(user).exec()\n  }\n}\n```\n\n完善处理用户注册的路由，最终修改 routes/signup.js 如下：\n\n**routes/signup.js**\n\n```js\nconst fs = require('fs')\nconst path = require('path')\nconst sha1 = require('sha1')\nconst express = require('express')\nconst router = express.Router()\n\nconst UserModel = require('../models/users')\nconst checkNotLogin = require('../middlewares/check').checkNotLogin\n\n// GET /signup 注册页\nrouter.get('/', checkNotLogin, function (req, res, next) {\n  res.render('signup')\n})\n\n// POST /signup 用户注册\nrouter.post('/', checkNotLogin, function (req, res, next) {\n  const name = req.fields.name\n  const gender = req.fields.gender\n  const bio = req.fields.bio\n  const avatar = req.files.avatar.path.split(path.sep).pop()\n  let password = req.fields.password\n  const repassword = req.fields.repassword\n\n  // 校验参数\n  try {\n    if (!(name.length >= 1 && name.length <= 10)) {\n      throw new Error('名字请限制在 1-10 个字符')\n    }\n    if (['m', 'f', 'x'].indexOf(gender) === -1) {\n      throw new Error('性别只能是 m、f 或 x')\n    }\n    if (!(bio.length >= 1 && bio.length <= 30)) {\n      throw new Error('个人简介请限制在 1-30 个字符')\n    }\n    if (!req.files.avatar.name) {\n      throw new Error('缺少头像')\n    }\n    if (password.length < 6) {\n      throw new Error('密码至少 6 个字符')\n    }\n    if (password !== repassword) {\n      throw new Error('两次输入密码不一致')\n    }\n  } catch (e) {\n    // 注册失败，异步删除上传的头像\n    fs.unlink(req.files.avatar.path)\n    req.flash('error', e.message)\n    return res.redirect('/signup')\n  }\n\n  // 明文密码加密\n  password = sha1(password)\n\n  // 待写入数据库的用户信息\n  let user = {\n    name: name,\n    password: password,\n    gender: gender,\n    bio: bio,\n    avatar: avatar\n  }\n  // 用户信息写入数据库\n  UserModel.create(user)\n    .then(function (result) {\n      // 此 user 是插入 mongodb 后的值，包含 _id\n      user = result.ops[0]\n      // 删除密码这种敏感信息，将用户信息存入 session\n      delete user.password\n      req.session.user = user\n      // 写入 flash\n      req.flash('success', '注册成功')\n      // 跳转到首页\n      res.redirect('/posts')\n    })\n    .catch(function (e) {\n      // 注册失败，异步删除上传的头像\n      fs.unlink(req.files.avatar.path)\n      // 用户名被占用则跳回注册页，而不是错误页\n      if (e.message.match('duplicate key')) {\n        req.flash('error', '用户名已被占用')\n        return res.redirect('/signup')\n      }\n      next(e)\n    })\n})\n\nmodule.exports = router\n```\n\n我们使用 express-formidable 处理表单的上传，表单普通字段挂载到 req.fields 上，表单上传后的文件挂载到 req.files 上，文件存储在 public/img 目录下。然后校验了参数，校验通过后将用户信息插入到 MongoDB 中，成功则跳转到主页并显示『注册成功』的通知，失败（如用户名被占用）则跳转回注册页面并显示『用户名已被占用』的通知。\n\n> 注意：我们使用 sha1 加密用户的密码，sha1 并不是一种十分安全的加密方式，实际开发中可以使用更安全的 [bcrypt](https://www.npmjs.com/package/bcrypt) 或 [scrypt](https://www.npmjs.com/package/scrypt) 加密。\n> 注意：注册失败时（参数校验失败或者存数据库时出错）删除已经上传到 public/img 目录下的头像。\n\n为了方便观察效果，我们先创建主页的模板。修改 routes/posts.js 中对应代码如下：\n\n**routes/posts.js**\n\n```js\nrouter.get('/', function (req, res, next) {\n  res.render('posts')\n})\n```\n\n新建 views/posts.ejs，添加如下代码：\n\n**views/posts.ejs**\n\n```ejs\n<%- include('header') %>\n这是主页\n<%- include('footer') %>\n```\n\n访问 `localhost:3000/signup`，注册成功后如下所示：\n\n![](/images/4.7.1.png)\n\n## 登出\n\n现在我们来完成登出的功能。修改 routes/signout.js 如下：\n\n**routes/signout.js**\n\n```js\nconst express = require('express')\nconst router = express.Router()\n\nconst checkLogin = require('../middlewares/check').checkLogin\n\n// GET /signout 登出\nrouter.get('/', checkLogin, function (req, res, next) {\n  // 清空 session 中用户信息\n  req.session.user = null\n  req.flash('success', '登出成功')\n  // 登出成功后跳转到主页\n  res.redirect('/posts')\n})\n\nmodule.exports = router\n```\n\n此时刷新页面，点击右上角的 `登出`，成功后如下图所示：\n\n![](/images/4.8.1.png)\n\n## 登录页\n\n现在我们来完成登录页。修改 routes/signin.js 相应代码如下：\n\n**routes/signin.js**\n\n```js\nrouter.get('/', checkNotLogin, function (req, res, next) {\n  res.render('signin')\n})\n```\n\n新建 views/signin.ejs，添加如下代码：\n\n**views/signin.ejs**\n\n```ejs\n<%- include('header') %>\n\n<div class=\"ui grid\">\n  <div class=\"four wide column\"></div>\n  <div class=\"eight wide column\">\n    <form class=\"ui form segment\" method=\"post\">\n      <div class=\"field required\">\n        <label>用户名</label>\n        <input placeholder=\"用户名\" type=\"text\" name=\"name\">\n      </div>\n      <div class=\"field required\">\n        <label>密码</label>\n        <input placeholder=\"密码\" type=\"password\" name=\"password\">\n      </div>\n      <input type=\"submit\" class=\"ui button fluid\" value=\"登录\">\n    </form>  \n  </div>\n</div>\n\n<%- include('footer') %>\n```\n\n现在刷新页面，点击右边上角 `登录` 试试吧，我们已经看到了登录页，但先不要点击登录，接下来我们实现处理登录的逻辑。\n\n## 登录\n\n现在我们来完成登录的功能。修改 models/users.js 添加 `getUserByName` 方法用于通过用户名获取用户信息：\n\n**models/users.js**\n\n```js\nconst User = require('../lib/mongo').User\n\nmodule.exports = {\n  // 注册一个用户\n  create: function create (user) {\n    return User.create(user).exec()\n  },\n\n  // 通过用户名获取用户信息\n  getUserByName: function getUserByName (name) {\n    return User\n      .findOne({ name: name })\n      .addCreatedAt()\n      .exec()\n  }\n}\n```\n\n这里我们使用了 `addCreatedAt` 自定义插件（通过 \\_id 生成时间戳），修改 lib/mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nconst moment = require('moment')\nconst objectIdToTimestamp = require('objectid-to-timestamp')\n\n// 根据 id 生成创建时间 created_at\nmongolass.plugin('addCreatedAt', {\n  afterFind: function (results) {\n    results.forEach(function (item) {\n      item.created_at = moment(objectIdToTimestamp(item._id)).format('YYYY-MM-DD HH:mm')\n    })\n    return results\n  },\n  afterFindOne: function (result) {\n    if (result) {\n      result.created_at = moment(objectIdToTimestamp(result._id)).format('YYYY-MM-DD HH:mm')\n    }\n    return result\n  }\n})\n```\n\n> 小提示：24 位长的 ObjectId 前 4 个字节是精确到秒的时间戳，所以我们没有额外的存创建时间（如: createdAt）的字段。ObjectId 生成规则：\n\n![](/images/4.8.2.png)\n\n\n修改 routes/signin.js 如下：\n\n**routes/signin.js**\n\n```js\nconst sha1 = require('sha1')\nconst express = require('express')\nconst router = express.Router()\n\nconst UserModel = require('../models/users')\nconst checkNotLogin = require('../middlewares/check').checkNotLogin\n\n// GET /signin 登录页\nrouter.get('/', checkNotLogin, function (req, res, next) {\n  res.render('signin')\n})\n\n// POST /signin 用户登录\nrouter.post('/', checkNotLogin, function (req, res, next) {\n  const name = req.fields.name\n  const password = req.fields.password\n\n  // 校验参数\n  try {\n    if (!name.length) {\n      throw new Error('请填写用户名')\n    }\n    if (!password.length) {\n      throw new Error('请填写密码')\n    }\n  } catch (e) {\n    req.flash('error', e.message)\n    return res.redirect('back')\n  }\n\n  UserModel.getUserByName(name)\n    .then(function (user) {\n      if (!user) {\n        req.flash('error', '用户不存在')\n        return res.redirect('back')\n      }\n      // 检查密码是否匹配\n      if (sha1(password) !== user.password) {\n        req.flash('error', '用户名或密码错误')\n        return res.redirect('back')\n      }\n      req.flash('success', '登录成功')\n      // 用户信息写入 session\n      delete user.password\n      req.session.user = user\n      // 跳转到主页\n      res.redirect('/posts')\n    })\n    .catch(next)\n})\n\nmodule.exports = router\n```\n\n这里我们在 POST /signin 的路由处理函数中，通过传上来的 name 去数据库中找到对应用户，校验传上来的密码是否跟数据库中的一致。不一致则返回上一页（即登录页）并显示『用户名或密码错误』的通知，一致则将用户信息写入 session，跳转到主页并显示『登录成功』的通知。\n\n现在刷新页面，点击右上角 `登录`，用刚才注册的账号登录，如下图所示：\n\n![](/images/4.8.3.png)\n\n## 文章模型设计\n\n我们只存储文章的作者 id、标题、正文和点击量这几个字段，对应修改 lib/mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nexports.Post = mongolass.model('Post', {\n  author: { type: Mongolass.Types.ObjectId, required: true },\n  title: { type: 'string', required: true },\n  content: { type: 'string', required: true },\n  pv: { type: 'number', default: 0 }\n})\nexports.Post.index({ author: 1, _id: -1 }).exec()// 按创建时间降序查看用户的文章列表\n```\n\n## 发表文章\n\n现在我们来实现发表文章的功能。首先创建发表文章页，新建 views/create.ejs，添加如下代码：\n\n**views/create.ejs**\n\n```ejs\n<%- include('header') %>\n\n<div class=\"ui grid\">\n  <div class=\"four wide column\">\n    <a class=\"avatar avatar-link\"\n       href=\"/posts?author=<%= user._id %>\"\n       data-title=\"<%= user.name %> | <%= ({m: '男', f: '女', x: '保密'})[user.gender] %>\"\n       data-content=\"<%= user.bio %>\">\n      <img class=\"avatar\" src=\"/img/<%= user.avatar %>\">\n    </a>\n  </div>\n\n  <div class=\"eight wide column\">\n    <form class=\"ui form segment\" method=\"post\">\n      <div class=\"field required\">\n        <label>标题</label>\n        <input type=\"text\" name=\"title\">\n      </div>\n      <div class=\"field required\">\n        <label>内容</label>\n        <textarea name=\"content\" rows=\"15\"></textarea>\n      </div>\n      <input type=\"submit\" class=\"ui button\" value=\"发布\">\n    </form>\n  </div>\n</div>\n\n<%- include('footer') %>\n```\n\n修改 routes/posts.js，将：\n\n```js\n// GET /posts/create 发表文章页\nrouter.get('/create', checkLogin, function (req, res, next) {\n  res.send('发表文章页')\n})\n```\n\n修改为：\n\n```js\n// GET /posts/create 发表文章页\nrouter.get('/create', checkLogin, function (req, res, next) {\n  res.render('create')\n})\n```\n\n登录成功状态，点击右上角『发表文章』试下吧。\n\n发表文章页已经完成了，接下来新建 models/posts.js 用来存放与文章操作相关的代码：\n\n**models/posts.js**\n\n```js\nconst Post = require('../lib/mongo').Post\n\nmodule.exports = {\n  // 创建一篇文章\n  create: function create (post) {\n    return Post.create(post).exec()\n  }\n}\n```\n\n修改 routes/posts.js，在文件上方引入 PostModel：\n\n**routes/posts.js**\n\n```js\nconst PostModel = require('../models/posts')\n```\n\n将：\n\n```js\n// POST /posts/create 发表一篇文章\nrouter.post('/create', checkLogin, function (req, res, next) {\n  res.send('发表文章')\n})\n```\n\n修改为：\n\n```js\n// POST /posts/create 发表一篇文章\nrouter.post('/create', checkLogin, function (req, res, next) {\n  const author = req.session.user._id\n  const title = req.fields.title\n  const content = req.fields.content\n\n  // 校验参数\n  try {\n    if (!title.length) {\n      throw new Error('请填写标题')\n    }\n    if (!content.length) {\n      throw new Error('请填写内容')\n    }\n  } catch (e) {\n    req.flash('error', e.message)\n    return res.redirect('back')\n  }\n\n  let post = {\n    author: author,\n    title: title,\n    content: content\n  }\n\n  PostModel.create(post)\n    .then(function (result) {\n      // 此 post 是插入 mongodb 后的值，包含 _id\n      post = result.ops[0]\n      req.flash('success', '发表成功')\n      // 发表成功后跳转到该文章页\n      res.redirect(`/posts/${post._id}`)\n    })\n    .catch(next)\n})\n```\n\n这里校验了上传的表单字段，并将文章信息插入数据库，成功后跳转到该文章页并显示『发表成功』的通知，失败后请求会进入错误处理函数。\n\n现在刷新页面（登录情况下），点击右上角 `发表文章` 试试吧，发表成功后跳转到了文章页但并没有任何内容，下面我们就来实现文章页及主页。\n\n## 主页与文章页\n\n现在我们来实现主页及文章页。修改 models/posts.js 如下：\n\n**models/posts.js**\n\n```js\nconst marked = require('marked')\nconst Post = require('../lib/mongo').Post\n\n// 将 post 的 content 从 markdown 转换成 html\nPost.plugin('contentToHtml', {\n  afterFind: function (posts) {\n    return posts.map(function (post) {\n      post.content = marked(post.content)\n      return post\n    })\n  },\n  afterFindOne: function (post) {\n    if (post) {\n      post.content = marked(post.content)\n    }\n    return post\n  }\n})\n\nmodule.exports = {\n  // 创建一篇文章\n  create: function create (post) {\n    return Post.create(post).exec()\n  },\n\n  // 通过文章 id 获取一篇文章\n  getPostById: function getPostById (postId) {\n    return Post\n      .findOne({ _id: postId })\n      .populate({ path: 'author', model: 'User' })\n      .addCreatedAt()\n      .contentToHtml()\n      .exec()\n  },\n\n  // 按创建时间降序获取所有用户文章或者某个特定用户的所有文章\n  getPosts: function getPosts (author) {\n    const query = {}\n    if (author) {\n      query.author = author\n    }\n    return Post\n      .find(query)\n      .populate({ path: 'author', model: 'User' })\n      .sort({ _id: -1 })\n      .addCreatedAt()\n      .contentToHtml()\n      .exec()\n  },\n\n  // 通过文章 id 给 pv 加 1\n  incPv: function incPv (postId) {\n    return Post\n      .update({ _id: postId }, { $inc: { pv: 1 } })\n      .exec()\n  }\n}\n```\n\n需要讲解两点：\n\n1. 我们使用了 markdown 解析文章的内容，所以在发表文章的时候可使用 markdown 语法（如插入链接、图片等等），关于 markdown 的使用请参考： [Markdown 语法说明](http://wowubuntu.com/markdown/)。\n2. 我们在 PostModel 上注册了 `contentToHtml`，而 `addCreatedAt` 是在 lib/mongo.js 中 mongolass 上注册的。也就是说 `contentToHtml` 只针对 PostModel 有效，而 `addCreatedAt` 对所有 Model 都有效。\n\n接下来完成主页的模板，修改 views/posts.ejs 如下：\n\n**views/posts.ejs**\n\n```ejs\n<%- include('header') %>\n\n<% posts.forEach(function (post) { %>\n  <%- include('components/post-content', { post: post }) %>\n<% }) %>\n\n<%- include('footer') %>\n```\n\n新建 views/components/post-content.ejs 用来存放单篇文章的模板片段：\n\n**views/components/post-content.ejs**\n\n```ejs\n<div class=\"post-content\">\n  <div class=\"ui grid\">\n    <div class=\"four wide column\">\n      <a class=\"avatar avatar-link\"\n         href=\"/posts?author=<%= post.author._id %>\"\n         data-title=\"<%= post.author.name %> | <%= ({m: '男', f: '女', x: '保密'})[post.author.gender] %>\"\n         data-content=\"<%= post.author.bio %>\">\n        <img class=\"avatar\" src=\"/img/<%= post.author.avatar %>\">\n      </a>\n    </div>\n\n    <div class=\"eight wide column\">\n      <div class=\"ui segment\">\n        <h3><a href=\"/posts/<%= post._id %>\"><%= post.title %></a></h3>\n        <pre><%- post.content %></pre>\n        <div>\n          <span class=\"tag\"><%= post.created_at %></span>\n          <span class=\"tag right\">\n            <span>浏览(<%= post.pv || 0 %>)</span>\n            <span>留言(<%= post.commentsCount || 0 %>)</span>\n\n            <% if (user && post.author._id && user._id.toString() === post.author._id.toString()) { %>\n              <div class=\"ui inline dropdown\">\n                <div class=\"text\"></div>\n                <i class=\"dropdown icon\"></i>\n                <div class=\"menu\">\n                  <div class=\"item\"><a href=\"/posts/<%= post._id %>/edit\">编辑</a></div>\n                  <div class=\"item\"><a href=\"/posts/<%= post._id %>/remove\">删除</a></div>\n                </div>\n              </div>\n            <% } %>\n\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n> 注意：我们用了 `<%- post.content %>`，而不是 `<%= post.content %>`，因为 post.content 是 markdown 转换后的 html 字符串。\n\n修改 routes/posts.js，将：\n\n**routes/posts.js**\n\n```js\nrouter.get('/', function (req, res, next) {\n  res.render('posts')\n})\n```\n\n修改为：\n\n```js\nrouter.get('/', function (req, res, next) {\n  const author = req.query.author\n\n  PostModel.getPosts(author)\n    .then(function (posts) {\n      res.render('posts', {\n        posts: posts\n      })\n    })\n    .catch(next)\n})\n```\n\n> 注意：主页与用户页通过 url 中的 author 区分。\n\n现在完成了主页与用户页，访问 `http://localhost:3000/posts` 试试吧，现在已经将我们之前创建的文章显示出来了，尝试点击用户的头像看看效果。\n\n接下来完成文章详情页。新建 views/post.ejs，添加如下代码：\n\n**views/post.ejs**\n\n```ejs\n<%- include('header') %>\n<%- include('components/post-content') %>\n<%- include('footer') %>\n```\n\n打开 routes/posts.js，将：\n\n**routes/posts.js**\n\n```js\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function (req, res, next) {\n  res.send('文章详情页')\n})\n```\n\n修改为：\n\n```js\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function (req, res, next) {\n  const postId = req.params.postId\n\n  Promise.all([\n    PostModel.getPostById(postId), // 获取文章信息\n    PostModel.incPv(postId)// pv 加 1\n  ])\n    .then(function (result) {\n      const post = result[0]\n      if (!post) {\n        throw new Error('该文章不存在')\n      }\n\n      res.render('post', {\n        post: post\n      })\n    })\n    .catch(next)\n})\n```\n\n现在刷新浏览器，点击文章的标题看看浏览器地址的变化吧。\n\n> 注意：浏览器地址有变化，但页面看不出区别来（因为页面布局一样），后面我们添加留言功能后就能看出区别来了。\n\n## 编辑与删除文章\n\n现在我们来完成编辑与删除文章的功能。修改 models/posts.js，在 module.exports 对象上添加如下 3 个方法：\n\n**models/posts.js**\n\n```js\n// 通过文章 id 获取一篇原生文章（编辑文章）\ngetRawPostById: function getRawPostById (postId) {\n  return Post\n    .findOne({ _id: postId })\n    .populate({ path: 'author', model: 'User' })\n    .exec()\n},\n\n// 通过文章 id 更新一篇文章\nupdatePostById: function updatePostById (postId, data) {\n  return Post.update({ _id: postId }, { $set: data }).exec()\n},\n\n// 通过文章 id 删除一篇文章\ndelPostById: function delPostById (postId) {\n  return Post.deleteOne({ _id: postId }).exec()\n}\n```\n\n> 注意：不要忘了在适当位置添加逗号，如 incPv 的结束大括号后。\n\n> 注意：我们通过新函数 `getRawPostById` 用来获取文章原生的内容（编辑页面用），而不是用 `getPostById` 返回将 markdown 转换成 html 后的内容。\n\n新建编辑文章页 views/edit.ejs，添加如下代码：\n\n**views/edit.ejs**\n\n```js\n<%- include('header') %>\n\n<div class=\"ui grid\">\n  <div class=\"four wide column\">\n    <a class=\"avatar\"\n       href=\"/posts?author=<%= user._id %>\"\n       data-title=\"<%= user.name %> | <%= ({m: '男', f: '女', x: '保密'})[user.gender] %>\"\n       data-content=\"<%= user.bio %>\">\n      <img class=\"avatar\" src=\"/img/<%= user.avatar %>\">\n    </a>\n  </div>\n\n  <div class=\"eight wide column\">\n    <form class=\"ui form segment\" method=\"post\" action=\"/posts/<%= post._id %>/edit\">\n      <div class=\"field required\">\n        <label>标题</label>\n        <input type=\"text\" name=\"title\" value=\"<%= post.title %>\">\n      </div>\n      <div class=\"field required\">\n        <label>内容</label>\n        <textarea name=\"content\" rows=\"15\"><%= post.content %></textarea>\n      </div>\n      <input type=\"submit\" class=\"ui button\" value=\"发布\">\n    </form>\n  </div>\n</div>\n\n<%- include('footer') %>\n```\n\n修改 routes/posts.js，将：\n\n**routes/posts.js**\n\n```js\n// GET /posts/:postId/edit 更新文章页\nrouter.get('/:postId/edit', checkLogin, function (req, res, next) {\n  res.send('更新文章页')\n})\n\n// POST /posts/:postId/edit 更新一篇文章\nrouter.post('/:postId/edit', checkLogin, function (req, res, next) {\n  res.send('更新文章')\n})\n\n// GET /posts/:postId/remove 删除一篇文章\nrouter.get('/:postId/remove', checkLogin, function (req, res, next) {\n  res.send('删除文章')\n})\n```\n\n修改为：\n\n```js\n// GET /posts/:postId/edit 更新文章页\nrouter.get('/:postId/edit', checkLogin, function (req, res, next) {\n  const postId = req.params.postId\n  const author = req.session.user._id\n\n  PostModel.getRawPostById(postId)\n    .then(function (post) {\n      if (!post) {\n        throw new Error('该文章不存在')\n      }\n      if (author.toString() !== post.author._id.toString()) {\n        throw new Error('权限不足')\n      }\n      res.render('edit', {\n        post: post\n      })\n    })\n    .catch(next)\n})\n\n// POST /posts/:postId/edit 更新一篇文章\nrouter.post('/:postId/edit', checkLogin, function (req, res, next) {\n  const postId = req.params.postId\n  const author = req.session.user._id\n  const title = req.fields.title\n  const content = req.fields.content\n\n  // 校验参数\n  try {\n    if (!title.length) {\n      throw new Error('请填写标题')\n    }\n    if (!content.length) {\n      throw new Error('请填写内容')\n    }\n  } catch (e) {\n    req.flash('error', e.message)\n    return res.redirect('back')\n  }\n\n  PostModel.getRawPostById(postId)\n    .then(function (post) {\n      if (!post) {\n        throw new Error('文章不存在')\n      }\n      if (post.author._id.toString() !== author.toString()) {\n        throw new Error('没有权限')\n      }\n      PostModel.updatePostById(postId, { title: title, content: content })\n        .then(function () {\n          req.flash('success', '编辑文章成功')\n          // 编辑成功后跳转到上一页\n          res.redirect(`/posts/${postId}`)\n        })\n        .catch(next)\n    })\n})\n\n// GET /posts/:postId/remove 删除一篇文章\nrouter.get('/:postId/remove', checkLogin, function (req, res, next) {\n  const postId = req.params.postId\n  const author = req.session.user._id\n\n  PostModel.getRawPostById(postId)\n    .then(function (post) {\n      if (!post) {\n        throw new Error('文章不存在')\n      }\n      if (post.author._id.toString() !== author.toString()) {\n        throw new Error('没有权限')\n      }\n      PostModel.delPostById(postId)\n        .then(function () {\n          req.flash('success', '删除文章成功')\n          // 删除成功后跳转到主页\n          res.redirect('/posts')\n        })\n        .catch(next)\n    })\n})\n```\n\n现在刷新主页，点击文章右下角的小三角，编辑文章和删除文章试试吧。\n\n## 留言模型设计\n\n我们只需要留言的作者 id、留言内容和关联的文章 id 这几个字段，修改 lib/mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nexports.Comment = mongolass.model('Comment', {\n  author: { type: Mongolass.Types.ObjectId, required: true },\n  content: { type: 'string', required: true },\n  postId: { type: Mongolass.Types.ObjectId, required: true }\n})\nexports.Comment.index({ postId: 1, _id: 1 }).exec()// 通过文章 id 获取该文章下所有留言，按留言创建时间升序\n```\n\n## 显示留言\n\n在实现留言功能之前，我们先让文章页可以显示留言列表。首先创建留言的模板，新建 views/components/comments.ejs，添加如下代码：\n\n**views/components/comments.ejs**\n\n```ejs\n<div class=\"ui grid\">\n  <div class=\"four wide column\"></div>\n  <div class=\"eight wide column\">\n    <div class=\"ui segment\">\n      <div class=\"ui minimal comments\">\n        <h3 class=\"ui dividing header\">留言</h3>\n\n        <% comments.forEach(function (comment) { %>\n          <div class=\"comment\">\n            <span class=\"avatar\">\n              <img src=\"/img/<%= comment.author.avatar %>\">\n            </span>\n            <div class=\"content\">\n              <a class=\"author\" href=\"/posts?author=<%= comment.author._id %>\"><%= comment.author.name %></a>\n              <div class=\"metadata\">\n                <span class=\"date\"><%= comment.created_at %></span>\n              </div>\n              <div class=\"text\"><%- comment.content %></div>\n\n              <% if (user && comment.author._id && user._id.toString() === comment.author._id.toString()) { %>\n                <div class=\"actions\">\n                  <a class=\"reply\" href=\"/comments/<%= comment._id %>/remove\">删除</a>\n                </div>\n              <% } %>\n            </div>\n          </div>\n        <% }) %>\n\n        <% if (user) { %>\n          <form class=\"ui reply form\" method=\"post\" action=\"/comments\">\n            <input name=\"postId\" value=\"<%= post._id %>\" hidden>\n            <div class=\"field\">\n              <textarea name=\"content\"></textarea>\n            </div>\n            <input type=\"submit\" class=\"ui icon button\" value=\"留言\" />\n          </form>\n        <% } %>\n\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n> 注意：我们在提交留言表单时带上了文章 id（postId），通过 hidden 隐藏。\n\n在文章页引入留言的模板片段，修改 views/post.ejs 为：\n\n**views/post.ejs**\n\n```ejs\n<%- include('header') %>\n\n<%- include('components/post-content') %>\n<%- include('components/comments') %>\n\n<%- include('footer') %>\n```\n\n新建 models/comments.js，存放留言相关的数据库操作，添加如下代码：\n\n**models/comments.js**\n\n```js\nconst marked = require('marked')\nconst Comment = require('../lib/mongo').Comment\n\n// 将 comment 的 content 从 markdown 转换成 html\nComment.plugin('contentToHtml', {\n  afterFind: function (comments) {\n    return comments.map(function (comment) {\n      comment.content = marked(comment.content)\n      return comment\n    })\n  }\n})\n\nmodule.exports = {\n  // 创建一个留言\n  create: function create (comment) {\n    return Comment.create(comment).exec()\n  },\n\n  // 通过留言 id 获取一个留言\n  getCommentById: function getCommentById (commentId) {\n    return Comment.findOne({ _id: commentId }).exec()\n  },\n\n  // 通过留言 id 删除一个留言\n  delCommentById: function delCommentById (commentId) {\n    return Comment.deleteOne({ _id: commentId }).exec()\n  },\n\n  // 通过文章 id 删除该文章下所有留言\n  delCommentsByPostId: function delCommentsByPostId (postId) {\n    return Comment.deleteMany({ postId: postId }).exec()\n  },\n\n  // 通过文章 id 获取该文章下所有留言，按留言创建时间升序\n  getComments: function getComments (postId) {\n    return Comment\n      .find({ postId: postId })\n      .populate({ path: 'author', model: 'User' })\n      .sort({ _id: 1 })\n      .addCreatedAt()\n      .contentToHtml()\n      .exec()\n  },\n\n  // 通过文章 id 获取该文章下留言数\n  getCommentsCount: function getCommentsCount (postId) {\n    return Comment.count({ postId: postId }).exec()\n  }\n}\n```\n\n> 小提示：我们让留言也支持了 markdown。\n> 注意：删除一篇文章成功后也要删除该文章下所有的评论，上面 delCommentsByPostId 就是用来做这件事的。\n\n\n修改 models/posts.js，在：\n\n**models/posts.js**\n\n```js\nconst Post = require('../lib/mongo').Post\n```\n\n下添加如下代码：\n\n```js\nconst CommentModel = require('./comments')\n\n// 给 post 添加留言数 commentsCount\nPost.plugin('addCommentsCount', {\n  afterFind: function (posts) {\n    return Promise.all(posts.map(function (post) {\n      return CommentModel.getCommentsCount(post._id).then(function (commentsCount) {\n        post.commentsCount = commentsCount\n        return post\n      })\n    }))\n  },\n  afterFindOne: function (post) {\n    if (post) {\n      return CommentModel.getCommentsCount(post._id).then(function (count) {\n        post.commentsCount = count\n        return post\n      })\n    }\n    return post\n  }\n})\n```\n\n在 PostModel 上注册了 `addCommentsCount` 用来给每篇文章添加留言数 `commentsCount`，在 `getPostById` 和 `getPosts` 方法里的：\n\n```\n.addCreatedAt()\n```\n\n下添加：\n\n```\n.addCommentsCount()\n```\n\n这样主页和文章页的文章就可以正常显示留言数了。\n\n然后将 `delPostById` 修改为：\n\n```js\n// 通过用户 id 和文章 id 删除一篇文章\ndelPostById: function delPostById (postId, author) {\n  return Post.deleteOne({ author: author, _id: postId })\n    .exec()\n    .then(function (res) {\n      // 文章删除后，再删除该文章下的所有留言\n      if (res.result.ok && res.result.n > 0) {\n        return CommentModel.delCommentsByPostId(postId)\n      }\n    })\n}\n```\n\n> 小提示：虽然目前看起来使用 Mongolass 自定义插件并不能节省代码，反而使代码变多了。Mongolass 插件真正的优势在于：在项目非常庞大时，可通过自定义的插件随意组合（及顺序）实现不同的输出，如上面的 `getPostById` 需要将取出 markdown 转换成 html，则使用 `.contentToHtml()`，否则像 `getRawPostById` 则不必使用。\n\n修改 routes/posts.js，在：\n\n**routes/posts.js**\n\n```js\nconst PostModel = require('../models/posts')\n```\n\n下引入 CommentModel:\n\n```js\nconst CommentModel = require('../models/comments')\n```\n\n在文章页传入留言列表，将：\n\n```js\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function (req, res, next) {\n  ...\n})\n```\n\n修改为：\n\n```js\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function (req, res, next) {\n  const postId = req.params.postId\n\n  Promise.all([\n    PostModel.getPostById(postId), // 获取文章信息\n    CommentModel.getComments(postId), // 获取该文章所有留言\n    PostModel.incPv(postId)// pv 加 1\n  ])\n    .then(function (result) {\n      const post = result[0]\n      const comments = result[1]\n      if (!post) {\n        throw new Error('该文章不存在')\n      }\n\n      res.render('post', {\n        post: post,\n        comments: comments\n      })\n    })\n    .catch(next)\n})\n```\n\n现在刷新文章页试试吧，此时已经显示了留言的输入框。\n\n## 发表与删除留言\n\n现在我们来实现发表与删除留言的功能。将 routes/comments.js 修改如下：\n\n```js\nconst express = require('express')\nconst router = express.Router()\n\nconst checkLogin = require('../middlewares/check').checkLogin\nconst CommentModel = require('../models/comments')\n\n// POST /comments 创建一条留言\nrouter.post('/', checkLogin, function (req, res, next) {\n  const author = req.session.user._id\n  const postId = req.fields.postId\n  const content = req.fields.content\n\n  // 校验参数\n  try {\n    if (!content.length) {\n      throw new Error('请填写留言内容')\n    }\n  } catch (e) {\n    req.flash('error', e.message)\n    return res.redirect('back')\n  }\n\n  const comment = {\n    author: author,\n    postId: postId,\n    content: content\n  }\n\n  CommentModel.create(comment)\n    .then(function () {\n      req.flash('success', '留言成功')\n      // 留言成功后跳转到上一页\n      res.redirect('back')\n    })\n    .catch(next)\n})\n\n// GET /comments/:commentId/remove 删除一条留言\nrouter.get('/:commentId/remove', checkLogin, function (req, res, next) {\n  const commentId = req.params.commentId\n  const author = req.session.user._id\n\n  CommentModel.getCommentById(commentId)\n    .then(function (comment) {\n      if (!comment) {\n        throw new Error('留言不存在')\n      }\n      if (comment.author.toString() !== author.toString()) {\n        throw new Error('没有权限删除留言')\n      }\n      CommentModel.delCommentById(commentId)\n        .then(function () {\n          req.flash('success', '删除留言成功')\n          // 删除成功后跳转到上一页\n          res.redirect('back')\n        })\n        .catch(next)\n    })\n})\n\nmodule.exports = router\n```\n\n至此，我们完成了创建留言和删除留言的逻辑。刷新页面，尝试留言试试吧。留言成功后，将鼠标悬浮在留言上可以显示出 `删除` 的按钮，点击可以删除留言。\n\n现在访问一个不存在的地址，如：`http://localhost:3000/haha` 页面会显示：\n\n```\nCannot GET /haha\n```\n## 404 页面\n\n我们来自定义 404 页面。修改 routes/index.js，在：\n\n**routes/index.js**\n\n```js\napp.use('/comments', require('./comments'))\n```\n\n下添加如下代码：\n\n```js\n// 404 page\napp.use(function (req, res) {\n  if (!res.headersSent) {\n    res.status(404).render('404')\n  }\n})\n```\n\n新建 views/404.ejs，添加如下代码：\n\n**views/404.ejs**\n\n```ejs\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title><%= blog.title %></title>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n  </head>\n  <body></body>\n</html>\n```\n\n这里我们只为了演示 express 中处理 404 的情况，用了腾讯公益的 404 页面，刷新一下页面看下效果吧。\n\n前面讲到 express 有一个内置的错误处理逻辑，如果程序出错，会直接将错误栈返回并显示到页面上。如访问：`localhost:3000/posts/xxx/edit` 没有权限编辑的文章页，将会直接在页面中显示错误栈，如下：\n\n```js\nError: 权限不足\n    at /Users/nswbmw/Desktop/myblog/routes/posts.js:95:15\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\n```\n\n现在我们修改代码，实现复用页面通知。修改 index.js，在 `app.listen` 上面添加如下代码：\n\n**index.js**\n\n```js\napp.use(function (err, req, res, next) {\n  console.error(err)\n  req.flash('error', err.message)\n  res.redirect('/posts')\n})\n```\n\n这里我们实现了将错误信息用页面通知展示的功能，刷新页面将会跳转到主页并显示『权限不足』的红色通知。\n\n现在我们来实现日志功能，日志分为正常请求的日志和错误请求的日志，我们希望实现这两种日志都打印到终端并写入文件。\n\n## winston 和 express-winston\n\n我们使用 [winston](https://www.npmjs.com/package/winston) 和 [express-winston](https://www.npmjs.com/package/express-winston) 记录日志。\n\n新建 logs 目录存放日志文件，修改 index.js，在：\n\n**index.js**\n\n```js\nconst pkg = require('./package')\n```\n\n下引入所需模块：\n\n```js\nconst winston = require('winston')\nconst expressWinston = require('express-winston')\n```\n\n将：\n\n```\n// 路由\nroutes(app)\n```\n\n修改为：\n\n```js\n// 正常请求的日志\napp.use(expressWinston.logger({\n  transports: [\n    new (winston.transports.Console)({\n      json: true,\n      colorize: true\n    }),\n    new winston.transports.File({\n      filename: 'logs/success.log'\n    })\n  ]\n}))\n// 路由\nroutes(app)\n// 错误请求的日志\napp.use(expressWinston.errorLogger({\n  transports: [\n    new winston.transports.Console({\n      json: true,\n      colorize: true\n    }),\n    new winston.transports.File({\n      filename: 'logs/error.log'\n    })\n  ]\n}))\n```\n\n刷新页面看一下终端输出及 logs 下的文件。\n可以看出：winston 将正常请求的日志打印到终端并写入了 `logs/success.log`，将错误请求的日志打印到终端并写入了 `logs/error.log`。\n\n> 注意：记录正常请求日志的中间件要放到 `routes(app)` 之前，记录错误请求日志的中间件要放到 `routes(app)` 之后。\n\n## .gitignore\n\n如果我们想把项目托管到 git 服务器上（如: [GitHub](https://github.com)），而不想把线上配置、本地调试的 logs 以及 node_modules 添加到 git 的版本控制中，这个时候就需要 .gitignore 文件了，git 会读取 .gitignore 并忽略这些文件。在 myblog 下新建 .gitignore 文件，添加如下配置：\n\n**.gitignore**\n\n```\nconfig/*\n!config/default.*\nnpm-debug.log\nnode_modules\ncoverage\n```\n\n需要注意的是，通过设置：\n\n```\nconfig/*\n!config/default.*\n```\n\n这样只有 config/default.js 会加入 git 的版本控制，而 config 目录下的其他配置文件则会被忽略，因为把线上配置加入到 git 是一个不安全的行为，通常你需要本地或者线上环境手动创建 config/production.js，然后添加一些线上的配置（如：mongodb 配置）即可覆盖相应的 default 配置。\n\n> 注意：后面讲到部署到 Heroku 时，因为无法登录到 Heroku 主机，所以可以把以下两行删掉，将 config/production.js 也加入 git 中。\n> \n> ```\n> config/*\n> !config/default.*\n> ```\n\n然后在 public/img 目录下创建 .gitignore：\n\n```\n# Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n```\n\n这样 git 会忽略 public/img 目录下所有上传的头像，而不忽略 public/img 目录。同理，在 logs 目录下创建 .gitignore 忽略日志文件：\n\n```\n# Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n```\n# 测试\n\n## mocha 和 supertest\n\n[mocha](https://www.npmjs.com/package/mocha) 和 [supertest](https://www.npmjs.com/package/supertest) 是常用的测试组合，通常用来测试 restful 的 api 接口，这里我们也可以用来测试我们的博客应用。\n在 myblog 下新建 test 文件夹存放测试文件，以注册为例讲解 mocha 和 supertest 的用法。首先安装所需模块：\n\n```sh\nnpm i mocha supertest --save-dev\n```\n\n修改 package.json，将：\n\n**package.json**\n\n```json\n\"scripts\": {\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n}\n```\n\n修改为：\n\n```json\n\"scripts\": {\n  \"test\": \"mocha test\"\n}\n```\n\n指定执行 test 目录的测试。修改 index.js，将：\n\n**index.js**\n\n```js\n// 监听端口，启动程序\napp.listen(config.port, function () {\n  console.log(`${pkg.name} listening on port ${config.port}`)\n})\n```\n\n修改为:\n\n```js\nif (module.parent) {\n  // 被 require，则导出 app\n  module.exports = app\n} else {\n  // 监听端口，启动程序\n  app.listen(config.port, function () {\n    console.log(`${pkg.name} listening on port ${config.port}`)\n  })\n}\n```\n\n这样做可以实现：直接启动 index.js 则会监听端口启动程序，如果 index.js 被 require 了，则导出 app，通常用于测试。\n\n找一张图片用于测试上传头像，放到 test 目录下，如 avatar.png。新建 test/signup.js，添加如下测试代码：\n\n**test/signup.js**\n\n```js\nconst path = require('path')\nconst assert = require('assert')\nconst request = require('supertest')\nconst app = require('../index')\nconst User = require('../lib/mongo').User\n\nconst testName1 = 'testName1'\nconst testName2 = 'nswbmw'\ndescribe('signup', function () {\n  describe('POST /signup', function () {\n    const agent = request.agent(app)// persist cookie when redirect\n    beforeEach(function (done) {\n      // 创建一个用户\n      User.create({\n        name: testName1,\n        password: '123456',\n        avatar: '',\n        gender: 'x',\n        bio: ''\n      })\n        .exec()\n        .then(function () {\n          done()\n        })\n        .catch(done)\n    })\n\n    afterEach(function (done) {\n      // 删除测试用户\n      User.deleteMany({ name: { $in: [testName1, testName2] } })\n        .exec()\n        .then(function () {\n          done()\n        })\n        .catch(done)\n    })\n\n    after(function (done) {\n      process.exit()\n    })\n\n    // 用户名错误的情况\n    it('wrong name', function (done) {\n      agent\n        .post('/signup')\n        .type('form')\n        .field({ name: '' })\n        .attach('avatar', path.join(__dirname, 'avatar.png'))\n        .redirects()\n        .end(function (err, res) {\n          if (err) return done(err)\n          assert(res.text.match(/名字请限制在 1-10 个字符/))\n          done()\n        })\n    })\n\n    // 性别错误的情况\n    it('wrong gender', function (done) {\n      agent\n        .post('/signup')\n        .type('form')\n        .field({ name: testName2, gender: 'a' })\n        .attach('avatar', path.join(__dirname, 'avatar.png'))\n        .redirects()\n        .end(function (err, res) {\n          if (err) return done(err)\n          assert(res.text.match(/性别只能是 m、f 或 x/))\n          done()\n        })\n    })\n    // 其余的参数测试自行补充\n    // 用户名被占用的情况\n    it('duplicate name', function (done) {\n      agent\n        .post('/signup')\n        .type('form')\n        .field({ name: testName1, gender: 'm', bio: 'noder', password: '123456', repassword: '123456' })\n        .attach('avatar', path.join(__dirname, 'avatar.png'))\n        .redirects()\n        .end(function (err, res) {\n          if (err) return done(err)\n          assert(res.text.match(/用户名已被占用/))\n          done()\n        })\n    })\n\n    // 注册成功的情况\n    it('success', function (done) {\n      agent\n        .post('/signup')\n        .type('form')\n        .field({ name: testName2, gender: 'm', bio: 'noder', password: '123456', repassword: '123456' })\n        .attach('avatar', path.join(__dirname, 'avatar.png'))\n        .redirects()\n        .end(function (err, res) {\n          if (err) return done(err)\n          assert(res.text.match(/注册成功/))\n          done()\n        })\n    })\n  })\n})\n```\n\n此时编辑器会报语法错误（如：describe 未定义等等），修改 .eslintrc.json 如下：\n\n```json\n{\n  \"extends\": \"standard\",\n  \"globals\": {\n    \"describe\": true,\n    \"beforeEach\": true,\n    \"afterEach\": true,\n    \"after\": true,\n    \"it\": true\n  }\n}\n```\n\n这样，eslint 会忽略 globals 中变量未定义的警告。运行 `npm test` 看看效果吧，其余的测试请读者自行完成。\n\n## 测试覆盖率\n\n我们写测试肯定想覆盖所有的情况（包括各种出错的情况及正确时的情况），但光靠想需要写哪些测试是不行的，总也会有疏漏，最简单的办法就是可以直观的看出测试是否覆盖了所有的代码，这就是测试覆盖率，即被测试覆盖到的代码行数占总代码行数的比例。\n\n> 注意：即使测试覆盖率达到 100% 也不能说明你的测试覆盖了所有的情况，只能说明基本覆盖了所有的情况。\n\n[istanbul](https://www.npmjs.com/package/istanbul) 是一个常用的生成测试覆盖率的库，它会将测试的结果报告生成 html 页面，并放到项目根目录的 coverage 目录下。首先安装 istanbul:\n\n```\nnpm i istanbul --save-dev\n```\n\n配置 istanbul 很简单，将 package.json 中：\n\n**package.json**\n\n```json\n\"scripts\": {\n  \"test\": \"mocha test\"\n}\n```\n\n修改为：\n\n```json\n\"scripts\": {\n  \"test\": \"istanbul cover _mocha\"\n}\n```\n\n**注意**：Windows 下需要改成 `istanbul cover node_modules/mocha/bin/_mocha`。\n\n即可将 istanbul 和 mocha 结合使用，运行 `npm test` 终端会打印：\n\n![](/images/4.14.1.png)\n\n打开 myblog/coverage/Icov-report/index.html，如下所示：\n\n![](/images/4.14.2.png)\n\n可以点进去查看某个代码文件具体的覆盖率，如下所示：\n\n![](/images/4.14.3.png)\n\n红色的行表示测试没有覆盖到，因为我们只写了 name 和 gender 的测试。\n\n# 部署\n\n## 申请 MLab\n\n[MLab](https://mlab.com) (前身是 MongoLab) 是一个 mongodb 云数据库提供商，我们可以选择 500MB 空间的免费套餐用来测试。注册成功后，点击右上角的 `Create New` 创建一个数据库（如: myblog），成功后点击进入到该数据库详情页，注意页面中有一行黄色的警告：\n\n```\nA database user is required to connect to this database. To create one now, visit the 'Users' tab and click the 'Add database user' button.\n```\n\n每个数据库至少需要一个 user，所以我们点击 Users 下的 `Add database user` 创建一个用户。\n\n> 注意：不要选中 `Make read-only`，因为我们有写数据库的操作。\n\n最后分配给我们的类似下面的 mongodb url：\n\n```\nmongodb://<dbuser>:<dbpassword>@ds139327.mlab.com:39327/myblog\n```\n\n如我创建的用户名和密码都为 myblog 的用户，新建 config/production.js，添加如下代码：\n\n**config/production.js**\n\n```js\nmodule.exports = {\n  mongodb: 'mongodb://myblog:myblog@ds139327.mlab.com:39327/myblog'\n}\n```\n\n停止程序，然后以 production 配置启动程序:\n\n```sh\nnpm i cross-env --save-dev # 本地安装 cross-env\nnpm i cross-env -g # 全局安装 cross-env\ncross-env NODE_ENV=production supervisor index\n```\n\n> 注意：cross-env 用来兼容 Windows 系统和 Linux/Mac 系统设置环境变量的差异。\n\n## pm2\n\n当我们的博客要部署到线上服务器时，不能单纯的靠 `node index` 或者 `supervisor index` 来启动了，因为我们断掉 SSH 连接后服务就终止了，这时我们就需要像 [pm2](https://www.npmjs.com/package/pm2) 或者 [forever](https://www.npmjs.com/package/forever) 这样的进程管理工具了。pm2 是 Node.js 下的生产环境进程管理工具，就是我们常说的进程守护工具，可以用来在生产环境中进行自动重启、日志记录、错误预警等等。以 pm2 为例，全局安装 pm2：\n\n```sh\nnpm i pm2 -g\n```\n\n修改 package.json，添加 start 的命令：\n\n**package.json**\n\n```json\n\"scripts\": {\n  \"test\": \"istanbul cover _mocha\",\n  \"start\": \"cross-env NODE_ENV=production pm2 start index.js --name 'myblog'\"\n}\n```\n\n然后运行 `npm start` 通过 pm2 启动程序，如下图所示 ：\n\n![](/images/4.15.1.png)\n\npm2 常用命令:\n\n1. `pm2 start/stop`: 启动/停止程序\n2. `pm2 reload/restart [id|name]`: 重启程序\n3. `pm2 logs [id|name]`: 查看日志\n4. `pm2 l/list`: 列出程序列表\n\n更多命令请使用 `pm2 -h` 查看。\n\n## 部署到 Heroku\n\n[Heroku](https://www.heroku.com) 是一个支持多种编程语言的云服务平台，Heroku 也提供免费的基础套餐供开发者测试使用。现在，我们将论坛部署到 Heroku。\n\n> 注意：新版 heroku 会有填写信用卡的步骤，如果没有信用卡请跳过本节。\n\n首先，需要到 [https://toolbelt.heroku.com/](https://toolbelt.heroku.com/) 下载安装 Heroku 的命令行工具包 toolbelt。然后登录（如果没有账号，请注册）到 Heroku 的 Dashboard，点击右上角 New -> Create New App 创建一个应用。创建成功后运行：\n\n```sh\nheroku login\n```\n\n填写正确的 email 和 password 验证通过后，本地会产生一个 SSH public key。在部署到 Heroku 之前，我们需要对代码进行简单的修改。如下：\n\n1.删掉 .gitignore 中：\n```\nconfig/*\n!config/default.*\n```\n因为我们无法登录到 Heroku 主机创建 production 配置文件，所以这里将 production 配置也上传到 Heroku。\n\n2.打开 index.js，将 `app.listen` 修改为：\n```js\nconst port = process.env.PORT || config.port\napp.listen(port, function () {\n  console.log(`${pkg.name} listening on port ${port}`)\n})\n```\n因为 Heroku 会动态分配端口（通过环境变量 PORT 指定），所以不能用配置文件里写死的端口。\n\n3.修改 package.json，在 scripts 添加：\n\n```json\n\"heroku\": \"NODE_ENV=production node index\"\n```\n\n在根目录下新建 Procfile 文件，添加如下内容：\n```\nweb: npm run heroku\n```\nProcfile 文件告诉 Heroku 该使用什么命令启动一个 web 服务。更多信息见：[https://devcenter.heroku.com/articles/getting-started-with-nodejs](https://devcenter.heroku.com/articles/getting-started-with-nodejs)。\n\n然后输入以下命令：\n\n```sh\ngit init\nheroku git:remote -a 你的应用名称\ngit add .\ngit commit -am \"init\"\ngit push heroku master\n```\n\n稍后，我们的论坛就部署成功了。使用：\n\n```sh\nheroku open\n```\n\n打开应用主页。如果出现 \"Application error\"，使用：\n\n```sh\nheroku logs\n```\n查看日志，调试完后 commit 并 push 到 heroku重新部署。\n\n## 部署到 UCloud\n\n### 创建主机\n\n1. 注册 UCloud\n2. 点击左侧的 `云主机`，然后点击 `创建主机`，统统选择最低配置\n3. 右侧付费方式选择 `按时`（每小时），点击 `立即购买`\n4. 在支付确认页面，点击 `确认支付`\n\n购买成功后回到主机管理列表，如下所示：\n\n![](/images/4.15.2.png)\n\n> 注意：下面所有的 ip 都替换为你自己的外网 ip。\n\n### 环境搭建与部署\n\n修改 config/production.js，将 port 修改为 80 端口：\n\n**config/production.js**\n\n```js\nmodule.exports = {\n  port: 80,\n  mongodb: 'mongodb://myblog:myblog@ds139327.mlab.com:39327/myblog'\n}\n```\n\n登录主机，用刚才设置的密码：\n\n```sh\nssh root@106.75.47.229\n```\n\n因为是 CentOS 系统，所以我选择使用 yum 安装，而不是下载源码编译安装：\n\n```sh\nyum install git #安装git\nyum install nodejs #安装 Node.js\nyum install npm #安装 npm\n\nnpm i npm -g #升级 npm\nnpm i pm2 -g #安装 pm2\nnpm i n -g #安装 n\nn v8.9.1 #安装 v8.9.1 版本的 Node.js\nn use 8.9.1 #使用 v8.9.1 版本的 Node.js\nnode -v\n```\n> 注意：如果 `node -v` 显示的不是 8.9.1，则断开 ssh，重新登录主机再试试。\n\n此时应该在 `/root` 目录下，运行以下命令：\n```sh\ngit clone https://github.com/nswbmw/N-blog.git myblog #或在本机 myblog 目录下运行 rsync -av --exclude=\"node_modules\" ./ root@106.75.47.229:/root/myblog\ncd myblog\nnpm i\nnpm start\npm2 logs\n```\n> 注意：如果不想用 git 的形式将代码拉到云主机上，可以用 rsync 将本地的代码同步到你的 UCloud 主机上，如上所示。\n\n最后，访问你的公网 ip 地址试试吧，如下所示：\n\n![](/images/4.15.3.png)\n\n> 小提示：因为我们选择的按时付费套餐，测试完成后，可在主机管理页面选择关闭主机，节约费用。\n\n## 部署到阿里云\n\n### 创建主机\n\n1. 注册/登录\n2. 充值 100（因为我们选择『按量付费』，阿里云要求最低账户余额 >= 100）\n3. 进入『云服务器 ECS』\n4. 点击『创建实例』\n\n进入创建实例页面，按下图选择配置：\n\n![](/images/4.15.4.png)\n\n需要注意几点：\n\n1. 计费方式：按量付费\n2. 公网 ip 地址：分配\n3. 安全组：选中开启 80 端口\n4. 镜像：Ubuntu 16.04 64位\n\n点击『开通进入下一页』，选中：\n\n![](/images/4.15.5.png)\n\n> 注意：这里我们只是演示，所以自动释放时间只设置了几个小时\n\n点击『去开通』创建成功，然后点击提示中的『管理控制台』进入 ECS 管理页，刚才创建的机器需要等待几分钟才会初始化成功。成功后如下所示：\n\n![](/images/4.15.6.png)\n\n### 环境搭建\n\n复制创建的机器的公网 ip 地址，运行：\n\n```sh\nssh root@39.106.134.66\n```\n\n输入刚才设置的密码登录远程主机。\n\n#### 安装 Node.js\n\n我们下载编译好的 Node.js 压缩包，解压然后使用软连接。\n\n```sh\nwget https://nodejs.org/dist/v8.9.1/node-v8.9.1-linux-x64.tar.xz\ntar -xvf node-v8.9.1-linux-x64.tar.xz\nmv node-v8.9.1-linux-x64 nodejs\nln -s ~/nodejs/bin/* /usr/local/bin/\nnode -v\nnpm -v\n```\n\n#### 安装 MongoDB\n\n```sh\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz\ntar -xvf mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz\nmv mongodb-linux-x86_64-ubuntu1604-3.4.10 mongodb\nln -s ~/mongodb/bin/* /usr/local/bin/\nmongod --version\nmongo --version\nmkdir mongodb/data\nmongod --dbpath=mongodb/data &\n```\n\n#### 安装 Git\n\n```sh\napt-get update\napt-get install git\ngit clone https://github.com/nswbmw/N-blog.git #或者你的 GitHub blog 地址\ncd N-blog\nnpm i\nvim config/default.js #修改端口 3000->80\nnode index\n```\n\n此时，浏览器中访问你的机器的公网 ip 试试吧。\n\n#### 使用 PM2 启动\n\n```sh\nnpm i pm2 -g\nln -s ~/nodejs/bin/* /usr/local/bin/\npm2 start index.js --name=\"myblog\"\n```\n\n这里我们使用 pm2 启动博客，所以关掉终端后博客仍然在运行。\n\n","source":"_posts/使用-Express-MongoDB-搭建多人博客.md","raw":"---\ntitle: 使用 Express + MongoDB 搭建多人博客\ndate: 2019-08-17 18:49:40\ntags:\ncategory: 转载\n---\n\n[转自 https://github.com/nswbmw](https://github.com/nswbmw)\n\n# Node.js\n## 安装 Node.js\n\n有三种方式安装 Node.js：一是通过安装包安装，二是通过源码编译安装，三是在 Linux 下可以通过 yum|apt-get 安装，在 Mac 下可以通过 [Homebrew](http://brew.sh/) 安装。对于 Windows 和 Mac 用户，推荐使用安装包安装，Linux 用户推荐使用源码编译安装。\n\n<!-- more -->\n\n### Windows 和 Mac 安装：\n\n#### 第一步：\n\n打开 [Node.js 官网](https://nodejs.org/en/)，可以看到以下两个下载选项：\n\n![](/images/1.1.1.png)\n\n左边的是 LTS 版，用过 ubuntu 的同学可能比较熟悉，即长期支持版本，大多数人用这个就可以了。右边是最新版，支持最新的语言特性（比如对 ES6 的支持更全面），想尝试新特性的开发者可以安装这个版本。我们选择左边的 v6.9.1 LTS 点击下载。\n\n> 小提示：从 [http://node.green](http://node.green) 上可以看到 Node.js 各个版本对 ES6 的支持情况。\n\n#### 第二步：\n\n安装 Node.js，这个没什么好说的，一直点击 `继续` 即可。\n\n![](/images/1.1.2.png)\n\n#### 第三步：####\n\n提示安装成功后，打开终端输入以下命令，可以看到 node 和 npm 都已经安装好了：\n\n![](/images/1.1.3.png)\n\n### Linux 安装：\n\nLinux 用户可通过源码编译安装：\n\n```sh\ncurl -O https://nodejs.org/dist/v6.9.1/node-v6.9.1.tar.gz\ntar -xzvf node-v6.9.1.tar.gz\ncd node-v6.9.1\n./configure\nmake\nmake install\n```\n\n> 注意: 如果编译过程报错，可能是缺少某些依赖包。因为报错内容不尽相同，请读者自行求助搜索引擎或 [stackoverflow](http://stackoverflow.com/)。\n\n## n 和 nvm\n\n通常我们使用稳定的 LTS 版本的 Node.js 即可，但有的情况下我们又想尝试一下新的特性，我们总不能来回安装不同版本的 Node.js 吧，这个时候我们就需要 [n](https://github.com/tj/n) 或者 [nvm](https://github.com/creationix/nvm) 了。n 和 nvm 是两个常用的 Node.js 版本管理工具，关于 n 和 nvm 的使用以及区别，[这篇文章](http://taobaofed.org/blog/2015/11/17/nvm-or-n/) 讲得特别详细，这里不再赘述。\n\n## nrm\n\n[nrm](https://github.com/Pana/nrm) 是一个管理 npm 源的工具。用过 ruby 和 gem 的同学会比较熟悉，通常我们会把 gem 源切到国内的淘宝镜像，这样在安装和更新一些包的时候比较快。nrm 同理，用来切换官方 npm 源和国内的 npm 源（如: [cnpm](http://cnpmjs.org/)），当然也可以用来切换官方 npm 源和公司私有 npm 源。\n\n全局安装 nrm:\n\n```sh\nnpm i nrm -g\n```\n\n查看当前 nrm 内置的几个 npm 源的地址：\n\n![](/images/1.1.4.png)\n\n切换到 cnpm：\n\n![](/images/1.1.5.png)\n\n## 安装与启动 MongoDB\n\n- Windows 用户向导：https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/\n- Linux 用户向导：https://docs.mongodb.com/manual/administration/install-on-linux/\n- Mac 用户向导：https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\n\n### Robomongo 和 Mongochef\n\n#### Robomongo\n\n[Robomongo](https://robomongo.org/) 是一个基于 Shell 的跨平台开源 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac，嵌入了 JavaScript 引擎和 MongoDB mongo，只要你会使用 mongo shell，你就会使用 Robomongo，它还提供了语法高亮、自动补全、差别视图等。\n\n[Robomongo 下载地址](https://robomongo.org/download)\n\n下载并安装成功后点击左上角的 `Create` 创建一个连接，给该连接起个名字如: `localhost`，使用默认地址（localhost）和端口（27017）即可，点击 `Save` 保存。\n\n![](/images/1.2.1.png)\n\n双击 `localhost` 连接到 MongoDB 并进入交互界面，尝试插入一条数据并查询出来，如下所示:\n\n![](/images/1.2.2.png)\n\n#### MongoChef\n\n[MongoChef](http://3t.io/mongochef/) 是另一款强大的 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac。\n\n[MongoChef 下载地址](http://3t.io/mongochef/#mongochef-download-compare)，我们选择左侧的非商业用途的免费版下载。\n\n![](/images/1.2.3.png)\n\n安装成功后跟 Robomongo 一样，也需要创建一个新的连接的配置，成功后双击进入到 MongoChef 主页面，如下所示:\n\n![](/images/1.2.4.png)\n\n还可以使用 shell 模式:\n\n![](/images/1.2.5.png)\n\n> 小提示: MongoChef 相较于 Robomongo 更强大一些，但 Robomongo 比较轻量也能满足大部分的常规需求，所以哪一个适合自己还需读者自行尝试。\n\n## require\n\nrequire 用来加载一个文件的代码，关于 require 的机制这里不展开讲解，请仔细阅读 [官方文档](https://nodejs.org/api/modules.html)。\n\n简单概括以下几点:\n\n- require 可加载 .js、.json 和 .node 后缀的文件\n- require 的过程是同步的，所以这样是错误的:\n\n```sh\nsetTimeout(() => {\n  module.exports = { a: 'hello' }\n}, 0)\n```\n\nrequire 这个文件得到的是空对象 `{}`\n\n- require 目录的机制是:\n  - 如果目录下有 package.json 并指定了 main 字段，则用之\n  - 如果不存在 package.json，则依次尝试加载目录下的 index.js 和 index.node\n- require 过的文件会加载到缓存，所以多次 require 同一个文件（模块）不会重复加载\n- 判断是否是程序的入口文件有两种方式:\n  - require.main === module（推荐）\n  - module.parent === null\n\n## 循环引用\n\n循环引用（或循环依赖）简单点来说就是 a 文件 require 了 b 文件，然后 b 文件又反过来 require 了 a 文件。我们用 a->b 代表 b require 了 a。\n\n简单的情况:\n\n```\na->b\nb->a\n```\n\n复杂点的情况:\n\n```\na->b\nb->c\nc->a\n```\n\n循环引用并不会报错，导致的结果是 require 的结果是空对象 `{}`，原因是 b require 了 a，a 又去 require 了 b，此时 b 还没初始化好，所以只能拿到初始值 `{}`。当产生循环引用时一般有两种方法解决：\n\n1. 通过分离共用的代码到另一个文件解决，如上面简单的情况，可拆出共用的代码到 c 中，如下:\n\n```\nc->a\nc->b\n```\n\n2. 不在最外层 require，在用到的地方 require，通常在函数的内部\n\n总的来说，循环依赖的陷阱并不大容易出现，但一旦出现了，对于新手来说还真不好定位。它的存在给我们提了个醒，要时刻注意你项目的依赖关系不要过于复杂，哪天你发现一个你明明已经 exports 了的方法报 `undefined is not a function`，我们就该提醒一下自己：哦，也许是它来了。\n\n官方示例: [https://nodejs.org/api/modules.html#modules_cycles](https://nodejs.org/api/modules.html#modules_cycles)\n\nrequire 用来加载代码，而 exports 和 module.exports 则用来导出代码。\n\n很多新手可能会迷惑于 exports 和 module.exports 的区别，为了更好的理解 exports 和 module.exports 的关系，我们先来巩固下 js 的基础。示例：\n\n**test.js**\n\n```js\nvar a = { name: 1 };\nvar b = a;\n\nconsole.log(a);\nconsole.log(b);\n\nb.name = 2;\nconsole.log(a);\nconsole.log(b);\n\nvar b = { name: 3 };\nconsole.log(a);\nconsole.log(b);\n```\n\n运行 test.js 结果为：\n\n```\n{ name: 1 }\n{ name: 1 }\n{ name: 2 }\n{ name: 2 }\n{ name: 2 }\n{ name: 3 }\n```\n\n**解释**：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。\n\n明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：\n\n1. module.exports 初始值为一个空对象 {}\n2. exports 是指向的 module.exports 的引用\n3. require() 返回的是 module.exports 而不是 exports\n\nNode.js 官方文档的截图证实了我们的观点:\n\n![](/images/2.2.1.png)\n\n## 导出\nexports = module.exports = {...}\n\n我们经常看到这样的写法：\n\n```js\nexports = module.exports = {...}\n```\n\n上面的代码等价于:\n\n```js\nmodule.exports = {...}\nexports = module.exports\n```\n\n原理很简单：module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，那么通过 exports = module.exports 让 exports 重新指向 module.exports。\n\n> 小提示：ES6 的 import 和 export 不在本文的讲解范围，有兴趣的读者可以去学习阮一峰老师的[《ECMAScript6 入门》](http://es6.ruanyifeng.com/)。\n\n# Promise\n\n网上已经有许多关于 Promise 的资料了，这里不在赘述。以下 4 个链接供读者学习：\n\n1. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise （基础）\n2. http://liubin.org/promises-book/ （开源 Promise 迷你书）\n3. http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/ （进阶）\n4. https://promisesaplus.com/ （官方定义规范）\n\nPromise 用于异步流程控制，生成器与 yield 也能实现流程控制（基于 co），但不在本教程讲解范围内，读者可参考我的另一部教程 [N-club](https://github.com/nswbmw/N-club)。async/await 结合 Promise 也可以实现流程控制，有兴趣请查阅 [《ECMAScript6 入门》](http://es6.ruanyifeng.com/#docs/async#async函数)。\n\n## 深入 Promise\n\n- [Promise 必知必会（十道题）](https://zhuanlan.zhihu.com/p/30797777)\n- [深入 Promise(一)——Promise 实现详解](https://zhuanlan.zhihu.com/p/25178630)\n- [深入 Promise(二)——进击的 Promise](https://zhuanlan.zhihu.com/p/25198178)\n- [深入 Promise(三)——命名 Promise](https://zhuanlan.zhihu.com/p/25199781)\n\n环境变量不属于 Node.js 的知识范畴，只不过我们在开发 Node.js 应用时经常与环境变量打交道，所以这里简单介绍下。\n\n环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数。在 Mac 和 Linux 的终端直接输入 env，会列出当前的环境变量，如：USER=xxx。简单来讲，环境变量就是传递参数给运行程序的。\n\n在 Node.js 中，我们经常这么用:\n\n```sh\nNODE_ENV=test node app\n```\n\n通过以上命令启动程序，指定当前环境变量 `NODE_ENV` 的值为 test，那么在 app.js 中可通过 `process.env` 来获取环境变量:\n\n```\nconsole.log(process.env.NODE_ENV) //test\n```\n\n另一个常见的例子是使用 [debug](https://www.npmjs.com/package/debug) 模块时:\n\n```sh\nDEBUG=* node app\n```\n\nWindows 用户需要首先设置环境变量，然后再执行程序：\n\n```sh\nset DEBUG=*\nset NODE_ENV=test\nnode app\n```\n\n或者使用 [cross-env](https://www.npmjs.com/package/cross-env)：\n\n```sh\nnpm i cross-env -g\n```\n\n使用方式：\n\n```sh\ncross-env NODE_ENV=test node app\n```\n\npackage.json 对于 Node.js 应用来说是一个不可或缺的文件，它存储了该 Node.js 应用的名字、版本、描述、作者、入口文件、脚本、版权等等信息。npm 官网有 package.json 每个字段的详细介绍：[https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)。\n\n## semver\n\n语义化版本（semver）即 dependencies、devDependencies 和 peerDependencies 里的如：`\"co\": \"^4.6.0\"`。\n\nsemver 格式：`主版本号.次版本号.修订号`。版本号递增规则如下：\n\n- `主版本号`：做了不兼容的 API 修改\n- `次版本号`：做了向下兼容的功能性新增\n- `修订号`：做了向下兼容的 bug 修正\n\n更多阅读：\n\n1. http://semver.org/lang/zh-CN/\n2. http://taobaofed.org/blog/2016/08/04/instructions-of-semver/\n\n# npm\n\n作为 Node.js 的开发者，我们在发布 npm 模块的时候一定要遵守语义化版本的命名规则，即：有 breaking change 发大版本，有新增的功能发小版本，有小的 bug 修复或优化则发修订版本。\n\n## npm init\n\n使用 `npm init` 初始化一个空项目是一个好的习惯，即使你对 package.json 及其他属性非常熟悉，`npm init` 也是你开始写新的 Node.js 应用或模块的一个快捷的办法。`npm init` 有智能的默认选项，比如从根目录名称推断模块名称，通过 `~/.npmrc` 读取你的信息，用你的 Git 设置来确定 repository 等等。\n\n## npm install\n\n`npm install` 是我们最常用的 npm 命令之一，因此我们需要好好了解下这个命令。终端输入 `npm install -h` 查看使用方式:\n\n![](/images/2.6.1.png)\n\n可以看出：我们通过 `npm install` 可以安装 npm 上发布的某个版本、某个 tag、某个版本区间的模块，甚至可以安装本地目录、压缩包和 git/github 的库作为依赖。\n\n> 小提示: `npm i` 是 `npm install` 的简写，建议使用 `npm i`。\n\n直接使用 `npm i` 安装的模块是不会写入 package.json 的 dependencies (或 devDependencies)，需要额外加个参数:\n\n1. `npm i express --save`/`npm i express -S` (安装 express，同时将 `\"express\": \"^4.14.0\"` 写入 dependencies )\n2. `npm i express --save-dev`/`npm i express -D` (安装 express，同时将 `\"express\": \"^4.14.0\"` 写入 devDependencies )\n3. `npm i express --save --save-exact` (安装 express，同时将 `\"express\": \"4.14.0\"` 写入 dependencies )\n\n第三种方式将固定版本号写入 dependencies，建议线上的 Node.js 应用都采取这种锁定版本号的方式，因为你不可能保证第三方模块下个小版本是没有验证 bug 的，即使是很流行的模块。拿 Mongoose 来说，Mongoose 4.1.4 引入了一个 bug 导致调用一个文档 entry 的 remove 会删除整个集合的文档，见：[https://github.com/Automattic/mongoose/blob/master/History.md#415--2015-09-01](https://github.com/Automattic/mongoose/blob/master/History.md#415--2015-09-01)。\n\n> 后面会介绍更安全的 `npm shrinkwrap` 的用法。\n\n运行以下命令：\n\n```sh\nnpm config set save-exact true\n```\n\n这样每次 `npm i xxx --save` 的时候会锁定依赖的版本号，相当于加了 `--save-exact` 参数。\n\n> 小提示：`npm config set` 命令将配置写到了 ~/.npmrc 文件，运行 `npm config list` 查看。\n\n## npm scripts\n\nnpm 提供了灵活而强大的 scripts 功能，见 [官方文档](https://docs.npmjs.com/misc/scripts)。\n\nnpm 的 scripts 有一些内置的缩写命令，如常用的：\n\n- `npm start` 等价于 `npm run start`\n- `npm test` 等价于 `npm run test`\n\n## npm shrinkwrap\n\n前面说过要锁定依赖的版本，但这并不能完全防止意外情况的发生，因为锁定的只是最外一层的依赖，而里层依赖的模块的 package.json 有可能写的是 `\"mongoose\": \"*\"`。为了彻底锁定依赖的版本，让你的应用在任何机器上安装的都是同样版本的模块（不管嵌套多少层），通过运行 `npm shrinkwrap`，会在当前目录下产生一个 `npm-shrinkwrap.json`，里面包含了通过 node_modules 计算出的模块的依赖树及版本。上面的截图也显示：只要目录下有 npm-shrinkwrap.json 则运行 `npm install` 的时候会优先使用 npm-shrinkwrap.json 进行安装，没有则使用 package.json 进行安装。\n\n更多阅读：\n\n1. https://docs.npmjs.com/cli/shrinkwrap\n2. http://tech.meituan.com/npm-shrinkwrap.html\n\n> 注意: 如果 node_modules 下存在某个模块（如直接通过 `npm install xxx` 安装的）而 package.json 中没有，运行 `npm shrinkwrap` 则会报错。另外，`npm shrinkwrap` 只会生成 dependencies 的依赖，不会生成 devDependencies 的。\n\n# express\n\n首先，我们新建一个目录 myblog，在该目录下运行 `npm init` 生成一个 package.json，如下所示：\n\n![](/images/3.1.1.png)\n\n> 注意：括号里的是默认值，如果使用默认值则直接回车即可，否则输入自定义内容后回车。\n\n然后安装 express 并写入 package.json：\n\n```sh\nnpm i express@4.14.0 --save\n```\n\n新建 index.js，添加如下代码：\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.get(\"/\", function(req, res) {\n  res.send(\"hello, express\");\n});\n\napp.listen(3000);\n```\n\n以上代码的意思是：生成一个 express 实例 app，挂载了一个根路由控制器，然后监听 3000 端口并启动程序。运行 `node index`，打开浏览器访问 `localhost:3000` 时，页面应显示 hello, express。\n\n这是最简单的一个使用 express 的例子，后面会介绍路由及模板的使用。\n\n## supervisor\n\n在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 [supervisor](https://www.npmjs.com/package/supervisor) 可以解决这个繁琐的问题，全局安装 supervisor：\n\n```sh\nnpm i -g supervisor\n```\n\n运行 `supervisor index` 启动程序，如下所示：\n\n![](/images/3.1.2.png)\n\nsupervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。\n\n前面我们只是挂载了根路径的路由控制器，现在修改 index.js 如下：\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.get(\"/\", function(req, res) {\n  res.send(\"hello, express\");\n});\n\napp.get(\"/users/:name\", function(req, res) {\n  res.send(\"hello, \" + req.params.name);\n});\n\napp.listen(3000);\n```\n\n以上代码的意思是：当访问根路径时，依然返回 hello, express，当访问如 `localhost:3000/users/nswbmw` 路径时，返回 hello, nswbmw。路径中 `:name` 起了占位符的作用，这个占位符的名字是 name，可以通过 `req.params.name` 取到实际的值。\n\n> 小提示：express 使用了 [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) 模块实现的路由匹配。\n\n不难看出：req 包含了请求来的相关信息，res 则用来返回该请求的响应，更多请查阅 [express 官方文档](http://expressjs.com/en/4x/api.html)。下面介绍几个常用的 req 的属性：\n\n- `req.query`: 解析后的 url 中的 querystring，如 `?name=haha`，req.query 的值为 `{name: 'haha'}`\n- `req.params`: 解析 url 中的占位符，如 `/:name`，访问 /haha，req.params 的值为 `{name: 'haha'}`\n- `req.body`: 解析后请求体，需使用相关的模块，如 [body-parser](https://www.npmjs.com/package/body-parser)，请求体为 `{\"name\": \"haha\"}`，则 req.body 为 `{name: 'haha'}`\n\n## express.Router\n\n上面只是很简单的路由使用的例子（将所有路由控制函数都放到了 index.js），但在实际开发中通常有几十甚至上百的路由，都写在 index.js 既臃肿又不好维护，这时可以使用 express.Router 实现更优雅的路由解决方案。在 myblog 目录下创建空文件夹 routes，在 routes 目录下创建 index.js 和 users.js。最后代码如下：\n\n**index.js**\n\n```js\nconst express = require(\"express\");\nconst app = express();\nconst indexRouter = require(\"./routes/index\");\nconst userRouter = require(\"./routes/users\");\n\napp.use(\"/\", indexRouter);\napp.use(\"/users\", userRouter);\n\napp.listen(3000);\n```\n\n**routes/index.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/\", function(req, res) {\n  res.send(\"hello, express\");\n});\n\nmodule.exports = router;\n```\n\n**routes/users.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/:name\", function(req, res) {\n  res.send(\"hello, \" + req.params.name);\n});\n\nmodule.exports = router;\n```\n\n以上代码的意思是：我们将 `/` 和 `/users/:name` 的路由分别放到了 routes/index.js 和 routes/users.js 中，每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 `app.use` 挂载到不同的路径。这两种代码实现了相同的功能，但在实际开发中推荐使用 express.Router 将不同的路由分离到不同的路由文件中。\n\n更多 express.Router 的用法见 [express 官方文档](http://expressjs.com/en/4x/api.html#router)。\n\n模板引擎（Template Engine）是一个将页面模板和数据结合起来生成 html 的工具。上例中，我们只是返回纯文本给浏览器，现在我们修改代码返回一个 html 页面给浏览器。\n\n## ejs\n\n模板引擎有很多，[ejs](https://www.npmjs.com/package/ejs) 是其中一种，因为它使用起来十分简单，而且与 express 集成良好，所以我们使用 ejs。安装 ejs：\n\n```sh\nnpm i ejs --save\n```\n\n修改 index.js 如下：\n\n**index.js**\n\n```js\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst app = express();\nconst indexRouter = require(\"./routes/index\");\nconst userRouter = require(\"./routes/users\");\n\napp.set(\"views\", path.join(__dirname, \"views\")); // 设置存放模板文件的目录\napp.set(\"view engine\", \"ejs\"); // 设置模板引擎为 ejs\n\napp.use(\"/\", indexRouter);\napp.use(\"/users\", userRouter);\n\napp.listen(3000);\n```\n\n通过 `app.set` 设置模板引擎为 ejs 和存放模板的目录。在 myblog 下新建 views 文件夹，在 views 下新建 users.ejs，添加如下代码：\n\n**views/users.ejs**\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style type=\"text/css\">\n      body {\n        padding: 50px;\n        font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;\n      }\n    </style>\n  </head>\n  <body>\n    <h1><%= name.toUpperCase() %></h1>\n    <p>hello, <%= name %></p>\n  </body>\n</html>\n```\n\n修改 routes/users.js 如下：\n\n**routes/users.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/:name\", function(req, res) {\n  res.render(\"users\", {\n    name: req.params.name\n  });\n});\n\nmodule.exports = router;\n```\n\n通过调用 `res.render` 函数渲染 ejs 模板，res.render 第一个参数是模板的名字，这里是 users 则会匹配 views/users.ejs，第二个参数是传给模板的数据，这里传入 name，则在 ejs 模板中可使用 name。`res.render` 的作用就是将模板和数据结合生成 html，同时设置响应头中的 `Content-Type: text/html`，告诉浏览器我返回的是 html，不是纯文本，要按 html 展示。现在我们访问 `localhost:3000/users/haha`，如下图所示：\n\n![](/images/3.3.1.png)\n\n上面代码可以看到，我们在模板 `<%= name.toUpperCase() %>` 中使用了 JavaScript 的语法 `.toUpperCase()` 将名字转化为大写，那这个 `<%= xxx %>` 是什么东西呢？ejs 有 3 种常用标签：\n\n1. `<% code %>`：运行 JavaScript 代码，不输出\n2. `<%= code %>`：显示转义后的 HTML 内容\n3. `<%- code %>`：显示原始 HTML 内容\n\n> 注意：`<%= code %>` 和 `<%- code %>` 都可以是 JavaScript 表达式生成的字符串，当变量 code 为普通字符串时，两者没有区别。当 code 比如为 `<h1>hello</h1>` 这种字符串时，`<%= code %>` 会原样输出 `<h1>hello</h1>`，而 `<%- code %>` 则会显示 H1 大的 hello 字符串。\n\n下面的例子解释了 `<% code %>` 的用法：\n\n**Data**\n\n```\nsupplies: ['mop', 'broom', 'duster']\n```\n\n**Template**\n\n```ejs\n<ul>\n<% for(var i=0; i<supplies.length; i++) {%>\n   <li><%= supplies[i] %></li>\n<% } %>\n</ul>\n```\n\n**Result**\n\n```html\n<ul>\n  <li>mop</li>\n  <li>broom</li>\n  <li>duster</li>\n</ul>\n```\n\n更多 ejs 的标签请看 [官方文档](https://www.npmjs.com/package/ejs#tags)。\n\n## includes\n\n我们使用模板引擎通常不是一个页面对应一个模板，这样就失去了模板的优势，而是把模板拆成可复用的模板片段组合使用，如在 views 下新建 header.ejs 和 footer.ejs，并修改 users.ejs：\n\n**views/header.ejs**\n\n```ejs\n<!DOCTYPE html>\n<html>\n  <head>\n    <style type=\"text/css\">\n      body {padding: 50px;font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;}\n    </style>\n  </head>\n  <body>\n```\n\n**views/footer.ejs**\n\n```ejs\n  </body>\n</html>\n```\n\n**views/users.ejs**\n\n```ejs\n<%- include('header') %>\n  <h1><%= name.toUpperCase() %></h1>\n  <p>hello, <%= name %></p>\n<%- include('footer') %>\n```\n\n我们将原来的 users.ejs 拆成出了 header.ejs 和 footer.ejs，并在 users.ejs 通过 ejs 内置的 include 方法引入，从而实现了跟以前一个模板文件相同的功能。\n\n> 小提示：拆分模板组件通常有两个好处：\n>\n> 1. 模板可复用，减少重复代码\n> 2. 主模板结构清晰\n\n> 注意：要用 `<%- include('header') %>` 而不是 `<%= include('header') %>`\n> 前面我们讲解了 express 中路由和模板引擎 ejs 的用法，但 express 的精髓并不在此，在于中间件的设计理念。\n\n## 中间件与 next\n\nexpress 中的中间件（middleware）就是用来处理请求的，当一个中间件处理完，可以通过调用 `next()` 传递给下一个中间件，如果没有调用 `next()`，则请求不会往下传递，如内置的 `res.render` 其实就是渲染完 html 直接返回给客户端，没有调用 `next()`，从而没有传递给下一个中间件。看个小例子，修改 index.js 如下：\n\n**index.js**\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.use(function(req, res, next) {\n  console.log(\"1\");\n  next();\n});\n\napp.use(function(req, res, next) {\n  console.log(\"2\");\n  res.status(200).end();\n});\n\napp.listen(3000);\n```\n\n此时访问 `localhost:3000`，终端会输出：\n\n```\n1\n2\n```\n\n通过 `app.use` 加载中间件，在中间件中通过 next 将请求传递到下一个中间件，next 可接受一个参数接收错误信息，如果使用了 `next(error)`，则会返回错误而不会传递到下一个中间件，修改 index.js 如下：\n\n**index.js**\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.use(function(req, res, next) {\n  console.log(\"1\");\n  next(new Error(\"haha\"));\n});\n\napp.use(function(req, res, next) {\n  console.log(\"2\");\n  res.status(200).end();\n});\n\napp.listen(3000);\n```\n\n此时访问 `localhost:3000`，终端会输出错误信息：\n\n![](/images/3.4.1.png)\n\n浏览器会显示：\n\n![](/images/3.4.2.png)\n\n> 小提示：`app.use` 有非常灵活的使用方式，详情见 [官方文档](http://expressjs.com/en/4x/api.html#app.use)。\n\nexpress 有成百上千的第三方中间件，在开发过程中我们首先应该去 npm 上寻找是否有类似实现的中间件，尽量避免造轮子，节省开发时间。下面给出几个常用的搜索 npm 模块的网站：\n\n1. [http://npmjs.com](http://npmjs.com)(npm 官网)\n2. [http://node-modules.com](http://node-modules.com)\n3. [https://npms.io](https://npms.io)\n4. [https://nodejsmodules.org](https://nodejsmodules.org)\n\n> 小提示：express@4 之前的版本基于 connect 这个模块实现的中间件的架构，express@4 及以上的版本则移除了对 connect 的依赖自己实现了，理论上基于 connect 的中间件（通常以 `connect-` 开头，如 `connect-mongo`）仍可结合 express 使用。\n\n> 注意：中间件的加载顺序很重要！比如：通常把日志中间件放到比较靠前的位置，后面将会介绍的 `connect-flash` 中间件是基于 session 的，所以需要在 `express-session` 后加载。\n\n## 错误处理\n\n上面的例子中，应用程序为我们自动返回了错误栈信息（express 内置了一个默认的错误处理器），假如我们想手动控制返回的错误内容，则需要加载一个自定义错误处理的中间件，修改 index.js 如下：\n\n**index.js**\n\n```js\nconst express = require(\"express\");\nconst app = express();\n\napp.use(function(req, res, next) {\n  console.log(\"1\");\n  next(new Error(\"haha\"));\n});\n\napp.use(function(req, res, next) {\n  console.log(\"2\");\n  res.status(200).end();\n});\n\n//错误处理\napp.use(function(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send(\"Something broke!\");\n});\n\napp.listen(3000);\n```\n\n此时访问 `localhost:3000`，浏览器会显示 `Something broke!`。\n\n> 小提示：关于 express 的错误处理，详情见 [官方文档](http://expressjs.com/en/guide/error-handling.html)。\n> 从本章开始，正式学习如何使用 Express + MongoDB 搭建一个博客。\n\n\n## 目录结构\n\n我们停止 supervisor 并删除 myblog 目录从头来过。重新创建 myblog，运行 `npm init`，如下：\n\n![](/images/4.2.1.png)\n\n在 myblog 目录下创建以下目录及空文件（package.json 除外）：\n\n![](/images/4.2.2.png)\n\n对应文件及文件夹的用处：\n\n1. `models`: 存放操作数据库的文件\n2. `public`: 存放静态文件，如样式、图片等\n3. `routes`: 存放路由文件\n4. `views`: 存放模板文件\n5. `index.js`: 程序主文件\n6. `package.json`: 存储项目名、描述、作者、依赖等等信息\n\n> 小提示：不知读者发现了没有，我们遵循了 MVC（模型(model)－视图(view)－控制器(controller/route)） 的开发模式。\n\n## 安装依赖模块\n\n运行以下命令安装所需模块：\n\n```sh\nnpm i config-lite connect-flash connect-mongo ejs express express-session marked moment mongolass objectid-to-timestamp sha1 winston express-winston --save\nnpm i https://github.com:utatti/express-formidable.git --save # 从 GitHub 安装 express-formidable 最新版，v1.0.0 有 bug\n```\n\n对应模块的用处：\n\n1. `express`: web 框架\n2. `express-session`: session 中间件\n3. `connect-mongo`: 将 session 存储于 mongodb，结合 express-session 使用\n4. `connect-flash`: 页面通知的中间件，基于 session 实现\n5. `ejs`: 模板\n6. `express-formidable`: 接收表单及文件上传的中间件\n7. `config-lite`: 读取配置文件\n8. `marked`: markdown 解析\n9. `moment`: 时间格式化\n10. `mongolass`: mongodb 驱动\n11. `objectid-to-timestamp`: 根据 ObjectId 生成时间戳\n12. `sha1`: sha1 加密，用于密码加密\n13. `winston`: 日志\n14. `express-winston`: express 的 winston 日志中间件\n\n后面会详细讲解这些模块的用法。\n\n## ESLint\n\nESLint 是一个代码规范和语法错误检查工具。使用 ESLint 可以规范我们的代码书写，可以在编写代码期间就能发现一些低级错误。\n\nESLint 需要结合编辑器或 IDE 使用，如：\n\n- Sublime Text 需要装两个插件：SublimeLinter + SublimeLinter-contrib-eslint\n- VS Code 需要装一个插件：ESLint\n\n> 小提示：Sublime Text 安装插件通过 ctrl+shift+p 调出 Package Control，输入 install 选择 Install Package 回车。输入对应插件名搜索，回车安装。\n> 小提示：VS Code 安装插件需要点击左侧『扩展』页\n\n全局安装 eslint：\n\n```sh\nnpm i eslint -g\n```\n\n运行：\n\n```sh\neslint --init\n```\n\n初始化 eslint 配置，依次选择：\n\n-> Use a popular style guide  \n-> Standard  \n-> JSON\n\n> 注意：如果 Windows 用户使用其他命令行工具无法上下切换选项，切换回 cmd。\n\neslint 会创建一个 .eslintrc.json 的配置文件，同时自动安装并添加相关的模块到 devDependencies。这里我们使用 Standard 规范，其主要特点是不加分号。\n\n## EditorConfig\n\nEditorConfig 是一个保持缩进风格的一致的工具，当多人共同开发一个项目的时候，往往会出现每个人用不同编辑器的情况，而且有的人用 tab 缩进，有的人用 2 个空格缩进，有的人用 4 个空格缩进，EditorConfig 就是为了解决这个问题而诞生。\n\nEditorConfig 需要结合编辑器或 IDE 使用，如：\n\n- Sublime Text 需要装一个插件：EditorConfig\n- VS Code 需要装一个插件：EditorConfig for VS Code\n\n在 myblog 目录下新建 .editorconfig 的文件，添加如下内容：\n\n```\n# editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ntab_width = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[Makefile]\nindent_style = tab\n```\n\n这里我们使用 2 个空格缩进，tab 长度也是 2 个空格。trim_trailing_whitespace 用来删除每一行最后多余的空格，insert_final_newline 用来在代码最后插入一个空的换行。\n不管是小项目还是大项目，将配置与代码分离是一个非常好的做法。我们通常将配置写到一个配置文件里，如 config.js 或 config.json ，并放到项目的根目录下。但实际开发时我们会有许多环境，如本地开发环境、测试环境和线上环境等，不同环境的配置不同（如：MongoDB 的地址），我们不可能每次部署时都要去修改引用 config.test.js 或者 config.production.js。config-lite 模块正是你需要的。\n\n## config-lite\n\n[config-lite](https://www.npmjs.com/package/config-lite) 是一个轻量的读取配置文件的模块。config-lite 会根据环境变量（`NODE_ENV`）的不同加载 config 目录下不同的配置文件。如果不设置 `NODE_ENV`，则读取默认的 default 配置文件，如果设置了 `NODE_ENV`，则会合并指定的配置文件和 default 配置文件作为配置，config-lite 支持 .js、.json、.node、.yml、.yaml 后缀的文件。\n\n如果程序以 `NODE_ENV=test node app` 启动，则 config-lite 会依次降级查找 `config/test.js`、`config/test.json`、`config/test.node`、`config/test.yml`、`config/test.yaml` 并合并 default 配置; 如果程序以 `NODE_ENV=production node app` 启动，则 config-lite 会依次降级查找 `config/production.js`、`config/production.json`、`config/production.node`、`config/production.yml`、`config/production.yaml` 并合并 default 配置。\n\nconfig-lite 还支持冒泡查找配置，即从传入的路径开始，从该目录不断往上一级目录查找 config 目录，直到找到或者到达根目录为止。\n\n在 myblog 下新建 config 目录，在该目录下新建 default.js，添加如下代码：\n\n**config/default.js**\n\n```js\nmodule.exports = {\n  port: 3000,\n  session: {\n    secret: \"myblog\",\n    key: \"myblog\",\n    maxAge: 2592000000\n  },\n  mongodb: \"mongodb://localhost:27017/myblog\"\n};\n```\n\n配置释义：\n\n1. `port`: 程序启动要监听的端口号\n2. `session`: express-session 的配置信息，后面介绍\n3. `mongodb`: mongodb 的地址，以 `mongodb://` 协议开头，`myblog` 为 db 名\n\n## 功能与路由设计\n\n在开发博客之前，我们首先需要明确博客要实现哪些功能。由于本教程面向初学者，所以只实现了博客最基本的功能，其余的功能（如归档、标签、分页等等）读者可自行实现。\n\n功能及路由设计如下：\n\n1. 注册\n   1. 注册页：`GET /signup`\n   2. 注册（包含上传头像）：`POST /signup`\n2. 登录\n   1. 登录页：`GET /signin`\n   2. 登录：`POST /signin`\n3. 登出：`GET /signout`\n4. 查看文章\n   1. 主页：`GET /posts`\n   2. 个人主页：`GET /posts?author=xxx`\n   3. 查看一篇文章（包含留言）：`GET /posts/:postId`\n5. 发表文章\n   1. 发表文章页：`GET /posts/create`\n   2. 发表文章：`POST /posts/create`\n6. 修改文章\n   1. 修改文章页：`GET /posts/:postId/edit`\n   2. 修改文章：`POST /posts/:postId/edit`\n7. 删除文章：`GET /posts/:postId/remove`\n8. 留言\n   1. 创建留言：`POST /comments`\n   2. 删除留言：`GET /comments/:commentId/remove`\n\n由于我们博客页面是后端渲染的，所以只通过简单的 `<a>(GET)` 和 `<form>(POST)` 与后端进行交互，如果使用 jQuery 或者其他前端框架（如 Angular、Vue、React 等等）可通过 Ajax 与后端交互，则 api 的设计应尽量遵循 Restful 风格。\n\n### Restful\n\nRestful 是一种 api 的设计风格，提出了一组 api 的设计原则和约束条件。\n\n如上面删除文章的路由设计：\n\n```\nGET /posts/:postId/remove\n```\n\nRestful 风格的设计：\n\n```\nDELETE /posts/:postId\n```\n\n可以看出，Restful 风格的 api 更直观且优雅。\n\n更多阅读：\n\n1. http://www.ruanyifeng.com/blog/2011/09/restful\n2. http://www.ruanyifeng.com/blog/2014/05/restful_api.html\n3. http://developer.51cto.com/art/200908/141825.htm\n4. http://blog.jobbole.com/41233/\n\n## 会话\n\n由于 HTTP 协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户，这个机制就是会话（Session）。\n\n### cookie 与 session 的区别\n\n1. cookie 存储在浏览器（有大小限制），session 存储在服务端（没有大小限制）\n2. 通常 session 的实现是基于 cookie 的，session id 存储于 cookie 中\n3. session 更安全，cookie 可以直接在浏览器查看甚至编辑\n\n更多 session 的资料，参考：https://www.zhihu.com/question/19786827\n\n我们通过引入 express-session 中间件实现对会话的支持：\n\n```js\napp.use(session(options));\n```\n\nsession 中间件会在 req 上添加 session 对象，即 req.session 初始值为 `{}`，当我们登录后设置 `req.session.user = 用户信息`，返回浏览器的头信息中会带上 `set-cookie` 将 session id 写到浏览器 cookie 中，那么该用户下次请求时，通过带上来的 cookie 中的 session id 我们就可以查找到该用户，并将用户信息保存到 `req.session.user`。\n\n## 页面通知\n\n我们还需要这样一个功能：当我们操作成功时需要显示一个成功的通知，如登录成功跳转到主页时，需要显示一个 `登陆成功` 的通知；当我们操作失败时需要显示一个失败的通知，如注册时用户名被占用了，需要显示一个 `用户名已占用` 的通知。通知只显示一次，刷新后消失，我们可以通过 connect-flash 中间件实现这个功能。\n\n[connect-flash](https://www.npmjs.com/package/connect-flash) 是基于 session 实现的，它的原理很简单：设置初始值 `req.session.flash={}`，通过 `req.flash(name, value)` 设置这个对象下的字段和值，通过 `req.flash(name)` 获取这个对象下的值，同时删除这个字段，实现了只显示一次刷新后消失的功能。\n\n### express-session、connect-mongo 和 connect-flash 的区别与联系\n\n1. `express-session`: 会话（session）支持中间件\n2. `connect-mongo`: 将 session 存储于 mongodb，需结合 express-session 使用，我们也可以将 session 存储于 redis，如 [connect-redis](https://www.npmjs.com/package/connect-redis)\n3. `connect-flash`: 基于 session 实现的用于通知功能的中间件，需结合 express-session 使用\n\n## 权限控制\n\n不管是论坛还是博客网站，我们没有登录的话只能浏览，登陆后才能发帖或写文章，即使登录了你也不能修改或删除其他人的文章，这就是权限控制。我们也来给博客添加权限控制，如何实现页面的权限控制呢？我们可以把用户状态的检查封装成一个中间件，在每个需要权限控制的路由加载该中间件，即可实现页面的权限控制。在 myblog 下新建 middlewares 目录，在该目录下新建 check.js，添加如下代码：\n\n**middlewares/check.js**\n\n```js\nmodule.exports = {\n  checkLogin: function checkLogin(req, res, next) {\n    if (!req.session.user) {\n      req.flash(\"error\", \"未登录\");\n      return res.redirect(\"/signin\");\n    }\n    next();\n  },\n\n  checkNotLogin: function checkNotLogin(req, res, next) {\n    if (req.session.user) {\n      req.flash(\"error\", \"已登录\");\n      return res.redirect(\"back\"); // 返回之前的页面\n    }\n    next();\n  }\n};\n```\n\n可以看出：\n\n1. `checkLogin`: 当用户信息（`req.session.user`）不存在，即认为用户没有登录，则跳转到登录页，同时显示 `未登录` 的通知，用于需要用户登录才能操作的页面\n2. `checkNotLogin`: 当用户信息（`req.session.user`）存在，即认为用户已经登录，则跳转到之前的页面，同时显示 `已登录` 的通知，如已登录用户就禁止访问登录、注册页面\n\n最终我们创建以下路由文件：\n\n**routes/index.js**\n\n```js\nmodule.exports = function(app) {\n  app.get(\"/\", function(req, res) {\n    res.redirect(\"/posts\");\n  });\n  app.use(\"/signup\", require(\"./signup\"));\n  app.use(\"/signin\", require(\"./signin\"));\n  app.use(\"/signout\", require(\"./signout\"));\n  app.use(\"/posts\", require(\"./posts\"));\n  app.use(\"/comments\", require(\"./comments\"));\n};\n```\n\n**routes/posts.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst checkLogin = require(\"../middlewares/check\").checkLogin;\n\n// GET /posts 所有用户或者特定用户的文章页\n//   eg: GET /posts?author=xxx\nrouter.get(\"/\", function(req, res, next) {\n  res.send(\"主页\");\n});\n\n// POST /posts/create 发表一篇文章\nrouter.post(\"/create\", checkLogin, function(req, res, next) {\n  res.send(\"发表文章\");\n});\n\n// GET /posts/create 发表文章页\nrouter.get(\"/create\", checkLogin, function(req, res, next) {\n  res.send(\"发表文章页\");\n});\n\n// GET /posts/:postId 单独一篇的文章页\nrouter.get(\"/:postId\", function(req, res, next) {\n  res.send(\"文章详情页\");\n});\n\n// GET /posts/:postId/edit 更新文章页\nrouter.get(\"/:postId/edit\", checkLogin, function(req, res, next) {\n  res.send(\"更新文章页\");\n});\n\n// POST /posts/:postId/edit 更新一篇文章\nrouter.post(\"/:postId/edit\", checkLogin, function(req, res, next) {\n  res.send(\"更新文章\");\n});\n\n// GET /posts/:postId/remove 删除一篇文章\nrouter.get(\"/:postId/remove\", checkLogin, function(req, res, next) {\n  res.send(\"删除文章\");\n});\n\nmodule.exports = router;\n```\n\n**routes/comments.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\nconst checkLogin = require(\"../middlewares/check\").checkLogin;\n\n// POST /comments 创建一条留言\nrouter.post(\"/\", checkLogin, function(req, res, next) {\n  res.send(\"创建留言\");\n});\n\n// GET /comments/:commentId/remove 删除一条留言\nrouter.get(\"/:commentId/remove\", checkLogin, function(req, res, next) {\n  res.send(\"删除留言\");\n});\n\nmodule.exports = router;\n```\n\n**routes/signin.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst checkNotLogin = require(\"../middlewares/check\").checkNotLogin;\n\n// GET /signin 登录页\nrouter.get(\"/\", checkNotLogin, function(req, res, next) {\n  res.send(\"登录页\");\n});\n\n// POST /signin 用户登录\nrouter.post(\"/\", checkNotLogin, function(req, res, next) {\n  res.send(\"登录\");\n});\n\nmodule.exports = router;\n```\n\n**routes/signup.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst checkNotLogin = require(\"../middlewares/check\").checkNotLogin;\n\n// GET /signup 注册页\nrouter.get(\"/\", checkNotLogin, function(req, res, next) {\n  res.send(\"注册页\");\n});\n\n// POST /signup 用户注册\nrouter.post(\"/\", checkNotLogin, function(req, res, next) {\n  res.send(\"注册\");\n});\n\nmodule.exports = router;\n```\n\n**routes/signout.js**\n\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nconst checkLogin = require(\"../middlewares/check\").checkLogin;\n\n// GET /signout 登出\nrouter.get(\"/\", checkLogin, function(req, res, next) {\n  res.send(\"登出\");\n});\n\nmodule.exports = router;\n```\n\n最后，修改 index.js 如下：\n\n**index.js**\n\n```js\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst session = require(\"express-session\");\nconst MongoStore = require(\"connect-mongo\")(session);\nconst flash = require(\"connect-flash\");\nconst config = require(\"config-lite\")(__dirname);\nconst routes = require(\"./routes\");\nconst pkg = require(\"./package\");\n\nconst app = express();\n\n// 设置模板目录\napp.set(\"views\", path.join(__dirname, \"views\"));\n// 设置模板引擎为 ejs\napp.set(\"view engine\", \"ejs\");\n\n// 设置静态文件目录\napp.use(express.static(path.join(__dirname, \"public\")));\n// session 中间件\napp.use(\n  session({\n    name: config.session.key, // 设置 cookie 中保存 session id 的字段名称\n    secret: config.session.secret, // 通过设置 secret 来计算 hash 值并放在 cookie 中，使产生的 signedCookie 防篡改\n    resave: true, // 强制更新 session\n    saveUninitialized: false, // 设置为 false，强制创建一个 session，即使用户未登录\n    cookie: {\n      maxAge: config.session.maxAge // 过期时间，过期后 cookie 中的 session id 自动删除\n    },\n    store: new MongoStore({\n      // 将 session 存储到 mongodb\n      url: config.mongodb // mongodb 地址\n    })\n  })\n);\n// flash 中间件，用来显示通知\napp.use(flash());\n\n// 路由\nroutes(app);\n\n// 监听端口，启动程序\napp.listen(config.port, function() {\n  console.log(`${pkg.name} listening on port ${config.port}`);\n});\n```\n\n> 注意：中间件的加载顺序很重要。如上面设置静态文件目录的中间件应该放到 routes(app) 之前加载，这样静态文件的请求就不会落到业务逻辑的路由里；flash 中间件应该放到 session 中间件之后加载，因为 flash 是基于 session 实现的。\n\n运行 `supervisor index` 启动博客，访问以下地址查看效果：\n\n1. http://localhost:3000/posts\n2. http://localhost:3000/signout\n3. http://localhost:3000/signup\n   我们使用 jQuery + Semantic-UI 实现前端页面的设计，最终效果图如下:\n\n**注册页**\n\n![](/images/4.5.1.png)\n\n**登录页**\n\n![](/images/4.5.2.png)\n\n**未登录时的主页（或用户页）**\n\n![](/images/4.5.3.png)\n\n**登录后的主页（或用户页）**\n\n![](/images/4.5.4.png)\n\n**发表文章页**\n\n![](/images/4.5.5.png)\n\n**编辑文章页**\n\n![](/images/4.5.6.png)\n\n**未登录时的文章页**\n\n![](/images/4.5.7.png)\n\n**登录后的文章页**\n\n![](/images/4.5.8.png)\n\n**通知**\n\n![](/images/4.5.9.png)\n![](/images/4.5.10.png)\n![](/images/4.5.11.png)\n\n## 组件\n\n前面提到过，我们可以将模板拆分成一些组件，然后使用 ejs 的 include 方法将组件组合起来进行渲染。我们将页面切分成以下组件：\n\n**主页**\n\n![](/images/4.5.12.png)\n\n**文章页**\n\n![](/images/4.5.13.png)\n\n根据上面的组件切分图，我们创建以下样式及模板文件：\n\n**public/css/style.css**\n\n```css\n/* ---------- 全局样式 ---------- */\n\nbody {\n  width: 1100px;\n  height: 100%;\n  margin: 0 auto;\n  padding-top: 40px;\n}\n\na:hover {\n  border-bottom: 3px solid #4fc08d;\n}\n\n.button {\n  background-color: #4fc08d !important;\n  color: #fff !important;\n}\n\n.avatar {\n  border-radius: 3px;\n  width: 48px;\n  height: 48px;\n  float: right;\n}\n\n/* ---------- nav ---------- */\n\n.nav {\n  margin-bottom: 20px;\n  color: #999;\n  text-align: center;\n}\n\n.nav h1 {\n  color: #4fc08d;\n  display: inline-block;\n  margin: 10px 0;\n}\n\n/* ---------- nav-setting ---------- */\n\n.nav-setting {\n  position: fixed;\n  right: 30px;\n  top: 35px;\n  z-index: 999;\n}\n\n.nav-setting .ui.dropdown.button {\n  padding: 10px 10px 0 10px;\n  background-color: #fff !important;\n}\n\n.nav-setting .icon.bars {\n  color: #000;\n  font-size: 18px;\n}\n\n/* ---------- post-content ---------- */\n\n.post-content h3 a {\n  color: #4fc08d !important;\n}\n\n.post-content .tag {\n  font-size: 13px;\n  margin-right: 5px;\n  color: #999;\n}\n\n.post-content .tag.right {\n  float: right;\n  margin-right: 0;\n}\n\n.post-content .tag.right a {\n  color: #999;\n}\n```\n\n**views/header.ejs**\n\n```ejs\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title><%= blog.title %></title>\n    <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/semantic-ui/2.1.8/semantic.min.css\">\n    <link rel=\"stylesheet\" href=\"/css/style.css\">\n    <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script>\n    <script src=\"//cdn.bootcss.com/semantic-ui/2.1.8/semantic.min.js\"></script>\n  </head>\n  <body>\n  <%- include('components/nav') %>\n  <%- include('components/nav-setting') %>\n  <%- include('components/notification') %>\n```\n\n**views/footer.ejs**\n\n```ejs\n  <script type=\"text/javascript\">\n   $(document).ready(function () {\n      // 点击按钮弹出下拉框\n      $('.ui.dropdown').dropdown();\n\n      // 鼠标悬浮在头像上，弹出气泡提示框\n      $('.post-content .avatar-link').popup({\n        inline: true,\n        position: 'bottom right',\n        lastResort: 'bottom right'\n      });\n    })\n  </script>\n  </body>\n</html>\n```\n\n> 注意：上面 `<script></script>` 是 semantic-ui 操控页面控件的代码，一定要放到 footer.ejs 的 `</body>` 的前面，因为只有页面加载完后才能通过 JQuery 获取 DOM 元素。\n\n在 views 目录下新建 components 目录用来存放组件（即可以复用的模板片段），在该目录下创建以下文件：\n\n**views/components/nav.ejs**\n\n```ejs\n<div class=\"nav\">\n  <div class=\"ui grid\">\n    <div class=\"four wide column\"></div>\n\n    <div class=\"eight wide column\">\n      <a href=\"/posts\"><h1><%= blog.title %></h1></a>\n      <p><%= blog.description %></p>\n    </div>\n  </div>\n</div>\n```\n\n**views/components/nav-setting.ejs**\n\n```ejs\n<div class=\"nav-setting\">\n  <div class=\"ui buttons\">\n    <div class=\"ui floating dropdown button\">\n      <i class=\"icon bars\"></i>\n      <div class=\"menu\">\n        <% if (user) { %>\n          <a class=\"item\" href=\"/posts?author=<%= user._id %>\">个人主页</a>\n          <div class=\"divider\"></div>\n          <a class=\"item\" href=\"/posts/create\">发表文章</a>\n          <a class=\"item\" href=\"/signout\">登出</a>\n        <% } else { %>\n          <a class=\"item\" href=\"/signin\">登录</a>\n          <a class=\"item\" href=\"/signup\">注册</a>\n        <% } %>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n**views/components/notification.ejs**\n\n```ejs\n<div class=\"ui grid\">\n  <div class=\"four wide column\"></div>\n  <div class=\"eight wide column\">\n\n  <% if (success) { %>\n    <div class=\"ui success message\">\n      <p><%= success %></p>\n    </div>\n  <% } %>\n\n  <% if (error) { %>\n    <div class=\"ui error message\">\n      <p><%= error %></p>\n    </div>\n  <% } %>\n\n  </div>\n</div>\n```\n\n## app.locals 和 res.locals\n\n上面的 ejs 模板中我们用到了 blog、user、success、error 变量，我们将 blog 变量挂载到 `app.locals` 下，将 user、success、error 挂载到 `res.locals` 下。为什么要这么做呢？`app.locals` 和 `res.locals` 是什么？它们有什么区别？\n\nexpress 中有两个对象可用于模板的渲染：`app.locals` 和 `res.locals`。我们从 express 源码一探究竟：\n\n**express/lib/application.js**\n\n```js\napp.render = function render(name, options, callback) {\n  ...\n  var opts = options;\n  var renderOptions = {};\n  ...\n  // merge app.locals\n  merge(renderOptions, this.locals);\n\n  // merge options._locals\n  if (opts._locals) {\n    merge(renderOptions, opts._locals);\n  }\n\n  // merge options\n  merge(renderOptions, opts);\n  ...\n  tryRender(view, renderOptions, done);\n};\n```\n\n**express/lib/response.js**\n\n```js\nres.render = function render(view, options, callback) {\n  var app = this.req.app;\n  var opts = options || {};\n  ...\n  // merge res.locals\n  opts._locals = self.locals;\n  ...\n  // render\n  app.render(view, opts, done);\n};\n```\n\n可以看出：在调用 `res.render` 的时候，express 合并（merge）了 3 处的结果后传入要渲染的模板，优先级：`res.render` 传入的对象> `res.locals` 对象 > `app.locals` 对象，所以 `app.locals` 和 `res.locals` 几乎没有区别，都用来渲染模板，使用上的区别在于：`app.locals` 上通常挂载常量信息（如博客名、描述、作者这种不会变的信息），`res.locals` 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，`res.locals.user = req.session.user`）。\n\n修改 index.js，在 `routes(app)` 上一行添加如下代码：\n\n```js\n// 设置模板全局常量\napp.locals.blog = {\n  title: pkg.name,\n  description: pkg.description\n};\n\n// 添加模板必需的三个变量\napp.use(function(req, res, next) {\n  res.locals.user = req.session.user;\n  res.locals.success = req.flash(\"success\").toString();\n  res.locals.error = req.flash(\"error\").toString();\n  next();\n});\n```\n\n这样在调用 `res.render` 的时候就不用传入这四个变量了，express 为我们自动 merge 并传入了模板，所以我们可以在模板中直接使用这四个变量。\n我们使用 [Mongolass](https://github.com/mongolass/mongolass) 这个模块操作 mongodb 进行增删改查。在 myblog 下新建 lib 目录，在该目录下新建 mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nconst config = require('config-lite')(__dirname)\nconst Mongolass = require('mongolass')\nconst mongolass = new Mongolass()\nmongolass.connect(config.mongodb)\n```\n\n## 为什么使用 Mongolass\n\n早期我使用官方的 [mongodb](https://www.npmjs.com/package/mongodb)（也叫 node-mongodb-native）库，后来也陆续尝试使用了许多其他 mongodb 的驱动库，[Mongoose](https://www.npmjs.com/package/mongoose) 是比较优秀的一个，使用 Mongoose 的时间也比较长。比较这两者，各有优缺点。\n\n### node-mongodb-native:\n\n**优点：**\n\n1. 简单。参照文档即可上手，没有 Mongoose 的 Schema 那些对新手不友好的东西。\n2. 强大。毕竟是官方库，包含了所有且最新的 api，其他大部分的库都是在这个库的基础上改造的，包括 Mongoose。\n3. 文档健全。\n\n**缺点：**\n\n1. 起初只支持 callback，会写出以下这种代码：\n```js\nmongodb.open(function (err, db) {\n  if (err) {\n    return callback(err)\n  }\n  db.collection('users', function (err, collection) {\n    if (err) {\n      return callback(err)\n    }\n    collection.find({ name: 'xxx' }, function (err, users) {\n      if (err) {\n        return callback(err)\n      }\n    })\n  ...\n```\n\n或者：\n\n```js\nMongoClient.connect('mongodb://localhost:27017', function (err, mongodb) {\n  if (err) {\n    return callback(err)\n  }\n  mongodb.db('test').collection('users').find({ name: 'xxx' }, function (err, users) {\n    if (err) {\n      return callback(err)\n    }\n  })\n  ...\n```\n\n现在支持 Promise 了，和 co 一起使用好很多。\n\n2. 不支持文档校验。Mongoose 通过 Schema 支持文档校验，虽说 mongodb 是 no schema 的，但在生产环境中使用 Schema 有两点好处。一是对文档做校验，防止非正常情况下写入错误的数据到数据库，二是可以简化一些代码，如类型为 ObjectId 的字段查询或更新时可通过对应的字符串操作，不用每次包装成 ObjectId 对象。\n\n### Mongoose:\n\n**优点：**\n\n1. 封装了数据库的操作，给人的感觉是同步的，其实内部是异步的。如 mongoose 与 MongoDB 建立连接：\n```js\nconst mongoose = require('mongoose')\nmongoose.connect('mongodb://localhost/test')\nconst BlogModel = mongoose.model('Blog', { title: String, content: String })\nBlogModel.find()\n```\n2. 支持 Promise。这个也无需多说，Promise 是未来趋势，可结合 co 使用，也可结合 async/await 使用。\n3. 支持文档校验。如上所述。\n\n**缺点（个人观点）：**\n\n1. 功能多，复杂。Mongoose 功能很强大，包括静态方法，实例方法，虚拟属性，hook 函数等等，混用带来的后果是逻辑复杂，代码难以维护。\n2. 较弱的 plugin 系统。如：`schema.pre('save', function(next) {})` 和 `schema.post('find', function(next) {})`，只支持异步 `next()`，灵活性大打折扣。\n3. 其他：对新手来说难以理解的 Schema、Model、Entity 之间的关系；容易混淆的 toJSON 和 toObject，以及有带有虚拟属性的情况；用和不用 exec 的情况以及直接用 then 的情况；返回的结果是 Mongoose 包装后的对象，在此对象上修改结果却无效等等。\n\n### Mongolass\n\nMongolass 保持了与 mongodb 一样的 api，又借鉴了许多 Mongoose 的优点，同时又保持了精简。\n\n**优点：**\n\n1. 支持 Promise。\n2. 官方一致的 api。\n2. 简单。参考 Mongolass 的 readme 即可上手，比 Mongoose 精简的多，本身代码也不多。\n3. 可选的 Schema。Mongolass 中的 Schema （基于 [another-json-schema](https://www.npmjs.com/package/another-json-schema)）是可选的，并且只用来做文档校验。如果定义了 schema 并关联到某个 model，则插入、更新和覆盖等操作都会校验文档是否满足 schema，同时 schema 也会尝试格式化该字段，类似于 Mongoose，如定义了一个字段为 ObjectId 类型，也可以用 ObjectId 的字符串无缝使用一样。如果没有 schema，则用法跟原生 mongodb 库一样。\n4. 简单却强大的插件系统。可以定义全局插件（对所有 model 生效），也可以定义某个 model 上的插件（只对该 model 生效）。Mongolass 插件的设计思路借鉴了中间件的概念（类似于 Koa），通过定义 `beforeXXX` 和 `afterXXX` （XXX为操作符首字母大写，如：`afterFind`）函数实现，函数返回 yieldable 的对象即可，所以每个插件内可以做一些其他的 IO 操作。不同的插件顺序会有不同的结果，而且每个插件的输入输出都是 plain object，而非类 Mongoose 包装后的对象，没有虚拟属性，无需调用 toJSON 或 toObject。Mongolass 中的 `.populate()`就是一个内置的插件。\n5. 详细的错误信息。用过 Mongoose 的人一定遇到过这样的错：\n   `CastError: Cast to ObjectId failed for value \"xxx\" at path \"_id\"`\n   只知道一个期望是 ObjectId 的字段传入了非期望的值，通常很难定位出错的代码，即使定位到也得不到错误现场。得益于 [another-json-schema](https://www.npmjs.com/package/another-json-schema)，使用 Mongolass 在查询或者更新时，某个字段不匹配它定义的 schema 时（还没落到 mongodb）会给出详细的错误信息，如下所示：\n```js\nconst Mongolass = require('mongolass')\nconst mongolass = new Mongolass('mongodb://localhost:27017/test')\n\nconst User = mongolass.model('User', {\n  name: { type: 'string' },\n  age: { type: 'number' }\n})\n\nUser\n  .insertOne({ name: 'nswbmw', age: 'wrong age' })\n  .exec()\n  .then(console.log)\n  .catch(function (e) {\n    console.error(e)\n    console.error(e.stack)\n  })\n/*\n{ [Error: ($.age: \"wrong age\") ✖ (type: number)]\n  validator: 'type',\n  actual: 'wrong age',\n  expected: { type: 'number' },\n  path: '$.age',\n  schema: 'UserSchema',\n  model: 'User',\n  plugin: 'MongolassSchema',\n  type: 'beforeInsertOne',\n  args: [] }\nError: ($.age: \"wrong age\") ✖ (type: number)\n    at Model.insertOne (/Users/nswbmw/Desktop/mongolass-demo/node_modules/mongolass/lib/query.js:108:16)\n    at Object.<anonymous> (/Users/nswbmw/Desktop/mongolass-demo/app.js:10:4)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Function.Module.runMain (module.js:441:10)\n    at startup (node.js:139:18)\n    at node.js:974:3\n */\n```\n可以看出，错误的原因是在 insertOne 一条用户数据到用户表的时候，age 期望是一个 number 类型的值，而我们传入的字符串 `wrong age`，然后从错误栈中可以快速定位到是 app.js 第 10 行代码抛出的错。\n\n**缺点：**\n\n1. ~~schema 功能较弱，缺少如 required、default 功能。~~\n\n### 扩展阅读\n\n[从零开始写一个 Node.js 的 MongoDB 驱动库](https://zhuanlan.zhihu.com/p/24308524)\n\n## 用户模型设计\n\n我们只存储用户的名称、密码（加密后的）、头像、性别和个人简介这几个字段，对应修改 lib/mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nexports.User = mongolass.model('User', {\n  name: { type: 'string', required: true },\n  password: { type: 'string', required: true },\n  avatar: { type: 'string', required: true },\n  gender: { type: 'string', enum: ['m', 'f', 'x'], default: 'x' },\n  bio: { type: 'string', required: true }\n})\nexports.User.index({ name: 1 }, { unique: true }).exec()// 根据用户名找到用户，用户名全局唯一\n```\n\n我们定义了用户表的 schema，生成并导出了 User 这个 model，同时设置了 name 的唯一索引，保证用户名是不重复的。\n\n> 小提示：`required: true` 表示该字段是必需的，`default: xxx` 用于创建文档时设置默认值。更多关于 Mongolass 的 schema 的用法，请查阅 [another-json-schema](https://github.com/nswbmw/another-json-schema)。\n\n> 小提示：Mongolass 中的 model 你可以认为相当于 mongodb 中的 collection，只不过添加了插件的功能。\n\n## 注册页\n\n首先，我们来完成注册。新建 views/signup.ejs，添加如下代码：\n\n**views/signup.ejs**\n\n```ejs\n<%- include('header') %>\n\n<div class=\"ui grid\">\n  <div class=\"four wide column\"></div>\n  <div class=\"eight wide column\">\n    <form class=\"ui form segment\" method=\"post\" enctype=\"multipart/form-data\">\n      <div class=\"field required\">\n        <label>用户名</label>\n        <input placeholder=\"用户名\" type=\"text\" name=\"name\">\n      </div>\n      <div class=\"field required\">\n        <label>密码</label>\n        <input placeholder=\"密码\" type=\"password\" name=\"password\">\n      </div>\n      <div class=\"field required\">\n        <label>重复密码</label>\n        <input placeholder=\"重复密码\" type=\"password\" name=\"repassword\">\n      </div>\n      <div class=\"field required\">\n        <label>性别</label>\n        <select class=\"ui compact selection dropdown\" name=\"gender\">\n          <option value=\"m\">男</option>\n          <option value=\"f\">女</option>\n          <option value=\"x\">保密</option>\n        </select>\n      </div>\n      <div class=\"field required\">\n        <label>头像</label>\n        <input type=\"file\" name=\"avatar\">\n      </div>\n      <div class=\"field required\">\n        <label>个人简介</label>\n        <textarea name=\"bio\" rows=\"5\"></textarea>\n      </div>\n      <input type=\"submit\" class=\"ui button fluid\" value=\"注册\">\n    </form>\n  </div>\n</div>\n\n<%- include('footer') %>\n```\n\n> 注意：form 表单要添加 `enctype=\"multipart/form-data\"` 属性才能上传文件。\n\n修改 routes/signup.js 中获取注册页的路由如下：\n\n**routes/signup.js**\n\n```js\n// GET /signup 注册页\nrouter.get('/', checkNotLogin, function (req, res, next) {\n  res.render('signup')\n})\n```\n\n现在访问 `localhost:3000/signup` 看看效果吧。\n\n## 注册与文件上传\n\n我们使用 [express-formidable](https://github.com/utatti/express-formidable) 处理 form 表单（包括文件上传）。修改 index.js ，在 `app.use(flash())` 下一行添加如下代码：\n\n**index.js**\n\n```js\n// 处理表单及文件上传的中间件\napp.use(require('express-formidable')({\n  uploadDir: path.join(__dirname, 'public/img'), // 上传文件目录\n  keepExtensions: true// 保留后缀\n}))\n```\n\n新建 models/users.js，添加如下代码：\n\n**models/users.js**\n\n```js\nconst User = require('../lib/mongo').User\n\nmodule.exports = {\n  // 注册一个用户\n  create: function create (user) {\n    return User.create(user).exec()\n  }\n}\n```\n\n完善处理用户注册的路由，最终修改 routes/signup.js 如下：\n\n**routes/signup.js**\n\n```js\nconst fs = require('fs')\nconst path = require('path')\nconst sha1 = require('sha1')\nconst express = require('express')\nconst router = express.Router()\n\nconst UserModel = require('../models/users')\nconst checkNotLogin = require('../middlewares/check').checkNotLogin\n\n// GET /signup 注册页\nrouter.get('/', checkNotLogin, function (req, res, next) {\n  res.render('signup')\n})\n\n// POST /signup 用户注册\nrouter.post('/', checkNotLogin, function (req, res, next) {\n  const name = req.fields.name\n  const gender = req.fields.gender\n  const bio = req.fields.bio\n  const avatar = req.files.avatar.path.split(path.sep).pop()\n  let password = req.fields.password\n  const repassword = req.fields.repassword\n\n  // 校验参数\n  try {\n    if (!(name.length >= 1 && name.length <= 10)) {\n      throw new Error('名字请限制在 1-10 个字符')\n    }\n    if (['m', 'f', 'x'].indexOf(gender) === -1) {\n      throw new Error('性别只能是 m、f 或 x')\n    }\n    if (!(bio.length >= 1 && bio.length <= 30)) {\n      throw new Error('个人简介请限制在 1-30 个字符')\n    }\n    if (!req.files.avatar.name) {\n      throw new Error('缺少头像')\n    }\n    if (password.length < 6) {\n      throw new Error('密码至少 6 个字符')\n    }\n    if (password !== repassword) {\n      throw new Error('两次输入密码不一致')\n    }\n  } catch (e) {\n    // 注册失败，异步删除上传的头像\n    fs.unlink(req.files.avatar.path)\n    req.flash('error', e.message)\n    return res.redirect('/signup')\n  }\n\n  // 明文密码加密\n  password = sha1(password)\n\n  // 待写入数据库的用户信息\n  let user = {\n    name: name,\n    password: password,\n    gender: gender,\n    bio: bio,\n    avatar: avatar\n  }\n  // 用户信息写入数据库\n  UserModel.create(user)\n    .then(function (result) {\n      // 此 user 是插入 mongodb 后的值，包含 _id\n      user = result.ops[0]\n      // 删除密码这种敏感信息，将用户信息存入 session\n      delete user.password\n      req.session.user = user\n      // 写入 flash\n      req.flash('success', '注册成功')\n      // 跳转到首页\n      res.redirect('/posts')\n    })\n    .catch(function (e) {\n      // 注册失败，异步删除上传的头像\n      fs.unlink(req.files.avatar.path)\n      // 用户名被占用则跳回注册页，而不是错误页\n      if (e.message.match('duplicate key')) {\n        req.flash('error', '用户名已被占用')\n        return res.redirect('/signup')\n      }\n      next(e)\n    })\n})\n\nmodule.exports = router\n```\n\n我们使用 express-formidable 处理表单的上传，表单普通字段挂载到 req.fields 上，表单上传后的文件挂载到 req.files 上，文件存储在 public/img 目录下。然后校验了参数，校验通过后将用户信息插入到 MongoDB 中，成功则跳转到主页并显示『注册成功』的通知，失败（如用户名被占用）则跳转回注册页面并显示『用户名已被占用』的通知。\n\n> 注意：我们使用 sha1 加密用户的密码，sha1 并不是一种十分安全的加密方式，实际开发中可以使用更安全的 [bcrypt](https://www.npmjs.com/package/bcrypt) 或 [scrypt](https://www.npmjs.com/package/scrypt) 加密。\n> 注意：注册失败时（参数校验失败或者存数据库时出错）删除已经上传到 public/img 目录下的头像。\n\n为了方便观察效果，我们先创建主页的模板。修改 routes/posts.js 中对应代码如下：\n\n**routes/posts.js**\n\n```js\nrouter.get('/', function (req, res, next) {\n  res.render('posts')\n})\n```\n\n新建 views/posts.ejs，添加如下代码：\n\n**views/posts.ejs**\n\n```ejs\n<%- include('header') %>\n这是主页\n<%- include('footer') %>\n```\n\n访问 `localhost:3000/signup`，注册成功后如下所示：\n\n![](/images/4.7.1.png)\n\n## 登出\n\n现在我们来完成登出的功能。修改 routes/signout.js 如下：\n\n**routes/signout.js**\n\n```js\nconst express = require('express')\nconst router = express.Router()\n\nconst checkLogin = require('../middlewares/check').checkLogin\n\n// GET /signout 登出\nrouter.get('/', checkLogin, function (req, res, next) {\n  // 清空 session 中用户信息\n  req.session.user = null\n  req.flash('success', '登出成功')\n  // 登出成功后跳转到主页\n  res.redirect('/posts')\n})\n\nmodule.exports = router\n```\n\n此时刷新页面，点击右上角的 `登出`，成功后如下图所示：\n\n![](/images/4.8.1.png)\n\n## 登录页\n\n现在我们来完成登录页。修改 routes/signin.js 相应代码如下：\n\n**routes/signin.js**\n\n```js\nrouter.get('/', checkNotLogin, function (req, res, next) {\n  res.render('signin')\n})\n```\n\n新建 views/signin.ejs，添加如下代码：\n\n**views/signin.ejs**\n\n```ejs\n<%- include('header') %>\n\n<div class=\"ui grid\">\n  <div class=\"four wide column\"></div>\n  <div class=\"eight wide column\">\n    <form class=\"ui form segment\" method=\"post\">\n      <div class=\"field required\">\n        <label>用户名</label>\n        <input placeholder=\"用户名\" type=\"text\" name=\"name\">\n      </div>\n      <div class=\"field required\">\n        <label>密码</label>\n        <input placeholder=\"密码\" type=\"password\" name=\"password\">\n      </div>\n      <input type=\"submit\" class=\"ui button fluid\" value=\"登录\">\n    </form>  \n  </div>\n</div>\n\n<%- include('footer') %>\n```\n\n现在刷新页面，点击右边上角 `登录` 试试吧，我们已经看到了登录页，但先不要点击登录，接下来我们实现处理登录的逻辑。\n\n## 登录\n\n现在我们来完成登录的功能。修改 models/users.js 添加 `getUserByName` 方法用于通过用户名获取用户信息：\n\n**models/users.js**\n\n```js\nconst User = require('../lib/mongo').User\n\nmodule.exports = {\n  // 注册一个用户\n  create: function create (user) {\n    return User.create(user).exec()\n  },\n\n  // 通过用户名获取用户信息\n  getUserByName: function getUserByName (name) {\n    return User\n      .findOne({ name: name })\n      .addCreatedAt()\n      .exec()\n  }\n}\n```\n\n这里我们使用了 `addCreatedAt` 自定义插件（通过 \\_id 生成时间戳），修改 lib/mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nconst moment = require('moment')\nconst objectIdToTimestamp = require('objectid-to-timestamp')\n\n// 根据 id 生成创建时间 created_at\nmongolass.plugin('addCreatedAt', {\n  afterFind: function (results) {\n    results.forEach(function (item) {\n      item.created_at = moment(objectIdToTimestamp(item._id)).format('YYYY-MM-DD HH:mm')\n    })\n    return results\n  },\n  afterFindOne: function (result) {\n    if (result) {\n      result.created_at = moment(objectIdToTimestamp(result._id)).format('YYYY-MM-DD HH:mm')\n    }\n    return result\n  }\n})\n```\n\n> 小提示：24 位长的 ObjectId 前 4 个字节是精确到秒的时间戳，所以我们没有额外的存创建时间（如: createdAt）的字段。ObjectId 生成规则：\n\n![](/images/4.8.2.png)\n\n\n修改 routes/signin.js 如下：\n\n**routes/signin.js**\n\n```js\nconst sha1 = require('sha1')\nconst express = require('express')\nconst router = express.Router()\n\nconst UserModel = require('../models/users')\nconst checkNotLogin = require('../middlewares/check').checkNotLogin\n\n// GET /signin 登录页\nrouter.get('/', checkNotLogin, function (req, res, next) {\n  res.render('signin')\n})\n\n// POST /signin 用户登录\nrouter.post('/', checkNotLogin, function (req, res, next) {\n  const name = req.fields.name\n  const password = req.fields.password\n\n  // 校验参数\n  try {\n    if (!name.length) {\n      throw new Error('请填写用户名')\n    }\n    if (!password.length) {\n      throw new Error('请填写密码')\n    }\n  } catch (e) {\n    req.flash('error', e.message)\n    return res.redirect('back')\n  }\n\n  UserModel.getUserByName(name)\n    .then(function (user) {\n      if (!user) {\n        req.flash('error', '用户不存在')\n        return res.redirect('back')\n      }\n      // 检查密码是否匹配\n      if (sha1(password) !== user.password) {\n        req.flash('error', '用户名或密码错误')\n        return res.redirect('back')\n      }\n      req.flash('success', '登录成功')\n      // 用户信息写入 session\n      delete user.password\n      req.session.user = user\n      // 跳转到主页\n      res.redirect('/posts')\n    })\n    .catch(next)\n})\n\nmodule.exports = router\n```\n\n这里我们在 POST /signin 的路由处理函数中，通过传上来的 name 去数据库中找到对应用户，校验传上来的密码是否跟数据库中的一致。不一致则返回上一页（即登录页）并显示『用户名或密码错误』的通知，一致则将用户信息写入 session，跳转到主页并显示『登录成功』的通知。\n\n现在刷新页面，点击右上角 `登录`，用刚才注册的账号登录，如下图所示：\n\n![](/images/4.8.3.png)\n\n## 文章模型设计\n\n我们只存储文章的作者 id、标题、正文和点击量这几个字段，对应修改 lib/mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nexports.Post = mongolass.model('Post', {\n  author: { type: Mongolass.Types.ObjectId, required: true },\n  title: { type: 'string', required: true },\n  content: { type: 'string', required: true },\n  pv: { type: 'number', default: 0 }\n})\nexports.Post.index({ author: 1, _id: -1 }).exec()// 按创建时间降序查看用户的文章列表\n```\n\n## 发表文章\n\n现在我们来实现发表文章的功能。首先创建发表文章页，新建 views/create.ejs，添加如下代码：\n\n**views/create.ejs**\n\n```ejs\n<%- include('header') %>\n\n<div class=\"ui grid\">\n  <div class=\"four wide column\">\n    <a class=\"avatar avatar-link\"\n       href=\"/posts?author=<%= user._id %>\"\n       data-title=\"<%= user.name %> | <%= ({m: '男', f: '女', x: '保密'})[user.gender] %>\"\n       data-content=\"<%= user.bio %>\">\n      <img class=\"avatar\" src=\"/img/<%= user.avatar %>\">\n    </a>\n  </div>\n\n  <div class=\"eight wide column\">\n    <form class=\"ui form segment\" method=\"post\">\n      <div class=\"field required\">\n        <label>标题</label>\n        <input type=\"text\" name=\"title\">\n      </div>\n      <div class=\"field required\">\n        <label>内容</label>\n        <textarea name=\"content\" rows=\"15\"></textarea>\n      </div>\n      <input type=\"submit\" class=\"ui button\" value=\"发布\">\n    </form>\n  </div>\n</div>\n\n<%- include('footer') %>\n```\n\n修改 routes/posts.js，将：\n\n```js\n// GET /posts/create 发表文章页\nrouter.get('/create', checkLogin, function (req, res, next) {\n  res.send('发表文章页')\n})\n```\n\n修改为：\n\n```js\n// GET /posts/create 发表文章页\nrouter.get('/create', checkLogin, function (req, res, next) {\n  res.render('create')\n})\n```\n\n登录成功状态，点击右上角『发表文章』试下吧。\n\n发表文章页已经完成了，接下来新建 models/posts.js 用来存放与文章操作相关的代码：\n\n**models/posts.js**\n\n```js\nconst Post = require('../lib/mongo').Post\n\nmodule.exports = {\n  // 创建一篇文章\n  create: function create (post) {\n    return Post.create(post).exec()\n  }\n}\n```\n\n修改 routes/posts.js，在文件上方引入 PostModel：\n\n**routes/posts.js**\n\n```js\nconst PostModel = require('../models/posts')\n```\n\n将：\n\n```js\n// POST /posts/create 发表一篇文章\nrouter.post('/create', checkLogin, function (req, res, next) {\n  res.send('发表文章')\n})\n```\n\n修改为：\n\n```js\n// POST /posts/create 发表一篇文章\nrouter.post('/create', checkLogin, function (req, res, next) {\n  const author = req.session.user._id\n  const title = req.fields.title\n  const content = req.fields.content\n\n  // 校验参数\n  try {\n    if (!title.length) {\n      throw new Error('请填写标题')\n    }\n    if (!content.length) {\n      throw new Error('请填写内容')\n    }\n  } catch (e) {\n    req.flash('error', e.message)\n    return res.redirect('back')\n  }\n\n  let post = {\n    author: author,\n    title: title,\n    content: content\n  }\n\n  PostModel.create(post)\n    .then(function (result) {\n      // 此 post 是插入 mongodb 后的值，包含 _id\n      post = result.ops[0]\n      req.flash('success', '发表成功')\n      // 发表成功后跳转到该文章页\n      res.redirect(`/posts/${post._id}`)\n    })\n    .catch(next)\n})\n```\n\n这里校验了上传的表单字段，并将文章信息插入数据库，成功后跳转到该文章页并显示『发表成功』的通知，失败后请求会进入错误处理函数。\n\n现在刷新页面（登录情况下），点击右上角 `发表文章` 试试吧，发表成功后跳转到了文章页但并没有任何内容，下面我们就来实现文章页及主页。\n\n## 主页与文章页\n\n现在我们来实现主页及文章页。修改 models/posts.js 如下：\n\n**models/posts.js**\n\n```js\nconst marked = require('marked')\nconst Post = require('../lib/mongo').Post\n\n// 将 post 的 content 从 markdown 转换成 html\nPost.plugin('contentToHtml', {\n  afterFind: function (posts) {\n    return posts.map(function (post) {\n      post.content = marked(post.content)\n      return post\n    })\n  },\n  afterFindOne: function (post) {\n    if (post) {\n      post.content = marked(post.content)\n    }\n    return post\n  }\n})\n\nmodule.exports = {\n  // 创建一篇文章\n  create: function create (post) {\n    return Post.create(post).exec()\n  },\n\n  // 通过文章 id 获取一篇文章\n  getPostById: function getPostById (postId) {\n    return Post\n      .findOne({ _id: postId })\n      .populate({ path: 'author', model: 'User' })\n      .addCreatedAt()\n      .contentToHtml()\n      .exec()\n  },\n\n  // 按创建时间降序获取所有用户文章或者某个特定用户的所有文章\n  getPosts: function getPosts (author) {\n    const query = {}\n    if (author) {\n      query.author = author\n    }\n    return Post\n      .find(query)\n      .populate({ path: 'author', model: 'User' })\n      .sort({ _id: -1 })\n      .addCreatedAt()\n      .contentToHtml()\n      .exec()\n  },\n\n  // 通过文章 id 给 pv 加 1\n  incPv: function incPv (postId) {\n    return Post\n      .update({ _id: postId }, { $inc: { pv: 1 } })\n      .exec()\n  }\n}\n```\n\n需要讲解两点：\n\n1. 我们使用了 markdown 解析文章的内容，所以在发表文章的时候可使用 markdown 语法（如插入链接、图片等等），关于 markdown 的使用请参考： [Markdown 语法说明](http://wowubuntu.com/markdown/)。\n2. 我们在 PostModel 上注册了 `contentToHtml`，而 `addCreatedAt` 是在 lib/mongo.js 中 mongolass 上注册的。也就是说 `contentToHtml` 只针对 PostModel 有效，而 `addCreatedAt` 对所有 Model 都有效。\n\n接下来完成主页的模板，修改 views/posts.ejs 如下：\n\n**views/posts.ejs**\n\n```ejs\n<%- include('header') %>\n\n<% posts.forEach(function (post) { %>\n  <%- include('components/post-content', { post: post }) %>\n<% }) %>\n\n<%- include('footer') %>\n```\n\n新建 views/components/post-content.ejs 用来存放单篇文章的模板片段：\n\n**views/components/post-content.ejs**\n\n```ejs\n<div class=\"post-content\">\n  <div class=\"ui grid\">\n    <div class=\"four wide column\">\n      <a class=\"avatar avatar-link\"\n         href=\"/posts?author=<%= post.author._id %>\"\n         data-title=\"<%= post.author.name %> | <%= ({m: '男', f: '女', x: '保密'})[post.author.gender] %>\"\n         data-content=\"<%= post.author.bio %>\">\n        <img class=\"avatar\" src=\"/img/<%= post.author.avatar %>\">\n      </a>\n    </div>\n\n    <div class=\"eight wide column\">\n      <div class=\"ui segment\">\n        <h3><a href=\"/posts/<%= post._id %>\"><%= post.title %></a></h3>\n        <pre><%- post.content %></pre>\n        <div>\n          <span class=\"tag\"><%= post.created_at %></span>\n          <span class=\"tag right\">\n            <span>浏览(<%= post.pv || 0 %>)</span>\n            <span>留言(<%= post.commentsCount || 0 %>)</span>\n\n            <% if (user && post.author._id && user._id.toString() === post.author._id.toString()) { %>\n              <div class=\"ui inline dropdown\">\n                <div class=\"text\"></div>\n                <i class=\"dropdown icon\"></i>\n                <div class=\"menu\">\n                  <div class=\"item\"><a href=\"/posts/<%= post._id %>/edit\">编辑</a></div>\n                  <div class=\"item\"><a href=\"/posts/<%= post._id %>/remove\">删除</a></div>\n                </div>\n              </div>\n            <% } %>\n\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n> 注意：我们用了 `<%- post.content %>`，而不是 `<%= post.content %>`，因为 post.content 是 markdown 转换后的 html 字符串。\n\n修改 routes/posts.js，将：\n\n**routes/posts.js**\n\n```js\nrouter.get('/', function (req, res, next) {\n  res.render('posts')\n})\n```\n\n修改为：\n\n```js\nrouter.get('/', function (req, res, next) {\n  const author = req.query.author\n\n  PostModel.getPosts(author)\n    .then(function (posts) {\n      res.render('posts', {\n        posts: posts\n      })\n    })\n    .catch(next)\n})\n```\n\n> 注意：主页与用户页通过 url 中的 author 区分。\n\n现在完成了主页与用户页，访问 `http://localhost:3000/posts` 试试吧，现在已经将我们之前创建的文章显示出来了，尝试点击用户的头像看看效果。\n\n接下来完成文章详情页。新建 views/post.ejs，添加如下代码：\n\n**views/post.ejs**\n\n```ejs\n<%- include('header') %>\n<%- include('components/post-content') %>\n<%- include('footer') %>\n```\n\n打开 routes/posts.js，将：\n\n**routes/posts.js**\n\n```js\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function (req, res, next) {\n  res.send('文章详情页')\n})\n```\n\n修改为：\n\n```js\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function (req, res, next) {\n  const postId = req.params.postId\n\n  Promise.all([\n    PostModel.getPostById(postId), // 获取文章信息\n    PostModel.incPv(postId)// pv 加 1\n  ])\n    .then(function (result) {\n      const post = result[0]\n      if (!post) {\n        throw new Error('该文章不存在')\n      }\n\n      res.render('post', {\n        post: post\n      })\n    })\n    .catch(next)\n})\n```\n\n现在刷新浏览器，点击文章的标题看看浏览器地址的变化吧。\n\n> 注意：浏览器地址有变化，但页面看不出区别来（因为页面布局一样），后面我们添加留言功能后就能看出区别来了。\n\n## 编辑与删除文章\n\n现在我们来完成编辑与删除文章的功能。修改 models/posts.js，在 module.exports 对象上添加如下 3 个方法：\n\n**models/posts.js**\n\n```js\n// 通过文章 id 获取一篇原生文章（编辑文章）\ngetRawPostById: function getRawPostById (postId) {\n  return Post\n    .findOne({ _id: postId })\n    .populate({ path: 'author', model: 'User' })\n    .exec()\n},\n\n// 通过文章 id 更新一篇文章\nupdatePostById: function updatePostById (postId, data) {\n  return Post.update({ _id: postId }, { $set: data }).exec()\n},\n\n// 通过文章 id 删除一篇文章\ndelPostById: function delPostById (postId) {\n  return Post.deleteOne({ _id: postId }).exec()\n}\n```\n\n> 注意：不要忘了在适当位置添加逗号，如 incPv 的结束大括号后。\n\n> 注意：我们通过新函数 `getRawPostById` 用来获取文章原生的内容（编辑页面用），而不是用 `getPostById` 返回将 markdown 转换成 html 后的内容。\n\n新建编辑文章页 views/edit.ejs，添加如下代码：\n\n**views/edit.ejs**\n\n```js\n<%- include('header') %>\n\n<div class=\"ui grid\">\n  <div class=\"four wide column\">\n    <a class=\"avatar\"\n       href=\"/posts?author=<%= user._id %>\"\n       data-title=\"<%= user.name %> | <%= ({m: '男', f: '女', x: '保密'})[user.gender] %>\"\n       data-content=\"<%= user.bio %>\">\n      <img class=\"avatar\" src=\"/img/<%= user.avatar %>\">\n    </a>\n  </div>\n\n  <div class=\"eight wide column\">\n    <form class=\"ui form segment\" method=\"post\" action=\"/posts/<%= post._id %>/edit\">\n      <div class=\"field required\">\n        <label>标题</label>\n        <input type=\"text\" name=\"title\" value=\"<%= post.title %>\">\n      </div>\n      <div class=\"field required\">\n        <label>内容</label>\n        <textarea name=\"content\" rows=\"15\"><%= post.content %></textarea>\n      </div>\n      <input type=\"submit\" class=\"ui button\" value=\"发布\">\n    </form>\n  </div>\n</div>\n\n<%- include('footer') %>\n```\n\n修改 routes/posts.js，将：\n\n**routes/posts.js**\n\n```js\n// GET /posts/:postId/edit 更新文章页\nrouter.get('/:postId/edit', checkLogin, function (req, res, next) {\n  res.send('更新文章页')\n})\n\n// POST /posts/:postId/edit 更新一篇文章\nrouter.post('/:postId/edit', checkLogin, function (req, res, next) {\n  res.send('更新文章')\n})\n\n// GET /posts/:postId/remove 删除一篇文章\nrouter.get('/:postId/remove', checkLogin, function (req, res, next) {\n  res.send('删除文章')\n})\n```\n\n修改为：\n\n```js\n// GET /posts/:postId/edit 更新文章页\nrouter.get('/:postId/edit', checkLogin, function (req, res, next) {\n  const postId = req.params.postId\n  const author = req.session.user._id\n\n  PostModel.getRawPostById(postId)\n    .then(function (post) {\n      if (!post) {\n        throw new Error('该文章不存在')\n      }\n      if (author.toString() !== post.author._id.toString()) {\n        throw new Error('权限不足')\n      }\n      res.render('edit', {\n        post: post\n      })\n    })\n    .catch(next)\n})\n\n// POST /posts/:postId/edit 更新一篇文章\nrouter.post('/:postId/edit', checkLogin, function (req, res, next) {\n  const postId = req.params.postId\n  const author = req.session.user._id\n  const title = req.fields.title\n  const content = req.fields.content\n\n  // 校验参数\n  try {\n    if (!title.length) {\n      throw new Error('请填写标题')\n    }\n    if (!content.length) {\n      throw new Error('请填写内容')\n    }\n  } catch (e) {\n    req.flash('error', e.message)\n    return res.redirect('back')\n  }\n\n  PostModel.getRawPostById(postId)\n    .then(function (post) {\n      if (!post) {\n        throw new Error('文章不存在')\n      }\n      if (post.author._id.toString() !== author.toString()) {\n        throw new Error('没有权限')\n      }\n      PostModel.updatePostById(postId, { title: title, content: content })\n        .then(function () {\n          req.flash('success', '编辑文章成功')\n          // 编辑成功后跳转到上一页\n          res.redirect(`/posts/${postId}`)\n        })\n        .catch(next)\n    })\n})\n\n// GET /posts/:postId/remove 删除一篇文章\nrouter.get('/:postId/remove', checkLogin, function (req, res, next) {\n  const postId = req.params.postId\n  const author = req.session.user._id\n\n  PostModel.getRawPostById(postId)\n    .then(function (post) {\n      if (!post) {\n        throw new Error('文章不存在')\n      }\n      if (post.author._id.toString() !== author.toString()) {\n        throw new Error('没有权限')\n      }\n      PostModel.delPostById(postId)\n        .then(function () {\n          req.flash('success', '删除文章成功')\n          // 删除成功后跳转到主页\n          res.redirect('/posts')\n        })\n        .catch(next)\n    })\n})\n```\n\n现在刷新主页，点击文章右下角的小三角，编辑文章和删除文章试试吧。\n\n## 留言模型设计\n\n我们只需要留言的作者 id、留言内容和关联的文章 id 这几个字段，修改 lib/mongo.js，添加如下代码：\n\n**lib/mongo.js**\n\n```js\nexports.Comment = mongolass.model('Comment', {\n  author: { type: Mongolass.Types.ObjectId, required: true },\n  content: { type: 'string', required: true },\n  postId: { type: Mongolass.Types.ObjectId, required: true }\n})\nexports.Comment.index({ postId: 1, _id: 1 }).exec()// 通过文章 id 获取该文章下所有留言，按留言创建时间升序\n```\n\n## 显示留言\n\n在实现留言功能之前，我们先让文章页可以显示留言列表。首先创建留言的模板，新建 views/components/comments.ejs，添加如下代码：\n\n**views/components/comments.ejs**\n\n```ejs\n<div class=\"ui grid\">\n  <div class=\"four wide column\"></div>\n  <div class=\"eight wide column\">\n    <div class=\"ui segment\">\n      <div class=\"ui minimal comments\">\n        <h3 class=\"ui dividing header\">留言</h3>\n\n        <% comments.forEach(function (comment) { %>\n          <div class=\"comment\">\n            <span class=\"avatar\">\n              <img src=\"/img/<%= comment.author.avatar %>\">\n            </span>\n            <div class=\"content\">\n              <a class=\"author\" href=\"/posts?author=<%= comment.author._id %>\"><%= comment.author.name %></a>\n              <div class=\"metadata\">\n                <span class=\"date\"><%= comment.created_at %></span>\n              </div>\n              <div class=\"text\"><%- comment.content %></div>\n\n              <% if (user && comment.author._id && user._id.toString() === comment.author._id.toString()) { %>\n                <div class=\"actions\">\n                  <a class=\"reply\" href=\"/comments/<%= comment._id %>/remove\">删除</a>\n                </div>\n              <% } %>\n            </div>\n          </div>\n        <% }) %>\n\n        <% if (user) { %>\n          <form class=\"ui reply form\" method=\"post\" action=\"/comments\">\n            <input name=\"postId\" value=\"<%= post._id %>\" hidden>\n            <div class=\"field\">\n              <textarea name=\"content\"></textarea>\n            </div>\n            <input type=\"submit\" class=\"ui icon button\" value=\"留言\" />\n          </form>\n        <% } %>\n\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n> 注意：我们在提交留言表单时带上了文章 id（postId），通过 hidden 隐藏。\n\n在文章页引入留言的模板片段，修改 views/post.ejs 为：\n\n**views/post.ejs**\n\n```ejs\n<%- include('header') %>\n\n<%- include('components/post-content') %>\n<%- include('components/comments') %>\n\n<%- include('footer') %>\n```\n\n新建 models/comments.js，存放留言相关的数据库操作，添加如下代码：\n\n**models/comments.js**\n\n```js\nconst marked = require('marked')\nconst Comment = require('../lib/mongo').Comment\n\n// 将 comment 的 content 从 markdown 转换成 html\nComment.plugin('contentToHtml', {\n  afterFind: function (comments) {\n    return comments.map(function (comment) {\n      comment.content = marked(comment.content)\n      return comment\n    })\n  }\n})\n\nmodule.exports = {\n  // 创建一个留言\n  create: function create (comment) {\n    return Comment.create(comment).exec()\n  },\n\n  // 通过留言 id 获取一个留言\n  getCommentById: function getCommentById (commentId) {\n    return Comment.findOne({ _id: commentId }).exec()\n  },\n\n  // 通过留言 id 删除一个留言\n  delCommentById: function delCommentById (commentId) {\n    return Comment.deleteOne({ _id: commentId }).exec()\n  },\n\n  // 通过文章 id 删除该文章下所有留言\n  delCommentsByPostId: function delCommentsByPostId (postId) {\n    return Comment.deleteMany({ postId: postId }).exec()\n  },\n\n  // 通过文章 id 获取该文章下所有留言，按留言创建时间升序\n  getComments: function getComments (postId) {\n    return Comment\n      .find({ postId: postId })\n      .populate({ path: 'author', model: 'User' })\n      .sort({ _id: 1 })\n      .addCreatedAt()\n      .contentToHtml()\n      .exec()\n  },\n\n  // 通过文章 id 获取该文章下留言数\n  getCommentsCount: function getCommentsCount (postId) {\n    return Comment.count({ postId: postId }).exec()\n  }\n}\n```\n\n> 小提示：我们让留言也支持了 markdown。\n> 注意：删除一篇文章成功后也要删除该文章下所有的评论，上面 delCommentsByPostId 就是用来做这件事的。\n\n\n修改 models/posts.js，在：\n\n**models/posts.js**\n\n```js\nconst Post = require('../lib/mongo').Post\n```\n\n下添加如下代码：\n\n```js\nconst CommentModel = require('./comments')\n\n// 给 post 添加留言数 commentsCount\nPost.plugin('addCommentsCount', {\n  afterFind: function (posts) {\n    return Promise.all(posts.map(function (post) {\n      return CommentModel.getCommentsCount(post._id).then(function (commentsCount) {\n        post.commentsCount = commentsCount\n        return post\n      })\n    }))\n  },\n  afterFindOne: function (post) {\n    if (post) {\n      return CommentModel.getCommentsCount(post._id).then(function (count) {\n        post.commentsCount = count\n        return post\n      })\n    }\n    return post\n  }\n})\n```\n\n在 PostModel 上注册了 `addCommentsCount` 用来给每篇文章添加留言数 `commentsCount`，在 `getPostById` 和 `getPosts` 方法里的：\n\n```\n.addCreatedAt()\n```\n\n下添加：\n\n```\n.addCommentsCount()\n```\n\n这样主页和文章页的文章就可以正常显示留言数了。\n\n然后将 `delPostById` 修改为：\n\n```js\n// 通过用户 id 和文章 id 删除一篇文章\ndelPostById: function delPostById (postId, author) {\n  return Post.deleteOne({ author: author, _id: postId })\n    .exec()\n    .then(function (res) {\n      // 文章删除后，再删除该文章下的所有留言\n      if (res.result.ok && res.result.n > 0) {\n        return CommentModel.delCommentsByPostId(postId)\n      }\n    })\n}\n```\n\n> 小提示：虽然目前看起来使用 Mongolass 自定义插件并不能节省代码，反而使代码变多了。Mongolass 插件真正的优势在于：在项目非常庞大时，可通过自定义的插件随意组合（及顺序）实现不同的输出，如上面的 `getPostById` 需要将取出 markdown 转换成 html，则使用 `.contentToHtml()`，否则像 `getRawPostById` 则不必使用。\n\n修改 routes/posts.js，在：\n\n**routes/posts.js**\n\n```js\nconst PostModel = require('../models/posts')\n```\n\n下引入 CommentModel:\n\n```js\nconst CommentModel = require('../models/comments')\n```\n\n在文章页传入留言列表，将：\n\n```js\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function (req, res, next) {\n  ...\n})\n```\n\n修改为：\n\n```js\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function (req, res, next) {\n  const postId = req.params.postId\n\n  Promise.all([\n    PostModel.getPostById(postId), // 获取文章信息\n    CommentModel.getComments(postId), // 获取该文章所有留言\n    PostModel.incPv(postId)// pv 加 1\n  ])\n    .then(function (result) {\n      const post = result[0]\n      const comments = result[1]\n      if (!post) {\n        throw new Error('该文章不存在')\n      }\n\n      res.render('post', {\n        post: post,\n        comments: comments\n      })\n    })\n    .catch(next)\n})\n```\n\n现在刷新文章页试试吧，此时已经显示了留言的输入框。\n\n## 发表与删除留言\n\n现在我们来实现发表与删除留言的功能。将 routes/comments.js 修改如下：\n\n```js\nconst express = require('express')\nconst router = express.Router()\n\nconst checkLogin = require('../middlewares/check').checkLogin\nconst CommentModel = require('../models/comments')\n\n// POST /comments 创建一条留言\nrouter.post('/', checkLogin, function (req, res, next) {\n  const author = req.session.user._id\n  const postId = req.fields.postId\n  const content = req.fields.content\n\n  // 校验参数\n  try {\n    if (!content.length) {\n      throw new Error('请填写留言内容')\n    }\n  } catch (e) {\n    req.flash('error', e.message)\n    return res.redirect('back')\n  }\n\n  const comment = {\n    author: author,\n    postId: postId,\n    content: content\n  }\n\n  CommentModel.create(comment)\n    .then(function () {\n      req.flash('success', '留言成功')\n      // 留言成功后跳转到上一页\n      res.redirect('back')\n    })\n    .catch(next)\n})\n\n// GET /comments/:commentId/remove 删除一条留言\nrouter.get('/:commentId/remove', checkLogin, function (req, res, next) {\n  const commentId = req.params.commentId\n  const author = req.session.user._id\n\n  CommentModel.getCommentById(commentId)\n    .then(function (comment) {\n      if (!comment) {\n        throw new Error('留言不存在')\n      }\n      if (comment.author.toString() !== author.toString()) {\n        throw new Error('没有权限删除留言')\n      }\n      CommentModel.delCommentById(commentId)\n        .then(function () {\n          req.flash('success', '删除留言成功')\n          // 删除成功后跳转到上一页\n          res.redirect('back')\n        })\n        .catch(next)\n    })\n})\n\nmodule.exports = router\n```\n\n至此，我们完成了创建留言和删除留言的逻辑。刷新页面，尝试留言试试吧。留言成功后，将鼠标悬浮在留言上可以显示出 `删除` 的按钮，点击可以删除留言。\n\n现在访问一个不存在的地址，如：`http://localhost:3000/haha` 页面会显示：\n\n```\nCannot GET /haha\n```\n## 404 页面\n\n我们来自定义 404 页面。修改 routes/index.js，在：\n\n**routes/index.js**\n\n```js\napp.use('/comments', require('./comments'))\n```\n\n下添加如下代码：\n\n```js\n// 404 page\napp.use(function (req, res) {\n  if (!res.headersSent) {\n    res.status(404).render('404')\n  }\n})\n```\n\n新建 views/404.ejs，添加如下代码：\n\n**views/404.ejs**\n\n```ejs\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title><%= blog.title %></title>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n  </head>\n  <body></body>\n</html>\n```\n\n这里我们只为了演示 express 中处理 404 的情况，用了腾讯公益的 404 页面，刷新一下页面看下效果吧。\n\n前面讲到 express 有一个内置的错误处理逻辑，如果程序出错，会直接将错误栈返回并显示到页面上。如访问：`localhost:3000/posts/xxx/edit` 没有权限编辑的文章页，将会直接在页面中显示错误栈，如下：\n\n```js\nError: 权限不足\n    at /Users/nswbmw/Desktop/myblog/routes/posts.js:95:15\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)\n```\n\n现在我们修改代码，实现复用页面通知。修改 index.js，在 `app.listen` 上面添加如下代码：\n\n**index.js**\n\n```js\napp.use(function (err, req, res, next) {\n  console.error(err)\n  req.flash('error', err.message)\n  res.redirect('/posts')\n})\n```\n\n这里我们实现了将错误信息用页面通知展示的功能，刷新页面将会跳转到主页并显示『权限不足』的红色通知。\n\n现在我们来实现日志功能，日志分为正常请求的日志和错误请求的日志，我们希望实现这两种日志都打印到终端并写入文件。\n\n## winston 和 express-winston\n\n我们使用 [winston](https://www.npmjs.com/package/winston) 和 [express-winston](https://www.npmjs.com/package/express-winston) 记录日志。\n\n新建 logs 目录存放日志文件，修改 index.js，在：\n\n**index.js**\n\n```js\nconst pkg = require('./package')\n```\n\n下引入所需模块：\n\n```js\nconst winston = require('winston')\nconst expressWinston = require('express-winston')\n```\n\n将：\n\n```\n// 路由\nroutes(app)\n```\n\n修改为：\n\n```js\n// 正常请求的日志\napp.use(expressWinston.logger({\n  transports: [\n    new (winston.transports.Console)({\n      json: true,\n      colorize: true\n    }),\n    new winston.transports.File({\n      filename: 'logs/success.log'\n    })\n  ]\n}))\n// 路由\nroutes(app)\n// 错误请求的日志\napp.use(expressWinston.errorLogger({\n  transports: [\n    new winston.transports.Console({\n      json: true,\n      colorize: true\n    }),\n    new winston.transports.File({\n      filename: 'logs/error.log'\n    })\n  ]\n}))\n```\n\n刷新页面看一下终端输出及 logs 下的文件。\n可以看出：winston 将正常请求的日志打印到终端并写入了 `logs/success.log`，将错误请求的日志打印到终端并写入了 `logs/error.log`。\n\n> 注意：记录正常请求日志的中间件要放到 `routes(app)` 之前，记录错误请求日志的中间件要放到 `routes(app)` 之后。\n\n## .gitignore\n\n如果我们想把项目托管到 git 服务器上（如: [GitHub](https://github.com)），而不想把线上配置、本地调试的 logs 以及 node_modules 添加到 git 的版本控制中，这个时候就需要 .gitignore 文件了，git 会读取 .gitignore 并忽略这些文件。在 myblog 下新建 .gitignore 文件，添加如下配置：\n\n**.gitignore**\n\n```\nconfig/*\n!config/default.*\nnpm-debug.log\nnode_modules\ncoverage\n```\n\n需要注意的是，通过设置：\n\n```\nconfig/*\n!config/default.*\n```\n\n这样只有 config/default.js 会加入 git 的版本控制，而 config 目录下的其他配置文件则会被忽略，因为把线上配置加入到 git 是一个不安全的行为，通常你需要本地或者线上环境手动创建 config/production.js，然后添加一些线上的配置（如：mongodb 配置）即可覆盖相应的 default 配置。\n\n> 注意：后面讲到部署到 Heroku 时，因为无法登录到 Heroku 主机，所以可以把以下两行删掉，将 config/production.js 也加入 git 中。\n> \n> ```\n> config/*\n> !config/default.*\n> ```\n\n然后在 public/img 目录下创建 .gitignore：\n\n```\n# Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n```\n\n这样 git 会忽略 public/img 目录下所有上传的头像，而不忽略 public/img 目录。同理，在 logs 目录下创建 .gitignore 忽略日志文件：\n\n```\n# Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n```\n# 测试\n\n## mocha 和 supertest\n\n[mocha](https://www.npmjs.com/package/mocha) 和 [supertest](https://www.npmjs.com/package/supertest) 是常用的测试组合，通常用来测试 restful 的 api 接口，这里我们也可以用来测试我们的博客应用。\n在 myblog 下新建 test 文件夹存放测试文件，以注册为例讲解 mocha 和 supertest 的用法。首先安装所需模块：\n\n```sh\nnpm i mocha supertest --save-dev\n```\n\n修改 package.json，将：\n\n**package.json**\n\n```json\n\"scripts\": {\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n}\n```\n\n修改为：\n\n```json\n\"scripts\": {\n  \"test\": \"mocha test\"\n}\n```\n\n指定执行 test 目录的测试。修改 index.js，将：\n\n**index.js**\n\n```js\n// 监听端口，启动程序\napp.listen(config.port, function () {\n  console.log(`${pkg.name} listening on port ${config.port}`)\n})\n```\n\n修改为:\n\n```js\nif (module.parent) {\n  // 被 require，则导出 app\n  module.exports = app\n} else {\n  // 监听端口，启动程序\n  app.listen(config.port, function () {\n    console.log(`${pkg.name} listening on port ${config.port}`)\n  })\n}\n```\n\n这样做可以实现：直接启动 index.js 则会监听端口启动程序，如果 index.js 被 require 了，则导出 app，通常用于测试。\n\n找一张图片用于测试上传头像，放到 test 目录下，如 avatar.png。新建 test/signup.js，添加如下测试代码：\n\n**test/signup.js**\n\n```js\nconst path = require('path')\nconst assert = require('assert')\nconst request = require('supertest')\nconst app = require('../index')\nconst User = require('../lib/mongo').User\n\nconst testName1 = 'testName1'\nconst testName2 = 'nswbmw'\ndescribe('signup', function () {\n  describe('POST /signup', function () {\n    const agent = request.agent(app)// persist cookie when redirect\n    beforeEach(function (done) {\n      // 创建一个用户\n      User.create({\n        name: testName1,\n        password: '123456',\n        avatar: '',\n        gender: 'x',\n        bio: ''\n      })\n        .exec()\n        .then(function () {\n          done()\n        })\n        .catch(done)\n    })\n\n    afterEach(function (done) {\n      // 删除测试用户\n      User.deleteMany({ name: { $in: [testName1, testName2] } })\n        .exec()\n        .then(function () {\n          done()\n        })\n        .catch(done)\n    })\n\n    after(function (done) {\n      process.exit()\n    })\n\n    // 用户名错误的情况\n    it('wrong name', function (done) {\n      agent\n        .post('/signup')\n        .type('form')\n        .field({ name: '' })\n        .attach('avatar', path.join(__dirname, 'avatar.png'))\n        .redirects()\n        .end(function (err, res) {\n          if (err) return done(err)\n          assert(res.text.match(/名字请限制在 1-10 个字符/))\n          done()\n        })\n    })\n\n    // 性别错误的情况\n    it('wrong gender', function (done) {\n      agent\n        .post('/signup')\n        .type('form')\n        .field({ name: testName2, gender: 'a' })\n        .attach('avatar', path.join(__dirname, 'avatar.png'))\n        .redirects()\n        .end(function (err, res) {\n          if (err) return done(err)\n          assert(res.text.match(/性别只能是 m、f 或 x/))\n          done()\n        })\n    })\n    // 其余的参数测试自行补充\n    // 用户名被占用的情况\n    it('duplicate name', function (done) {\n      agent\n        .post('/signup')\n        .type('form')\n        .field({ name: testName1, gender: 'm', bio: 'noder', password: '123456', repassword: '123456' })\n        .attach('avatar', path.join(__dirname, 'avatar.png'))\n        .redirects()\n        .end(function (err, res) {\n          if (err) return done(err)\n          assert(res.text.match(/用户名已被占用/))\n          done()\n        })\n    })\n\n    // 注册成功的情况\n    it('success', function (done) {\n      agent\n        .post('/signup')\n        .type('form')\n        .field({ name: testName2, gender: 'm', bio: 'noder', password: '123456', repassword: '123456' })\n        .attach('avatar', path.join(__dirname, 'avatar.png'))\n        .redirects()\n        .end(function (err, res) {\n          if (err) return done(err)\n          assert(res.text.match(/注册成功/))\n          done()\n        })\n    })\n  })\n})\n```\n\n此时编辑器会报语法错误（如：describe 未定义等等），修改 .eslintrc.json 如下：\n\n```json\n{\n  \"extends\": \"standard\",\n  \"globals\": {\n    \"describe\": true,\n    \"beforeEach\": true,\n    \"afterEach\": true,\n    \"after\": true,\n    \"it\": true\n  }\n}\n```\n\n这样，eslint 会忽略 globals 中变量未定义的警告。运行 `npm test` 看看效果吧，其余的测试请读者自行完成。\n\n## 测试覆盖率\n\n我们写测试肯定想覆盖所有的情况（包括各种出错的情况及正确时的情况），但光靠想需要写哪些测试是不行的，总也会有疏漏，最简单的办法就是可以直观的看出测试是否覆盖了所有的代码，这就是测试覆盖率，即被测试覆盖到的代码行数占总代码行数的比例。\n\n> 注意：即使测试覆盖率达到 100% 也不能说明你的测试覆盖了所有的情况，只能说明基本覆盖了所有的情况。\n\n[istanbul](https://www.npmjs.com/package/istanbul) 是一个常用的生成测试覆盖率的库，它会将测试的结果报告生成 html 页面，并放到项目根目录的 coverage 目录下。首先安装 istanbul:\n\n```\nnpm i istanbul --save-dev\n```\n\n配置 istanbul 很简单，将 package.json 中：\n\n**package.json**\n\n```json\n\"scripts\": {\n  \"test\": \"mocha test\"\n}\n```\n\n修改为：\n\n```json\n\"scripts\": {\n  \"test\": \"istanbul cover _mocha\"\n}\n```\n\n**注意**：Windows 下需要改成 `istanbul cover node_modules/mocha/bin/_mocha`。\n\n即可将 istanbul 和 mocha 结合使用，运行 `npm test` 终端会打印：\n\n![](/images/4.14.1.png)\n\n打开 myblog/coverage/Icov-report/index.html，如下所示：\n\n![](/images/4.14.2.png)\n\n可以点进去查看某个代码文件具体的覆盖率，如下所示：\n\n![](/images/4.14.3.png)\n\n红色的行表示测试没有覆盖到，因为我们只写了 name 和 gender 的测试。\n\n# 部署\n\n## 申请 MLab\n\n[MLab](https://mlab.com) (前身是 MongoLab) 是一个 mongodb 云数据库提供商，我们可以选择 500MB 空间的免费套餐用来测试。注册成功后，点击右上角的 `Create New` 创建一个数据库（如: myblog），成功后点击进入到该数据库详情页，注意页面中有一行黄色的警告：\n\n```\nA database user is required to connect to this database. To create one now, visit the 'Users' tab and click the 'Add database user' button.\n```\n\n每个数据库至少需要一个 user，所以我们点击 Users 下的 `Add database user` 创建一个用户。\n\n> 注意：不要选中 `Make read-only`，因为我们有写数据库的操作。\n\n最后分配给我们的类似下面的 mongodb url：\n\n```\nmongodb://<dbuser>:<dbpassword>@ds139327.mlab.com:39327/myblog\n```\n\n如我创建的用户名和密码都为 myblog 的用户，新建 config/production.js，添加如下代码：\n\n**config/production.js**\n\n```js\nmodule.exports = {\n  mongodb: 'mongodb://myblog:myblog@ds139327.mlab.com:39327/myblog'\n}\n```\n\n停止程序，然后以 production 配置启动程序:\n\n```sh\nnpm i cross-env --save-dev # 本地安装 cross-env\nnpm i cross-env -g # 全局安装 cross-env\ncross-env NODE_ENV=production supervisor index\n```\n\n> 注意：cross-env 用来兼容 Windows 系统和 Linux/Mac 系统设置环境变量的差异。\n\n## pm2\n\n当我们的博客要部署到线上服务器时，不能单纯的靠 `node index` 或者 `supervisor index` 来启动了，因为我们断掉 SSH 连接后服务就终止了，这时我们就需要像 [pm2](https://www.npmjs.com/package/pm2) 或者 [forever](https://www.npmjs.com/package/forever) 这样的进程管理工具了。pm2 是 Node.js 下的生产环境进程管理工具，就是我们常说的进程守护工具，可以用来在生产环境中进行自动重启、日志记录、错误预警等等。以 pm2 为例，全局安装 pm2：\n\n```sh\nnpm i pm2 -g\n```\n\n修改 package.json，添加 start 的命令：\n\n**package.json**\n\n```json\n\"scripts\": {\n  \"test\": \"istanbul cover _mocha\",\n  \"start\": \"cross-env NODE_ENV=production pm2 start index.js --name 'myblog'\"\n}\n```\n\n然后运行 `npm start` 通过 pm2 启动程序，如下图所示 ：\n\n![](/images/4.15.1.png)\n\npm2 常用命令:\n\n1. `pm2 start/stop`: 启动/停止程序\n2. `pm2 reload/restart [id|name]`: 重启程序\n3. `pm2 logs [id|name]`: 查看日志\n4. `pm2 l/list`: 列出程序列表\n\n更多命令请使用 `pm2 -h` 查看。\n\n## 部署到 Heroku\n\n[Heroku](https://www.heroku.com) 是一个支持多种编程语言的云服务平台，Heroku 也提供免费的基础套餐供开发者测试使用。现在，我们将论坛部署到 Heroku。\n\n> 注意：新版 heroku 会有填写信用卡的步骤，如果没有信用卡请跳过本节。\n\n首先，需要到 [https://toolbelt.heroku.com/](https://toolbelt.heroku.com/) 下载安装 Heroku 的命令行工具包 toolbelt。然后登录（如果没有账号，请注册）到 Heroku 的 Dashboard，点击右上角 New -> Create New App 创建一个应用。创建成功后运行：\n\n```sh\nheroku login\n```\n\n填写正确的 email 和 password 验证通过后，本地会产生一个 SSH public key。在部署到 Heroku 之前，我们需要对代码进行简单的修改。如下：\n\n1.删掉 .gitignore 中：\n```\nconfig/*\n!config/default.*\n```\n因为我们无法登录到 Heroku 主机创建 production 配置文件，所以这里将 production 配置也上传到 Heroku。\n\n2.打开 index.js，将 `app.listen` 修改为：\n```js\nconst port = process.env.PORT || config.port\napp.listen(port, function () {\n  console.log(`${pkg.name} listening on port ${port}`)\n})\n```\n因为 Heroku 会动态分配端口（通过环境变量 PORT 指定），所以不能用配置文件里写死的端口。\n\n3.修改 package.json，在 scripts 添加：\n\n```json\n\"heroku\": \"NODE_ENV=production node index\"\n```\n\n在根目录下新建 Procfile 文件，添加如下内容：\n```\nweb: npm run heroku\n```\nProcfile 文件告诉 Heroku 该使用什么命令启动一个 web 服务。更多信息见：[https://devcenter.heroku.com/articles/getting-started-with-nodejs](https://devcenter.heroku.com/articles/getting-started-with-nodejs)。\n\n然后输入以下命令：\n\n```sh\ngit init\nheroku git:remote -a 你的应用名称\ngit add .\ngit commit -am \"init\"\ngit push heroku master\n```\n\n稍后，我们的论坛就部署成功了。使用：\n\n```sh\nheroku open\n```\n\n打开应用主页。如果出现 \"Application error\"，使用：\n\n```sh\nheroku logs\n```\n查看日志，调试完后 commit 并 push 到 heroku重新部署。\n\n## 部署到 UCloud\n\n### 创建主机\n\n1. 注册 UCloud\n2. 点击左侧的 `云主机`，然后点击 `创建主机`，统统选择最低配置\n3. 右侧付费方式选择 `按时`（每小时），点击 `立即购买`\n4. 在支付确认页面，点击 `确认支付`\n\n购买成功后回到主机管理列表，如下所示：\n\n![](/images/4.15.2.png)\n\n> 注意：下面所有的 ip 都替换为你自己的外网 ip。\n\n### 环境搭建与部署\n\n修改 config/production.js，将 port 修改为 80 端口：\n\n**config/production.js**\n\n```js\nmodule.exports = {\n  port: 80,\n  mongodb: 'mongodb://myblog:myblog@ds139327.mlab.com:39327/myblog'\n}\n```\n\n登录主机，用刚才设置的密码：\n\n```sh\nssh root@106.75.47.229\n```\n\n因为是 CentOS 系统，所以我选择使用 yum 安装，而不是下载源码编译安装：\n\n```sh\nyum install git #安装git\nyum install nodejs #安装 Node.js\nyum install npm #安装 npm\n\nnpm i npm -g #升级 npm\nnpm i pm2 -g #安装 pm2\nnpm i n -g #安装 n\nn v8.9.1 #安装 v8.9.1 版本的 Node.js\nn use 8.9.1 #使用 v8.9.1 版本的 Node.js\nnode -v\n```\n> 注意：如果 `node -v` 显示的不是 8.9.1，则断开 ssh，重新登录主机再试试。\n\n此时应该在 `/root` 目录下，运行以下命令：\n```sh\ngit clone https://github.com/nswbmw/N-blog.git myblog #或在本机 myblog 目录下运行 rsync -av --exclude=\"node_modules\" ./ root@106.75.47.229:/root/myblog\ncd myblog\nnpm i\nnpm start\npm2 logs\n```\n> 注意：如果不想用 git 的形式将代码拉到云主机上，可以用 rsync 将本地的代码同步到你的 UCloud 主机上，如上所示。\n\n最后，访问你的公网 ip 地址试试吧，如下所示：\n\n![](/images/4.15.3.png)\n\n> 小提示：因为我们选择的按时付费套餐，测试完成后，可在主机管理页面选择关闭主机，节约费用。\n\n## 部署到阿里云\n\n### 创建主机\n\n1. 注册/登录\n2. 充值 100（因为我们选择『按量付费』，阿里云要求最低账户余额 >= 100）\n3. 进入『云服务器 ECS』\n4. 点击『创建实例』\n\n进入创建实例页面，按下图选择配置：\n\n![](/images/4.15.4.png)\n\n需要注意几点：\n\n1. 计费方式：按量付费\n2. 公网 ip 地址：分配\n3. 安全组：选中开启 80 端口\n4. 镜像：Ubuntu 16.04 64位\n\n点击『开通进入下一页』，选中：\n\n![](/images/4.15.5.png)\n\n> 注意：这里我们只是演示，所以自动释放时间只设置了几个小时\n\n点击『去开通』创建成功，然后点击提示中的『管理控制台』进入 ECS 管理页，刚才创建的机器需要等待几分钟才会初始化成功。成功后如下所示：\n\n![](/images/4.15.6.png)\n\n### 环境搭建\n\n复制创建的机器的公网 ip 地址，运行：\n\n```sh\nssh root@39.106.134.66\n```\n\n输入刚才设置的密码登录远程主机。\n\n#### 安装 Node.js\n\n我们下载编译好的 Node.js 压缩包，解压然后使用软连接。\n\n```sh\nwget https://nodejs.org/dist/v8.9.1/node-v8.9.1-linux-x64.tar.xz\ntar -xvf node-v8.9.1-linux-x64.tar.xz\nmv node-v8.9.1-linux-x64 nodejs\nln -s ~/nodejs/bin/* /usr/local/bin/\nnode -v\nnpm -v\n```\n\n#### 安装 MongoDB\n\n```sh\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz\ntar -xvf mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz\nmv mongodb-linux-x86_64-ubuntu1604-3.4.10 mongodb\nln -s ~/mongodb/bin/* /usr/local/bin/\nmongod --version\nmongo --version\nmkdir mongodb/data\nmongod --dbpath=mongodb/data &\n```\n\n#### 安装 Git\n\n```sh\napt-get update\napt-get install git\ngit clone https://github.com/nswbmw/N-blog.git #或者你的 GitHub blog 地址\ncd N-blog\nnpm i\nvim config/default.js #修改端口 3000->80\nnode index\n```\n\n此时，浏览器中访问你的机器的公网 ip 试试吧。\n\n#### 使用 PM2 启动\n\n```sh\nnpm i pm2 -g\nln -s ~/nodejs/bin/* /usr/local/bin/\npm2 start index.js --name=\"myblog\"\n```\n\n这里我们使用 pm2 启动博客，所以关掉终端后博客仍然在运行。\n\n","slug":"使用-Express-MongoDB-搭建多人博客","published":1,"updated":"2019-08-17T12:32:39.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm6p0018nw9wgj4a983h","content":"<p><a href=\"https://github.com/nswbmw\" target=\"_blank\" rel=\"noopener\">转自 https://github.com/nswbmw</a></p>\n<h1 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h1><h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>有三种方式安装 Node.js：一是通过安装包安装，二是通过源码编译安装，三是在 Linux 下可以通过 yum|apt-get 安装，在 Mac 下可以通过 <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> 安装。对于 Windows 和 Mac 用户，推荐使用安装包安装，Linux 用户推荐使用源码编译安装。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Windows-和-Mac-安装：\"><a href=\"#Windows-和-Mac-安装：\" class=\"headerlink\" title=\"Windows 和 Mac 安装：\"></a>Windows 和 Mac 安装：</h3><h4 id=\"第一步：\"><a href=\"#第一步：\" class=\"headerlink\" title=\"第一步：\"></a>第一步：</h4><p>打开 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js 官网</a>，可以看到以下两个下载选项：</p>\n<p><img src=\"/images/1.1.1.png\" alt></p>\n<p>左边的是 LTS 版，用过 ubuntu 的同学可能比较熟悉，即长期支持版本，大多数人用这个就可以了。右边是最新版，支持最新的语言特性（比如对 ES6 的支持更全面），想尝试新特性的开发者可以安装这个版本。我们选择左边的 v6.9.1 LTS 点击下载。</p>\n<blockquote>\n<p>小提示：从 <a href=\"http://node.green\" target=\"_blank\" rel=\"noopener\">http://node.green</a> 上可以看到 Node.js 各个版本对 ES6 的支持情况。</p>\n</blockquote>\n<h4 id=\"第二步：\"><a href=\"#第二步：\" class=\"headerlink\" title=\"第二步：\"></a>第二步：</h4><p>安装 Node.js，这个没什么好说的，一直点击 <code>继续</code> 即可。</p>\n<p><img src=\"/images/1.1.2.png\" alt></p>\n<h4 id=\"第三步：\"><a href=\"#第三步：\" class=\"headerlink\" title=\"第三步：\"></a>第三步：</h4><p>提示安装成功后，打开终端输入以下命令，可以看到 node 和 npm 都已经安装好了：</p>\n<p><img src=\"/images/1.1.3.png\" alt></p>\n<h3 id=\"Linux-安装：\"><a href=\"#Linux-安装：\" class=\"headerlink\" title=\"Linux 安装：\"></a>Linux 安装：</h3><p>Linux 用户可通过源码编译安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://nodejs.org/dist/v6.9.1/node-v6.9.1.tar.gz</span><br><span class=\"line\">tar -xzvf node-v6.9.1.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> node-v6.9.1</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: 如果编译过程报错，可能是缺少某些依赖包。因为报错内容不尽相同，请读者自行求助搜索引擎或 <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>。</p>\n</blockquote>\n<h2 id=\"n-和-nvm\"><a href=\"#n-和-nvm\" class=\"headerlink\" title=\"n 和 nvm\"></a>n 和 nvm</h2><p>通常我们使用稳定的 LTS 版本的 Node.js 即可，但有的情况下我们又想尝试一下新的特性，我们总不能来回安装不同版本的 Node.js 吧，这个时候我们就需要 <a href=\"https://github.com/tj/n\" target=\"_blank\" rel=\"noopener\">n</a> 或者 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a> 了。n 和 nvm 是两个常用的 Node.js 版本管理工具，关于 n 和 nvm 的使用以及区别，<a href=\"http://taobaofed.org/blog/2015/11/17/nvm-or-n/\" target=\"_blank\" rel=\"noopener\">这篇文章</a> 讲得特别详细，这里不再赘述。</p>\n<h2 id=\"nrm\"><a href=\"#nrm\" class=\"headerlink\" title=\"nrm\"></a>nrm</h2><p><a href=\"https://github.com/Pana/nrm\" target=\"_blank\" rel=\"noopener\">nrm</a> 是一个管理 npm 源的工具。用过 ruby 和 gem 的同学会比较熟悉，通常我们会把 gem 源切到国内的淘宝镜像，这样在安装和更新一些包的时候比较快。nrm 同理，用来切换官方 npm 源和国内的 npm 源（如: <a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">cnpm</a>），当然也可以用来切换官方 npm 源和公司私有 npm 源。</p>\n<p>全局安装 nrm:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i nrm -g</span><br></pre></td></tr></table></figure>\n\n<p>查看当前 nrm 内置的几个 npm 源的地址：</p>\n<p><img src=\"/images/1.1.4.png\" alt></p>\n<p>切换到 cnpm：</p>\n<p><img src=\"/images/1.1.5.png\" alt></p>\n<h2 id=\"安装与启动-MongoDB\"><a href=\"#安装与启动-MongoDB\" class=\"headerlink\" title=\"安装与启动 MongoDB\"></a>安装与启动 MongoDB</h2><ul>\n<li>Windows 用户向导：<a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/</a></li>\n<li>Linux 用户向导：<a href=\"https://docs.mongodb.com/manual/administration/install-on-linux/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/administration/install-on-linux/</a></li>\n<li>Mac 用户向导：<a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/</a></li>\n</ul>\n<h3 id=\"Robomongo-和-Mongochef\"><a href=\"#Robomongo-和-Mongochef\" class=\"headerlink\" title=\"Robomongo 和 Mongochef\"></a>Robomongo 和 Mongochef</h3><h4 id=\"Robomongo\"><a href=\"#Robomongo\" class=\"headerlink\" title=\"Robomongo\"></a>Robomongo</h4><p><a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"noopener\">Robomongo</a> 是一个基于 Shell 的跨平台开源 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac，嵌入了 JavaScript 引擎和 MongoDB mongo，只要你会使用 mongo shell，你就会使用 Robomongo，它还提供了语法高亮、自动补全、差别视图等。</p>\n<p><a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">Robomongo 下载地址</a></p>\n<p>下载并安装成功后点击左上角的 <code>Create</code> 创建一个连接，给该连接起个名字如: <code>localhost</code>，使用默认地址（localhost）和端口（27017）即可，点击 <code>Save</code> 保存。</p>\n<p><img src=\"/images/1.2.1.png\" alt></p>\n<p>双击 <code>localhost</code> 连接到 MongoDB 并进入交互界面，尝试插入一条数据并查询出来，如下所示:</p>\n<p><img src=\"/images/1.2.2.png\" alt></p>\n<h4 id=\"MongoChef\"><a href=\"#MongoChef\" class=\"headerlink\" title=\"MongoChef\"></a>MongoChef</h4><p><a href=\"http://3t.io/mongochef/\" target=\"_blank\" rel=\"noopener\">MongoChef</a> 是另一款强大的 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac。</p>\n<p><a href=\"http://3t.io/mongochef/#mongochef-download-compare\" target=\"_blank\" rel=\"noopener\">MongoChef 下载地址</a>，我们选择左侧的非商业用途的免费版下载。</p>\n<p><img src=\"/images/1.2.3.png\" alt></p>\n<p>安装成功后跟 Robomongo 一样，也需要创建一个新的连接的配置，成功后双击进入到 MongoChef 主页面，如下所示:</p>\n<p><img src=\"/images/1.2.4.png\" alt></p>\n<p>还可以使用 shell 模式:</p>\n<p><img src=\"/images/1.2.5.png\" alt></p>\n<blockquote>\n<p>小提示: MongoChef 相较于 Robomongo 更强大一些，但 Robomongo 比较轻量也能满足大部分的常规需求，所以哪一个适合自己还需读者自行尝试。</p>\n</blockquote>\n<h2 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h2><p>require 用来加载一个文件的代码，关于 require 的机制这里不展开讲解，请仔细阅读 <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<p>简单概括以下几点:</p>\n<ul>\n<li>require 可加载 .js、.json 和 .node 后缀的文件</li>\n<li>require 的过程是同步的，所以这样是错误的:</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">  module.exports = &#123; a: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\">&#125;, 0)</span><br></pre></td></tr></table></figure>\n\n<p>require 这个文件得到的是空对象 <code>{}</code></p>\n<ul>\n<li>require 目录的机制是:<ul>\n<li>如果目录下有 package.json 并指定了 main 字段，则用之</li>\n<li>如果不存在 package.json，则依次尝试加载目录下的 index.js 和 index.node</li>\n</ul>\n</li>\n<li>require 过的文件会加载到缓存，所以多次 require 同一个文件（模块）不会重复加载</li>\n<li>判断是否是程序的入口文件有两种方式:<ul>\n<li>require.main === module（推荐）</li>\n<li>module.parent === null</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h2><p>循环引用（或循环依赖）简单点来说就是 a 文件 require 了 b 文件，然后 b 文件又反过来 require 了 a 文件。我们用 a-&gt;b 代表 b require 了 a。</p>\n<p>简单的情况:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a-&gt;b</span><br><span class=\"line\">b-&gt;a</span><br></pre></td></tr></table></figure>\n\n<p>复杂点的情况:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a-&gt;b</span><br><span class=\"line\">b-&gt;c</span><br><span class=\"line\">c-&gt;a</span><br></pre></td></tr></table></figure>\n\n<p>循环引用并不会报错，导致的结果是 require 的结果是空对象 <code>{}</code>，原因是 b require 了 a，a 又去 require 了 b，此时 b 还没初始化好，所以只能拿到初始值 <code>{}</code>。当产生循环引用时一般有两种方法解决：</p>\n<ol>\n<li>通过分离共用的代码到另一个文件解决，如上面简单的情况，可拆出共用的代码到 c 中，如下:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c-&gt;a</span><br><span class=\"line\">c-&gt;b</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>不在最外层 require，在用到的地方 require，通常在函数的内部</li>\n</ol>\n<p>总的来说，循环依赖的陷阱并不大容易出现，但一旦出现了，对于新手来说还真不好定位。它的存在给我们提了个醒，要时刻注意你项目的依赖关系不要过于复杂，哪天你发现一个你明明已经 exports 了的方法报 <code>undefined is not a function</code>，我们就该提醒一下自己：哦，也许是它来了。</p>\n<p>官方示例: <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<p>require 用来加载代码，而 exports 和 module.exports 则用来导出代码。</p>\n<p>很多新手可能会迷惑于 exports 和 module.exports 的区别，为了更好的理解 exports 和 module.exports 的关系，我们先来巩固下 js 的基础。示例：</p>\n<p><strong>test.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">b.name = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123; <span class=\"attr\">name</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n\n<p>运行 test.js 结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: 1 &#125;</span><br><span class=\"line\">&#123; name: 1 &#125;</span><br><span class=\"line\">&#123; name: 2 &#125;</span><br><span class=\"line\">&#123; name: 2 &#125;</span><br><span class=\"line\">&#123; name: 2 &#125;</span><br><span class=\"line\">&#123; name: 3 &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。</p>\n<p>明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：</p>\n<ol>\n<li>module.exports 初始值为一个空对象 {}</li>\n<li>exports 是指向的 module.exports 的引用</li>\n<li>require() 返回的是 module.exports 而不是 exports</li>\n</ol>\n<p>Node.js 官方文档的截图证实了我们的观点:</p>\n<p><img src=\"/images/2.2.1.png\" alt></p>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><p>exports = module.exports = {…}</p>\n<p>我们经常看到这样的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports = &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码等价于:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;...&#125;</span><br><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure>\n\n<p>原理很简单：module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，那么通过 exports = module.exports 让 exports 重新指向 module.exports。</p>\n<blockquote>\n<p>小提示：ES6 的 import 和 export 不在本文的讲解范围，有兴趣的读者可以去学习阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">《ECMAScript6 入门》</a>。</p>\n</blockquote>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><p>网上已经有许多关于 Promise 的资料了，这里不在赘述。以下 4 个链接供读者学习：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a> （基础）</li>\n<li><a href=\"http://liubin.org/promises-book/\" target=\"_blank\" rel=\"noopener\">http://liubin.org/promises-book/</a> （开源 Promise 迷你书）</li>\n<li><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\" target=\"_blank\" rel=\"noopener\">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a> （进阶）</li>\n<li><a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">https://promisesaplus.com/</a> （官方定义规范）</li>\n</ol>\n<p>Promise 用于异步流程控制，生成器与 yield 也能实现流程控制（基于 co），但不在本教程讲解范围内，读者可参考我的另一部教程 <a href=\"https://github.com/nswbmw/N-club\" target=\"_blank\" rel=\"noopener\">N-club</a>。async/await 结合 Promise 也可以实现流程控制，有兴趣请查阅 <a href=\"http://es6.ruanyifeng.com/#docs/async#async函数\" target=\"_blank\" rel=\"noopener\">《ECMAScript6 入门》</a>。</p>\n<h2 id=\"深入-Promise\"><a href=\"#深入-Promise\" class=\"headerlink\" title=\"深入 Promise\"></a>深入 Promise</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/30797777\" target=\"_blank\" rel=\"noopener\">Promise 必知必会（十道题）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25178630\" target=\"_blank\" rel=\"noopener\">深入 Promise(一)——Promise 实现详解</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25198178\" target=\"_blank\" rel=\"noopener\">深入 Promise(二)——进击的 Promise</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25199781\" target=\"_blank\" rel=\"noopener\">深入 Promise(三)——命名 Promise</a></li>\n</ul>\n<p>环境变量不属于 Node.js 的知识范畴，只不过我们在开发 Node.js 应用时经常与环境变量打交道，所以这里简单介绍下。</p>\n<p>环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数。在 Mac 和 Linux 的终端直接输入 env，会列出当前的环境变量，如：USER=xxx。简单来讲，环境变量就是传递参数给运行程序的。</p>\n<p>在 Node.js 中，我们经常这么用:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=<span class=\"built_in\">test</span> node app</span><br></pre></td></tr></table></figure>\n\n<p>通过以上命令启动程序，指定当前环境变量 <code>NODE_ENV</code> 的值为 test，那么在 app.js 中可通过 <code>process.env</code> 来获取环境变量:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(process.env.NODE_ENV) //test</span><br></pre></td></tr></table></figure>\n\n<p>另一个常见的例子是使用 <a href=\"https://www.npmjs.com/package/debug\" target=\"_blank\" rel=\"noopener\">debug</a> 模块时:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG=* node app</span><br></pre></td></tr></table></figure>\n\n<p>Windows 用户需要首先设置环境变量，然后再执行程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> DEBUG=*</span><br><span class=\"line\"><span class=\"built_in\">set</span> NODE_ENV=<span class=\"built_in\">test</span></span><br><span class=\"line\">node app</span><br></pre></td></tr></table></figure>\n\n<p>或者使用 <a href=\"https://www.npmjs.com/package/cross-env\" target=\"_blank\" rel=\"noopener\">cross-env</a>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cross-env -g</span><br></pre></td></tr></table></figure>\n\n<p>使用方式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cross-env NODE_ENV=<span class=\"built_in\">test</span> node app</span><br></pre></td></tr></table></figure>\n\n<p>package.json 对于 Node.js 应用来说是一个不可或缺的文件，它存储了该 Node.js 应用的名字、版本、描述、作者、入口文件、脚本、版权等等信息。npm 官网有 package.json 每个字段的详细介绍：<a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/files/package.json</a>。</p>\n<h2 id=\"semver\"><a href=\"#semver\" class=\"headerlink\" title=\"semver\"></a>semver</h2><p>语义化版本（semver）即 dependencies、devDependencies 和 peerDependencies 里的如：<code>&quot;co&quot;: &quot;^4.6.0&quot;</code>。</p>\n<p>semver 格式：<code>主版本号.次版本号.修订号</code>。版本号递增规则如下：</p>\n<ul>\n<li><code>主版本号</code>：做了不兼容的 API 修改</li>\n<li><code>次版本号</code>：做了向下兼容的功能性新增</li>\n<li><code>修订号</code>：做了向下兼容的 bug 修正</li>\n</ul>\n<p>更多阅读：</p>\n<ol>\n<li><a href=\"http://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"noopener\">http://semver.org/lang/zh-CN/</a></li>\n<li><a href=\"http://taobaofed.org/blog/2016/08/04/instructions-of-semver/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2016/08/04/instructions-of-semver/</a></li>\n</ol>\n<h1 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h1><p>作为 Node.js 的开发者，我们在发布 npm 模块的时候一定要遵守语义化版本的命名规则，即：有 breaking change 发大版本，有新增的功能发小版本，有小的 bug 修复或优化则发修订版本。</p>\n<h2 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h2><p>使用 <code>npm init</code> 初始化一个空项目是一个好的习惯，即使你对 package.json 及其他属性非常熟悉，<code>npm init</code> 也是你开始写新的 Node.js 应用或模块的一个快捷的办法。<code>npm init</code> 有智能的默认选项，比如从根目录名称推断模块名称，通过 <code>~/.npmrc</code> 读取你的信息，用你的 Git 设置来确定 repository 等等。</p>\n<h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><p><code>npm install</code> 是我们最常用的 npm 命令之一，因此我们需要好好了解下这个命令。终端输入 <code>npm install -h</code> 查看使用方式:</p>\n<p><img src=\"/images/2.6.1.png\" alt></p>\n<p>可以看出：我们通过 <code>npm install</code> 可以安装 npm 上发布的某个版本、某个 tag、某个版本区间的模块，甚至可以安装本地目录、压缩包和 git/github 的库作为依赖。</p>\n<blockquote>\n<p>小提示: <code>npm i</code> 是 <code>npm install</code> 的简写，建议使用 <code>npm i</code>。</p>\n</blockquote>\n<p>直接使用 <code>npm i</code> 安装的模块是不会写入 package.json 的 dependencies (或 devDependencies)，需要额外加个参数:</p>\n<ol>\n<li><code>npm i express --save</code>/<code>npm i express -S</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;^4.14.0&quot;</code> 写入 dependencies )</li>\n<li><code>npm i express --save-dev</code>/<code>npm i express -D</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;^4.14.0&quot;</code> 写入 devDependencies )</li>\n<li><code>npm i express --save --save-exact</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;4.14.0&quot;</code> 写入 dependencies )</li>\n</ol>\n<p>第三种方式将固定版本号写入 dependencies，建议线上的 Node.js 应用都采取这种锁定版本号的方式，因为你不可能保证第三方模块下个小版本是没有验证 bug 的，即使是很流行的模块。拿 Mongoose 来说，Mongoose 4.1.4 引入了一个 bug 导致调用一个文档 entry 的 remove 会删除整个集合的文档，见：<a href=\"https://github.com/Automattic/mongoose/blob/master/History.md#415--2015-09-01\" target=\"_blank\" rel=\"noopener\">https://github.com/Automattic/mongoose/blob/master/History.md#415–2015-09-01</a>。</p>\n<blockquote>\n<p>后面会介绍更安全的 <code>npm shrinkwrap</code> 的用法。</p>\n</blockquote>\n<p>运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> save-exact <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>这样每次 <code>npm i xxx --save</code> 的时候会锁定依赖的版本号，相当于加了 <code>--save-exact</code> 参数。</p>\n<blockquote>\n<p>小提示：<code>npm config set</code> 命令将配置写到了 ~/.npmrc 文件，运行 <code>npm config list</code> 查看。</p>\n</blockquote>\n<h2 id=\"npm-scripts\"><a href=\"#npm-scripts\" class=\"headerlink\" title=\"npm scripts\"></a>npm scripts</h2><p>npm 提供了灵活而强大的 scripts 功能，见 <a href=\"https://docs.npmjs.com/misc/scripts\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<p>npm 的 scripts 有一些内置的缩写命令，如常用的：</p>\n<ul>\n<li><code>npm start</code> 等价于 <code>npm run start</code></li>\n<li><code>npm test</code> 等价于 <code>npm run test</code></li>\n</ul>\n<h2 id=\"npm-shrinkwrap\"><a href=\"#npm-shrinkwrap\" class=\"headerlink\" title=\"npm shrinkwrap\"></a>npm shrinkwrap</h2><p>前面说过要锁定依赖的版本，但这并不能完全防止意外情况的发生，因为锁定的只是最外一层的依赖，而里层依赖的模块的 package.json 有可能写的是 <code>&quot;mongoose&quot;: &quot;*&quot;</code>。为了彻底锁定依赖的版本，让你的应用在任何机器上安装的都是同样版本的模块（不管嵌套多少层），通过运行 <code>npm shrinkwrap</code>，会在当前目录下产生一个 <code>npm-shrinkwrap.json</code>，里面包含了通过 node_modules 计算出的模块的依赖树及版本。上面的截图也显示：只要目录下有 npm-shrinkwrap.json 则运行 <code>npm install</code> 的时候会优先使用 npm-shrinkwrap.json 进行安装，没有则使用 package.json 进行安装。</p>\n<p>更多阅读：</p>\n<ol>\n<li><a href=\"https://docs.npmjs.com/cli/shrinkwrap\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/cli/shrinkwrap</a></li>\n<li><a href=\"http://tech.meituan.com/npm-shrinkwrap.html\" target=\"_blank\" rel=\"noopener\">http://tech.meituan.com/npm-shrinkwrap.html</a></li>\n</ol>\n<blockquote>\n<p>注意: 如果 node_modules 下存在某个模块（如直接通过 <code>npm install xxx</code> 安装的）而 package.json 中没有，运行 <code>npm shrinkwrap</code> 则会报错。另外，<code>npm shrinkwrap</code> 只会生成 dependencies 的依赖，不会生成 devDependencies 的。</p>\n</blockquote>\n<h1 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h1><p>首先，我们新建一个目录 myblog，在该目录下运行 <code>npm init</code> 生成一个 package.json，如下所示：</p>\n<p><img src=\"/images/3.1.1.png\" alt></p>\n<blockquote>\n<p>注意：括号里的是默认值，如果使用默认值则直接回车即可，否则输入自定义内容后回车。</p>\n</blockquote>\n<p>然后安装 express 并写入 package.json：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express@4.14.0 --save</span><br></pre></td></tr></table></figure>\n\n<p>新建 index.js，添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, express\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码的意思是：生成一个 express 实例 app，挂载了一个根路由控制器，然后监听 3000 端口并启动程序。运行 <code>node index</code>，打开浏览器访问 <code>localhost:3000</code> 时，页面应显示 hello, express。</p>\n<p>这是最简单的一个使用 express 的例子，后面会介绍路由及模板的使用。</p>\n<h2 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a>supervisor</h2><p>在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 <a href=\"https://www.npmjs.com/package/supervisor\" target=\"_blank\" rel=\"noopener\">supervisor</a> 可以解决这个繁琐的问题，全局安装 supervisor：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g supervisor</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>supervisor index</code> 启动程序，如下所示：</p>\n<p><img src=\"/images/3.1.2.png\" alt></p>\n<p>supervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。</p>\n<p>前面我们只是挂载了根路径的路由控制器，现在修改 index.js 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, express\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/users/:name\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, \"</span> + req.params.name);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码的意思是：当访问根路径时，依然返回 hello, express，当访问如 <code>localhost:3000/users/nswbmw</code> 路径时，返回 hello, nswbmw。路径中 <code>:name</code> 起了占位符的作用，这个占位符的名字是 name，可以通过 <code>req.params.name</code> 取到实际的值。</p>\n<blockquote>\n<p>小提示：express 使用了 <a href=\"https://www.npmjs.com/package/path-to-regexp\" target=\"_blank\" rel=\"noopener\">path-to-regexp</a> 模块实现的路由匹配。</p>\n</blockquote>\n<p>不难看出：req 包含了请求来的相关信息，res 则用来返回该请求的响应，更多请查阅 <a href=\"http://expressjs.com/en/4x/api.html\" target=\"_blank\" rel=\"noopener\">express 官方文档</a>。下面介绍几个常用的 req 的属性：</p>\n<ul>\n<li><code>req.query</code>: 解析后的 url 中的 querystring，如 <code>?name=haha</code>，req.query 的值为 <code>{name: &#39;haha&#39;}</code></li>\n<li><code>req.params</code>: 解析 url 中的占位符，如 <code>/:name</code>，访问 /haha，req.params 的值为 <code>{name: &#39;haha&#39;}</code></li>\n<li><code>req.body</code>: 解析后请求体，需使用相关的模块，如 <a href=\"https://www.npmjs.com/package/body-parser\" target=\"_blank\" rel=\"noopener\">body-parser</a>，请求体为 <code>{&quot;name&quot;: &quot;haha&quot;}</code>，则 req.body 为 <code>{name: &#39;haha&#39;}</code></li>\n</ul>\n<h2 id=\"express-Router\"><a href=\"#express-Router\" class=\"headerlink\" title=\"express.Router\"></a>express.Router</h2><p>上面只是很简单的路由使用的例子（将所有路由控制函数都放到了 index.js），但在实际开发中通常有几十甚至上百的路由，都写在 index.js 既臃肿又不好维护，这时可以使用 express.Router 实现更优雅的路由解决方案。在 myblog 目录下创建空文件夹 routes，在 routes 目录下创建 index.js 和 users.js。最后代码如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> indexRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes/index\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> userRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes/users\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">\"/\"</span>, indexRouter);</span><br><span class=\"line\">app.use(<span class=\"string\">\"/users\"</span>, userRouter);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, express\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/users.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:name\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, \"</span> + req.params.name);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码的意思是：我们将 <code>/</code> 和 <code>/users/:name</code> 的路由分别放到了 routes/index.js 和 routes/users.js 中，每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 <code>app.use</code> 挂载到不同的路径。这两种代码实现了相同的功能，但在实际开发中推荐使用 express.Router 将不同的路由分离到不同的路由文件中。</p>\n<p>更多 express.Router 的用法见 <a href=\"http://expressjs.com/en/4x/api.html#router\" target=\"_blank\" rel=\"noopener\">express 官方文档</a>。</p>\n<p>模板引擎（Template Engine）是一个将页面模板和数据结合起来生成 html 的工具。上例中，我们只是返回纯文本给浏览器，现在我们修改代码返回一个 html 页面给浏览器。</p>\n<h2 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h2><p>模板引擎有很多，<a href=\"https://www.npmjs.com/package/ejs\" target=\"_blank\" rel=\"noopener\">ejs</a> 是其中一种，因为它使用起来十分简单，而且与 express 集成良好，所以我们使用 ejs。安装 ejs：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i ejs --save</span><br></pre></td></tr></table></figure>\n\n<p>修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> indexRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes/index\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> userRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes/users\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.set(<span class=\"string\">\"views\"</span>, path.join(__dirname, <span class=\"string\">\"views\"</span>)); <span class=\"comment\">// 设置存放模板文件的目录</span></span><br><span class=\"line\">app.set(<span class=\"string\">\"view engine\"</span>, <span class=\"string\">\"ejs\"</span>); <span class=\"comment\">// 设置模板引擎为 ejs</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">\"/\"</span>, indexRouter);</span><br><span class=\"line\">app.use(<span class=\"string\">\"/users\"</span>, userRouter);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>app.set</code> 设置模板引擎为 ejs 和存放模板的目录。在 myblog 下新建 views 文件夹，在 views 下新建 users.ejs，添加如下代码：</p>\n<p><strong>views/users.ejs</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\">      body &#123;</span><br><span class=\"line\">        padding: 50px;</span><br><span class=\"line\">        font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">name.toUpperCase</span>() %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello, <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">name</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 routes/users.js 如下：</p>\n<p><strong>routes/users.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:name\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">\"users\"</span>, &#123;</span><br><span class=\"line\">    name: req.params.name</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p>通过调用 <code>res.render</code> 函数渲染 ejs 模板，res.render 第一个参数是模板的名字，这里是 users 则会匹配 views/users.ejs，第二个参数是传给模板的数据，这里传入 name，则在 ejs 模板中可使用 name。<code>res.render</code> 的作用就是将模板和数据结合生成 html，同时设置响应头中的 <code>Content-Type: text/html</code>，告诉浏览器我返回的是 html，不是纯文本，要按 html 展示。现在我们访问 <code>localhost:3000/users/haha</code>，如下图所示：</p>\n<p><img src=\"/images/3.3.1.png\" alt></p>\n<p>上面代码可以看到，我们在模板 <code>&lt;%= name.toUpperCase() %&gt;</code> 中使用了 JavaScript 的语法 <code>.toUpperCase()</code> 将名字转化为大写，那这个 <code>&lt;%= xxx %&gt;</code> 是什么东西呢？ejs 有 3 种常用标签：</p>\n<ol>\n<li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出</li>\n<li><code>&lt;%= code %&gt;</code>：显示转义后的 HTML 内容</li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</li>\n</ol>\n<blockquote>\n<p>注意：<code>&lt;%= code %&gt;</code> 和 <code>&lt;%- code %&gt;</code> 都可以是 JavaScript 表达式生成的字符串，当变量 code 为普通字符串时，两者没有区别。当 code 比如为 <code>&lt;h1&gt;hello&lt;/h1&gt;</code> 这种字符串时，<code>&lt;%= code %&gt;</code> 会原样输出 <code>&lt;h1&gt;hello&lt;/h1&gt;</code>，而 <code>&lt;%- code %&gt;</code> 则会显示 H1 大的 hello 字符串。</p>\n</blockquote>\n<p>下面的例子解释了 <code>&lt;% code %&gt;</code> 的用法：</p>\n<p><strong>Data</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supplies: [&apos;mop&apos;, &apos;broom&apos;, &apos;duster&apos;]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Template</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;% for(var i=0; i&lt;supplies.length; i++) &#123;%&gt;</span><br><span class=\"line\">   &lt;li&gt;&lt;%= supplies[i] %&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>mop<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>broom<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>duster<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>更多 ejs 的标签请看 <a href=\"https://www.npmjs.com/package/ejs#tags\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>我们使用模板引擎通常不是一个页面对应一个模板，这样就失去了模板的优势，而是把模板拆成可复用的模板片段组合使用，如在 views 下新建 header.ejs 和 footer.ejs，并修改 users.ejs：</p>\n<p><strong>views/header.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">      body &#123;padding: 50px;font: 14px &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif;&#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/footer.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/users.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\">  &lt;h1&gt;&lt;%= name.toUpperCase() %&gt;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;p&gt;hello, &lt;%= name %&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们将原来的 users.ejs 拆成出了 header.ejs 和 footer.ejs，并在 users.ejs 通过 ejs 内置的 include 方法引入，从而实现了跟以前一个模板文件相同的功能。</p>\n<blockquote>\n<p>小提示：拆分模板组件通常有两个好处：</p>\n<ol>\n<li>模板可复用，减少重复代码</li>\n<li>主模板结构清晰</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>注意：要用 <code>&lt;%- include(&#39;header&#39;) %&gt;</code> 而不是 <code>&lt;%= include(&#39;header&#39;) %&gt;</code><br>前面我们讲解了 express 中路由和模板引擎 ejs 的用法，但 express 的精髓并不在此，在于中间件的设计理念。</p>\n</blockquote>\n<h2 id=\"中间件与-next\"><a href=\"#中间件与-next\" class=\"headerlink\" title=\"中间件与 next\"></a>中间件与 next</h2><p>express 中的中间件（middleware）就是用来处理请求的，当一个中间件处理完，可以通过调用 <code>next()</code> 传递给下一个中间件，如果没有调用 <code>next()</code>，则请求不会往下传递，如内置的 <code>res.render</code> 其实就是渲染完 html 直接返回给客户端，没有调用 <code>next()</code>，从而没有传递给下一个中间件。看个小例子，修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>此时访问 <code>localhost:3000</code>，终端会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>app.use</code> 加载中间件，在中间件中通过 next 将请求传递到下一个中间件，next 可接受一个参数接收错误信息，如果使用了 <code>next(error)</code>，则会返回错误而不会传递到下一个中间件，修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">  next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"haha\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>此时访问 <code>localhost:3000</code>，终端会输出错误信息：</p>\n<p><img src=\"/images/3.4.1.png\" alt></p>\n<p>浏览器会显示：</p>\n<p><img src=\"/images/3.4.2.png\" alt></p>\n<blockquote>\n<p>小提示：<code>app.use</code> 有非常灵活的使用方式，详情见 <a href=\"http://expressjs.com/en/4x/api.html#app.use\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n</blockquote>\n<p>express 有成百上千的第三方中间件，在开发过程中我们首先应该去 npm 上寻找是否有类似实现的中间件，尽量避免造轮子，节省开发时间。下面给出几个常用的搜索 npm 模块的网站：</p>\n<ol>\n<li><a href=\"http://npmjs.com\" target=\"_blank\" rel=\"noopener\">http://npmjs.com</a>(npm 官网)</li>\n<li><a href=\"http://node-modules.com\" target=\"_blank\" rel=\"noopener\">http://node-modules.com</a></li>\n<li><a href=\"https://npms.io\" target=\"_blank\" rel=\"noopener\">https://npms.io</a></li>\n<li><a href=\"https://nodejsmodules.org\" target=\"_blank\" rel=\"noopener\">https://nodejsmodules.org</a></li>\n</ol>\n<blockquote>\n<p>小提示：express@4 之前的版本基于 connect 这个模块实现的中间件的架构，express@4 及以上的版本则移除了对 connect 的依赖自己实现了，理论上基于 connect 的中间件（通常以 <code>connect-</code> 开头，如 <code>connect-mongo</code>）仍可结合 express 使用。</p>\n</blockquote>\n<blockquote>\n<p>注意：中间件的加载顺序很重要！比如：通常把日志中间件放到比较靠前的位置，后面将会介绍的 <code>connect-flash</code> 中间件是基于 session 的，所以需要在 <code>express-session</code> 后加载。</p>\n</blockquote>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>上面的例子中，应用程序为我们自动返回了错误栈信息（express 内置了一个默认的错误处理器），假如我们想手动控制返回的错误内容，则需要加载一个自定义错误处理的中间件，修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">  next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"haha\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误处理</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</span><br><span class=\"line\">  res.status(<span class=\"number\">500</span>).send(<span class=\"string\">\"Something broke!\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>此时访问 <code>localhost:3000</code>，浏览器会显示 <code>Something broke!</code>。</p>\n<blockquote>\n<p>小提示：关于 express 的错误处理，详情见 <a href=\"http://expressjs.com/en/guide/error-handling.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。<br>从本章开始，正式学习如何使用 Express + MongoDB 搭建一个博客。</p>\n</blockquote>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>我们停止 supervisor 并删除 myblog 目录从头来过。重新创建 myblog，运行 <code>npm init</code>，如下：</p>\n<p><img src=\"/images/4.2.1.png\" alt></p>\n<p>在 myblog 目录下创建以下目录及空文件（package.json 除外）：</p>\n<p><img src=\"/images/4.2.2.png\" alt></p>\n<p>对应文件及文件夹的用处：</p>\n<ol>\n<li><code>models</code>: 存放操作数据库的文件</li>\n<li><code>public</code>: 存放静态文件，如样式、图片等</li>\n<li><code>routes</code>: 存放路由文件</li>\n<li><code>views</code>: 存放模板文件</li>\n<li><code>index.js</code>: 程序主文件</li>\n<li><code>package.json</code>: 存储项目名、描述、作者、依赖等等信息</li>\n</ol>\n<blockquote>\n<p>小提示：不知读者发现了没有，我们遵循了 MVC（模型(model)－视图(view)－控制器(controller/route)） 的开发模式。</p>\n</blockquote>\n<h2 id=\"安装依赖模块\"><a href=\"#安装依赖模块\" class=\"headerlink\" title=\"安装依赖模块\"></a>安装依赖模块</h2><p>运行以下命令安装所需模块：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i config-lite connect-flash connect-mongo ejs express express-session marked moment mongolass objectid-to-timestamp sha1 winston express-winston --save</span><br><span class=\"line\">npm i https://github.com:utatti/express-formidable.git --save <span class=\"comment\"># 从 GitHub 安装 express-formidable 最新版，v1.0.0 有 bug</span></span><br></pre></td></tr></table></figure>\n\n<p>对应模块的用处：</p>\n<ol>\n<li><code>express</code>: web 框架</li>\n<li><code>express-session</code>: session 中间件</li>\n<li><code>connect-mongo</code>: 将 session 存储于 mongodb，结合 express-session 使用</li>\n<li><code>connect-flash</code>: 页面通知的中间件，基于 session 实现</li>\n<li><code>ejs</code>: 模板</li>\n<li><code>express-formidable</code>: 接收表单及文件上传的中间件</li>\n<li><code>config-lite</code>: 读取配置文件</li>\n<li><code>marked</code>: markdown 解析</li>\n<li><code>moment</code>: 时间格式化</li>\n<li><code>mongolass</code>: mongodb 驱动</li>\n<li><code>objectid-to-timestamp</code>: 根据 ObjectId 生成时间戳</li>\n<li><code>sha1</code>: sha1 加密，用于密码加密</li>\n<li><code>winston</code>: 日志</li>\n<li><code>express-winston</code>: express 的 winston 日志中间件</li>\n</ol>\n<p>后面会详细讲解这些模块的用法。</p>\n<h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h2><p>ESLint 是一个代码规范和语法错误检查工具。使用 ESLint 可以规范我们的代码书写，可以在编写代码期间就能发现一些低级错误。</p>\n<p>ESLint 需要结合编辑器或 IDE 使用，如：</p>\n<ul>\n<li>Sublime Text 需要装两个插件：SublimeLinter + SublimeLinter-contrib-eslint</li>\n<li>VS Code 需要装一个插件：ESLint</li>\n</ul>\n<blockquote>\n<p>小提示：Sublime Text 安装插件通过 ctrl+shift+p 调出 Package Control，输入 install 选择 Install Package 回车。输入对应插件名搜索，回车安装。<br>小提示：VS Code 安装插件需要点击左侧『扩展』页</p>\n</blockquote>\n<p>全局安装 eslint：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint -g</span><br></pre></td></tr></table></figure>\n\n<p>运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eslint --init</span><br></pre></td></tr></table></figure>\n\n<p>初始化 eslint 配置，依次选择：</p>\n<p>-&gt; Use a popular style guide<br>-&gt; Standard<br>-&gt; JSON</p>\n<blockquote>\n<p>注意：如果 Windows 用户使用其他命令行工具无法上下切换选项，切换回 cmd。</p>\n</blockquote>\n<p>eslint 会创建一个 .eslintrc.json 的配置文件，同时自动安装并添加相关的模块到 devDependencies。这里我们使用 Standard 规范，其主要特点是不加分号。</p>\n<h2 id=\"EditorConfig\"><a href=\"#EditorConfig\" class=\"headerlink\" title=\"EditorConfig\"></a>EditorConfig</h2><p>EditorConfig 是一个保持缩进风格的一致的工具，当多人共同开发一个项目的时候，往往会出现每个人用不同编辑器的情况，而且有的人用 tab 缩进，有的人用 2 个空格缩进，有的人用 4 个空格缩进，EditorConfig 就是为了解决这个问题而诞生。</p>\n<p>EditorConfig 需要结合编辑器或 IDE 使用，如：</p>\n<ul>\n<li>Sublime Text 需要装一个插件：EditorConfig</li>\n<li>VS Code 需要装一个插件：EditorConfig for VS Code</li>\n</ul>\n<p>在 myblog 目录下新建 .editorconfig 的文件，添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># editorconfig.org</span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">tab_width = 2</span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = false</span><br><span class=\"line\"></span><br><span class=\"line\">[Makefile]</span><br><span class=\"line\">indent_style = tab</span><br></pre></td></tr></table></figure>\n\n<p>这里我们使用 2 个空格缩进，tab 长度也是 2 个空格。trim_trailing_whitespace 用来删除每一行最后多余的空格，insert_final_newline 用来在代码最后插入一个空的换行。<br>不管是小项目还是大项目，将配置与代码分离是一个非常好的做法。我们通常将配置写到一个配置文件里，如 config.js 或 config.json ，并放到项目的根目录下。但实际开发时我们会有许多环境，如本地开发环境、测试环境和线上环境等，不同环境的配置不同（如：MongoDB 的地址），我们不可能每次部署时都要去修改引用 config.test.js 或者 config.production.js。config-lite 模块正是你需要的。</p>\n<h2 id=\"config-lite\"><a href=\"#config-lite\" class=\"headerlink\" title=\"config-lite\"></a>config-lite</h2><p><a href=\"https://www.npmjs.com/package/config-lite\" target=\"_blank\" rel=\"noopener\">config-lite</a> 是一个轻量的读取配置文件的模块。config-lite 会根据环境变量（<code>NODE_ENV</code>）的不同加载 config 目录下不同的配置文件。如果不设置 <code>NODE_ENV</code>，则读取默认的 default 配置文件，如果设置了 <code>NODE_ENV</code>，则会合并指定的配置文件和 default 配置文件作为配置，config-lite 支持 .js、.json、.node、.yml、.yaml 后缀的文件。</p>\n<p>如果程序以 <code>NODE_ENV=test node app</code> 启动，则 config-lite 会依次降级查找 <code>config/test.js</code>、<code>config/test.json</code>、<code>config/test.node</code>、<code>config/test.yml</code>、<code>config/test.yaml</code> 并合并 default 配置; 如果程序以 <code>NODE_ENV=production node app</code> 启动，则 config-lite 会依次降级查找 <code>config/production.js</code>、<code>config/production.json</code>、<code>config/production.node</code>、<code>config/production.yml</code>、<code>config/production.yaml</code> 并合并 default 配置。</p>\n<p>config-lite 还支持冒泡查找配置，即从传入的路径开始，从该目录不断往上一级目录查找 config 目录，直到找到或者到达根目录为止。</p>\n<p>在 myblog 下新建 config 目录，在该目录下新建 default.js，添加如下代码：</p>\n<p><strong>config/default.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">  session: &#123;</span><br><span class=\"line\">    secret: <span class=\"string\">\"myblog\"</span>,</span><br><span class=\"line\">    key: <span class=\"string\">\"myblog\"</span>,</span><br><span class=\"line\">    maxAge: <span class=\"number\">2592000000</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mongodb: <span class=\"string\">\"mongodb://localhost:27017/myblog\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>配置释义：</p>\n<ol>\n<li><code>port</code>: 程序启动要监听的端口号</li>\n<li><code>session</code>: express-session 的配置信息，后面介绍</li>\n<li><code>mongodb</code>: mongodb 的地址，以 <code>mongodb://</code> 协议开头，<code>myblog</code> 为 db 名</li>\n</ol>\n<h2 id=\"功能与路由设计\"><a href=\"#功能与路由设计\" class=\"headerlink\" title=\"功能与路由设计\"></a>功能与路由设计</h2><p>在开发博客之前，我们首先需要明确博客要实现哪些功能。由于本教程面向初学者，所以只实现了博客最基本的功能，其余的功能（如归档、标签、分页等等）读者可自行实现。</p>\n<p>功能及路由设计如下：</p>\n<ol>\n<li>注册<ol>\n<li>注册页：<code>GET /signup</code></li>\n<li>注册（包含上传头像）：<code>POST /signup</code></li>\n</ol>\n</li>\n<li>登录<ol>\n<li>登录页：<code>GET /signin</code></li>\n<li>登录：<code>POST /signin</code></li>\n</ol>\n</li>\n<li>登出：<code>GET /signout</code></li>\n<li>查看文章<ol>\n<li>主页：<code>GET /posts</code></li>\n<li>个人主页：<code>GET /posts?author=xxx</code></li>\n<li>查看一篇文章（包含留言）：<code>GET /posts/:postId</code></li>\n</ol>\n</li>\n<li>发表文章<ol>\n<li>发表文章页：<code>GET /posts/create</code></li>\n<li>发表文章：<code>POST /posts/create</code></li>\n</ol>\n</li>\n<li>修改文章<ol>\n<li>修改文章页：<code>GET /posts/:postId/edit</code></li>\n<li>修改文章：<code>POST /posts/:postId/edit</code></li>\n</ol>\n</li>\n<li>删除文章：<code>GET /posts/:postId/remove</code></li>\n<li>留言<ol>\n<li>创建留言：<code>POST /comments</code></li>\n<li>删除留言：<code>GET /comments/:commentId/remove</code></li>\n</ol>\n</li>\n</ol>\n<p>由于我们博客页面是后端渲染的，所以只通过简单的 <code>&lt;a&gt;(GET)</code> 和 <code>&lt;form&gt;(POST)</code> 与后端进行交互，如果使用 jQuery 或者其他前端框架（如 Angular、Vue、React 等等）可通过 Ajax 与后端交互，则 api 的设计应尽量遵循 Restful 风格。</p>\n<h3 id=\"Restful\"><a href=\"#Restful\" class=\"headerlink\" title=\"Restful\"></a>Restful</h3><p>Restful 是一种 api 的设计风格，提出了一组 api 的设计原则和约束条件。</p>\n<p>如上面删除文章的路由设计：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /posts/:postId/remove</span><br></pre></td></tr></table></figure>\n\n<p>Restful 风格的设计：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /posts/:postId</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，Restful 风格的 api 更直观且优雅。</p>\n<p>更多阅读：</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/09/restful\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/09/restful</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></li>\n<li><a href=\"http://developer.51cto.com/art/200908/141825.htm\" target=\"_blank\" rel=\"noopener\">http://developer.51cto.com/art/200908/141825.htm</a></li>\n<li><a href=\"http://blog.jobbole.com/41233/\" target=\"_blank\" rel=\"noopener\">http://blog.jobbole.com/41233/</a></li>\n</ol>\n<h2 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h2><p>由于 HTTP 协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户，这个机制就是会话（Session）。</p>\n<h3 id=\"cookie-与-session-的区别\"><a href=\"#cookie-与-session-的区别\" class=\"headerlink\" title=\"cookie 与 session 的区别\"></a>cookie 与 session 的区别</h3><ol>\n<li>cookie 存储在浏览器（有大小限制），session 存储在服务端（没有大小限制）</li>\n<li>通常 session 的实现是基于 cookie 的，session id 存储于 cookie 中</li>\n<li>session 更安全，cookie 可以直接在浏览器查看甚至编辑</li>\n</ol>\n<p>更多 session 的资料，参考：<a href=\"https://www.zhihu.com/question/19786827\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19786827</a></p>\n<p>我们通过引入 express-session 中间件实现对会话的支持：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(session(options));</span><br></pre></td></tr></table></figure>\n\n<p>session 中间件会在 req 上添加 session 对象，即 req.session 初始值为 <code>{}</code>，当我们登录后设置 <code>req.session.user = 用户信息</code>，返回浏览器的头信息中会带上 <code>set-cookie</code> 将 session id 写到浏览器 cookie 中，那么该用户下次请求时，通过带上来的 cookie 中的 session id 我们就可以查找到该用户，并将用户信息保存到 <code>req.session.user</code>。</p>\n<h2 id=\"页面通知\"><a href=\"#页面通知\" class=\"headerlink\" title=\"页面通知\"></a>页面通知</h2><p>我们还需要这样一个功能：当我们操作成功时需要显示一个成功的通知，如登录成功跳转到主页时，需要显示一个 <code>登陆成功</code> 的通知；当我们操作失败时需要显示一个失败的通知，如注册时用户名被占用了，需要显示一个 <code>用户名已占用</code> 的通知。通知只显示一次，刷新后消失，我们可以通过 connect-flash 中间件实现这个功能。</p>\n<p><a href=\"https://www.npmjs.com/package/connect-flash\" target=\"_blank\" rel=\"noopener\">connect-flash</a> 是基于 session 实现的，它的原理很简单：设置初始值 <code>req.session.flash={}</code>，通过 <code>req.flash(name, value)</code> 设置这个对象下的字段和值，通过 <code>req.flash(name)</code> 获取这个对象下的值，同时删除这个字段，实现了只显示一次刷新后消失的功能。</p>\n<h3 id=\"express-session、connect-mongo-和-connect-flash-的区别与联系\"><a href=\"#express-session、connect-mongo-和-connect-flash-的区别与联系\" class=\"headerlink\" title=\"express-session、connect-mongo 和 connect-flash 的区别与联系\"></a>express-session、connect-mongo 和 connect-flash 的区别与联系</h3><ol>\n<li><code>express-session</code>: 会话（session）支持中间件</li>\n<li><code>connect-mongo</code>: 将 session 存储于 mongodb，需结合 express-session 使用，我们也可以将 session 存储于 redis，如 <a href=\"https://www.npmjs.com/package/connect-redis\" target=\"_blank\" rel=\"noopener\">connect-redis</a></li>\n<li><code>connect-flash</code>: 基于 session 实现的用于通知功能的中间件，需结合 express-session 使用</li>\n</ol>\n<h2 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h2><p>不管是论坛还是博客网站，我们没有登录的话只能浏览，登陆后才能发帖或写文章，即使登录了你也不能修改或删除其他人的文章，这就是权限控制。我们也来给博客添加权限控制，如何实现页面的权限控制呢？我们可以把用户状态的检查封装成一个中间件，在每个需要权限控制的路由加载该中间件，即可实现页面的权限控制。在 myblog 下新建 middlewares 目录，在该目录下新建 check.js，添加如下代码：</p>\n<p><strong>middlewares/check.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  checkLogin: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkLogin</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!req.session.user) &#123;</span><br><span class=\"line\">      req.flash(<span class=\"string\">\"error\"</span>, <span class=\"string\">\"未登录\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">\"/signin\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  checkNotLogin: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkNotLogin</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.session.user) &#123;</span><br><span class=\"line\">      req.flash(<span class=\"string\">\"error\"</span>, <span class=\"string\">\"已登录\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">\"back\"</span>); <span class=\"comment\">// 返回之前的页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出：</p>\n<ol>\n<li><code>checkLogin</code>: 当用户信息（<code>req.session.user</code>）不存在，即认为用户没有登录，则跳转到登录页，同时显示 <code>未登录</code> 的通知，用于需要用户登录才能操作的页面</li>\n<li><code>checkNotLogin</code>: 当用户信息（<code>req.session.user</code>）存在，即认为用户已经登录，则跳转到之前的页面，同时显示 <code>已登录</code> 的通知，如已登录用户就禁止访问登录、注册页面</li>\n</ol>\n<p>最终我们创建以下路由文件：</p>\n<p><strong>routes/index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.redirect(<span class=\"string\">\"/posts\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/signup\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./signup\"</span>));</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/signin\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./signin\"</span>));</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/signout\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./signout\"</span>));</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/posts\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./posts\"</span>));</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/comments\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./comments\"</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts 所有用户或者特定用户的文章页</span></span><br><span class=\"line\"><span class=\"comment\">//   eg: GET /posts?author=xxx</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"主页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /posts/create 发表一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/create\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"发表文章\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/create 发表文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/create\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"发表文章页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:postId\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"文章详情页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/edit 更新文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:postId/edit\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"更新文章页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /posts/:postId/edit 更新一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/:postId/edit\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"更新文章\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/remove 删除一篇文章</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:postId/remove\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"删除文章\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/comments.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /comments 创建一条留言</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"创建留言\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /comments/:commentId/remove 删除一条留言</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:commentId/remove\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"删除留言\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/signin.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkNotLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signin 登录页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"登录页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /signin 用户登录</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"登录\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/signup.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkNotLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signup 注册页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"注册页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /signup 用户注册</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"注册\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/signout.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signout 登出</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"登出\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p>最后，修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">\"express-session\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> MongoStore = <span class=\"built_in\">require</span>(<span class=\"string\">\"connect-mongo\"</span>)(session);</span><br><span class=\"line\"><span class=\"keyword\">const</span> flash = <span class=\"built_in\">require</span>(<span class=\"string\">\"connect-flash\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"config-lite\"</span>)(__dirname);</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">\"./package\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置模板目录</span></span><br><span class=\"line\">app.set(<span class=\"string\">\"views\"</span>, path.join(__dirname, <span class=\"string\">\"views\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// 设置模板引擎为 ejs</span></span><br><span class=\"line\">app.set(<span class=\"string\">\"view engine\"</span>, <span class=\"string\">\"ejs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置静态文件目录</span></span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">\"public\"</span>)));</span><br><span class=\"line\"><span class=\"comment\">// session 中间件</span></span><br><span class=\"line\">app.use(</span><br><span class=\"line\">  session(&#123;</span><br><span class=\"line\">    name: config.session.key, <span class=\"comment\">// 设置 cookie 中保存 session id 的字段名称</span></span><br><span class=\"line\">    secret: config.session.secret, <span class=\"comment\">// 通过设置 secret 来计算 hash 值并放在 cookie 中，使产生的 signedCookie 防篡改</span></span><br><span class=\"line\">    resave: <span class=\"literal\">true</span>, <span class=\"comment\">// 强制更新 session</span></span><br><span class=\"line\">    saveUninitialized: <span class=\"literal\">false</span>, <span class=\"comment\">// 设置为 false，强制创建一个 session，即使用户未登录</span></span><br><span class=\"line\">    cookie: &#123;</span><br><span class=\"line\">      maxAge: config.session.maxAge <span class=\"comment\">// 过期时间，过期后 cookie 中的 session id 自动删除</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    store: <span class=\"keyword\">new</span> MongoStore(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将 session 存储到 mongodb</span></span><br><span class=\"line\">      url: config.mongodb <span class=\"comment\">// mongodb 地址</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// flash 中间件，用来显示通知</span></span><br><span class=\"line\">app.use(flash());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\">routes(app);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听端口，启动程序</span></span><br><span class=\"line\">app.listen(config.port, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;pkg.name&#125;</span> listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：中间件的加载顺序很重要。如上面设置静态文件目录的中间件应该放到 routes(app) 之前加载，这样静态文件的请求就不会落到业务逻辑的路由里；flash 中间件应该放到 session 中间件之后加载，因为 flash 是基于 session 实现的。</p>\n</blockquote>\n<p>运行 <code>supervisor index</code> 启动博客，访问以下地址查看效果：</p>\n<ol>\n<li><a href=\"http://localhost:3000/posts\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/posts</a></li>\n<li><a href=\"http://localhost:3000/signout\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/signout</a></li>\n<li><a href=\"http://localhost:3000/signup\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/signup</a><br>我们使用 jQuery + Semantic-UI 实现前端页面的设计，最终效果图如下:</li>\n</ol>\n<p><strong>注册页</strong></p>\n<p><img src=\"/images/4.5.1.png\" alt></p>\n<p><strong>登录页</strong></p>\n<p><img src=\"/images/4.5.2.png\" alt></p>\n<p><strong>未登录时的主页（或用户页）</strong></p>\n<p><img src=\"/images/4.5.3.png\" alt></p>\n<p><strong>登录后的主页（或用户页）</strong></p>\n<p><img src=\"/images/4.5.4.png\" alt></p>\n<p><strong>发表文章页</strong></p>\n<p><img src=\"/images/4.5.5.png\" alt></p>\n<p><strong>编辑文章页</strong></p>\n<p><img src=\"/images/4.5.6.png\" alt></p>\n<p><strong>未登录时的文章页</strong></p>\n<p><img src=\"/images/4.5.7.png\" alt></p>\n<p><strong>登录后的文章页</strong></p>\n<p><img src=\"/images/4.5.8.png\" alt></p>\n<p><strong>通知</strong></p>\n<p><img src=\"/images/4.5.9.png\" alt><br><img src=\"/images/4.5.10.png\" alt><br><img src=\"/images/4.5.11.png\" alt></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>前面提到过，我们可以将模板拆分成一些组件，然后使用 ejs 的 include 方法将组件组合起来进行渲染。我们将页面切分成以下组件：</p>\n<p><strong>主页</strong></p>\n<p><img src=\"/images/4.5.12.png\" alt></p>\n<p><strong>文章页</strong></p>\n<p><img src=\"/images/4.5.13.png\" alt></p>\n<p>根据上面的组件切分图，我们创建以下样式及模板文件：</p>\n<p><strong>public/css/style.css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ---------- 全局样式 ---------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#4fc08d</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#4fc08d</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.avatar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ---------- nav ---------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#4fc08d</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ---------- nav-setting ---------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav-setting</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav-setting</span> <span class=\"selector-class\">.ui</span><span class=\"selector-class\">.dropdown</span><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav-setting</span> <span class=\"selector-class\">.icon</span><span class=\"selector-class\">.bars</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ---------- post-content ---------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#4fc08d</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-class\">.tag</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-class\">.tag</span><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-class\">.tag</span><span class=\"selector-class\">.right</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/header.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;%= blog.title %&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/semantic-ui/2.1.8/semantic.min.css&quot;&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;//cdn.bootcss.com/semantic-ui/2.1.8/semantic.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;%- include(&apos;components/nav&apos;) %&gt;</span><br><span class=\"line\">  &lt;%- include(&apos;components/nav-setting&apos;) %&gt;</span><br><span class=\"line\">  &lt;%- include(&apos;components/notification&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/footer.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">   $(document).ready(function () &#123;</span><br><span class=\"line\">      // 点击按钮弹出下拉框</span><br><span class=\"line\">      $(&apos;.ui.dropdown&apos;).dropdown();</span><br><span class=\"line\"></span><br><span class=\"line\">      // 鼠标悬浮在头像上，弹出气泡提示框</span><br><span class=\"line\">      $(&apos;.post-content .avatar-link&apos;).popup(&#123;</span><br><span class=\"line\">        inline: true,</span><br><span class=\"line\">        position: &apos;bottom right&apos;,</span><br><span class=\"line\">        lastResort: &apos;bottom right&apos;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：上面 <code>&lt;script&gt;&lt;/script&gt;</code> 是 semantic-ui 操控页面控件的代码，一定要放到 footer.ejs 的 <code>&lt;/body&gt;</code> 的前面，因为只有页面加载完后才能通过 JQuery 获取 DOM 元素。</p>\n</blockquote>\n<p>在 views 目录下新建 components 目录用来存放组件（即可以复用的模板片段），在该目录下创建以下文件：</p>\n<p><strong>views/components/nav.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;nav&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">      &lt;a href=&quot;/posts&quot;&gt;&lt;h1&gt;&lt;%= blog.title %&gt;&lt;/h1&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;p&gt;&lt;%= blog.description %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/components/nav-setting.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;nav-setting&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ui buttons&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ui floating dropdown button&quot;&gt;</span><br><span class=\"line\">      &lt;i class=&quot;icon bars&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">      &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">        &lt;% if (user) &#123; %&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/posts?author=&lt;%= user._id %&gt;&quot;&gt;个人主页&lt;/a&gt;</span><br><span class=\"line\">          &lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/posts/create&quot;&gt;发表文章&lt;/a&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/signout&quot;&gt;登出&lt;/a&gt;</span><br><span class=\"line\">        &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/signin&quot;&gt;登录&lt;/a&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/signup&quot;&gt;注册&lt;/a&gt;</span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/components/notification.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% if (success) &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ui success message&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;&lt;%= success %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% if (error) &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ui error message&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;&lt;%= error %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"app-locals-和-res-locals\"><a href=\"#app-locals-和-res-locals\" class=\"headerlink\" title=\"app.locals 和 res.locals\"></a>app.locals 和 res.locals</h2><p>上面的 ejs 模板中我们用到了 blog、user、success、error 变量，我们将 blog 变量挂载到 <code>app.locals</code> 下，将 user、success、error 挂载到 <code>res.locals</code> 下。为什么要这么做呢？<code>app.locals</code> 和 <code>res.locals</code> 是什么？它们有什么区别？</p>\n<p>express 中有两个对象可用于模板的渲染：<code>app.locals</code> 和 <code>res.locals</code>。我们从 express 源码一探究竟：</p>\n<p><strong>express/lib/application.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.render = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">name, options, callback</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = options;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderOptions = &#123;&#125;;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// merge app.locals</span></span><br><span class=\"line\">  merge(renderOptions, <span class=\"keyword\">this</span>.locals);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// merge options._locals</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts._locals) &#123;</span><br><span class=\"line\">    merge(renderOptions, opts._locals);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// merge options</span></span><br><span class=\"line\">  merge(renderOptions, opts);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  tryRender(view, renderOptions, done);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>express/lib/response.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">view, options, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = <span class=\"keyword\">this</span>.req.app;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = options || &#123;&#125;;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// merge res.locals</span></span><br><span class=\"line\">  opts._locals = self.locals;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// render</span></span><br><span class=\"line\">  app.render(view, opts, done);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出：在调用 <code>res.render</code> 的时候，express 合并（merge）了 3 处的结果后传入要渲染的模板，优先级：<code>res.render</code> 传入的对象&gt; <code>res.locals</code> 对象 &gt; <code>app.locals</code> 对象，所以 <code>app.locals</code> 和 <code>res.locals</code> 几乎没有区别，都用来渲染模板，使用上的区别在于：<code>app.locals</code> 上通常挂载常量信息（如博客名、描述、作者这种不会变的信息），<code>res.locals</code> 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，<code>res.locals.user = req.session.user</code>）。</p>\n<p>修改 index.js，在 <code>routes(app)</code> 上一行添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置模板全局常量</span></span><br><span class=\"line\">app.locals.blog = &#123;</span><br><span class=\"line\">  title: pkg.name,</span><br><span class=\"line\">  description: pkg.description</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加模板必需的三个变量</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.locals.user = req.session.user;</span><br><span class=\"line\">  res.locals.success = req.flash(<span class=\"string\">\"success\"</span>).toString();</span><br><span class=\"line\">  res.locals.error = req.flash(<span class=\"string\">\"error\"</span>).toString();</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样在调用 <code>res.render</code> 的时候就不用传入这四个变量了，express 为我们自动 merge 并传入了模板，所以我们可以在模板中直接使用这四个变量。<br>我们使用 <a href=\"https://github.com/mongolass/mongolass\" target=\"_blank\" rel=\"noopener\">Mongolass</a> 这个模块操作 mongodb 进行增删改查。在 myblog 下新建 lib 目录，在该目录下新建 mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'config-lite'</span>)(__dirname)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Mongolass = <span class=\"built_in\">require</span>(<span class=\"string\">'mongolass'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mongolass = <span class=\"keyword\">new</span> Mongolass()</span><br><span class=\"line\">mongolass.connect(config.mongodb)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么使用-Mongolass\"><a href=\"#为什么使用-Mongolass\" class=\"headerlink\" title=\"为什么使用 Mongolass\"></a>为什么使用 Mongolass</h2><p>早期我使用官方的 <a href=\"https://www.npmjs.com/package/mongodb\" target=\"_blank\" rel=\"noopener\">mongodb</a>（也叫 node-mongodb-native）库，后来也陆续尝试使用了许多其他 mongodb 的驱动库，<a href=\"https://www.npmjs.com/package/mongoose\" target=\"_blank\" rel=\"noopener\">Mongoose</a> 是比较优秀的一个，使用 Mongoose 的时间也比较长。比较这两者，各有优缺点。</p>\n<h3 id=\"node-mongodb-native\"><a href=\"#node-mongodb-native\" class=\"headerlink\" title=\"node-mongodb-native:\"></a>node-mongodb-native:</h3><p><strong>优点：</strong></p>\n<ol>\n<li>简单。参照文档即可上手，没有 Mongoose 的 Schema 那些对新手不友好的东西。</li>\n<li>强大。毕竟是官方库，包含了所有且最新的 api，其他大部分的库都是在这个库的基础上改造的，包括 Mongoose。</li>\n<li>文档健全。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>起初只支持 callback，会写出以下这种代码：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb.open(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  db.collection(<span class=\"string\">'users'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, collection</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    collection.find(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'xxx'</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>或者：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, mongodb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  mongodb.db(<span class=\"string\">'test'</span>).collection(<span class=\"string\">'users'</span>).find(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'xxx'</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>现在支持 Promise 了，和 co 一起使用好很多。</p>\n<ol start=\"2\">\n<li>不支持文档校验。Mongoose 通过 Schema 支持文档校验，虽说 mongodb 是 no schema 的，但在生产环境中使用 Schema 有两点好处。一是对文档做校验，防止非正常情况下写入错误的数据到数据库，二是可以简化一些代码，如类型为 ObjectId 的字段查询或更新时可通过对应的字符串操作，不用每次包装成 ObjectId 对象。</li>\n</ol>\n<h3 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose:\"></a>Mongoose:</h3><p><strong>优点：</strong></p>\n<ol>\n<li><p>封装了数据库的操作，给人的感觉是同步的，其实内部是异步的。如 mongoose 与 MongoDB 建立连接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>)</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> BlogModel = mongoose.model(<span class=\"string\">'Blog'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">content</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">BlogModel.find()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>支持 Promise。这个也无需多说，Promise 是未来趋势，可结合 co 使用，也可结合 async/await 使用。</p>\n</li>\n<li><p>支持文档校验。如上所述。</p>\n</li>\n</ol>\n<p><strong>缺点（个人观点）：</strong></p>\n<ol>\n<li>功能多，复杂。Mongoose 功能很强大，包括静态方法，实例方法，虚拟属性，hook 函数等等，混用带来的后果是逻辑复杂，代码难以维护。</li>\n<li>较弱的 plugin 系统。如：<code>schema.pre(&#39;save&#39;, function(next) {})</code> 和 <code>schema.post(&#39;find&#39;, function(next) {})</code>，只支持异步 <code>next()</code>，灵活性大打折扣。</li>\n<li>其他：对新手来说难以理解的 Schema、Model、Entity 之间的关系；容易混淆的 toJSON 和 toObject，以及有带有虚拟属性的情况；用和不用 exec 的情况以及直接用 then 的情况；返回的结果是 Mongoose 包装后的对象，在此对象上修改结果却无效等等。</li>\n</ol>\n<h3 id=\"Mongolass\"><a href=\"#Mongolass\" class=\"headerlink\" title=\"Mongolass\"></a>Mongolass</h3><p>Mongolass 保持了与 mongodb 一样的 api，又借鉴了许多 Mongoose 的优点，同时又保持了精简。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li>支持 Promise。</li>\n<li>官方一致的 api。</li>\n<li>简单。参考 Mongolass 的 readme 即可上手，比 Mongoose 精简的多，本身代码也不多。</li>\n<li>可选的 Schema。Mongolass 中的 Schema （基于 <a href=\"https://www.npmjs.com/package/another-json-schema\" target=\"_blank\" rel=\"noopener\">another-json-schema</a>）是可选的，并且只用来做文档校验。如果定义了 schema 并关联到某个 model，则插入、更新和覆盖等操作都会校验文档是否满足 schema，同时 schema 也会尝试格式化该字段，类似于 Mongoose，如定义了一个字段为 ObjectId 类型，也可以用 ObjectId 的字符串无缝使用一样。如果没有 schema，则用法跟原生 mongodb 库一样。</li>\n<li>简单却强大的插件系统。可以定义全局插件（对所有 model 生效），也可以定义某个 model 上的插件（只对该 model 生效）。Mongolass 插件的设计思路借鉴了中间件的概念（类似于 Koa），通过定义 <code>beforeXXX</code> 和 <code>afterXXX</code> （XXX为操作符首字母大写，如：<code>afterFind</code>）函数实现，函数返回 yieldable 的对象即可，所以每个插件内可以做一些其他的 IO 操作。不同的插件顺序会有不同的结果，而且每个插件的输入输出都是 plain object，而非类 Mongoose 包装后的对象，没有虚拟属性，无需调用 toJSON 或 toObject。Mongolass 中的 <code>.populate()</code>就是一个内置的插件。</li>\n<li>详细的错误信息。用过 Mongoose 的人一定遇到过这样的错：<br><code>CastError: Cast to ObjectId failed for value &quot;xxx&quot; at path &quot;_id&quot;</code><br>只知道一个期望是 ObjectId 的字段传入了非期望的值，通常很难定位出错的代码，即使定位到也得不到错误现场。得益于 <a href=\"https://www.npmjs.com/package/another-json-schema\" target=\"_blank\" rel=\"noopener\">another-json-schema</a>，使用 Mongolass 在查询或者更新时，某个字段不匹配它定义的 schema 时（还没落到 mongodb）会给出详细的错误信息，如下所示：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Mongolass = <span class=\"built_in\">require</span>(<span class=\"string\">'mongolass'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mongolass = <span class=\"keyword\">new</span> Mongolass(<span class=\"string\">'mongodb://localhost:27017/test'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = mongolass.model(<span class=\"string\">'User'</span>, &#123;</span><br><span class=\"line\">  name: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span> &#125;,</span><br><span class=\"line\">  age: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'number'</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">User</span><br><span class=\"line\">  .insertOne(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'nswbmw'</span>, <span class=\"attr\">age</span>: <span class=\"string\">'wrong age'</span> &#125;)</span><br><span class=\"line\">  .exec()</span><br><span class=\"line\">  .then(<span class=\"built_in\">console</span>.log)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(e)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(e.stack)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123; [Error: ($.age: \"wrong age\") ✖ (type: number)]</span></span><br><span class=\"line\"><span class=\"comment\">  validator: 'type',</span></span><br><span class=\"line\"><span class=\"comment\">  actual: 'wrong age',</span></span><br><span class=\"line\"><span class=\"comment\">  expected: &#123; type: 'number' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  path: '$.age',</span></span><br><span class=\"line\"><span class=\"comment\">  schema: 'UserSchema',</span></span><br><span class=\"line\"><span class=\"comment\">  model: 'User',</span></span><br><span class=\"line\"><span class=\"comment\">  plugin: 'MongolassSchema',</span></span><br><span class=\"line\"><span class=\"comment\">  type: 'beforeInsertOne',</span></span><br><span class=\"line\"><span class=\"comment\">  args: [] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">Error: ($.age: \"wrong age\") ✖ (type: number)</span></span><br><span class=\"line\"><span class=\"comment\">    at Model.insertOne (/Users/nswbmw/Desktop/mongolass-demo/node_modules/mongolass/lib/query.js:108:16)</span></span><br><span class=\"line\"><span class=\"comment\">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/mongolass-demo/app.js:10:4)</span></span><br><span class=\"line\"><span class=\"comment\">    at Module._compile (module.js:409:26)</span></span><br><span class=\"line\"><span class=\"comment\">    at Object.Module._extensions..js (module.js:416:10)</span></span><br><span class=\"line\"><span class=\"comment\">    at Module.load (module.js:343:32)</span></span><br><span class=\"line\"><span class=\"comment\">    at Function.Module._load (module.js:300:12)</span></span><br><span class=\"line\"><span class=\"comment\">    at Function.Module.runMain (module.js:441:10)</span></span><br><span class=\"line\"><span class=\"comment\">    at startup (node.js:139:18)</span></span><br><span class=\"line\"><span class=\"comment\">    at node.js:974:3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>可以看出，错误的原因是在 insertOne 一条用户数据到用户表的时候，age 期望是一个 number 类型的值，而我们传入的字符串 <code>wrong age</code>，然后从错误栈中可以快速定位到是 app.js 第 10 行代码抛出的错。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><del>schema 功能较弱，缺少如 required、default 功能。</del></li>\n</ol>\n<h3 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h3><p><a href=\"https://zhuanlan.zhihu.com/p/24308524\" target=\"_blank\" rel=\"noopener\">从零开始写一个 Node.js 的 MongoDB 驱动库</a></p>\n<h2 id=\"用户模型设计\"><a href=\"#用户模型设计\" class=\"headerlink\" title=\"用户模型设计\"></a>用户模型设计</h2><p>我们只存储用户的名称、密码（加密后的）、头像、性别和个人简介这几个字段，对应修改 lib/mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.User = mongolass.model(<span class=\"string\">'User'</span>, &#123;</span><br><span class=\"line\">  name: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  password: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  avatar: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  gender: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">enum</span>: [<span class=\"string\">'m'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'x'</span>], <span class=\"attr\">default</span>: <span class=\"string\">'x'</span> &#125;,</span><br><span class=\"line\">  bio: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">exports.User.index(&#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">true</span> &#125;).exec()<span class=\"comment\">// 根据用户名找到用户，用户名全局唯一</span></span><br></pre></td></tr></table></figure>\n\n<p>我们定义了用户表的 schema，生成并导出了 User 这个 model，同时设置了 name 的唯一索引，保证用户名是不重复的。</p>\n<blockquote>\n<p>小提示：<code>required: true</code> 表示该字段是必需的，<code>default: xxx</code> 用于创建文档时设置默认值。更多关于 Mongolass 的 schema 的用法，请查阅 <a href=\"https://github.com/nswbmw/another-json-schema\" target=\"_blank\" rel=\"noopener\">another-json-schema</a>。</p>\n</blockquote>\n<blockquote>\n<p>小提示：Mongolass 中的 model 你可以认为相当于 mongodb 中的 collection，只不过添加了插件的功能。</p>\n</blockquote>\n<h2 id=\"注册页\"><a href=\"#注册页\" class=\"headerlink\" title=\"注册页\"></a>注册页</h2><p>首先，我们来完成注册。新建 views/signup.ejs，添加如下代码：</p>\n<p><strong>views/signup.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">    &lt;form class=&quot;ui form segment&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;用户名&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;用户名&quot; type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;密码&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;密码&quot; type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;重复密码&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;重复密码&quot; type=&quot;password&quot; name=&quot;repassword&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;性别&lt;/label&gt;</span><br><span class=\"line\">        &lt;select class=&quot;ui compact selection dropdown&quot; name=&quot;gender&quot;&gt;</span><br><span class=\"line\">          &lt;option value=&quot;m&quot;&gt;男&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;f&quot;&gt;女&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;x&quot;&gt;保密&lt;/option&gt;</span><br><span class=\"line\">        &lt;/select&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;头像&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=&quot;file&quot; name=&quot;avatar&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;个人简介&lt;/label&gt;</span><br><span class=\"line\">        &lt;textarea name=&quot;bio&quot; rows=&quot;5&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;submit&quot; class=&quot;ui button fluid&quot; value=&quot;注册&quot;&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：form 表单要添加 <code>enctype=&quot;multipart/form-data&quot;</code> 属性才能上传文件。</p>\n</blockquote>\n<p>修改 routes/signup.js 中获取注册页的路由如下：</p>\n<p><strong>routes/signup.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /signup 注册页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signup'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在访问 <code>localhost:3000/signup</code> 看看效果吧。</p>\n<h2 id=\"注册与文件上传\"><a href=\"#注册与文件上传\" class=\"headerlink\" title=\"注册与文件上传\"></a>注册与文件上传</h2><p>我们使用 <a href=\"https://github.com/utatti/express-formidable\" target=\"_blank\" rel=\"noopener\">express-formidable</a> 处理 form 表单（包括文件上传）。修改 index.js ，在 <code>app.use(flash())</code> 下一行添加如下代码：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理表单及文件上传的中间件</span></span><br><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'express-formidable'</span>)(&#123;</span><br><span class=\"line\">  uploadDir: path.join(__dirname, <span class=\"string\">'public/img'</span>), <span class=\"comment\">// 上传文件目录</span></span><br><span class=\"line\">  keepExtensions: <span class=\"literal\">true</span><span class=\"comment\">// 保留后缀</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>新建 models/users.js，添加如下代码：</p>\n<p><strong>models/users.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注册一个用户</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User.create(user).exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完善处理用户注册的路由，最终修改 routes/signup.js 如下：</p>\n<p><strong>routes/signup.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">'sha1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/users'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check'</span>).checkNotLogin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signup 注册页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signup'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /signup 用户注册</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = req.fields.name</span><br><span class=\"line\">  <span class=\"keyword\">const</span> gender = req.fields.gender</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bio = req.fields.bio</span><br><span class=\"line\">  <span class=\"keyword\">const</span> avatar = req.files.avatar.path.split(path.sep).pop()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> password = req.fields.password</span><br><span class=\"line\">  <span class=\"keyword\">const</span> repassword = req.fields.repassword</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(name.length &gt;= <span class=\"number\">1</span> &amp;&amp; name.length &lt;= <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'名字请限制在 1-10 个字符'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'m'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'x'</span>].indexOf(gender) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'性别只能是 m、f 或 x'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(bio.length &gt;= <span class=\"number\">1</span> &amp;&amp; bio.length &lt;= <span class=\"number\">30</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'个人简介请限制在 1-30 个字符'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!req.files.avatar.name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'缺少头像'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password.length &lt; <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'密码至少 6 个字符'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password !== repassword) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'两次输入密码不一致'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册失败，异步删除上传的头像</span></span><br><span class=\"line\">    fs.unlink(req.files.avatar.path)</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 明文密码加密</span></span><br><span class=\"line\">  password = sha1(password)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 待写入数据库的用户信息</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    password: password,</span><br><span class=\"line\">    gender: gender,</span><br><span class=\"line\">    bio: bio,</span><br><span class=\"line\">    avatar: avatar</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 用户信息写入数据库</span></span><br><span class=\"line\">  UserModel.create(user)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 此 user 是插入 mongodb 后的值，包含 _id</span></span><br><span class=\"line\">      user = result.ops[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"comment\">// 删除密码这种敏感信息，将用户信息存入 session</span></span><br><span class=\"line\">      <span class=\"keyword\">delete</span> user.password</span><br><span class=\"line\">      req.session.user = user</span><br><span class=\"line\">      <span class=\"comment\">// 写入 flash</span></span><br><span class=\"line\">      req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'注册成功'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">      res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注册失败，异步删除上传的头像</span></span><br><span class=\"line\">      fs.unlink(req.files.avatar.path)</span><br><span class=\"line\">      <span class=\"comment\">// 用户名被占用则跳回注册页，而不是错误页</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (e.message.match(<span class=\"string\">'duplicate key'</span>)) &#123;</span><br><span class=\"line\">        req.flash(<span class=\"string\">'error'</span>, <span class=\"string\">'用户名已被占用'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      next(e)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<p>我们使用 express-formidable 处理表单的上传，表单普通字段挂载到 req.fields 上，表单上传后的文件挂载到 req.files 上，文件存储在 public/img 目录下。然后校验了参数，校验通过后将用户信息插入到 MongoDB 中，成功则跳转到主页并显示『注册成功』的通知，失败（如用户名被占用）则跳转回注册页面并显示『用户名已被占用』的通知。</p>\n<blockquote>\n<p>注意：我们使用 sha1 加密用户的密码，sha1 并不是一种十分安全的加密方式，实际开发中可以使用更安全的 <a href=\"https://www.npmjs.com/package/bcrypt\" target=\"_blank\" rel=\"noopener\">bcrypt</a> 或 <a href=\"https://www.npmjs.com/package/scrypt\" target=\"_blank\" rel=\"noopener\">scrypt</a> 加密。<br>注意：注册失败时（参数校验失败或者存数据库时出错）删除已经上传到 public/img 目录下的头像。</p>\n</blockquote>\n<p>为了方便观察效果，我们先创建主页的模板。修改 routes/posts.js 中对应代码如下：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'posts'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建 views/posts.ejs，添加如下代码：</p>\n<p><strong>views/posts.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\">这是主页</span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>localhost:3000/signup</code>，注册成功后如下所示：</p>\n<p><img src=\"/images/4.7.1.png\" alt></p>\n<h2 id=\"登出\"><a href=\"#登出\" class=\"headerlink\" title=\"登出\"></a>登出</h2><p>现在我们来完成登出的功能。修改 routes/signout.js 如下：</p>\n<p><strong>routes/signout.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check'</span>).checkLogin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signout 登出</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 清空 session 中用户信息</span></span><br><span class=\"line\">  req.session.user = <span class=\"literal\">null</span></span><br><span class=\"line\">  req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'登出成功'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 登出成功后跳转到主页</span></span><br><span class=\"line\">  res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<p>此时刷新页面，点击右上角的 <code>登出</code>，成功后如下图所示：</p>\n<p><img src=\"/images/4.8.1.png\" alt></p>\n<h2 id=\"登录页\"><a href=\"#登录页\" class=\"headerlink\" title=\"登录页\"></a>登录页</h2><p>现在我们来完成登录页。修改 routes/signin.js 相应代码如下：</p>\n<p><strong>routes/signin.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signin'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建 views/signin.ejs，添加如下代码：</p>\n<p><strong>views/signin.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">    &lt;form class=&quot;ui form segment&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;用户名&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;用户名&quot; type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;密码&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;密码&quot; type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;submit&quot; class=&quot;ui button fluid&quot; value=&quot;登录&quot;&gt;</span><br><span class=\"line\">    &lt;/form&gt;  </span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>现在刷新页面，点击右边上角 <code>登录</code> 试试吧，我们已经看到了登录页，但先不要点击登录，接下来我们实现处理登录的逻辑。</p>\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p>现在我们来完成登录的功能。修改 models/users.js 添加 <code>getUserByName</code> 方法用于通过用户名获取用户信息：</p>\n<p><strong>models/users.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注册一个用户</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User.create(user).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过用户名获取用户信息</span></span><br><span class=\"line\">  getUserByName: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserByName</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User</span><br><span class=\"line\">      .findOne(&#123; <span class=\"attr\">name</span>: name &#125;)</span><br><span class=\"line\">      .addCreatedAt()</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们使用了 <code>addCreatedAt</code> 自定义插件（通过 _id 生成时间戳），修改 lib/mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> objectIdToTimestamp = <span class=\"built_in\">require</span>(<span class=\"string\">'objectid-to-timestamp'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据 id 生成创建时间 created_at</span></span><br><span class=\"line\">mongolass.plugin(<span class=\"string\">'addCreatedAt'</span>, &#123;</span><br><span class=\"line\">  afterFind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">    results.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">      item.created_at = moment(objectIdToTimestamp(item._id)).format(<span class=\"string\">'YYYY-MM-DD HH:mm'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  afterFindOne: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">      result.created_at = moment(objectIdToTimestamp(result._id)).format(<span class=\"string\">'YYYY-MM-DD HH:mm'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小提示：24 位长的 ObjectId 前 4 个字节是精确到秒的时间戳，所以我们没有额外的存创建时间（如: createdAt）的字段。ObjectId 生成规则：</p>\n</blockquote>\n<p><img src=\"/images/4.8.2.png\" alt></p>\n<p>修改 routes/signin.js 如下：</p>\n<p><strong>routes/signin.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">'sha1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/users'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check'</span>).checkNotLogin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signin 登录页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signin'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /signin 用户登录</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = req.fields.name</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = req.fields.password</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!name.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写用户名'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!password.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写密码'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  UserModel.getUserByName(name)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!user) &#123;</span><br><span class=\"line\">        req.flash(<span class=\"string\">'error'</span>, <span class=\"string\">'用户不存在'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 检查密码是否匹配</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sha1(password) !== user.password) &#123;</span><br><span class=\"line\">        req.flash(<span class=\"string\">'error'</span>, <span class=\"string\">'用户名或密码错误'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'登录成功'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 用户信息写入 session</span></span><br><span class=\"line\">      <span class=\"keyword\">delete</span> user.password</span><br><span class=\"line\">      req.session.user = user</span><br><span class=\"line\">      <span class=\"comment\">// 跳转到主页</span></span><br><span class=\"line\">      res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<p>这里我们在 POST /signin 的路由处理函数中，通过传上来的 name 去数据库中找到对应用户，校验传上来的密码是否跟数据库中的一致。不一致则返回上一页（即登录页）并显示『用户名或密码错误』的通知，一致则将用户信息写入 session，跳转到主页并显示『登录成功』的通知。</p>\n<p>现在刷新页面，点击右上角 <code>登录</code>，用刚才注册的账号登录，如下图所示：</p>\n<p><img src=\"/images/4.8.3.png\" alt></p>\n<h2 id=\"文章模型设计\"><a href=\"#文章模型设计\" class=\"headerlink\" title=\"文章模型设计\"></a>文章模型设计</h2><p>我们只存储文章的作者 id、标题、正文和点击量这几个字段，对应修改 lib/mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.Post = mongolass.model(<span class=\"string\">'Post'</span>, &#123;</span><br><span class=\"line\">  author: &#123; <span class=\"attr\">type</span>: Mongolass.Types.ObjectId, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  title: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  content: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  pv: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'number'</span>, <span class=\"attr\">default</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">exports.Post.index(&#123; <span class=\"attr\">author</span>: <span class=\"number\">1</span>, <span class=\"attr\">_id</span>: <span class=\"number\">-1</span> &#125;).exec()<span class=\"comment\">// 按创建时间降序查看用户的文章列表</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h2><p>现在我们来实现发表文章的功能。首先创建发表文章页，新建 views/create.ejs，添加如下代码：</p>\n<p><strong>views/create.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;</span><br><span class=\"line\">    &lt;a class=&quot;avatar avatar-link&quot;</span><br><span class=\"line\">       href=&quot;/posts?author=&lt;%= user._id %&gt;&quot;</span><br><span class=\"line\">       data-title=&quot;&lt;%= user.name %&gt; | &lt;%= (&#123;m: &apos;男&apos;, f: &apos;女&apos;, x: &apos;保密&apos;&#125;)[user.gender] %&gt;&quot;</span><br><span class=\"line\">       data-content=&quot;&lt;%= user.bio %&gt;&quot;&gt;</span><br><span class=\"line\">      &lt;img class=&quot;avatar&quot; src=&quot;/img/&lt;%= user.avatar %&gt;&quot;&gt;</span><br><span class=\"line\">    &lt;/a&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">    &lt;form class=&quot;ui form segment&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;标题&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;内容&lt;/label&gt;</span><br><span class=\"line\">        &lt;textarea name=&quot;content&quot; rows=&quot;15&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;submit&quot; class=&quot;ui button&quot; value=&quot;发布&quot;&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改 routes/posts.js，将：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/create 发表文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/create'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'发表文章页'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/create 发表文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/create'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'create'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>登录成功状态，点击右上角『发表文章』试下吧。</p>\n<p>发表文章页已经完成了，接下来新建 models/posts.js 用来存放与文章操作相关的代码：</p>\n<p><strong>models/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Post = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).Post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一篇文章</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post.create(post).exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改 routes/posts.js，在文件上方引入 PostModel：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PostModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/posts'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST /posts/create 发表一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/create'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'发表文章'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST /posts/create 发表一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/create'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\">  <span class=\"keyword\">const</span> title = req.fields.title</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = req.fields.content</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!title.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写标题'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!content.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写内容'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> post = &#123;</span><br><span class=\"line\">    author: author,</span><br><span class=\"line\">    title: title,</span><br><span class=\"line\">    content: content</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.create(post)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 此 post 是插入 mongodb 后的值，包含 _id</span></span><br><span class=\"line\">      post = result.ops[<span class=\"number\">0</span>]</span><br><span class=\"line\">      req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'发表成功'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 发表成功后跳转到该文章页</span></span><br><span class=\"line\">      res.redirect(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里校验了上传的表单字段，并将文章信息插入数据库，成功后跳转到该文章页并显示『发表成功』的通知，失败后请求会进入错误处理函数。</p>\n<p>现在刷新页面（登录情况下），点击右上角 <code>发表文章</code> 试试吧，发表成功后跳转到了文章页但并没有任何内容，下面我们就来实现文章页及主页。</p>\n<h2 id=\"主页与文章页\"><a href=\"#主页与文章页\" class=\"headerlink\" title=\"主页与文章页\"></a>主页与文章页</h2><p>现在我们来实现主页及文章页。修改 models/posts.js 如下：</p>\n<p><strong>models/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> marked = <span class=\"built_in\">require</span>(<span class=\"string\">'marked'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Post = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).Post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 post 的 content 从 markdown 转换成 html</span></span><br><span class=\"line\">Post.plugin(<span class=\"string\">'contentToHtml'</span>, &#123;</span><br><span class=\"line\">  afterFind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> posts.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      post.content = marked(post.content)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> post</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  afterFindOne: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (post) &#123;</span><br><span class=\"line\">      post.content = marked(post.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一篇文章</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post.create(post).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 获取一篇文章</span></span><br><span class=\"line\">  getPostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPostById</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post</span><br><span class=\"line\">      .findOne(&#123; <span class=\"attr\">_id</span>: postId &#125;)</span><br><span class=\"line\">      .populate(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'author'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'User'</span> &#125;)</span><br><span class=\"line\">      .addCreatedAt()</span><br><span class=\"line\">      .contentToHtml()</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 按创建时间降序获取所有用户文章或者某个特定用户的所有文章</span></span><br><span class=\"line\">  getPosts: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPosts</span> (<span class=\"params\">author</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> query = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (author) &#123;</span><br><span class=\"line\">      query.author = author</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post</span><br><span class=\"line\">      .find(query)</span><br><span class=\"line\">      .populate(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'author'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'User'</span> &#125;)</span><br><span class=\"line\">      .sort(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">-1</span> &#125;)</span><br><span class=\"line\">      .addCreatedAt()</span><br><span class=\"line\">      .contentToHtml()</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 给 pv 加 1</span></span><br><span class=\"line\">  incPv: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incPv</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post</span><br><span class=\"line\">      .update(&#123; <span class=\"attr\">_id</span>: postId &#125;, &#123; <span class=\"attr\">$inc</span>: &#123; <span class=\"attr\">pv</span>: <span class=\"number\">1</span> &#125; &#125;)</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要讲解两点：</p>\n<ol>\n<li>我们使用了 markdown 解析文章的内容，所以在发表文章的时候可使用 markdown 语法（如插入链接、图片等等），关于 markdown 的使用请参考： <a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明</a>。</li>\n<li>我们在 PostModel 上注册了 <code>contentToHtml</code>，而 <code>addCreatedAt</code> 是在 lib/mongo.js 中 mongolass 上注册的。也就是说 <code>contentToHtml</code> 只针对 PostModel 有效，而 <code>addCreatedAt</code> 对所有 Model 都有效。</li>\n</ol>\n<p>接下来完成主页的模板，修改 views/posts.ejs 如下：</p>\n<p><strong>views/posts.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% posts.forEach(function (post) &#123; %&gt;</span><br><span class=\"line\">  &lt;%- include(&apos;components/post-content&apos;, &#123; post: post &#125;) %&gt;</span><br><span class=\"line\">&lt;% &#125;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建 views/components/post-content.ejs 用来存放单篇文章的模板片段：</p>\n<p><strong>views/components/post-content.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;post-content&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;four wide column&quot;&gt;</span><br><span class=\"line\">      &lt;a class=&quot;avatar avatar-link&quot;</span><br><span class=\"line\">         href=&quot;/posts?author=&lt;%= post.author._id %&gt;&quot;</span><br><span class=\"line\">         data-title=&quot;&lt;%= post.author.name %&gt; | &lt;%= (&#123;m: &apos;男&apos;, f: &apos;女&apos;, x: &apos;保密&apos;&#125;)[post.author.gender] %&gt;&quot;</span><br><span class=\"line\">         data-content=&quot;&lt;%= post.author.bio %&gt;&quot;&gt;</span><br><span class=\"line\">        &lt;img class=&quot;avatar&quot; src=&quot;/img/&lt;%= post.author.avatar %&gt;&quot;&gt;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;ui segment&quot;&gt;</span><br><span class=\"line\">        &lt;h3&gt;&lt;a href=&quot;/posts/&lt;%= post._id %&gt;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt;&lt;/h3&gt;</span><br><span class=\"line\">        &lt;pre&gt;&lt;%- post.content %&gt;&lt;/pre&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;span class=&quot;tag&quot;&gt;&lt;%= post.created_at %&gt;&lt;/span&gt;</span><br><span class=\"line\">          &lt;span class=&quot;tag right&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;浏览(&lt;%= post.pv || 0 %&gt;)&lt;/span&gt;</span><br><span class=\"line\">            &lt;span&gt;留言(&lt;%= post.commentsCount || 0 %&gt;)&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;% if (user &amp;&amp; post.author._id &amp;&amp; user._id.toString() === post.author._id.toString()) &#123; %&gt;</span><br><span class=\"line\">              &lt;div class=&quot;ui inline dropdown&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;i class=&quot;dropdown icon&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">                &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">                  &lt;div class=&quot;item&quot;&gt;&lt;a href=&quot;/posts/&lt;%= post._id %&gt;/edit&quot;&gt;编辑&lt;/a&gt;&lt;/div&gt;</span><br><span class=\"line\">                  &lt;div class=&quot;item&quot;&gt;&lt;a href=&quot;/posts/&lt;%= post._id %&gt;/remove&quot;&gt;删除&lt;/a&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">              &lt;/div&gt;</span><br><span class=\"line\">            &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：我们用了 <code>&lt;%- post.content %&gt;</code>，而不是 <code>&lt;%= post.content %&gt;</code>，因为 post.content 是 markdown 转换后的 html 字符串。</p>\n</blockquote>\n<p>修改 routes/posts.js，将：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'posts'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.query.author</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.getPosts(author)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">      res.render(<span class=\"string\">'posts'</span>, &#123;</span><br><span class=\"line\">        posts: posts</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：主页与用户页通过 url 中的 author 区分。</p>\n</blockquote>\n<p>现在完成了主页与用户页，访问 <code>http://localhost:3000/posts</code> 试试吧，现在已经将我们之前创建的文章显示出来了，尝试点击用户的头像看看效果。</p>\n<p>接下来完成文章详情页。新建 views/post.ejs，添加如下代码：</p>\n<p><strong>views/post.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\">&lt;%- include(&apos;components/post-content&apos;) %&gt;</span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>打开 routes/posts.js，将：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'文章详情页'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    PostModel.getPostById(postId), <span class=\"comment\">// 获取文章信息</span></span><br><span class=\"line\">    PostModel.incPv(postId)<span class=\"comment\">// pv 加 1</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> post = result[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'该文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      res.render(<span class=\"string\">'post'</span>, &#123;</span><br><span class=\"line\">        post: post</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在刷新浏览器，点击文章的标题看看浏览器地址的变化吧。</p>\n<blockquote>\n<p>注意：浏览器地址有变化，但页面看不出区别来（因为页面布局一样），后面我们添加留言功能后就能看出区别来了。</p>\n</blockquote>\n<h2 id=\"编辑与删除文章\"><a href=\"#编辑与删除文章\" class=\"headerlink\" title=\"编辑与删除文章\"></a>编辑与删除文章</h2><p>现在我们来完成编辑与删除文章的功能。修改 models/posts.js，在 module.exports 对象上添加如下 3 个方法：</p>\n<p><strong>models/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过文章 id 获取一篇原生文章（编辑文章）</span></span><br><span class=\"line\">getRawPostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRawPostById</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Post</span><br><span class=\"line\">    .findOne(&#123; <span class=\"attr\">_id</span>: postId &#125;)</span><br><span class=\"line\">    .populate(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'author'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'User'</span> &#125;)</span><br><span class=\"line\">    .exec()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过文章 id 更新一篇文章</span></span><br><span class=\"line\">updatePostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updatePostById</span> (<span class=\"params\">postId, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Post.update(&#123; <span class=\"attr\">_id</span>: postId &#125;, &#123; <span class=\"attr\">$set</span>: data &#125;).exec()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过文章 id 删除一篇文章</span></span><br><span class=\"line\">delPostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delPostById</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Post.deleteOne(&#123; <span class=\"attr\">_id</span>: postId &#125;).exec()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：不要忘了在适当位置添加逗号，如 incPv 的结束大括号后。</p>\n</blockquote>\n<blockquote>\n<p>注意：我们通过新函数 <code>getRawPostById</code> 用来获取文章原生的内容（编辑页面用），而不是用 <code>getPostById</code> 返回将 markdown 转换成 html 后的内容。</p>\n</blockquote>\n<p>新建编辑文章页 views/edit.ejs，添加如下代码：</p>\n<p><strong>views/edit.ejs</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(<span class=\"string\">'header'</span>) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ui grid\"</span>&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"four wide column\"</span>&gt;</span><br><span class=\"line\">    &lt;a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"avatar\"</span></span><br><span class=\"line\">       href=<span class=\"string\">\"/posts?author=&lt;%= user._id %&gt;\"</span></span><br><span class=\"line\">       data-title=<span class=\"string\">\"&lt;%= user.name %&gt; | &lt;%= (&#123;m: '男', f: '女', x: '保密'&#125;)[user.gender] %&gt;\"</span></span><br><span class=\"line\">       data-content=<span class=\"string\">\"&lt;%= user.bio %&gt;\"</span>&gt;</span><br><span class=\"line\">      &lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"avatar\"</span> src=<span class=\"string\">\"/img/&lt;%= user.avatar %&gt;\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"eight wide column\"</span>&gt;</span><br><span class=\"line\">    &lt;form <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ui form segment\"</span> method=<span class=\"string\">\"post\"</span> action=<span class=\"string\">\"/posts/&lt;%= post._id %&gt;/edit\"</span>&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"field required\"</span>&gt;</span><br><span class=\"line\">        &lt;label&gt;标题&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"text\" name=\"title\" value=\"&lt;%= post.title %&gt;\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"field required\"</span>&gt;</span><br><span class=\"line\">        &lt;label&gt;内容&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;textarea name=\"content\" rows=\"15\"&gt;&lt;%= post.content %&gt;&lt;/</span>textarea&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;input type=\"submit\" class=\"ui button\" value=\"发布\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>form&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(<span class=\"string\">'footer'</span>) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改 routes/posts.js，将：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/edit 更新文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId/edit'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'更新文章页'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /posts/:postId/edit 更新一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:postId/edit'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'更新文章'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/remove 删除一篇文章</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId/remove'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'删除文章'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/edit 更新文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId/edit'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.getRawPostById(postId)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'该文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (author.toString() !== post.author._id.toString()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'权限不足'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      res.render(<span class=\"string\">'edit'</span>, &#123;</span><br><span class=\"line\">        post: post</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /posts/:postId/edit 更新一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:postId/edit'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\">  <span class=\"keyword\">const</span> title = req.fields.title</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = req.fields.content</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!title.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写标题'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!content.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写内容'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.getRawPostById(postId)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (post.author._id.toString() !== author.toString()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'没有权限'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      PostModel.updatePostById(postId, &#123; <span class=\"attr\">title</span>: title, <span class=\"attr\">content</span>: content &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'编辑文章成功'</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 编辑成功后跳转到上一页</span></span><br><span class=\"line\">          res.redirect(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;postId&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(next)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/remove 删除一篇文章</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId/remove'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.getRawPostById(postId)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (post.author._id.toString() !== author.toString()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'没有权限'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      PostModel.delPostById(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'删除文章成功'</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 删除成功后跳转到主页</span></span><br><span class=\"line\">          res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(next)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在刷新主页，点击文章右下角的小三角，编辑文章和删除文章试试吧。</p>\n<h2 id=\"留言模型设计\"><a href=\"#留言模型设计\" class=\"headerlink\" title=\"留言模型设计\"></a>留言模型设计</h2><p>我们只需要留言的作者 id、留言内容和关联的文章 id 这几个字段，修改 lib/mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.Comment = mongolass.model(<span class=\"string\">'Comment'</span>, &#123;</span><br><span class=\"line\">  author: &#123; <span class=\"attr\">type</span>: Mongolass.Types.ObjectId, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  content: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  postId: &#123; <span class=\"attr\">type</span>: Mongolass.Types.ObjectId, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">exports.Comment.index(&#123; <span class=\"attr\">postId</span>: <span class=\"number\">1</span>, <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;).exec()<span class=\"comment\">// 通过文章 id 获取该文章下所有留言，按留言创建时间升序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示留言\"><a href=\"#显示留言\" class=\"headerlink\" title=\"显示留言\"></a>显示留言</h2><p>在实现留言功能之前，我们先让文章页可以显示留言列表。首先创建留言的模板，新建 views/components/comments.ejs，添加如下代码：</p>\n<p><strong>views/components/comments.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ui segment&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;ui minimal comments&quot;&gt;</span><br><span class=\"line\">        &lt;h3 class=&quot;ui dividing header&quot;&gt;留言&lt;/h3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;% comments.forEach(function (comment) &#123; %&gt;</span><br><span class=\"line\">          &lt;div class=&quot;comment&quot;&gt;</span><br><span class=\"line\">            &lt;span class=&quot;avatar&quot;&gt;</span><br><span class=\"line\">              &lt;img src=&quot;/img/&lt;%= comment.author.avatar %&gt;&quot;&gt;</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">              &lt;a class=&quot;author&quot; href=&quot;/posts?author=&lt;%= comment.author._id %&gt;&quot;&gt;&lt;%= comment.author.name %&gt;&lt;/a&gt;</span><br><span class=\"line\">              &lt;div class=&quot;metadata&quot;&gt;</span><br><span class=\"line\">                &lt;span class=&quot;date&quot;&gt;&lt;%= comment.created_at %&gt;&lt;/span&gt;</span><br><span class=\"line\">              &lt;/div&gt;</span><br><span class=\"line\">              &lt;div class=&quot;text&quot;&gt;&lt;%- comment.content %&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">              &lt;% if (user &amp;&amp; comment.author._id &amp;&amp; user._id.toString() === comment.author._id.toString()) &#123; %&gt;</span><br><span class=\"line\">                &lt;div class=&quot;actions&quot;&gt;</span><br><span class=\"line\">                  &lt;a class=&quot;reply&quot; href=&quot;/comments/&lt;%= comment._id %&gt;/remove&quot;&gt;删除&lt;/a&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">              &lt;% &#125; %&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        &lt;% &#125;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;% if (user) &#123; %&gt;</span><br><span class=\"line\">          &lt;form class=&quot;ui reply form&quot; method=&quot;post&quot; action=&quot;/comments&quot;&gt;</span><br><span class=\"line\">            &lt;input name=&quot;postId&quot; value=&quot;&lt;%= post._id %&gt;&quot; hidden&gt;</span><br><span class=\"line\">            &lt;div class=&quot;field&quot;&gt;</span><br><span class=\"line\">              &lt;textarea name=&quot;content&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;input type=&quot;submit&quot; class=&quot;ui icon button&quot; value=&quot;留言&quot; /&gt;</span><br><span class=\"line\">          &lt;/form&gt;</span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：我们在提交留言表单时带上了文章 id（postId），通过 hidden 隐藏。</p>\n</blockquote>\n<p>在文章页引入留言的模板片段，修改 views/post.ejs 为：</p>\n<p><strong>views/post.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;components/post-content&apos;) %&gt;</span><br><span class=\"line\">&lt;%- include(&apos;components/comments&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建 models/comments.js，存放留言相关的数据库操作，添加如下代码：</p>\n<p><strong>models/comments.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> marked = <span class=\"built_in\">require</span>(<span class=\"string\">'marked'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Comment = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).Comment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 comment 的 content 从 markdown 转换成 html</span></span><br><span class=\"line\">Comment.plugin(<span class=\"string\">'contentToHtml'</span>, &#123;</span><br><span class=\"line\">  afterFind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">comments</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> comments.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">comment</span>) </span>&#123;</span><br><span class=\"line\">      comment.content = marked(comment.content)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> comment</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个留言</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">comment</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.create(comment).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过留言 id 获取一个留言</span></span><br><span class=\"line\">  getCommentById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCommentById</span> (<span class=\"params\">commentId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.findOne(&#123; <span class=\"attr\">_id</span>: commentId &#125;).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过留言 id 删除一个留言</span></span><br><span class=\"line\">  delCommentById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delCommentById</span> (<span class=\"params\">commentId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.deleteOne(&#123; <span class=\"attr\">_id</span>: commentId &#125;).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 删除该文章下所有留言</span></span><br><span class=\"line\">  delCommentsByPostId: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delCommentsByPostId</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.deleteMany(&#123; <span class=\"attr\">postId</span>: postId &#125;).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 获取该文章下所有留言，按留言创建时间升序</span></span><br><span class=\"line\">  getComments: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComments</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment</span><br><span class=\"line\">      .find(&#123; <span class=\"attr\">postId</span>: postId &#125;)</span><br><span class=\"line\">      .populate(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'author'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'User'</span> &#125;)</span><br><span class=\"line\">      .sort(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">      .addCreatedAt()</span><br><span class=\"line\">      .contentToHtml()</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 获取该文章下留言数</span></span><br><span class=\"line\">  getCommentsCount: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCommentsCount</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.count(&#123; <span class=\"attr\">postId</span>: postId &#125;).exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小提示：我们让留言也支持了 markdown。<br>注意：删除一篇文章成功后也要删除该文章下所有的评论，上面 delCommentsByPostId 就是用来做这件事的。</p>\n</blockquote>\n<p>修改 models/posts.js，在：</p>\n<p><strong>models/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Post = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).Post</span><br></pre></td></tr></table></figure>\n\n<p>下添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CommentModel = <span class=\"built_in\">require</span>(<span class=\"string\">'./comments'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 post 添加留言数 commentsCount</span></span><br><span class=\"line\">Post.plugin(<span class=\"string\">'addCommentsCount'</span>, &#123;</span><br><span class=\"line\">  afterFind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(posts.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> CommentModel.getCommentsCount(post._id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">commentsCount</span>) </span>&#123;</span><br><span class=\"line\">        post.commentsCount = commentsCount</span><br><span class=\"line\">        <span class=\"keyword\">return</span> post</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  afterFindOne: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (post) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> CommentModel.getCommentsCount(post._id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">        post.commentsCount = count</span><br><span class=\"line\">        <span class=\"keyword\">return</span> post</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 PostModel 上注册了 <code>addCommentsCount</code> 用来给每篇文章添加留言数 <code>commentsCount</code>，在 <code>getPostById</code> 和 <code>getPosts</code> 方法里的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.addCreatedAt()</span><br></pre></td></tr></table></figure>\n\n<p>下添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.addCommentsCount()</span><br></pre></td></tr></table></figure>\n\n<p>这样主页和文章页的文章就可以正常显示留言数了。</p>\n<p>然后将 <code>delPostById</code> 修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过用户 id 和文章 id 删除一篇文章</span></span><br><span class=\"line\">delPostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delPostById</span> (<span class=\"params\">postId, author</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Post.deleteOne(&#123; <span class=\"attr\">author</span>: author, <span class=\"attr\">_id</span>: postId &#125;)</span><br><span class=\"line\">    .exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 文章删除后，再删除该文章下的所有留言</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.result.ok &amp;&amp; res.result.n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CommentModel.delCommentsByPostId(postId)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小提示：虽然目前看起来使用 Mongolass 自定义插件并不能节省代码，反而使代码变多了。Mongolass 插件真正的优势在于：在项目非常庞大时，可通过自定义的插件随意组合（及顺序）实现不同的输出，如上面的 <code>getPostById</code> 需要将取出 markdown 转换成 html，则使用 <code>.contentToHtml()</code>，否则像 <code>getRawPostById</code> 则不必使用。</p>\n</blockquote>\n<p>修改 routes/posts.js，在：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PostModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/posts'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>下引入 CommentModel:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CommentModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/comments'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在文章页传入留言列表，将：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    PostModel.getPostById(postId), <span class=\"comment\">// 获取文章信息</span></span><br><span class=\"line\">    CommentModel.getComments(postId), <span class=\"comment\">// 获取该文章所有留言</span></span><br><span class=\"line\">    PostModel.incPv(postId)<span class=\"comment\">// pv 加 1</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> post = result[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> comments = result[<span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'该文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      res.render(<span class=\"string\">'post'</span>, &#123;</span><br><span class=\"line\">        post: post,</span><br><span class=\"line\">        comments: comments</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在刷新文章页试试吧，此时已经显示了留言的输入框。</p>\n<h2 id=\"发表与删除留言\"><a href=\"#发表与删除留言\" class=\"headerlink\" title=\"发表与删除留言\"></a>发表与删除留言</h2><p>现在我们来实现发表与删除留言的功能。将 routes/comments.js 修改如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check'</span>).checkLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> CommentModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/comments'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /comments 创建一条留言</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.fields.postId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = req.fields.content</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!content.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写留言内容'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> comment = &#123;</span><br><span class=\"line\">    author: author,</span><br><span class=\"line\">    postId: postId,</span><br><span class=\"line\">    content: content</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  CommentModel.create(comment)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'留言成功'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 留言成功后跳转到上一页</span></span><br><span class=\"line\">      res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /comments/:commentId/remove 删除一条留言</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:commentId/remove'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> commentId = req.params.commentId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\"></span><br><span class=\"line\">  CommentModel.getCommentById(commentId)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">comment</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!comment) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'留言不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (comment.author.toString() !== author.toString()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'没有权限删除留言'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      CommentModel.delCommentById(commentId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'删除留言成功'</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 删除成功后跳转到上一页</span></span><br><span class=\"line\">          res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(next)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们完成了创建留言和删除留言的逻辑。刷新页面，尝试留言试试吧。留言成功后，将鼠标悬浮在留言上可以显示出 <code>删除</code> 的按钮，点击可以删除留言。</p>\n<p>现在访问一个不存在的地址，如：<code>http://localhost:3000/haha</code> 页面会显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot GET /haha</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"404-页面\"><a href=\"#404-页面\" class=\"headerlink\" title=\"404 页面\"></a>404 页面</h2><p>我们来自定义 404 页面。修改 routes/index.js，在：</p>\n<p><strong>routes/index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/comments'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'./comments'</span>))</span><br></pre></td></tr></table></figure>\n\n<p>下添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 404 page</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!res.headersSent) &#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">404</span>).render(<span class=\"string\">'404'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建 views/404.ejs，添加如下代码：</p>\n<p><strong>views/404.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;%= blog.title %&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们只为了演示 express 中处理 404 的情况，用了腾讯公益的 404 页面，刷新一下页面看下效果吧。</p>\n<p>前面讲到 express 有一个内置的错误处理逻辑，如果程序出错，会直接将错误栈返回并显示到页面上。如访问：<code>localhost:3000/posts/xxx/edit</code> 没有权限编辑的文章页，将会直接在页面中显示错误栈，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Error</span>: 权限不足</span><br><span class=\"line\">    at /Users/nswbmw/Desktop/myblog/routes/posts.js:<span class=\"number\">95</span>:<span class=\"number\">15</span></span><br><span class=\"line\">    at &lt;anonymous&gt;</span><br><span class=\"line\">    at process._tickCallback (internal/process/next_tick.js:<span class=\"number\">188</span>:<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n\n<p>现在我们修改代码，实现复用页面通知。修改 index.js，在 <code>app.listen</code> 上面添加如下代码：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">  req.flash(<span class=\"string\">'error'</span>, err.message)</span><br><span class=\"line\">  res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们实现了将错误信息用页面通知展示的功能，刷新页面将会跳转到主页并显示『权限不足』的红色通知。</p>\n<p>现在我们来实现日志功能，日志分为正常请求的日志和错误请求的日志，我们希望实现这两种日志都打印到终端并写入文件。</p>\n<h2 id=\"winston-和-express-winston\"><a href=\"#winston-和-express-winston\" class=\"headerlink\" title=\"winston 和 express-winston\"></a>winston 和 express-winston</h2><p>我们使用 <a href=\"https://www.npmjs.com/package/winston\" target=\"_blank\" rel=\"noopener\">winston</a> 和 <a href=\"https://www.npmjs.com/package/express-winston\" target=\"_blank\" rel=\"noopener\">express-winston</a> 记录日志。</p>\n<p>新建 logs 目录存放日志文件，修改 index.js，在：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">'./package'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>下引入所需模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> winston = <span class=\"built_in\">require</span>(<span class=\"string\">'winston'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> expressWinston = <span class=\"built_in\">require</span>(<span class=\"string\">'express-winston'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 路由</span><br><span class=\"line\">routes(app)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常请求的日志</span></span><br><span class=\"line\">app.use(expressWinston.logger(&#123;</span><br><span class=\"line\">  transports: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> (winston.transports.Console)(&#123;</span><br><span class=\"line\">      json: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      colorize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> winston.transports.File(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'logs/success.log'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\">routes(app)</span><br><span class=\"line\"><span class=\"comment\">// 错误请求的日志</span></span><br><span class=\"line\">app.use(expressWinston.errorLogger(&#123;</span><br><span class=\"line\">  transports: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> winston.transports.Console(&#123;</span><br><span class=\"line\">      json: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      colorize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> winston.transports.File(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'logs/error.log'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>刷新页面看一下终端输出及 logs 下的文件。<br>可以看出：winston 将正常请求的日志打印到终端并写入了 <code>logs/success.log</code>，将错误请求的日志打印到终端并写入了 <code>logs/error.log</code>。</p>\n<blockquote>\n<p>注意：记录正常请求日志的中间件要放到 <code>routes(app)</code> 之前，记录错误请求日志的中间件要放到 <code>routes(app)</code> 之后。</p>\n</blockquote>\n<h2 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h2><p>如果我们想把项目托管到 git 服务器上（如: <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a>），而不想把线上配置、本地调试的 logs 以及 node_modules 添加到 git 的版本控制中，这个时候就需要 .gitignore 文件了，git 会读取 .gitignore 并忽略这些文件。在 myblog 下新建 .gitignore 文件，添加如下配置：</p>\n<p><strong>.gitignore</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/*</span><br><span class=\"line\">!config/default.*</span><br><span class=\"line\">npm-debug.log</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">coverage</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，通过设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/*</span><br><span class=\"line\">!config/default.*</span><br></pre></td></tr></table></figure>\n\n<p>这样只有 config/default.js 会加入 git 的版本控制，而 config 目录下的其他配置文件则会被忽略，因为把线上配置加入到 git 是一个不安全的行为，通常你需要本地或者线上环境手动创建 config/production.js，然后添加一些线上的配置（如：mongodb 配置）即可覆盖相应的 default 配置。</p>\n<blockquote>\n<p>注意：后面讲到部署到 Heroku 时，因为无法登录到 Heroku 主机，所以可以把以下两行删掉，将 config/production.js 也加入 git 中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; config/*</span><br><span class=\"line\">&gt; !config/default.*</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>然后在 public/img 目录下创建 .gitignore：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ignore everything in this directory</span><br><span class=\"line\">*</span><br><span class=\"line\"># Except this file</span><br><span class=\"line\">!.gitignore</span><br></pre></td></tr></table></figure>\n\n<p>这样 git 会忽略 public/img 目录下所有上传的头像，而不忽略 public/img 目录。同理，在 logs 目录下创建 .gitignore 忽略日志文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ignore everything in this directory</span><br><span class=\"line\">*</span><br><span class=\"line\"># Except this file</span><br><span class=\"line\">!.gitignore</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><h2 id=\"mocha-和-supertest\"><a href=\"#mocha-和-supertest\" class=\"headerlink\" title=\"mocha 和 supertest\"></a>mocha 和 supertest</h2><p><a href=\"https://www.npmjs.com/package/mocha\" target=\"_blank\" rel=\"noopener\">mocha</a> 和 <a href=\"https://www.npmjs.com/package/supertest\" target=\"_blank\" rel=\"noopener\">supertest</a> 是常用的测试组合，通常用来测试 restful 的 api 接口，这里我们也可以用来测试我们的博客应用。<br>在 myblog 下新建 test 文件夹存放测试文件，以注册为例讲解 mocha 和 supertest 的用法。首先安装所需模块：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha supertest --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>修改 package.json，将：</p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"mocha test\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定执行 test 目录的测试。修改 index.js，将：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听端口，启动程序</span></span><br><span class=\"line\">app.listen(config.port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;pkg.name&#125;</span> listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.parent) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 被 require，则导出 app</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = app</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 监听端口，启动程序</span></span><br><span class=\"line\">  app.listen(config.port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;pkg.name&#125;</span> listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样做可以实现：直接启动 index.js 则会监听端口启动程序，如果 index.js 被 require 了，则导出 app，通常用于测试。</p>\n<p>找一张图片用于测试上传头像，放到 test 目录下，如 avatar.png。新建 test/signup.js，添加如下测试代码：</p>\n<p><strong>test/signup.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'supertest'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> testName1 = <span class=\"string\">'testName1'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> testName2 = <span class=\"string\">'nswbmw'</span></span><br><span class=\"line\">describe(<span class=\"string\">'signup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'POST /signup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> agent = request.agent(app)<span class=\"comment\">// persist cookie when redirect</span></span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个用户</span></span><br><span class=\"line\">      User.create(&#123;</span><br><span class=\"line\">        name: testName1,</span><br><span class=\"line\">        password: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">        avatar: <span class=\"string\">''</span>,</span><br><span class=\"line\">        gender: <span class=\"string\">'x'</span>,</span><br><span class=\"line\">        bio: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">        .exec()</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(done)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    afterEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 删除测试用户</span></span><br><span class=\"line\">      User.deleteMany(&#123; <span class=\"attr\">name</span>: &#123; <span class=\"attr\">$in</span>: [testName1, testName2] &#125; &#125;)</span><br><span class=\"line\">        .exec()</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(done)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    after(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      process.exit()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用户名错误的情况</span></span><br><span class=\"line\">    it(<span class=\"string\">'wrong name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      agent</span><br><span class=\"line\">        .post(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">        .type(<span class=\"string\">'form'</span>)</span><br><span class=\"line\">        .field(&#123; <span class=\"attr\">name</span>: <span class=\"string\">''</span> &#125;)</span><br><span class=\"line\">        .attach(<span class=\"string\">'avatar'</span>, path.join(__dirname, <span class=\"string\">'avatar.png'</span>))</span><br><span class=\"line\">        .redirects()</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err)</span><br><span class=\"line\">          assert(res.text.match(<span class=\"regexp\">/名字请限制在 1-10 个字符/</span>))</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 性别错误的情况</span></span><br><span class=\"line\">    it(<span class=\"string\">'wrong gender'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      agent</span><br><span class=\"line\">        .post(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">        .type(<span class=\"string\">'form'</span>)</span><br><span class=\"line\">        .field(&#123; <span class=\"attr\">name</span>: testName2, <span class=\"attr\">gender</span>: <span class=\"string\">'a'</span> &#125;)</span><br><span class=\"line\">        .attach(<span class=\"string\">'avatar'</span>, path.join(__dirname, <span class=\"string\">'avatar.png'</span>))</span><br><span class=\"line\">        .redirects()</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err)</span><br><span class=\"line\">          assert(res.text.match(<span class=\"regexp\">/性别只能是 m、f 或 x/</span>))</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 其余的参数测试自行补充</span></span><br><span class=\"line\">    <span class=\"comment\">// 用户名被占用的情况</span></span><br><span class=\"line\">    it(<span class=\"string\">'duplicate name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      agent</span><br><span class=\"line\">        .post(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">        .type(<span class=\"string\">'form'</span>)</span><br><span class=\"line\">        .field(&#123; <span class=\"attr\">name</span>: testName1, <span class=\"attr\">gender</span>: <span class=\"string\">'m'</span>, <span class=\"attr\">bio</span>: <span class=\"string\">'noder'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'123456'</span>, <span class=\"attr\">repassword</span>: <span class=\"string\">'123456'</span> &#125;)</span><br><span class=\"line\">        .attach(<span class=\"string\">'avatar'</span>, path.join(__dirname, <span class=\"string\">'avatar.png'</span>))</span><br><span class=\"line\">        .redirects()</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err)</span><br><span class=\"line\">          assert(res.text.match(<span class=\"regexp\">/用户名已被占用/</span>))</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册成功的情况</span></span><br><span class=\"line\">    it(<span class=\"string\">'success'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      agent</span><br><span class=\"line\">        .post(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">        .type(<span class=\"string\">'form'</span>)</span><br><span class=\"line\">        .field(&#123; <span class=\"attr\">name</span>: testName2, <span class=\"attr\">gender</span>: <span class=\"string\">'m'</span>, <span class=\"attr\">bio</span>: <span class=\"string\">'noder'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'123456'</span>, <span class=\"attr\">repassword</span>: <span class=\"string\">'123456'</span> &#125;)</span><br><span class=\"line\">        .attach(<span class=\"string\">'avatar'</span>, path.join(__dirname, <span class=\"string\">'avatar.png'</span>))</span><br><span class=\"line\">        .redirects()</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err)</span><br><span class=\"line\">          assert(res.text.match(<span class=\"regexp\">/注册成功/</span>))</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>此时编辑器会报语法错误（如：describe 未定义等等），修改 .eslintrc.json 如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"globals\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"describe\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"beforeEach\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"afterEach\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"after\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"it\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，eslint 会忽略 globals 中变量未定义的警告。运行 <code>npm test</code> 看看效果吧，其余的测试请读者自行完成。</p>\n<h2 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h2><p>我们写测试肯定想覆盖所有的情况（包括各种出错的情况及正确时的情况），但光靠想需要写哪些测试是不行的，总也会有疏漏，最简单的办法就是可以直观的看出测试是否覆盖了所有的代码，这就是测试覆盖率，即被测试覆盖到的代码行数占总代码行数的比例。</p>\n<blockquote>\n<p>注意：即使测试覆盖率达到 100% 也不能说明你的测试覆盖了所有的情况，只能说明基本覆盖了所有的情况。</p>\n</blockquote>\n<p><a href=\"https://www.npmjs.com/package/istanbul\" target=\"_blank\" rel=\"noopener\">istanbul</a> 是一个常用的生成测试覆盖率的库，它会将测试的结果报告生成 html 页面，并放到项目根目录的 coverage 目录下。首先安装 istanbul:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i istanbul --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>配置 istanbul 很简单，将 package.json 中：</p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"mocha test\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"istanbul cover _mocha\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：Windows 下需要改成 <code>istanbul cover node_modules/mocha/bin/_mocha</code>。</p>\n<p>即可将 istanbul 和 mocha 结合使用，运行 <code>npm test</code> 终端会打印：</p>\n<p><img src=\"/images/4.14.1.png\" alt></p>\n<p>打开 myblog/coverage/Icov-report/index.html，如下所示：</p>\n<p><img src=\"/images/4.14.2.png\" alt></p>\n<p>可以点进去查看某个代码文件具体的覆盖率，如下所示：</p>\n<p><img src=\"/images/4.14.3.png\" alt></p>\n<p>红色的行表示测试没有覆盖到，因为我们只写了 name 和 gender 的测试。</p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><h2 id=\"申请-MLab\"><a href=\"#申请-MLab\" class=\"headerlink\" title=\"申请 MLab\"></a>申请 MLab</h2><p><a href=\"https://mlab.com\" target=\"_blank\" rel=\"noopener\">MLab</a> (前身是 MongoLab) 是一个 mongodb 云数据库提供商，我们可以选择 500MB 空间的免费套餐用来测试。注册成功后，点击右上角的 <code>Create New</code> 创建一个数据库（如: myblog），成功后点击进入到该数据库详情页，注意页面中有一行黄色的警告：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A database user is required to connect to this database. To create one now, visit the &apos;Users&apos; tab and click the &apos;Add database user&apos; button.</span><br></pre></td></tr></table></figure>\n\n<p>每个数据库至少需要一个 user，所以我们点击 Users 下的 <code>Add database user</code> 创建一个用户。</p>\n<blockquote>\n<p>注意：不要选中 <code>Make read-only</code>，因为我们有写数据库的操作。</p>\n</blockquote>\n<p>最后分配给我们的类似下面的 mongodb url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds139327.mlab.com:39327/myblog</span><br></pre></td></tr></table></figure>\n\n<p>如我创建的用户名和密码都为 myblog 的用户，新建 config/production.js，添加如下代码：</p>\n<p><strong>config/production.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://myblog:myblog@ds139327.mlab.com:39327/myblog'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>停止程序，然后以 production 配置启动程序:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cross-env --save-dev <span class=\"comment\"># 本地安装 cross-env</span></span><br><span class=\"line\">npm i cross-env -g <span class=\"comment\"># 全局安装 cross-env</span></span><br><span class=\"line\">cross-env NODE_ENV=production supervisor index</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：cross-env 用来兼容 Windows 系统和 Linux/Mac 系统设置环境变量的差异。</p>\n</blockquote>\n<h2 id=\"pm2\"><a href=\"#pm2\" class=\"headerlink\" title=\"pm2\"></a>pm2</h2><p>当我们的博客要部署到线上服务器时，不能单纯的靠 <code>node index</code> 或者 <code>supervisor index</code> 来启动了，因为我们断掉 SSH 连接后服务就终止了，这时我们就需要像 <a href=\"https://www.npmjs.com/package/pm2\" target=\"_blank\" rel=\"noopener\">pm2</a> 或者 <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\" rel=\"noopener\">forever</a> 这样的进程管理工具了。pm2 是 Node.js 下的生产环境进程管理工具，就是我们常说的进程守护工具，可以用来在生产环境中进行自动重启、日志记录、错误预警等等。以 pm2 为例，全局安装 pm2：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i pm2 -g</span><br></pre></td></tr></table></figure>\n\n<p>修改 package.json，添加 start 的命令：</p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"istanbul cover _mocha\",</span><br><span class=\"line\">  \"start\": \"cross-env NODE_ENV=production pm2 start index.js --name 'myblog'\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后运行 <code>npm start</code> 通过 pm2 启动程序，如下图所示 ：</p>\n<p><img src=\"/images/4.15.1.png\" alt></p>\n<p>pm2 常用命令:</p>\n<ol>\n<li><code>pm2 start/stop</code>: 启动/停止程序</li>\n<li><code>pm2 reload/restart [id|name]</code>: 重启程序</li>\n<li><code>pm2 logs [id|name]</code>: 查看日志</li>\n<li><code>pm2 l/list</code>: 列出程序列表</li>\n</ol>\n<p>更多命令请使用 <code>pm2 -h</code> 查看。</p>\n<h2 id=\"部署到-Heroku\"><a href=\"#部署到-Heroku\" class=\"headerlink\" title=\"部署到 Heroku\"></a>部署到 Heroku</h2><p><a href=\"https://www.heroku.com\" target=\"_blank\" rel=\"noopener\">Heroku</a> 是一个支持多种编程语言的云服务平台，Heroku 也提供免费的基础套餐供开发者测试使用。现在，我们将论坛部署到 Heroku。</p>\n<blockquote>\n<p>注意：新版 heroku 会有填写信用卡的步骤，如果没有信用卡请跳过本节。</p>\n</blockquote>\n<p>首先，需要到 <a href=\"https://toolbelt.heroku.com/\" target=\"_blank\" rel=\"noopener\">https://toolbelt.heroku.com/</a> 下载安装 Heroku 的命令行工具包 toolbelt。然后登录（如果没有账号，请注册）到 Heroku 的 Dashboard，点击右上角 New -&gt; Create New App 创建一个应用。创建成功后运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heroku login</span><br></pre></td></tr></table></figure>\n\n<p>填写正确的 email 和 password 验证通过后，本地会产生一个 SSH public key。在部署到 Heroku 之前，我们需要对代码进行简单的修改。如下：</p>\n<p>1.删掉 .gitignore 中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/*</span><br><span class=\"line\">!config/default.*</span><br></pre></td></tr></table></figure>\n\n<p>因为我们无法登录到 Heroku 主机创建 production 配置文件，所以这里将 production 配置也上传到 Heroku。</p>\n<p>2.打开 index.js，将 <code>app.listen</code> 修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || config.port</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;pkg.name&#125;</span> listening on port <span class=\"subst\">$&#123;port&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>因为 Heroku 会动态分配端口（通过环境变量 PORT 指定），所以不能用配置文件里写死的端口。</p>\n<p>3.修改 package.json，在 scripts 添加：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"heroku\": \"NODE_ENV=production node index\"</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下新建 Procfile 文件，添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web: npm run heroku</span><br></pre></td></tr></table></figure>\n\n<p>Procfile 文件告诉 Heroku 该使用什么命令启动一个 web 服务。更多信息见：<a href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs\" target=\"_blank\" rel=\"noopener\">https://devcenter.heroku.com/articles/getting-started-with-nodejs</a>。</p>\n<p>然后输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">heroku git:remote -a 你的应用名称</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -am <span class=\"string\">\"init\"</span></span><br><span class=\"line\">git push heroku master</span><br></pre></td></tr></table></figure>\n\n<p>稍后，我们的论坛就部署成功了。使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heroku open</span><br></pre></td></tr></table></figure>\n\n<p>打开应用主页。如果出现 “Application error”，使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heroku logs</span><br></pre></td></tr></table></figure>\n\n<p>查看日志，调试完后 commit 并 push 到 heroku重新部署。</p>\n<h2 id=\"部署到-UCloud\"><a href=\"#部署到-UCloud\" class=\"headerlink\" title=\"部署到 UCloud\"></a>部署到 UCloud</h2><h3 id=\"创建主机\"><a href=\"#创建主机\" class=\"headerlink\" title=\"创建主机\"></a>创建主机</h3><ol>\n<li>注册 UCloud</li>\n<li>点击左侧的 <code>云主机</code>，然后点击 <code>创建主机</code>，统统选择最低配置</li>\n<li>右侧付费方式选择 <code>按时</code>（每小时），点击 <code>立即购买</code></li>\n<li>在支付确认页面，点击 <code>确认支付</code></li>\n</ol>\n<p>购买成功后回到主机管理列表，如下所示：</p>\n<p><img src=\"/images/4.15.2.png\" alt></p>\n<blockquote>\n<p>注意：下面所有的 ip 都替换为你自己的外网 ip。</p>\n</blockquote>\n<h3 id=\"环境搭建与部署\"><a href=\"#环境搭建与部署\" class=\"headerlink\" title=\"环境搭建与部署\"></a>环境搭建与部署</h3><p>修改 config/production.js，将 port 修改为 80 端口：</p>\n<p><strong>config/production.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  port: <span class=\"number\">80</span>,</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://myblog:myblog@ds139327.mlab.com:39327/myblog'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>登录主机，用刚才设置的密码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@106.75.47.229</span><br></pre></td></tr></table></figure>\n\n<p>因为是 CentOS 系统，所以我选择使用 yum 安装，而不是下载源码编译安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git <span class=\"comment\">#安装git</span></span><br><span class=\"line\">yum install nodejs <span class=\"comment\">#安装 Node.js</span></span><br><span class=\"line\">yum install npm <span class=\"comment\">#安装 npm</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm i npm -g <span class=\"comment\">#升级 npm</span></span><br><span class=\"line\">npm i pm2 -g <span class=\"comment\">#安装 pm2</span></span><br><span class=\"line\">npm i n -g <span class=\"comment\">#安装 n</span></span><br><span class=\"line\">n v8.9.1 <span class=\"comment\">#安装 v8.9.1 版本的 Node.js</span></span><br><span class=\"line\">n use 8.9.1 <span class=\"comment\">#使用 v8.9.1 版本的 Node.js</span></span><br><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：如果 <code>node -v</code> 显示的不是 8.9.1，则断开 ssh，重新登录主机再试试。</p>\n</blockquote>\n<p>此时应该在 <code>/root</code> 目录下，运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nswbmw/N-blog.git myblog <span class=\"comment\">#或在本机 myblog 目录下运行 rsync -av --exclude=\"node_modules\" ./ root@106.75.47.229:/root/myblog</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> myblog</span><br><span class=\"line\">npm i</span><br><span class=\"line\">npm start</span><br><span class=\"line\">pm2 logs</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：如果不想用 git 的形式将代码拉到云主机上，可以用 rsync 将本地的代码同步到你的 UCloud 主机上，如上所示。</p>\n</blockquote>\n<p>最后，访问你的公网 ip 地址试试吧，如下所示：</p>\n<p><img src=\"/images/4.15.3.png\" alt></p>\n<blockquote>\n<p>小提示：因为我们选择的按时付费套餐，测试完成后，可在主机管理页面选择关闭主机，节约费用。</p>\n</blockquote>\n<h2 id=\"部署到阿里云\"><a href=\"#部署到阿里云\" class=\"headerlink\" title=\"部署到阿里云\"></a>部署到阿里云</h2><h3 id=\"创建主机-1\"><a href=\"#创建主机-1\" class=\"headerlink\" title=\"创建主机\"></a>创建主机</h3><ol>\n<li>注册/登录</li>\n<li>充值 100（因为我们选择『按量付费』，阿里云要求最低账户余额 &gt;= 100）</li>\n<li>进入『云服务器 ECS』</li>\n<li>点击『创建实例』</li>\n</ol>\n<p>进入创建实例页面，按下图选择配置：</p>\n<p><img src=\"/images/4.15.4.png\" alt></p>\n<p>需要注意几点：</p>\n<ol>\n<li>计费方式：按量付费</li>\n<li>公网 ip 地址：分配</li>\n<li>安全组：选中开启 80 端口</li>\n<li>镜像：Ubuntu 16.04 64位</li>\n</ol>\n<p>点击『开通进入下一页』，选中：</p>\n<p><img src=\"/images/4.15.5.png\" alt></p>\n<blockquote>\n<p>注意：这里我们只是演示，所以自动释放时间只设置了几个小时</p>\n</blockquote>\n<p>点击『去开通』创建成功，然后点击提示中的『管理控制台』进入 ECS 管理页，刚才创建的机器需要等待几分钟才会初始化成功。成功后如下所示：</p>\n<p><img src=\"/images/4.15.6.png\" alt></p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>复制创建的机器的公网 ip 地址，运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@39.106.134.66</span><br></pre></td></tr></table></figure>\n\n<p>输入刚才设置的密码登录远程主机。</p>\n<h4 id=\"安装-Node-js-1\"><a href=\"#安装-Node-js-1\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h4><p>我们下载编译好的 Node.js 压缩包，解压然后使用软连接。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.1/node-v8.9.1-linux-x64.tar.xz</span><br><span class=\"line\">tar -xvf node-v8.9.1-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.9.1-linux-x64 nodejs</span><br><span class=\"line\">ln -s ~/nodejs/bin/* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-MongoDB\"><a href=\"#安装-MongoDB\" class=\"headerlink\" title=\"安装 MongoDB\"></a>安装 MongoDB</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz</span><br><span class=\"line\">tar -xvf mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz</span><br><span class=\"line\">mv mongodb-linux-x86_64-ubuntu1604-3.4.10 mongodb</span><br><span class=\"line\">ln -s ~/mongodb/bin/* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">mongod --version</span><br><span class=\"line\">mongo --version</span><br><span class=\"line\">mkdir mongodb/data</span><br><span class=\"line\">mongod --dbpath=mongodb/data &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nswbmw/N-blog.git <span class=\"comment\">#或者你的 GitHub blog 地址</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> N-blog</span><br><span class=\"line\">npm i</span><br><span class=\"line\">vim config/default.js <span class=\"comment\">#修改端口 3000-&gt;80</span></span><br><span class=\"line\">node index</span><br></pre></td></tr></table></figure>\n\n<p>此时，浏览器中访问你的机器的公网 ip 试试吧。</p>\n<h4 id=\"使用-PM2-启动\"><a href=\"#使用-PM2-启动\" class=\"headerlink\" title=\"使用 PM2 启动\"></a>使用 PM2 启动</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i pm2 -g</span><br><span class=\"line\">ln -s ~/nodejs/bin/* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">pm2 start index.js --name=<span class=\"string\">\"myblog\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我们使用 pm2 启动博客，所以关掉终端后博客仍然在运行。</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/nswbmw\" target=\"_blank\" rel=\"noopener\">转自 https://github.com/nswbmw</a></p>\n<h1 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h1><h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>有三种方式安装 Node.js：一是通过安装包安装，二是通过源码编译安装，三是在 Linux 下可以通过 yum|apt-get 安装，在 Mac 下可以通过 <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a> 安装。对于 Windows 和 Mac 用户，推荐使用安装包安装，Linux 用户推荐使用源码编译安装。</p>","more":"<h3 id=\"Windows-和-Mac-安装：\"><a href=\"#Windows-和-Mac-安装：\" class=\"headerlink\" title=\"Windows 和 Mac 安装：\"></a>Windows 和 Mac 安装：</h3><h4 id=\"第一步：\"><a href=\"#第一步：\" class=\"headerlink\" title=\"第一步：\"></a>第一步：</h4><p>打开 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js 官网</a>，可以看到以下两个下载选项：</p>\n<p><img src=\"/images/1.1.1.png\" alt></p>\n<p>左边的是 LTS 版，用过 ubuntu 的同学可能比较熟悉，即长期支持版本，大多数人用这个就可以了。右边是最新版，支持最新的语言特性（比如对 ES6 的支持更全面），想尝试新特性的开发者可以安装这个版本。我们选择左边的 v6.9.1 LTS 点击下载。</p>\n<blockquote>\n<p>小提示：从 <a href=\"http://node.green\" target=\"_blank\" rel=\"noopener\">http://node.green</a> 上可以看到 Node.js 各个版本对 ES6 的支持情况。</p>\n</blockquote>\n<h4 id=\"第二步：\"><a href=\"#第二步：\" class=\"headerlink\" title=\"第二步：\"></a>第二步：</h4><p>安装 Node.js，这个没什么好说的，一直点击 <code>继续</code> 即可。</p>\n<p><img src=\"/images/1.1.2.png\" alt></p>\n<h4 id=\"第三步：\"><a href=\"#第三步：\" class=\"headerlink\" title=\"第三步：\"></a>第三步：</h4><p>提示安装成功后，打开终端输入以下命令，可以看到 node 和 npm 都已经安装好了：</p>\n<p><img src=\"/images/1.1.3.png\" alt></p>\n<h3 id=\"Linux-安装：\"><a href=\"#Linux-安装：\" class=\"headerlink\" title=\"Linux 安装：\"></a>Linux 安装：</h3><p>Linux 用户可通过源码编译安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://nodejs.org/dist/v6.9.1/node-v6.9.1.tar.gz</span><br><span class=\"line\">tar -xzvf node-v6.9.1.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> node-v6.9.1</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意: 如果编译过程报错，可能是缺少某些依赖包。因为报错内容不尽相同，请读者自行求助搜索引擎或 <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>。</p>\n</blockquote>\n<h2 id=\"n-和-nvm\"><a href=\"#n-和-nvm\" class=\"headerlink\" title=\"n 和 nvm\"></a>n 和 nvm</h2><p>通常我们使用稳定的 LTS 版本的 Node.js 即可，但有的情况下我们又想尝试一下新的特性，我们总不能来回安装不同版本的 Node.js 吧，这个时候我们就需要 <a href=\"https://github.com/tj/n\" target=\"_blank\" rel=\"noopener\">n</a> 或者 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a> 了。n 和 nvm 是两个常用的 Node.js 版本管理工具，关于 n 和 nvm 的使用以及区别，<a href=\"http://taobaofed.org/blog/2015/11/17/nvm-or-n/\" target=\"_blank\" rel=\"noopener\">这篇文章</a> 讲得特别详细，这里不再赘述。</p>\n<h2 id=\"nrm\"><a href=\"#nrm\" class=\"headerlink\" title=\"nrm\"></a>nrm</h2><p><a href=\"https://github.com/Pana/nrm\" target=\"_blank\" rel=\"noopener\">nrm</a> 是一个管理 npm 源的工具。用过 ruby 和 gem 的同学会比较熟悉，通常我们会把 gem 源切到国内的淘宝镜像，这样在安装和更新一些包的时候比较快。nrm 同理，用来切换官方 npm 源和国内的 npm 源（如: <a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">cnpm</a>），当然也可以用来切换官方 npm 源和公司私有 npm 源。</p>\n<p>全局安装 nrm:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i nrm -g</span><br></pre></td></tr></table></figure>\n\n<p>查看当前 nrm 内置的几个 npm 源的地址：</p>\n<p><img src=\"/images/1.1.4.png\" alt></p>\n<p>切换到 cnpm：</p>\n<p><img src=\"/images/1.1.5.png\" alt></p>\n<h2 id=\"安装与启动-MongoDB\"><a href=\"#安装与启动-MongoDB\" class=\"headerlink\" title=\"安装与启动 MongoDB\"></a>安装与启动 MongoDB</h2><ul>\n<li>Windows 用户向导：<a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/</a></li>\n<li>Linux 用户向导：<a href=\"https://docs.mongodb.com/manual/administration/install-on-linux/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/administration/install-on-linux/</a></li>\n<li>Mac 用户向导：<a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/</a></li>\n</ul>\n<h3 id=\"Robomongo-和-Mongochef\"><a href=\"#Robomongo-和-Mongochef\" class=\"headerlink\" title=\"Robomongo 和 Mongochef\"></a>Robomongo 和 Mongochef</h3><h4 id=\"Robomongo\"><a href=\"#Robomongo\" class=\"headerlink\" title=\"Robomongo\"></a>Robomongo</h4><p><a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"noopener\">Robomongo</a> 是一个基于 Shell 的跨平台开源 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac，嵌入了 JavaScript 引擎和 MongoDB mongo，只要你会使用 mongo shell，你就会使用 Robomongo，它还提供了语法高亮、自动补全、差别视图等。</p>\n<p><a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">Robomongo 下载地址</a></p>\n<p>下载并安装成功后点击左上角的 <code>Create</code> 创建一个连接，给该连接起个名字如: <code>localhost</code>，使用默认地址（localhost）和端口（27017）即可，点击 <code>Save</code> 保存。</p>\n<p><img src=\"/images/1.2.1.png\" alt></p>\n<p>双击 <code>localhost</code> 连接到 MongoDB 并进入交互界面，尝试插入一条数据并查询出来，如下所示:</p>\n<p><img src=\"/images/1.2.2.png\" alt></p>\n<h4 id=\"MongoChef\"><a href=\"#MongoChef\" class=\"headerlink\" title=\"MongoChef\"></a>MongoChef</h4><p><a href=\"http://3t.io/mongochef/\" target=\"_blank\" rel=\"noopener\">MongoChef</a> 是另一款强大的 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac。</p>\n<p><a href=\"http://3t.io/mongochef/#mongochef-download-compare\" target=\"_blank\" rel=\"noopener\">MongoChef 下载地址</a>，我们选择左侧的非商业用途的免费版下载。</p>\n<p><img src=\"/images/1.2.3.png\" alt></p>\n<p>安装成功后跟 Robomongo 一样，也需要创建一个新的连接的配置，成功后双击进入到 MongoChef 主页面，如下所示:</p>\n<p><img src=\"/images/1.2.4.png\" alt></p>\n<p>还可以使用 shell 模式:</p>\n<p><img src=\"/images/1.2.5.png\" alt></p>\n<blockquote>\n<p>小提示: MongoChef 相较于 Robomongo 更强大一些，但 Robomongo 比较轻量也能满足大部分的常规需求，所以哪一个适合自己还需读者自行尝试。</p>\n</blockquote>\n<h2 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h2><p>require 用来加载一个文件的代码，关于 require 的机制这里不展开讲解，请仔细阅读 <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<p>简单概括以下几点:</p>\n<ul>\n<li>require 可加载 .js、.json 和 .node 后缀的文件</li>\n<li>require 的过程是同步的，所以这样是错误的:</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">  module.exports = &#123; a: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\">&#125;, 0)</span><br></pre></td></tr></table></figure>\n\n<p>require 这个文件得到的是空对象 <code>{}</code></p>\n<ul>\n<li>require 目录的机制是:<ul>\n<li>如果目录下有 package.json 并指定了 main 字段，则用之</li>\n<li>如果不存在 package.json，则依次尝试加载目录下的 index.js 和 index.node</li>\n</ul>\n</li>\n<li>require 过的文件会加载到缓存，所以多次 require 同一个文件（模块）不会重复加载</li>\n<li>判断是否是程序的入口文件有两种方式:<ul>\n<li>require.main === module（推荐）</li>\n<li>module.parent === null</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h2><p>循环引用（或循环依赖）简单点来说就是 a 文件 require 了 b 文件，然后 b 文件又反过来 require 了 a 文件。我们用 a-&gt;b 代表 b require 了 a。</p>\n<p>简单的情况:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a-&gt;b</span><br><span class=\"line\">b-&gt;a</span><br></pre></td></tr></table></figure>\n\n<p>复杂点的情况:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a-&gt;b</span><br><span class=\"line\">b-&gt;c</span><br><span class=\"line\">c-&gt;a</span><br></pre></td></tr></table></figure>\n\n<p>循环引用并不会报错，导致的结果是 require 的结果是空对象 <code>{}</code>，原因是 b require 了 a，a 又去 require 了 b，此时 b 还没初始化好，所以只能拿到初始值 <code>{}</code>。当产生循环引用时一般有两种方法解决：</p>\n<ol>\n<li>通过分离共用的代码到另一个文件解决，如上面简单的情况，可拆出共用的代码到 c 中，如下:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c-&gt;a</span><br><span class=\"line\">c-&gt;b</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>不在最外层 require，在用到的地方 require，通常在函数的内部</li>\n</ol>\n<p>总的来说，循环依赖的陷阱并不大容易出现，但一旦出现了，对于新手来说还真不好定位。它的存在给我们提了个醒，要时刻注意你项目的依赖关系不要过于复杂，哪天你发现一个你明明已经 exports 了的方法报 <code>undefined is not a function</code>，我们就该提醒一下自己：哦，也许是它来了。</p>\n<p>官方示例: <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<p>require 用来加载代码，而 exports 和 module.exports 则用来导出代码。</p>\n<p>很多新手可能会迷惑于 exports 和 module.exports 的区别，为了更好的理解 exports 和 module.exports 的关系，我们先来巩固下 js 的基础。示例：</p>\n<p><strong>test.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">b.name = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123; <span class=\"attr\">name</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n\n<p>运行 test.js 结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: 1 &#125;</span><br><span class=\"line\">&#123; name: 1 &#125;</span><br><span class=\"line\">&#123; name: 2 &#125;</span><br><span class=\"line\">&#123; name: 2 &#125;</span><br><span class=\"line\">&#123; name: 2 &#125;</span><br><span class=\"line\">&#123; name: 3 &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释</strong>：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。</p>\n<p>明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：</p>\n<ol>\n<li>module.exports 初始值为一个空对象 {}</li>\n<li>exports 是指向的 module.exports 的引用</li>\n<li>require() 返回的是 module.exports 而不是 exports</li>\n</ol>\n<p>Node.js 官方文档的截图证实了我们的观点:</p>\n<p><img src=\"/images/2.2.1.png\" alt></p>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><p>exports = module.exports = {…}</p>\n<p>我们经常看到这样的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports = &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码等价于:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;...&#125;</span><br><span class=\"line\">exports = <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure>\n\n<p>原理很简单：module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，那么通过 exports = module.exports 让 exports 重新指向 module.exports。</p>\n<blockquote>\n<p>小提示：ES6 的 import 和 export 不在本文的讲解范围，有兴趣的读者可以去学习阮一峰老师的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">《ECMAScript6 入门》</a>。</p>\n</blockquote>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><p>网上已经有许多关于 Promise 的资料了，这里不在赘述。以下 4 个链接供读者学习：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a> （基础）</li>\n<li><a href=\"http://liubin.org/promises-book/\" target=\"_blank\" rel=\"noopener\">http://liubin.org/promises-book/</a> （开源 Promise 迷你书）</li>\n<li><a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\" target=\"_blank\" rel=\"noopener\">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a> （进阶）</li>\n<li><a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">https://promisesaplus.com/</a> （官方定义规范）</li>\n</ol>\n<p>Promise 用于异步流程控制，生成器与 yield 也能实现流程控制（基于 co），但不在本教程讲解范围内，读者可参考我的另一部教程 <a href=\"https://github.com/nswbmw/N-club\" target=\"_blank\" rel=\"noopener\">N-club</a>。async/await 结合 Promise 也可以实现流程控制，有兴趣请查阅 <a href=\"http://es6.ruanyifeng.com/#docs/async#async函数\" target=\"_blank\" rel=\"noopener\">《ECMAScript6 入门》</a>。</p>\n<h2 id=\"深入-Promise\"><a href=\"#深入-Promise\" class=\"headerlink\" title=\"深入 Promise\"></a>深入 Promise</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/30797777\" target=\"_blank\" rel=\"noopener\">Promise 必知必会（十道题）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25178630\" target=\"_blank\" rel=\"noopener\">深入 Promise(一)——Promise 实现详解</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25198178\" target=\"_blank\" rel=\"noopener\">深入 Promise(二)——进击的 Promise</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25199781\" target=\"_blank\" rel=\"noopener\">深入 Promise(三)——命名 Promise</a></li>\n</ul>\n<p>环境变量不属于 Node.js 的知识范畴，只不过我们在开发 Node.js 应用时经常与环境变量打交道，所以这里简单介绍下。</p>\n<p>环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数。在 Mac 和 Linux 的终端直接输入 env，会列出当前的环境变量，如：USER=xxx。简单来讲，环境变量就是传递参数给运行程序的。</p>\n<p>在 Node.js 中，我们经常这么用:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV=<span class=\"built_in\">test</span> node app</span><br></pre></td></tr></table></figure>\n\n<p>通过以上命令启动程序，指定当前环境变量 <code>NODE_ENV</code> 的值为 test，那么在 app.js 中可通过 <code>process.env</code> 来获取环境变量:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(process.env.NODE_ENV) //test</span><br></pre></td></tr></table></figure>\n\n<p>另一个常见的例子是使用 <a href=\"https://www.npmjs.com/package/debug\" target=\"_blank\" rel=\"noopener\">debug</a> 模块时:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG=* node app</span><br></pre></td></tr></table></figure>\n\n<p>Windows 用户需要首先设置环境变量，然后再执行程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> DEBUG=*</span><br><span class=\"line\"><span class=\"built_in\">set</span> NODE_ENV=<span class=\"built_in\">test</span></span><br><span class=\"line\">node app</span><br></pre></td></tr></table></figure>\n\n<p>或者使用 <a href=\"https://www.npmjs.com/package/cross-env\" target=\"_blank\" rel=\"noopener\">cross-env</a>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cross-env -g</span><br></pre></td></tr></table></figure>\n\n<p>使用方式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cross-env NODE_ENV=<span class=\"built_in\">test</span> node app</span><br></pre></td></tr></table></figure>\n\n<p>package.json 对于 Node.js 应用来说是一个不可或缺的文件，它存储了该 Node.js 应用的名字、版本、描述、作者、入口文件、脚本、版权等等信息。npm 官网有 package.json 每个字段的详细介绍：<a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/files/package.json</a>。</p>\n<h2 id=\"semver\"><a href=\"#semver\" class=\"headerlink\" title=\"semver\"></a>semver</h2><p>语义化版本（semver）即 dependencies、devDependencies 和 peerDependencies 里的如：<code>&quot;co&quot;: &quot;^4.6.0&quot;</code>。</p>\n<p>semver 格式：<code>主版本号.次版本号.修订号</code>。版本号递增规则如下：</p>\n<ul>\n<li><code>主版本号</code>：做了不兼容的 API 修改</li>\n<li><code>次版本号</code>：做了向下兼容的功能性新增</li>\n<li><code>修订号</code>：做了向下兼容的 bug 修正</li>\n</ul>\n<p>更多阅读：</p>\n<ol>\n<li><a href=\"http://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"noopener\">http://semver.org/lang/zh-CN/</a></li>\n<li><a href=\"http://taobaofed.org/blog/2016/08/04/instructions-of-semver/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2016/08/04/instructions-of-semver/</a></li>\n</ol>\n<h1 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h1><p>作为 Node.js 的开发者，我们在发布 npm 模块的时候一定要遵守语义化版本的命名规则，即：有 breaking change 发大版本，有新增的功能发小版本，有小的 bug 修复或优化则发修订版本。</p>\n<h2 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h2><p>使用 <code>npm init</code> 初始化一个空项目是一个好的习惯，即使你对 package.json 及其他属性非常熟悉，<code>npm init</code> 也是你开始写新的 Node.js 应用或模块的一个快捷的办法。<code>npm init</code> 有智能的默认选项，比如从根目录名称推断模块名称，通过 <code>~/.npmrc</code> 读取你的信息，用你的 Git 设置来确定 repository 等等。</p>\n<h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><p><code>npm install</code> 是我们最常用的 npm 命令之一，因此我们需要好好了解下这个命令。终端输入 <code>npm install -h</code> 查看使用方式:</p>\n<p><img src=\"/images/2.6.1.png\" alt></p>\n<p>可以看出：我们通过 <code>npm install</code> 可以安装 npm 上发布的某个版本、某个 tag、某个版本区间的模块，甚至可以安装本地目录、压缩包和 git/github 的库作为依赖。</p>\n<blockquote>\n<p>小提示: <code>npm i</code> 是 <code>npm install</code> 的简写，建议使用 <code>npm i</code>。</p>\n</blockquote>\n<p>直接使用 <code>npm i</code> 安装的模块是不会写入 package.json 的 dependencies (或 devDependencies)，需要额外加个参数:</p>\n<ol>\n<li><code>npm i express --save</code>/<code>npm i express -S</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;^4.14.0&quot;</code> 写入 dependencies )</li>\n<li><code>npm i express --save-dev</code>/<code>npm i express -D</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;^4.14.0&quot;</code> 写入 devDependencies )</li>\n<li><code>npm i express --save --save-exact</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;4.14.0&quot;</code> 写入 dependencies )</li>\n</ol>\n<p>第三种方式将固定版本号写入 dependencies，建议线上的 Node.js 应用都采取这种锁定版本号的方式，因为你不可能保证第三方模块下个小版本是没有验证 bug 的，即使是很流行的模块。拿 Mongoose 来说，Mongoose 4.1.4 引入了一个 bug 导致调用一个文档 entry 的 remove 会删除整个集合的文档，见：<a href=\"https://github.com/Automattic/mongoose/blob/master/History.md#415--2015-09-01\" target=\"_blank\" rel=\"noopener\">https://github.com/Automattic/mongoose/blob/master/History.md#415–2015-09-01</a>。</p>\n<blockquote>\n<p>后面会介绍更安全的 <code>npm shrinkwrap</code> 的用法。</p>\n</blockquote>\n<p>运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> save-exact <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>这样每次 <code>npm i xxx --save</code> 的时候会锁定依赖的版本号，相当于加了 <code>--save-exact</code> 参数。</p>\n<blockquote>\n<p>小提示：<code>npm config set</code> 命令将配置写到了 ~/.npmrc 文件，运行 <code>npm config list</code> 查看。</p>\n</blockquote>\n<h2 id=\"npm-scripts\"><a href=\"#npm-scripts\" class=\"headerlink\" title=\"npm scripts\"></a>npm scripts</h2><p>npm 提供了灵活而强大的 scripts 功能，见 <a href=\"https://docs.npmjs.com/misc/scripts\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<p>npm 的 scripts 有一些内置的缩写命令，如常用的：</p>\n<ul>\n<li><code>npm start</code> 等价于 <code>npm run start</code></li>\n<li><code>npm test</code> 等价于 <code>npm run test</code></li>\n</ul>\n<h2 id=\"npm-shrinkwrap\"><a href=\"#npm-shrinkwrap\" class=\"headerlink\" title=\"npm shrinkwrap\"></a>npm shrinkwrap</h2><p>前面说过要锁定依赖的版本，但这并不能完全防止意外情况的发生，因为锁定的只是最外一层的依赖，而里层依赖的模块的 package.json 有可能写的是 <code>&quot;mongoose&quot;: &quot;*&quot;</code>。为了彻底锁定依赖的版本，让你的应用在任何机器上安装的都是同样版本的模块（不管嵌套多少层），通过运行 <code>npm shrinkwrap</code>，会在当前目录下产生一个 <code>npm-shrinkwrap.json</code>，里面包含了通过 node_modules 计算出的模块的依赖树及版本。上面的截图也显示：只要目录下有 npm-shrinkwrap.json 则运行 <code>npm install</code> 的时候会优先使用 npm-shrinkwrap.json 进行安装，没有则使用 package.json 进行安装。</p>\n<p>更多阅读：</p>\n<ol>\n<li><a href=\"https://docs.npmjs.com/cli/shrinkwrap\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/cli/shrinkwrap</a></li>\n<li><a href=\"http://tech.meituan.com/npm-shrinkwrap.html\" target=\"_blank\" rel=\"noopener\">http://tech.meituan.com/npm-shrinkwrap.html</a></li>\n</ol>\n<blockquote>\n<p>注意: 如果 node_modules 下存在某个模块（如直接通过 <code>npm install xxx</code> 安装的）而 package.json 中没有，运行 <code>npm shrinkwrap</code> 则会报错。另外，<code>npm shrinkwrap</code> 只会生成 dependencies 的依赖，不会生成 devDependencies 的。</p>\n</blockquote>\n<h1 id=\"express\"><a href=\"#express\" class=\"headerlink\" title=\"express\"></a>express</h1><p>首先，我们新建一个目录 myblog，在该目录下运行 <code>npm init</code> 生成一个 package.json，如下所示：</p>\n<p><img src=\"/images/3.1.1.png\" alt></p>\n<blockquote>\n<p>注意：括号里的是默认值，如果使用默认值则直接回车即可，否则输入自定义内容后回车。</p>\n</blockquote>\n<p>然后安装 express 并写入 package.json：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express@4.14.0 --save</span><br></pre></td></tr></table></figure>\n\n<p>新建 index.js，添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, express\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码的意思是：生成一个 express 实例 app，挂载了一个根路由控制器，然后监听 3000 端口并启动程序。运行 <code>node index</code>，打开浏览器访问 <code>localhost:3000</code> 时，页面应显示 hello, express。</p>\n<p>这是最简单的一个使用 express 的例子，后面会介绍路由及模板的使用。</p>\n<h2 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a>supervisor</h2><p>在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 <a href=\"https://www.npmjs.com/package/supervisor\" target=\"_blank\" rel=\"noopener\">supervisor</a> 可以解决这个繁琐的问题，全局安装 supervisor：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g supervisor</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>supervisor index</code> 启动程序，如下所示：</p>\n<p><img src=\"/images/3.1.2.png\" alt></p>\n<p>supervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。</p>\n<p>前面我们只是挂载了根路径的路由控制器，现在修改 index.js 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, express\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/users/:name\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, \"</span> + req.params.name);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码的意思是：当访问根路径时，依然返回 hello, express，当访问如 <code>localhost:3000/users/nswbmw</code> 路径时，返回 hello, nswbmw。路径中 <code>:name</code> 起了占位符的作用，这个占位符的名字是 name，可以通过 <code>req.params.name</code> 取到实际的值。</p>\n<blockquote>\n<p>小提示：express 使用了 <a href=\"https://www.npmjs.com/package/path-to-regexp\" target=\"_blank\" rel=\"noopener\">path-to-regexp</a> 模块实现的路由匹配。</p>\n</blockquote>\n<p>不难看出：req 包含了请求来的相关信息，res 则用来返回该请求的响应，更多请查阅 <a href=\"http://expressjs.com/en/4x/api.html\" target=\"_blank\" rel=\"noopener\">express 官方文档</a>。下面介绍几个常用的 req 的属性：</p>\n<ul>\n<li><code>req.query</code>: 解析后的 url 中的 querystring，如 <code>?name=haha</code>，req.query 的值为 <code>{name: &#39;haha&#39;}</code></li>\n<li><code>req.params</code>: 解析 url 中的占位符，如 <code>/:name</code>，访问 /haha，req.params 的值为 <code>{name: &#39;haha&#39;}</code></li>\n<li><code>req.body</code>: 解析后请求体，需使用相关的模块，如 <a href=\"https://www.npmjs.com/package/body-parser\" target=\"_blank\" rel=\"noopener\">body-parser</a>，请求体为 <code>{&quot;name&quot;: &quot;haha&quot;}</code>，则 req.body 为 <code>{name: &#39;haha&#39;}</code></li>\n</ul>\n<h2 id=\"express-Router\"><a href=\"#express-Router\" class=\"headerlink\" title=\"express.Router\"></a>express.Router</h2><p>上面只是很简单的路由使用的例子（将所有路由控制函数都放到了 index.js），但在实际开发中通常有几十甚至上百的路由，都写在 index.js 既臃肿又不好维护，这时可以使用 express.Router 实现更优雅的路由解决方案。在 myblog 目录下创建空文件夹 routes，在 routes 目录下创建 index.js 和 users.js。最后代码如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> indexRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes/index\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> userRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes/users\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">\"/\"</span>, indexRouter);</span><br><span class=\"line\">app.use(<span class=\"string\">\"/users\"</span>, userRouter);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, express\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/users.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:name\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"hello, \"</span> + req.params.name);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码的意思是：我们将 <code>/</code> 和 <code>/users/:name</code> 的路由分别放到了 routes/index.js 和 routes/users.js 中，每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 <code>app.use</code> 挂载到不同的路径。这两种代码实现了相同的功能，但在实际开发中推荐使用 express.Router 将不同的路由分离到不同的路由文件中。</p>\n<p>更多 express.Router 的用法见 <a href=\"http://expressjs.com/en/4x/api.html#router\" target=\"_blank\" rel=\"noopener\">express 官方文档</a>。</p>\n<p>模板引擎（Template Engine）是一个将页面模板和数据结合起来生成 html 的工具。上例中，我们只是返回纯文本给浏览器，现在我们修改代码返回一个 html 页面给浏览器。</p>\n<h2 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h2><p>模板引擎有很多，<a href=\"https://www.npmjs.com/package/ejs\" target=\"_blank\" rel=\"noopener\">ejs</a> 是其中一种，因为它使用起来十分简单，而且与 express 集成良好，所以我们使用 ejs。安装 ejs：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i ejs --save</span><br></pre></td></tr></table></figure>\n\n<p>修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> indexRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes/index\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> userRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes/users\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.set(<span class=\"string\">\"views\"</span>, path.join(__dirname, <span class=\"string\">\"views\"</span>)); <span class=\"comment\">// 设置存放模板文件的目录</span></span><br><span class=\"line\">app.set(<span class=\"string\">\"view engine\"</span>, <span class=\"string\">\"ejs\"</span>); <span class=\"comment\">// 设置模板引擎为 ejs</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">\"/\"</span>, indexRouter);</span><br><span class=\"line\">app.use(<span class=\"string\">\"/users\"</span>, userRouter);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>app.set</code> 设置模板引擎为 ejs 和存放模板的目录。在 myblog 下新建 views 文件夹，在 views 下新建 users.ejs，添加如下代码：</p>\n<p><strong>views/users.ejs</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\">      body &#123;</span><br><span class=\"line\">        padding: 50px;</span><br><span class=\"line\">        font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">name.toUpperCase</span>() %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello, <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">name</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 routes/users.js 如下：</p>\n<p><strong>routes/users.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:name\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">\"users\"</span>, &#123;</span><br><span class=\"line\">    name: req.params.name</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p>通过调用 <code>res.render</code> 函数渲染 ejs 模板，res.render 第一个参数是模板的名字，这里是 users 则会匹配 views/users.ejs，第二个参数是传给模板的数据，这里传入 name，则在 ejs 模板中可使用 name。<code>res.render</code> 的作用就是将模板和数据结合生成 html，同时设置响应头中的 <code>Content-Type: text/html</code>，告诉浏览器我返回的是 html，不是纯文本，要按 html 展示。现在我们访问 <code>localhost:3000/users/haha</code>，如下图所示：</p>\n<p><img src=\"/images/3.3.1.png\" alt></p>\n<p>上面代码可以看到，我们在模板 <code>&lt;%= name.toUpperCase() %&gt;</code> 中使用了 JavaScript 的语法 <code>.toUpperCase()</code> 将名字转化为大写，那这个 <code>&lt;%= xxx %&gt;</code> 是什么东西呢？ejs 有 3 种常用标签：</p>\n<ol>\n<li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出</li>\n<li><code>&lt;%= code %&gt;</code>：显示转义后的 HTML 内容</li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</li>\n</ol>\n<blockquote>\n<p>注意：<code>&lt;%= code %&gt;</code> 和 <code>&lt;%- code %&gt;</code> 都可以是 JavaScript 表达式生成的字符串，当变量 code 为普通字符串时，两者没有区别。当 code 比如为 <code>&lt;h1&gt;hello&lt;/h1&gt;</code> 这种字符串时，<code>&lt;%= code %&gt;</code> 会原样输出 <code>&lt;h1&gt;hello&lt;/h1&gt;</code>，而 <code>&lt;%- code %&gt;</code> 则会显示 H1 大的 hello 字符串。</p>\n</blockquote>\n<p>下面的例子解释了 <code>&lt;% code %&gt;</code> 的用法：</p>\n<p><strong>Data</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supplies: [&apos;mop&apos;, &apos;broom&apos;, &apos;duster&apos;]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Template</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;% for(var i=0; i&lt;supplies.length; i++) &#123;%&gt;</span><br><span class=\"line\">   &lt;li&gt;&lt;%= supplies[i] %&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>mop<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>broom<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>duster<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>更多 ejs 的标签请看 <a href=\"https://www.npmjs.com/package/ejs#tags\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>我们使用模板引擎通常不是一个页面对应一个模板，这样就失去了模板的优势，而是把模板拆成可复用的模板片段组合使用，如在 views 下新建 header.ejs 和 footer.ejs，并修改 users.ejs：</p>\n<p><strong>views/header.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">      body &#123;padding: 50px;font: 14px &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif;&#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/footer.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/users.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\">  &lt;h1&gt;&lt;%= name.toUpperCase() %&gt;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;p&gt;hello, &lt;%= name %&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们将原来的 users.ejs 拆成出了 header.ejs 和 footer.ejs，并在 users.ejs 通过 ejs 内置的 include 方法引入，从而实现了跟以前一个模板文件相同的功能。</p>\n<blockquote>\n<p>小提示：拆分模板组件通常有两个好处：</p>\n<ol>\n<li>模板可复用，减少重复代码</li>\n<li>主模板结构清晰</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>注意：要用 <code>&lt;%- include(&#39;header&#39;) %&gt;</code> 而不是 <code>&lt;%= include(&#39;header&#39;) %&gt;</code><br>前面我们讲解了 express 中路由和模板引擎 ejs 的用法，但 express 的精髓并不在此，在于中间件的设计理念。</p>\n</blockquote>\n<h2 id=\"中间件与-next\"><a href=\"#中间件与-next\" class=\"headerlink\" title=\"中间件与 next\"></a>中间件与 next</h2><p>express 中的中间件（middleware）就是用来处理请求的，当一个中间件处理完，可以通过调用 <code>next()</code> 传递给下一个中间件，如果没有调用 <code>next()</code>，则请求不会往下传递，如内置的 <code>res.render</code> 其实就是渲染完 html 直接返回给客户端，没有调用 <code>next()</code>，从而没有传递给下一个中间件。看个小例子，修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>此时访问 <code>localhost:3000</code>，终端会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>app.use</code> 加载中间件，在中间件中通过 next 将请求传递到下一个中间件，next 可接受一个参数接收错误信息，如果使用了 <code>next(error)</code>，则会返回错误而不会传递到下一个中间件，修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">  next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"haha\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>此时访问 <code>localhost:3000</code>，终端会输出错误信息：</p>\n<p><img src=\"/images/3.4.1.png\" alt></p>\n<p>浏览器会显示：</p>\n<p><img src=\"/images/3.4.2.png\" alt></p>\n<blockquote>\n<p>小提示：<code>app.use</code> 有非常灵活的使用方式，详情见 <a href=\"http://expressjs.com/en/4x/api.html#app.use\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n</blockquote>\n<p>express 有成百上千的第三方中间件，在开发过程中我们首先应该去 npm 上寻找是否有类似实现的中间件，尽量避免造轮子，节省开发时间。下面给出几个常用的搜索 npm 模块的网站：</p>\n<ol>\n<li><a href=\"http://npmjs.com\" target=\"_blank\" rel=\"noopener\">http://npmjs.com</a>(npm 官网)</li>\n<li><a href=\"http://node-modules.com\" target=\"_blank\" rel=\"noopener\">http://node-modules.com</a></li>\n<li><a href=\"https://npms.io\" target=\"_blank\" rel=\"noopener\">https://npms.io</a></li>\n<li><a href=\"https://nodejsmodules.org\" target=\"_blank\" rel=\"noopener\">https://nodejsmodules.org</a></li>\n</ol>\n<blockquote>\n<p>小提示：express@4 之前的版本基于 connect 这个模块实现的中间件的架构，express@4 及以上的版本则移除了对 connect 的依赖自己实现了，理论上基于 connect 的中间件（通常以 <code>connect-</code> 开头，如 <code>connect-mongo</code>）仍可结合 express 使用。</p>\n</blockquote>\n<blockquote>\n<p>注意：中间件的加载顺序很重要！比如：通常把日志中间件放到比较靠前的位置，后面将会介绍的 <code>connect-flash</code> 中间件是基于 session 的，所以需要在 <code>express-session</code> 后加载。</p>\n</blockquote>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>上面的例子中，应用程序为我们自动返回了错误栈信息（express 内置了一个默认的错误处理器），假如我们想手动控制返回的错误内容，则需要加载一个自定义错误处理的中间件，修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">  next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"haha\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">  res.status(<span class=\"number\">200</span>).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误处理</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</span><br><span class=\"line\">  res.status(<span class=\"number\">500</span>).send(<span class=\"string\">\"Something broke!\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>此时访问 <code>localhost:3000</code>，浏览器会显示 <code>Something broke!</code>。</p>\n<blockquote>\n<p>小提示：关于 express 的错误处理，详情见 <a href=\"http://expressjs.com/en/guide/error-handling.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。<br>从本章开始，正式学习如何使用 Express + MongoDB 搭建一个博客。</p>\n</blockquote>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>我们停止 supervisor 并删除 myblog 目录从头来过。重新创建 myblog，运行 <code>npm init</code>，如下：</p>\n<p><img src=\"/images/4.2.1.png\" alt></p>\n<p>在 myblog 目录下创建以下目录及空文件（package.json 除外）：</p>\n<p><img src=\"/images/4.2.2.png\" alt></p>\n<p>对应文件及文件夹的用处：</p>\n<ol>\n<li><code>models</code>: 存放操作数据库的文件</li>\n<li><code>public</code>: 存放静态文件，如样式、图片等</li>\n<li><code>routes</code>: 存放路由文件</li>\n<li><code>views</code>: 存放模板文件</li>\n<li><code>index.js</code>: 程序主文件</li>\n<li><code>package.json</code>: 存储项目名、描述、作者、依赖等等信息</li>\n</ol>\n<blockquote>\n<p>小提示：不知读者发现了没有，我们遵循了 MVC（模型(model)－视图(view)－控制器(controller/route)） 的开发模式。</p>\n</blockquote>\n<h2 id=\"安装依赖模块\"><a href=\"#安装依赖模块\" class=\"headerlink\" title=\"安装依赖模块\"></a>安装依赖模块</h2><p>运行以下命令安装所需模块：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i config-lite connect-flash connect-mongo ejs express express-session marked moment mongolass objectid-to-timestamp sha1 winston express-winston --save</span><br><span class=\"line\">npm i https://github.com:utatti/express-formidable.git --save <span class=\"comment\"># 从 GitHub 安装 express-formidable 最新版，v1.0.0 有 bug</span></span><br></pre></td></tr></table></figure>\n\n<p>对应模块的用处：</p>\n<ol>\n<li><code>express</code>: web 框架</li>\n<li><code>express-session</code>: session 中间件</li>\n<li><code>connect-mongo</code>: 将 session 存储于 mongodb，结合 express-session 使用</li>\n<li><code>connect-flash</code>: 页面通知的中间件，基于 session 实现</li>\n<li><code>ejs</code>: 模板</li>\n<li><code>express-formidable</code>: 接收表单及文件上传的中间件</li>\n<li><code>config-lite</code>: 读取配置文件</li>\n<li><code>marked</code>: markdown 解析</li>\n<li><code>moment</code>: 时间格式化</li>\n<li><code>mongolass</code>: mongodb 驱动</li>\n<li><code>objectid-to-timestamp</code>: 根据 ObjectId 生成时间戳</li>\n<li><code>sha1</code>: sha1 加密，用于密码加密</li>\n<li><code>winston</code>: 日志</li>\n<li><code>express-winston</code>: express 的 winston 日志中间件</li>\n</ol>\n<p>后面会详细讲解这些模块的用法。</p>\n<h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h2><p>ESLint 是一个代码规范和语法错误检查工具。使用 ESLint 可以规范我们的代码书写，可以在编写代码期间就能发现一些低级错误。</p>\n<p>ESLint 需要结合编辑器或 IDE 使用，如：</p>\n<ul>\n<li>Sublime Text 需要装两个插件：SublimeLinter + SublimeLinter-contrib-eslint</li>\n<li>VS Code 需要装一个插件：ESLint</li>\n</ul>\n<blockquote>\n<p>小提示：Sublime Text 安装插件通过 ctrl+shift+p 调出 Package Control，输入 install 选择 Install Package 回车。输入对应插件名搜索，回车安装。<br>小提示：VS Code 安装插件需要点击左侧『扩展』页</p>\n</blockquote>\n<p>全局安装 eslint：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint -g</span><br></pre></td></tr></table></figure>\n\n<p>运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eslint --init</span><br></pre></td></tr></table></figure>\n\n<p>初始化 eslint 配置，依次选择：</p>\n<p>-&gt; Use a popular style guide<br>-&gt; Standard<br>-&gt; JSON</p>\n<blockquote>\n<p>注意：如果 Windows 用户使用其他命令行工具无法上下切换选项，切换回 cmd。</p>\n</blockquote>\n<p>eslint 会创建一个 .eslintrc.json 的配置文件，同时自动安装并添加相关的模块到 devDependencies。这里我们使用 Standard 规范，其主要特点是不加分号。</p>\n<h2 id=\"EditorConfig\"><a href=\"#EditorConfig\" class=\"headerlink\" title=\"EditorConfig\"></a>EditorConfig</h2><p>EditorConfig 是一个保持缩进风格的一致的工具，当多人共同开发一个项目的时候，往往会出现每个人用不同编辑器的情况，而且有的人用 tab 缩进，有的人用 2 个空格缩进，有的人用 4 个空格缩进，EditorConfig 就是为了解决这个问题而诞生。</p>\n<p>EditorConfig 需要结合编辑器或 IDE 使用，如：</p>\n<ul>\n<li>Sublime Text 需要装一个插件：EditorConfig</li>\n<li>VS Code 需要装一个插件：EditorConfig for VS Code</li>\n</ul>\n<p>在 myblog 目录下新建 .editorconfig 的文件，添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># editorconfig.org</span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">tab_width = 2</span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = false</span><br><span class=\"line\"></span><br><span class=\"line\">[Makefile]</span><br><span class=\"line\">indent_style = tab</span><br></pre></td></tr></table></figure>\n\n<p>这里我们使用 2 个空格缩进，tab 长度也是 2 个空格。trim_trailing_whitespace 用来删除每一行最后多余的空格，insert_final_newline 用来在代码最后插入一个空的换行。<br>不管是小项目还是大项目，将配置与代码分离是一个非常好的做法。我们通常将配置写到一个配置文件里，如 config.js 或 config.json ，并放到项目的根目录下。但实际开发时我们会有许多环境，如本地开发环境、测试环境和线上环境等，不同环境的配置不同（如：MongoDB 的地址），我们不可能每次部署时都要去修改引用 config.test.js 或者 config.production.js。config-lite 模块正是你需要的。</p>\n<h2 id=\"config-lite\"><a href=\"#config-lite\" class=\"headerlink\" title=\"config-lite\"></a>config-lite</h2><p><a href=\"https://www.npmjs.com/package/config-lite\" target=\"_blank\" rel=\"noopener\">config-lite</a> 是一个轻量的读取配置文件的模块。config-lite 会根据环境变量（<code>NODE_ENV</code>）的不同加载 config 目录下不同的配置文件。如果不设置 <code>NODE_ENV</code>，则读取默认的 default 配置文件，如果设置了 <code>NODE_ENV</code>，则会合并指定的配置文件和 default 配置文件作为配置，config-lite 支持 .js、.json、.node、.yml、.yaml 后缀的文件。</p>\n<p>如果程序以 <code>NODE_ENV=test node app</code> 启动，则 config-lite 会依次降级查找 <code>config/test.js</code>、<code>config/test.json</code>、<code>config/test.node</code>、<code>config/test.yml</code>、<code>config/test.yaml</code> 并合并 default 配置; 如果程序以 <code>NODE_ENV=production node app</code> 启动，则 config-lite 会依次降级查找 <code>config/production.js</code>、<code>config/production.json</code>、<code>config/production.node</code>、<code>config/production.yml</code>、<code>config/production.yaml</code> 并合并 default 配置。</p>\n<p>config-lite 还支持冒泡查找配置，即从传入的路径开始，从该目录不断往上一级目录查找 config 目录，直到找到或者到达根目录为止。</p>\n<p>在 myblog 下新建 config 目录，在该目录下新建 default.js，添加如下代码：</p>\n<p><strong>config/default.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">  session: &#123;</span><br><span class=\"line\">    secret: <span class=\"string\">\"myblog\"</span>,</span><br><span class=\"line\">    key: <span class=\"string\">\"myblog\"</span>,</span><br><span class=\"line\">    maxAge: <span class=\"number\">2592000000</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mongodb: <span class=\"string\">\"mongodb://localhost:27017/myblog\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>配置释义：</p>\n<ol>\n<li><code>port</code>: 程序启动要监听的端口号</li>\n<li><code>session</code>: express-session 的配置信息，后面介绍</li>\n<li><code>mongodb</code>: mongodb 的地址，以 <code>mongodb://</code> 协议开头，<code>myblog</code> 为 db 名</li>\n</ol>\n<h2 id=\"功能与路由设计\"><a href=\"#功能与路由设计\" class=\"headerlink\" title=\"功能与路由设计\"></a>功能与路由设计</h2><p>在开发博客之前，我们首先需要明确博客要实现哪些功能。由于本教程面向初学者，所以只实现了博客最基本的功能，其余的功能（如归档、标签、分页等等）读者可自行实现。</p>\n<p>功能及路由设计如下：</p>\n<ol>\n<li>注册<ol>\n<li>注册页：<code>GET /signup</code></li>\n<li>注册（包含上传头像）：<code>POST /signup</code></li>\n</ol>\n</li>\n<li>登录<ol>\n<li>登录页：<code>GET /signin</code></li>\n<li>登录：<code>POST /signin</code></li>\n</ol>\n</li>\n<li>登出：<code>GET /signout</code></li>\n<li>查看文章<ol>\n<li>主页：<code>GET /posts</code></li>\n<li>个人主页：<code>GET /posts?author=xxx</code></li>\n<li>查看一篇文章（包含留言）：<code>GET /posts/:postId</code></li>\n</ol>\n</li>\n<li>发表文章<ol>\n<li>发表文章页：<code>GET /posts/create</code></li>\n<li>发表文章：<code>POST /posts/create</code></li>\n</ol>\n</li>\n<li>修改文章<ol>\n<li>修改文章页：<code>GET /posts/:postId/edit</code></li>\n<li>修改文章：<code>POST /posts/:postId/edit</code></li>\n</ol>\n</li>\n<li>删除文章：<code>GET /posts/:postId/remove</code></li>\n<li>留言<ol>\n<li>创建留言：<code>POST /comments</code></li>\n<li>删除留言：<code>GET /comments/:commentId/remove</code></li>\n</ol>\n</li>\n</ol>\n<p>由于我们博客页面是后端渲染的，所以只通过简单的 <code>&lt;a&gt;(GET)</code> 和 <code>&lt;form&gt;(POST)</code> 与后端进行交互，如果使用 jQuery 或者其他前端框架（如 Angular、Vue、React 等等）可通过 Ajax 与后端交互，则 api 的设计应尽量遵循 Restful 风格。</p>\n<h3 id=\"Restful\"><a href=\"#Restful\" class=\"headerlink\" title=\"Restful\"></a>Restful</h3><p>Restful 是一种 api 的设计风格，提出了一组 api 的设计原则和约束条件。</p>\n<p>如上面删除文章的路由设计：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /posts/:postId/remove</span><br></pre></td></tr></table></figure>\n\n<p>Restful 风格的设计：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE /posts/:postId</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，Restful 风格的 api 更直观且优雅。</p>\n<p>更多阅读：</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/09/restful\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/09/restful</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></li>\n<li><a href=\"http://developer.51cto.com/art/200908/141825.htm\" target=\"_blank\" rel=\"noopener\">http://developer.51cto.com/art/200908/141825.htm</a></li>\n<li><a href=\"http://blog.jobbole.com/41233/\" target=\"_blank\" rel=\"noopener\">http://blog.jobbole.com/41233/</a></li>\n</ol>\n<h2 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h2><p>由于 HTTP 协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户，这个机制就是会话（Session）。</p>\n<h3 id=\"cookie-与-session-的区别\"><a href=\"#cookie-与-session-的区别\" class=\"headerlink\" title=\"cookie 与 session 的区别\"></a>cookie 与 session 的区别</h3><ol>\n<li>cookie 存储在浏览器（有大小限制），session 存储在服务端（没有大小限制）</li>\n<li>通常 session 的实现是基于 cookie 的，session id 存储于 cookie 中</li>\n<li>session 更安全，cookie 可以直接在浏览器查看甚至编辑</li>\n</ol>\n<p>更多 session 的资料，参考：<a href=\"https://www.zhihu.com/question/19786827\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19786827</a></p>\n<p>我们通过引入 express-session 中间件实现对会话的支持：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(session(options));</span><br></pre></td></tr></table></figure>\n\n<p>session 中间件会在 req 上添加 session 对象，即 req.session 初始值为 <code>{}</code>，当我们登录后设置 <code>req.session.user = 用户信息</code>，返回浏览器的头信息中会带上 <code>set-cookie</code> 将 session id 写到浏览器 cookie 中，那么该用户下次请求时，通过带上来的 cookie 中的 session id 我们就可以查找到该用户，并将用户信息保存到 <code>req.session.user</code>。</p>\n<h2 id=\"页面通知\"><a href=\"#页面通知\" class=\"headerlink\" title=\"页面通知\"></a>页面通知</h2><p>我们还需要这样一个功能：当我们操作成功时需要显示一个成功的通知，如登录成功跳转到主页时，需要显示一个 <code>登陆成功</code> 的通知；当我们操作失败时需要显示一个失败的通知，如注册时用户名被占用了，需要显示一个 <code>用户名已占用</code> 的通知。通知只显示一次，刷新后消失，我们可以通过 connect-flash 中间件实现这个功能。</p>\n<p><a href=\"https://www.npmjs.com/package/connect-flash\" target=\"_blank\" rel=\"noopener\">connect-flash</a> 是基于 session 实现的，它的原理很简单：设置初始值 <code>req.session.flash={}</code>，通过 <code>req.flash(name, value)</code> 设置这个对象下的字段和值，通过 <code>req.flash(name)</code> 获取这个对象下的值，同时删除这个字段，实现了只显示一次刷新后消失的功能。</p>\n<h3 id=\"express-session、connect-mongo-和-connect-flash-的区别与联系\"><a href=\"#express-session、connect-mongo-和-connect-flash-的区别与联系\" class=\"headerlink\" title=\"express-session、connect-mongo 和 connect-flash 的区别与联系\"></a>express-session、connect-mongo 和 connect-flash 的区别与联系</h3><ol>\n<li><code>express-session</code>: 会话（session）支持中间件</li>\n<li><code>connect-mongo</code>: 将 session 存储于 mongodb，需结合 express-session 使用，我们也可以将 session 存储于 redis，如 <a href=\"https://www.npmjs.com/package/connect-redis\" target=\"_blank\" rel=\"noopener\">connect-redis</a></li>\n<li><code>connect-flash</code>: 基于 session 实现的用于通知功能的中间件，需结合 express-session 使用</li>\n</ol>\n<h2 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h2><p>不管是论坛还是博客网站，我们没有登录的话只能浏览，登陆后才能发帖或写文章，即使登录了你也不能修改或删除其他人的文章，这就是权限控制。我们也来给博客添加权限控制，如何实现页面的权限控制呢？我们可以把用户状态的检查封装成一个中间件，在每个需要权限控制的路由加载该中间件，即可实现页面的权限控制。在 myblog 下新建 middlewares 目录，在该目录下新建 check.js，添加如下代码：</p>\n<p><strong>middlewares/check.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  checkLogin: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkLogin</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!req.session.user) &#123;</span><br><span class=\"line\">      req.flash(<span class=\"string\">\"error\"</span>, <span class=\"string\">\"未登录\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">\"/signin\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  checkNotLogin: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkNotLogin</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.session.user) &#123;</span><br><span class=\"line\">      req.flash(<span class=\"string\">\"error\"</span>, <span class=\"string\">\"已登录\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">\"back\"</span>); <span class=\"comment\">// 返回之前的页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出：</p>\n<ol>\n<li><code>checkLogin</code>: 当用户信息（<code>req.session.user</code>）不存在，即认为用户没有登录，则跳转到登录页，同时显示 <code>未登录</code> 的通知，用于需要用户登录才能操作的页面</li>\n<li><code>checkNotLogin</code>: 当用户信息（<code>req.session.user</code>）存在，即认为用户已经登录，则跳转到之前的页面，同时显示 <code>已登录</code> 的通知，如已登录用户就禁止访问登录、注册页面</li>\n</ol>\n<p>最终我们创建以下路由文件：</p>\n<p><strong>routes/index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    res.redirect(<span class=\"string\">\"/posts\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/signup\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./signup\"</span>));</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/signin\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./signin\"</span>));</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/signout\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./signout\"</span>));</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/posts\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./posts\"</span>));</span><br><span class=\"line\">  app.use(<span class=\"string\">\"/comments\"</span>, <span class=\"built_in\">require</span>(<span class=\"string\">\"./comments\"</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts 所有用户或者特定用户的文章页</span></span><br><span class=\"line\"><span class=\"comment\">//   eg: GET /posts?author=xxx</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"主页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /posts/create 发表一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/create\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"发表文章\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/create 发表文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/create\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"发表文章页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:postId\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"文章详情页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/edit 更新文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:postId/edit\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"更新文章页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /posts/:postId/edit 更新一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/:postId/edit\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"更新文章\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/remove 删除一篇文章</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:postId/remove\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"删除文章\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/comments.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /comments 创建一条留言</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"创建留言\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /comments/:commentId/remove 删除一条留言</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/:commentId/remove\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"删除留言\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/signin.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkNotLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signin 登录页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"登录页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /signin 用户登录</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"登录\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/signup.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkNotLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signup 注册页</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"注册页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /signup 用户注册</span></span><br><span class=\"line\">router.post(<span class=\"string\">\"/\"</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"注册\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p><strong>routes/signout.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">\"../middlewares/check\"</span>).checkLogin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signout 登出</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">\"登出\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n\n<p>最后，修改 index.js 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">\"express-session\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> MongoStore = <span class=\"built_in\">require</span>(<span class=\"string\">\"connect-mongo\"</span>)(session);</span><br><span class=\"line\"><span class=\"keyword\">const</span> flash = <span class=\"built_in\">require</span>(<span class=\"string\">\"connect-flash\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"config-lite\"</span>)(__dirname);</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = <span class=\"built_in\">require</span>(<span class=\"string\">\"./routes\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">\"./package\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置模板目录</span></span><br><span class=\"line\">app.set(<span class=\"string\">\"views\"</span>, path.join(__dirname, <span class=\"string\">\"views\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// 设置模板引擎为 ejs</span></span><br><span class=\"line\">app.set(<span class=\"string\">\"view engine\"</span>, <span class=\"string\">\"ejs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置静态文件目录</span></span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">\"public\"</span>)));</span><br><span class=\"line\"><span class=\"comment\">// session 中间件</span></span><br><span class=\"line\">app.use(</span><br><span class=\"line\">  session(&#123;</span><br><span class=\"line\">    name: config.session.key, <span class=\"comment\">// 设置 cookie 中保存 session id 的字段名称</span></span><br><span class=\"line\">    secret: config.session.secret, <span class=\"comment\">// 通过设置 secret 来计算 hash 值并放在 cookie 中，使产生的 signedCookie 防篡改</span></span><br><span class=\"line\">    resave: <span class=\"literal\">true</span>, <span class=\"comment\">// 强制更新 session</span></span><br><span class=\"line\">    saveUninitialized: <span class=\"literal\">false</span>, <span class=\"comment\">// 设置为 false，强制创建一个 session，即使用户未登录</span></span><br><span class=\"line\">    cookie: &#123;</span><br><span class=\"line\">      maxAge: config.session.maxAge <span class=\"comment\">// 过期时间，过期后 cookie 中的 session id 自动删除</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    store: <span class=\"keyword\">new</span> MongoStore(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将 session 存储到 mongodb</span></span><br><span class=\"line\">      url: config.mongodb <span class=\"comment\">// mongodb 地址</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// flash 中间件，用来显示通知</span></span><br><span class=\"line\">app.use(flash());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\">routes(app);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听端口，启动程序</span></span><br><span class=\"line\">app.listen(config.port, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;pkg.name&#125;</span> listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：中间件的加载顺序很重要。如上面设置静态文件目录的中间件应该放到 routes(app) 之前加载，这样静态文件的请求就不会落到业务逻辑的路由里；flash 中间件应该放到 session 中间件之后加载，因为 flash 是基于 session 实现的。</p>\n</blockquote>\n<p>运行 <code>supervisor index</code> 启动博客，访问以下地址查看效果：</p>\n<ol>\n<li><a href=\"http://localhost:3000/posts\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/posts</a></li>\n<li><a href=\"http://localhost:3000/signout\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/signout</a></li>\n<li><a href=\"http://localhost:3000/signup\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/signup</a><br>我们使用 jQuery + Semantic-UI 实现前端页面的设计，最终效果图如下:</li>\n</ol>\n<p><strong>注册页</strong></p>\n<p><img src=\"/images/4.5.1.png\" alt></p>\n<p><strong>登录页</strong></p>\n<p><img src=\"/images/4.5.2.png\" alt></p>\n<p><strong>未登录时的主页（或用户页）</strong></p>\n<p><img src=\"/images/4.5.3.png\" alt></p>\n<p><strong>登录后的主页（或用户页）</strong></p>\n<p><img src=\"/images/4.5.4.png\" alt></p>\n<p><strong>发表文章页</strong></p>\n<p><img src=\"/images/4.5.5.png\" alt></p>\n<p><strong>编辑文章页</strong></p>\n<p><img src=\"/images/4.5.6.png\" alt></p>\n<p><strong>未登录时的文章页</strong></p>\n<p><img src=\"/images/4.5.7.png\" alt></p>\n<p><strong>登录后的文章页</strong></p>\n<p><img src=\"/images/4.5.8.png\" alt></p>\n<p><strong>通知</strong></p>\n<p><img src=\"/images/4.5.9.png\" alt><br><img src=\"/images/4.5.10.png\" alt><br><img src=\"/images/4.5.11.png\" alt></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>前面提到过，我们可以将模板拆分成一些组件，然后使用 ejs 的 include 方法将组件组合起来进行渲染。我们将页面切分成以下组件：</p>\n<p><strong>主页</strong></p>\n<p><img src=\"/images/4.5.12.png\" alt></p>\n<p><strong>文章页</strong></p>\n<p><img src=\"/images/4.5.13.png\" alt></p>\n<p>根据上面的组件切分图，我们创建以下样式及模板文件：</p>\n<p><strong>public/css/style.css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ---------- 全局样式 ---------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#4fc08d</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#4fc08d</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.avatar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ---------- nav ---------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#4fc08d</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ---------- nav-setting ---------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav-setting</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">35px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav-setting</span> <span class=\"selector-class\">.ui</span><span class=\"selector-class\">.dropdown</span><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav-setting</span> <span class=\"selector-class\">.icon</span><span class=\"selector-class\">.bars</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ---------- post-content ---------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-tag\">h3</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#4fc08d</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-class\">.tag</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-class\">.tag</span><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-content</span> <span class=\"selector-class\">.tag</span><span class=\"selector-class\">.right</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/header.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;%= blog.title %&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/semantic-ui/2.1.8/semantic.min.css&quot;&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;//cdn.bootcss.com/semantic-ui/2.1.8/semantic.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;%- include(&apos;components/nav&apos;) %&gt;</span><br><span class=\"line\">  &lt;%- include(&apos;components/nav-setting&apos;) %&gt;</span><br><span class=\"line\">  &lt;%- include(&apos;components/notification&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/footer.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">   $(document).ready(function () &#123;</span><br><span class=\"line\">      // 点击按钮弹出下拉框</span><br><span class=\"line\">      $(&apos;.ui.dropdown&apos;).dropdown();</span><br><span class=\"line\"></span><br><span class=\"line\">      // 鼠标悬浮在头像上，弹出气泡提示框</span><br><span class=\"line\">      $(&apos;.post-content .avatar-link&apos;).popup(&#123;</span><br><span class=\"line\">        inline: true,</span><br><span class=\"line\">        position: &apos;bottom right&apos;,</span><br><span class=\"line\">        lastResort: &apos;bottom right&apos;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：上面 <code>&lt;script&gt;&lt;/script&gt;</code> 是 semantic-ui 操控页面控件的代码，一定要放到 footer.ejs 的 <code>&lt;/body&gt;</code> 的前面，因为只有页面加载完后才能通过 JQuery 获取 DOM 元素。</p>\n</blockquote>\n<p>在 views 目录下新建 components 目录用来存放组件（即可以复用的模板片段），在该目录下创建以下文件：</p>\n<p><strong>views/components/nav.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;nav&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">      &lt;a href=&quot;/posts&quot;&gt;&lt;h1&gt;&lt;%= blog.title %&gt;&lt;/h1&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;p&gt;&lt;%= blog.description %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/components/nav-setting.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;nav-setting&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ui buttons&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ui floating dropdown button&quot;&gt;</span><br><span class=\"line\">      &lt;i class=&quot;icon bars&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">      &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">        &lt;% if (user) &#123; %&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/posts?author=&lt;%= user._id %&gt;&quot;&gt;个人主页&lt;/a&gt;</span><br><span class=\"line\">          &lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/posts/create&quot;&gt;发表文章&lt;/a&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/signout&quot;&gt;登出&lt;/a&gt;</span><br><span class=\"line\">        &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/signin&quot;&gt;登录&lt;/a&gt;</span><br><span class=\"line\">          &lt;a class=&quot;item&quot; href=&quot;/signup&quot;&gt;注册&lt;/a&gt;</span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>views/components/notification.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% if (success) &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ui success message&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;&lt;%= success %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;% if (error) &#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ui error message&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;&lt;%= error %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"app-locals-和-res-locals\"><a href=\"#app-locals-和-res-locals\" class=\"headerlink\" title=\"app.locals 和 res.locals\"></a>app.locals 和 res.locals</h2><p>上面的 ejs 模板中我们用到了 blog、user、success、error 变量，我们将 blog 变量挂载到 <code>app.locals</code> 下，将 user、success、error 挂载到 <code>res.locals</code> 下。为什么要这么做呢？<code>app.locals</code> 和 <code>res.locals</code> 是什么？它们有什么区别？</p>\n<p>express 中有两个对象可用于模板的渲染：<code>app.locals</code> 和 <code>res.locals</code>。我们从 express 源码一探究竟：</p>\n<p><strong>express/lib/application.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.render = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">name, options, callback</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = options;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderOptions = &#123;&#125;;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// merge app.locals</span></span><br><span class=\"line\">  merge(renderOptions, <span class=\"keyword\">this</span>.locals);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// merge options._locals</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts._locals) &#123;</span><br><span class=\"line\">    merge(renderOptions, opts._locals);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// merge options</span></span><br><span class=\"line\">  merge(renderOptions, opts);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  tryRender(view, renderOptions, done);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>express/lib/response.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">view, options, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = <span class=\"keyword\">this</span>.req.app;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = options || &#123;&#125;;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// merge res.locals</span></span><br><span class=\"line\">  opts._locals = self.locals;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// render</span></span><br><span class=\"line\">  app.render(view, opts, done);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出：在调用 <code>res.render</code> 的时候，express 合并（merge）了 3 处的结果后传入要渲染的模板，优先级：<code>res.render</code> 传入的对象&gt; <code>res.locals</code> 对象 &gt; <code>app.locals</code> 对象，所以 <code>app.locals</code> 和 <code>res.locals</code> 几乎没有区别，都用来渲染模板，使用上的区别在于：<code>app.locals</code> 上通常挂载常量信息（如博客名、描述、作者这种不会变的信息），<code>res.locals</code> 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，<code>res.locals.user = req.session.user</code>）。</p>\n<p>修改 index.js，在 <code>routes(app)</code> 上一行添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置模板全局常量</span></span><br><span class=\"line\">app.locals.blog = &#123;</span><br><span class=\"line\">  title: pkg.name,</span><br><span class=\"line\">  description: pkg.description</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加模板必需的三个变量</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.locals.user = req.session.user;</span><br><span class=\"line\">  res.locals.success = req.flash(<span class=\"string\">\"success\"</span>).toString();</span><br><span class=\"line\">  res.locals.error = req.flash(<span class=\"string\">\"error\"</span>).toString();</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样在调用 <code>res.render</code> 的时候就不用传入这四个变量了，express 为我们自动 merge 并传入了模板，所以我们可以在模板中直接使用这四个变量。<br>我们使用 <a href=\"https://github.com/mongolass/mongolass\" target=\"_blank\" rel=\"noopener\">Mongolass</a> 这个模块操作 mongodb 进行增删改查。在 myblog 下新建 lib 目录，在该目录下新建 mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'config-lite'</span>)(__dirname)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Mongolass = <span class=\"built_in\">require</span>(<span class=\"string\">'mongolass'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mongolass = <span class=\"keyword\">new</span> Mongolass()</span><br><span class=\"line\">mongolass.connect(config.mongodb)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么使用-Mongolass\"><a href=\"#为什么使用-Mongolass\" class=\"headerlink\" title=\"为什么使用 Mongolass\"></a>为什么使用 Mongolass</h2><p>早期我使用官方的 <a href=\"https://www.npmjs.com/package/mongodb\" target=\"_blank\" rel=\"noopener\">mongodb</a>（也叫 node-mongodb-native）库，后来也陆续尝试使用了许多其他 mongodb 的驱动库，<a href=\"https://www.npmjs.com/package/mongoose\" target=\"_blank\" rel=\"noopener\">Mongoose</a> 是比较优秀的一个，使用 Mongoose 的时间也比较长。比较这两者，各有优缺点。</p>\n<h3 id=\"node-mongodb-native\"><a href=\"#node-mongodb-native\" class=\"headerlink\" title=\"node-mongodb-native:\"></a>node-mongodb-native:</h3><p><strong>优点：</strong></p>\n<ol>\n<li>简单。参照文档即可上手，没有 Mongoose 的 Schema 那些对新手不友好的东西。</li>\n<li>强大。毕竟是官方库，包含了所有且最新的 api，其他大部分的库都是在这个库的基础上改造的，包括 Mongoose。</li>\n<li>文档健全。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>起初只支持 callback，会写出以下这种代码：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb.open(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  db.collection(<span class=\"string\">'users'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, collection</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    collection.find(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'xxx'</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>或者：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, mongodb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  mongodb.db(<span class=\"string\">'test'</span>).collection(<span class=\"string\">'users'</span>).find(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'xxx'</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>现在支持 Promise 了，和 co 一起使用好很多。</p>\n<ol start=\"2\">\n<li>不支持文档校验。Mongoose 通过 Schema 支持文档校验，虽说 mongodb 是 no schema 的，但在生产环境中使用 Schema 有两点好处。一是对文档做校验，防止非正常情况下写入错误的数据到数据库，二是可以简化一些代码，如类型为 ObjectId 的字段查询或更新时可通过对应的字符串操作，不用每次包装成 ObjectId 对象。</li>\n</ol>\n<h3 id=\"Mongoose\"><a href=\"#Mongoose\" class=\"headerlink\" title=\"Mongoose:\"></a>Mongoose:</h3><p><strong>优点：</strong></p>\n<ol>\n<li><p>封装了数据库的操作，给人的感觉是同步的，其实内部是异步的。如 mongoose 与 MongoDB 建立连接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>)</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> BlogModel = mongoose.model(<span class=\"string\">'Blog'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">content</span>: <span class=\"built_in\">String</span> &#125;)</span><br><span class=\"line\">BlogModel.find()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>支持 Promise。这个也无需多说，Promise 是未来趋势，可结合 co 使用，也可结合 async/await 使用。</p>\n</li>\n<li><p>支持文档校验。如上所述。</p>\n</li>\n</ol>\n<p><strong>缺点（个人观点）：</strong></p>\n<ol>\n<li>功能多，复杂。Mongoose 功能很强大，包括静态方法，实例方法，虚拟属性，hook 函数等等，混用带来的后果是逻辑复杂，代码难以维护。</li>\n<li>较弱的 plugin 系统。如：<code>schema.pre(&#39;save&#39;, function(next) {})</code> 和 <code>schema.post(&#39;find&#39;, function(next) {})</code>，只支持异步 <code>next()</code>，灵活性大打折扣。</li>\n<li>其他：对新手来说难以理解的 Schema、Model、Entity 之间的关系；容易混淆的 toJSON 和 toObject，以及有带有虚拟属性的情况；用和不用 exec 的情况以及直接用 then 的情况；返回的结果是 Mongoose 包装后的对象，在此对象上修改结果却无效等等。</li>\n</ol>\n<h3 id=\"Mongolass\"><a href=\"#Mongolass\" class=\"headerlink\" title=\"Mongolass\"></a>Mongolass</h3><p>Mongolass 保持了与 mongodb 一样的 api，又借鉴了许多 Mongoose 的优点，同时又保持了精简。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li>支持 Promise。</li>\n<li>官方一致的 api。</li>\n<li>简单。参考 Mongolass 的 readme 即可上手，比 Mongoose 精简的多，本身代码也不多。</li>\n<li>可选的 Schema。Mongolass 中的 Schema （基于 <a href=\"https://www.npmjs.com/package/another-json-schema\" target=\"_blank\" rel=\"noopener\">another-json-schema</a>）是可选的，并且只用来做文档校验。如果定义了 schema 并关联到某个 model，则插入、更新和覆盖等操作都会校验文档是否满足 schema，同时 schema 也会尝试格式化该字段，类似于 Mongoose，如定义了一个字段为 ObjectId 类型，也可以用 ObjectId 的字符串无缝使用一样。如果没有 schema，则用法跟原生 mongodb 库一样。</li>\n<li>简单却强大的插件系统。可以定义全局插件（对所有 model 生效），也可以定义某个 model 上的插件（只对该 model 生效）。Mongolass 插件的设计思路借鉴了中间件的概念（类似于 Koa），通过定义 <code>beforeXXX</code> 和 <code>afterXXX</code> （XXX为操作符首字母大写，如：<code>afterFind</code>）函数实现，函数返回 yieldable 的对象即可，所以每个插件内可以做一些其他的 IO 操作。不同的插件顺序会有不同的结果，而且每个插件的输入输出都是 plain object，而非类 Mongoose 包装后的对象，没有虚拟属性，无需调用 toJSON 或 toObject。Mongolass 中的 <code>.populate()</code>就是一个内置的插件。</li>\n<li>详细的错误信息。用过 Mongoose 的人一定遇到过这样的错：<br><code>CastError: Cast to ObjectId failed for value &quot;xxx&quot; at path &quot;_id&quot;</code><br>只知道一个期望是 ObjectId 的字段传入了非期望的值，通常很难定位出错的代码，即使定位到也得不到错误现场。得益于 <a href=\"https://www.npmjs.com/package/another-json-schema\" target=\"_blank\" rel=\"noopener\">another-json-schema</a>，使用 Mongolass 在查询或者更新时，某个字段不匹配它定义的 schema 时（还没落到 mongodb）会给出详细的错误信息，如下所示：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Mongolass = <span class=\"built_in\">require</span>(<span class=\"string\">'mongolass'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mongolass = <span class=\"keyword\">new</span> Mongolass(<span class=\"string\">'mongodb://localhost:27017/test'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = mongolass.model(<span class=\"string\">'User'</span>, &#123;</span><br><span class=\"line\">  name: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span> &#125;,</span><br><span class=\"line\">  age: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'number'</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">User</span><br><span class=\"line\">  .insertOne(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'nswbmw'</span>, <span class=\"attr\">age</span>: <span class=\"string\">'wrong age'</span> &#125;)</span><br><span class=\"line\">  .exec()</span><br><span class=\"line\">  .then(<span class=\"built_in\">console</span>.log)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(e)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(e.stack)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123; [Error: ($.age: \"wrong age\") ✖ (type: number)]</span></span><br><span class=\"line\"><span class=\"comment\">  validator: 'type',</span></span><br><span class=\"line\"><span class=\"comment\">  actual: 'wrong age',</span></span><br><span class=\"line\"><span class=\"comment\">  expected: &#123; type: 'number' &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  path: '$.age',</span></span><br><span class=\"line\"><span class=\"comment\">  schema: 'UserSchema',</span></span><br><span class=\"line\"><span class=\"comment\">  model: 'User',</span></span><br><span class=\"line\"><span class=\"comment\">  plugin: 'MongolassSchema',</span></span><br><span class=\"line\"><span class=\"comment\">  type: 'beforeInsertOne',</span></span><br><span class=\"line\"><span class=\"comment\">  args: [] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">Error: ($.age: \"wrong age\") ✖ (type: number)</span></span><br><span class=\"line\"><span class=\"comment\">    at Model.insertOne (/Users/nswbmw/Desktop/mongolass-demo/node_modules/mongolass/lib/query.js:108:16)</span></span><br><span class=\"line\"><span class=\"comment\">    at Object.&lt;anonymous&gt; (/Users/nswbmw/Desktop/mongolass-demo/app.js:10:4)</span></span><br><span class=\"line\"><span class=\"comment\">    at Module._compile (module.js:409:26)</span></span><br><span class=\"line\"><span class=\"comment\">    at Object.Module._extensions..js (module.js:416:10)</span></span><br><span class=\"line\"><span class=\"comment\">    at Module.load (module.js:343:32)</span></span><br><span class=\"line\"><span class=\"comment\">    at Function.Module._load (module.js:300:12)</span></span><br><span class=\"line\"><span class=\"comment\">    at Function.Module.runMain (module.js:441:10)</span></span><br><span class=\"line\"><span class=\"comment\">    at startup (node.js:139:18)</span></span><br><span class=\"line\"><span class=\"comment\">    at node.js:974:3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>可以看出，错误的原因是在 insertOne 一条用户数据到用户表的时候，age 期望是一个 number 类型的值，而我们传入的字符串 <code>wrong age</code>，然后从错误栈中可以快速定位到是 app.js 第 10 行代码抛出的错。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><del>schema 功能较弱，缺少如 required、default 功能。</del></li>\n</ol>\n<h3 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h3><p><a href=\"https://zhuanlan.zhihu.com/p/24308524\" target=\"_blank\" rel=\"noopener\">从零开始写一个 Node.js 的 MongoDB 驱动库</a></p>\n<h2 id=\"用户模型设计\"><a href=\"#用户模型设计\" class=\"headerlink\" title=\"用户模型设计\"></a>用户模型设计</h2><p>我们只存储用户的名称、密码（加密后的）、头像、性别和个人简介这几个字段，对应修改 lib/mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.User = mongolass.model(<span class=\"string\">'User'</span>, &#123;</span><br><span class=\"line\">  name: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  password: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  avatar: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  gender: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">enum</span>: [<span class=\"string\">'m'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'x'</span>], <span class=\"attr\">default</span>: <span class=\"string\">'x'</span> &#125;,</span><br><span class=\"line\">  bio: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">exports.User.index(&#123; <span class=\"attr\">name</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">true</span> &#125;).exec()<span class=\"comment\">// 根据用户名找到用户，用户名全局唯一</span></span><br></pre></td></tr></table></figure>\n\n<p>我们定义了用户表的 schema，生成并导出了 User 这个 model，同时设置了 name 的唯一索引，保证用户名是不重复的。</p>\n<blockquote>\n<p>小提示：<code>required: true</code> 表示该字段是必需的，<code>default: xxx</code> 用于创建文档时设置默认值。更多关于 Mongolass 的 schema 的用法，请查阅 <a href=\"https://github.com/nswbmw/another-json-schema\" target=\"_blank\" rel=\"noopener\">another-json-schema</a>。</p>\n</blockquote>\n<blockquote>\n<p>小提示：Mongolass 中的 model 你可以认为相当于 mongodb 中的 collection，只不过添加了插件的功能。</p>\n</blockquote>\n<h2 id=\"注册页\"><a href=\"#注册页\" class=\"headerlink\" title=\"注册页\"></a>注册页</h2><p>首先，我们来完成注册。新建 views/signup.ejs，添加如下代码：</p>\n<p><strong>views/signup.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">    &lt;form class=&quot;ui form segment&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;用户名&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;用户名&quot; type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;密码&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;密码&quot; type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;重复密码&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;重复密码&quot; type=&quot;password&quot; name=&quot;repassword&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;性别&lt;/label&gt;</span><br><span class=\"line\">        &lt;select class=&quot;ui compact selection dropdown&quot; name=&quot;gender&quot;&gt;</span><br><span class=\"line\">          &lt;option value=&quot;m&quot;&gt;男&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;f&quot;&gt;女&lt;/option&gt;</span><br><span class=\"line\">          &lt;option value=&quot;x&quot;&gt;保密&lt;/option&gt;</span><br><span class=\"line\">        &lt;/select&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;头像&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=&quot;file&quot; name=&quot;avatar&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;个人简介&lt;/label&gt;</span><br><span class=\"line\">        &lt;textarea name=&quot;bio&quot; rows=&quot;5&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;submit&quot; class=&quot;ui button fluid&quot; value=&quot;注册&quot;&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：form 表单要添加 <code>enctype=&quot;multipart/form-data&quot;</code> 属性才能上传文件。</p>\n</blockquote>\n<p>修改 routes/signup.js 中获取注册页的路由如下：</p>\n<p><strong>routes/signup.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /signup 注册页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signup'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在访问 <code>localhost:3000/signup</code> 看看效果吧。</p>\n<h2 id=\"注册与文件上传\"><a href=\"#注册与文件上传\" class=\"headerlink\" title=\"注册与文件上传\"></a>注册与文件上传</h2><p>我们使用 <a href=\"https://github.com/utatti/express-formidable\" target=\"_blank\" rel=\"noopener\">express-formidable</a> 处理 form 表单（包括文件上传）。修改 index.js ，在 <code>app.use(flash())</code> 下一行添加如下代码：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理表单及文件上传的中间件</span></span><br><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'express-formidable'</span>)(&#123;</span><br><span class=\"line\">  uploadDir: path.join(__dirname, <span class=\"string\">'public/img'</span>), <span class=\"comment\">// 上传文件目录</span></span><br><span class=\"line\">  keepExtensions: <span class=\"literal\">true</span><span class=\"comment\">// 保留后缀</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>新建 models/users.js，添加如下代码：</p>\n<p><strong>models/users.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注册一个用户</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User.create(user).exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完善处理用户注册的路由，最终修改 routes/signup.js 如下：</p>\n<p><strong>routes/signup.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">'sha1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/users'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check'</span>).checkNotLogin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signup 注册页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signup'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /signup 用户注册</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = req.fields.name</span><br><span class=\"line\">  <span class=\"keyword\">const</span> gender = req.fields.gender</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bio = req.fields.bio</span><br><span class=\"line\">  <span class=\"keyword\">const</span> avatar = req.files.avatar.path.split(path.sep).pop()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> password = req.fields.password</span><br><span class=\"line\">  <span class=\"keyword\">const</span> repassword = req.fields.repassword</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(name.length &gt;= <span class=\"number\">1</span> &amp;&amp; name.length &lt;= <span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'名字请限制在 1-10 个字符'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'m'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'x'</span>].indexOf(gender) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'性别只能是 m、f 或 x'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(bio.length &gt;= <span class=\"number\">1</span> &amp;&amp; bio.length &lt;= <span class=\"number\">30</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'个人简介请限制在 1-30 个字符'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!req.files.avatar.name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'缺少头像'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password.length &lt; <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'密码至少 6 个字符'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password !== repassword) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'两次输入密码不一致'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册失败，异步删除上传的头像</span></span><br><span class=\"line\">    fs.unlink(req.files.avatar.path)</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 明文密码加密</span></span><br><span class=\"line\">  password = sha1(password)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 待写入数据库的用户信息</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    password: password,</span><br><span class=\"line\">    gender: gender,</span><br><span class=\"line\">    bio: bio,</span><br><span class=\"line\">    avatar: avatar</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 用户信息写入数据库</span></span><br><span class=\"line\">  UserModel.create(user)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 此 user 是插入 mongodb 后的值，包含 _id</span></span><br><span class=\"line\">      user = result.ops[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"comment\">// 删除密码这种敏感信息，将用户信息存入 session</span></span><br><span class=\"line\">      <span class=\"keyword\">delete</span> user.password</span><br><span class=\"line\">      req.session.user = user</span><br><span class=\"line\">      <span class=\"comment\">// 写入 flash</span></span><br><span class=\"line\">      req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'注册成功'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 跳转到首页</span></span><br><span class=\"line\">      res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注册失败，异步删除上传的头像</span></span><br><span class=\"line\">      fs.unlink(req.files.avatar.path)</span><br><span class=\"line\">      <span class=\"comment\">// 用户名被占用则跳回注册页，而不是错误页</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (e.message.match(<span class=\"string\">'duplicate key'</span>)) &#123;</span><br><span class=\"line\">        req.flash(<span class=\"string\">'error'</span>, <span class=\"string\">'用户名已被占用'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      next(e)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<p>我们使用 express-formidable 处理表单的上传，表单普通字段挂载到 req.fields 上，表单上传后的文件挂载到 req.files 上，文件存储在 public/img 目录下。然后校验了参数，校验通过后将用户信息插入到 MongoDB 中，成功则跳转到主页并显示『注册成功』的通知，失败（如用户名被占用）则跳转回注册页面并显示『用户名已被占用』的通知。</p>\n<blockquote>\n<p>注意：我们使用 sha1 加密用户的密码，sha1 并不是一种十分安全的加密方式，实际开发中可以使用更安全的 <a href=\"https://www.npmjs.com/package/bcrypt\" target=\"_blank\" rel=\"noopener\">bcrypt</a> 或 <a href=\"https://www.npmjs.com/package/scrypt\" target=\"_blank\" rel=\"noopener\">scrypt</a> 加密。<br>注意：注册失败时（参数校验失败或者存数据库时出错）删除已经上传到 public/img 目录下的头像。</p>\n</blockquote>\n<p>为了方便观察效果，我们先创建主页的模板。修改 routes/posts.js 中对应代码如下：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'posts'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建 views/posts.ejs，添加如下代码：</p>\n<p><strong>views/posts.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\">这是主页</span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>localhost:3000/signup</code>，注册成功后如下所示：</p>\n<p><img src=\"/images/4.7.1.png\" alt></p>\n<h2 id=\"登出\"><a href=\"#登出\" class=\"headerlink\" title=\"登出\"></a>登出</h2><p>现在我们来完成登出的功能。修改 routes/signout.js 如下：</p>\n<p><strong>routes/signout.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check'</span>).checkLogin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signout 登出</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 清空 session 中用户信息</span></span><br><span class=\"line\">  req.session.user = <span class=\"literal\">null</span></span><br><span class=\"line\">  req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'登出成功'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 登出成功后跳转到主页</span></span><br><span class=\"line\">  res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<p>此时刷新页面，点击右上角的 <code>登出</code>，成功后如下图所示：</p>\n<p><img src=\"/images/4.8.1.png\" alt></p>\n<h2 id=\"登录页\"><a href=\"#登录页\" class=\"headerlink\" title=\"登录页\"></a>登录页</h2><p>现在我们来完成登录页。修改 routes/signin.js 相应代码如下：</p>\n<p><strong>routes/signin.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signin'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建 views/signin.ejs，添加如下代码：</p>\n<p><strong>views/signin.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">    &lt;form class=&quot;ui form segment&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;用户名&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;用户名&quot; type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;密码&lt;/label&gt;</span><br><span class=\"line\">        &lt;input placeholder=&quot;密码&quot; type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;submit&quot; class=&quot;ui button fluid&quot; value=&quot;登录&quot;&gt;</span><br><span class=\"line\">    &lt;/form&gt;  </span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>现在刷新页面，点击右边上角 <code>登录</code> 试试吧，我们已经看到了登录页，但先不要点击登录，接下来我们实现处理登录的逻辑。</p>\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p>现在我们来完成登录的功能。修改 models/users.js 添加 <code>getUserByName</code> 方法用于通过用户名获取用户信息：</p>\n<p><strong>models/users.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注册一个用户</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User.create(user).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过用户名获取用户信息</span></span><br><span class=\"line\">  getUserByName: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserByName</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User</span><br><span class=\"line\">      .findOne(&#123; <span class=\"attr\">name</span>: name &#125;)</span><br><span class=\"line\">      .addCreatedAt()</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们使用了 <code>addCreatedAt</code> 自定义插件（通过 _id 生成时间戳），修改 lib/mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> objectIdToTimestamp = <span class=\"built_in\">require</span>(<span class=\"string\">'objectid-to-timestamp'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据 id 生成创建时间 created_at</span></span><br><span class=\"line\">mongolass.plugin(<span class=\"string\">'addCreatedAt'</span>, &#123;</span><br><span class=\"line\">  afterFind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">    results.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">      item.created_at = moment(objectIdToTimestamp(item._id)).format(<span class=\"string\">'YYYY-MM-DD HH:mm'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  afterFindOne: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">      result.created_at = moment(objectIdToTimestamp(result._id)).format(<span class=\"string\">'YYYY-MM-DD HH:mm'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小提示：24 位长的 ObjectId 前 4 个字节是精确到秒的时间戳，所以我们没有额外的存创建时间（如: createdAt）的字段。ObjectId 生成规则：</p>\n</blockquote>\n<p><img src=\"/images/4.8.2.png\" alt></p>\n<p>修改 routes/signin.js 如下：</p>\n<p><strong>routes/signin.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">'sha1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/users'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNotLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check'</span>).checkNotLogin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /signin 登录页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signin'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /signin 用户登录</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, checkNotLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = req.fields.name</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = req.fields.password</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!name.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写用户名'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!password.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写密码'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  UserModel.getUserByName(name)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!user) &#123;</span><br><span class=\"line\">        req.flash(<span class=\"string\">'error'</span>, <span class=\"string\">'用户不存在'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 检查密码是否匹配</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sha1(password) !== user.password) &#123;</span><br><span class=\"line\">        req.flash(<span class=\"string\">'error'</span>, <span class=\"string\">'用户名或密码错误'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'登录成功'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 用户信息写入 session</span></span><br><span class=\"line\">      <span class=\"keyword\">delete</span> user.password</span><br><span class=\"line\">      req.session.user = user</span><br><span class=\"line\">      <span class=\"comment\">// 跳转到主页</span></span><br><span class=\"line\">      res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<p>这里我们在 POST /signin 的路由处理函数中，通过传上来的 name 去数据库中找到对应用户，校验传上来的密码是否跟数据库中的一致。不一致则返回上一页（即登录页）并显示『用户名或密码错误』的通知，一致则将用户信息写入 session，跳转到主页并显示『登录成功』的通知。</p>\n<p>现在刷新页面，点击右上角 <code>登录</code>，用刚才注册的账号登录，如下图所示：</p>\n<p><img src=\"/images/4.8.3.png\" alt></p>\n<h2 id=\"文章模型设计\"><a href=\"#文章模型设计\" class=\"headerlink\" title=\"文章模型设计\"></a>文章模型设计</h2><p>我们只存储文章的作者 id、标题、正文和点击量这几个字段，对应修改 lib/mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.Post = mongolass.model(<span class=\"string\">'Post'</span>, &#123;</span><br><span class=\"line\">  author: &#123; <span class=\"attr\">type</span>: Mongolass.Types.ObjectId, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  title: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  content: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  pv: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'number'</span>, <span class=\"attr\">default</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">exports.Post.index(&#123; <span class=\"attr\">author</span>: <span class=\"number\">1</span>, <span class=\"attr\">_id</span>: <span class=\"number\">-1</span> &#125;).exec()<span class=\"comment\">// 按创建时间降序查看用户的文章列表</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发表文章\"><a href=\"#发表文章\" class=\"headerlink\" title=\"发表文章\"></a>发表文章</h2><p>现在我们来实现发表文章的功能。首先创建发表文章页，新建 views/create.ejs，添加如下代码：</p>\n<p><strong>views/create.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;</span><br><span class=\"line\">    &lt;a class=&quot;avatar avatar-link&quot;</span><br><span class=\"line\">       href=&quot;/posts?author=&lt;%= user._id %&gt;&quot;</span><br><span class=\"line\">       data-title=&quot;&lt;%= user.name %&gt; | &lt;%= (&#123;m: &apos;男&apos;, f: &apos;女&apos;, x: &apos;保密&apos;&#125;)[user.gender] %&gt;&quot;</span><br><span class=\"line\">       data-content=&quot;&lt;%= user.bio %&gt;&quot;&gt;</span><br><span class=\"line\">      &lt;img class=&quot;avatar&quot; src=&quot;/img/&lt;%= user.avatar %&gt;&quot;&gt;</span><br><span class=\"line\">    &lt;/a&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">    &lt;form class=&quot;ui form segment&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;标题&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;field required&quot;&gt;</span><br><span class=\"line\">        &lt;label&gt;内容&lt;/label&gt;</span><br><span class=\"line\">        &lt;textarea name=&quot;content&quot; rows=&quot;15&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;submit&quot; class=&quot;ui button&quot; value=&quot;发布&quot;&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改 routes/posts.js，将：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/create 发表文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/create'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'发表文章页'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/create 发表文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/create'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'create'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>登录成功状态，点击右上角『发表文章』试下吧。</p>\n<p>发表文章页已经完成了，接下来新建 models/posts.js 用来存放与文章操作相关的代码：</p>\n<p><strong>models/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Post = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).Post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一篇文章</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post.create(post).exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改 routes/posts.js，在文件上方引入 PostModel：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PostModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/posts'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST /posts/create 发表一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/create'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'发表文章'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// POST /posts/create 发表一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/create'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\">  <span class=\"keyword\">const</span> title = req.fields.title</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = req.fields.content</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!title.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写标题'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!content.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写内容'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> post = &#123;</span><br><span class=\"line\">    author: author,</span><br><span class=\"line\">    title: title,</span><br><span class=\"line\">    content: content</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.create(post)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 此 post 是插入 mongodb 后的值，包含 _id</span></span><br><span class=\"line\">      post = result.ops[<span class=\"number\">0</span>]</span><br><span class=\"line\">      req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'发表成功'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 发表成功后跳转到该文章页</span></span><br><span class=\"line\">      res.redirect(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里校验了上传的表单字段，并将文章信息插入数据库，成功后跳转到该文章页并显示『发表成功』的通知，失败后请求会进入错误处理函数。</p>\n<p>现在刷新页面（登录情况下），点击右上角 <code>发表文章</code> 试试吧，发表成功后跳转到了文章页但并没有任何内容，下面我们就来实现文章页及主页。</p>\n<h2 id=\"主页与文章页\"><a href=\"#主页与文章页\" class=\"headerlink\" title=\"主页与文章页\"></a>主页与文章页</h2><p>现在我们来实现主页及文章页。修改 models/posts.js 如下：</p>\n<p><strong>models/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> marked = <span class=\"built_in\">require</span>(<span class=\"string\">'marked'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Post = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).Post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 post 的 content 从 markdown 转换成 html</span></span><br><span class=\"line\">Post.plugin(<span class=\"string\">'contentToHtml'</span>, &#123;</span><br><span class=\"line\">  afterFind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> posts.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      post.content = marked(post.content)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> post</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  afterFindOne: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (post) &#123;</span><br><span class=\"line\">      post.content = marked(post.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一篇文章</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post.create(post).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 获取一篇文章</span></span><br><span class=\"line\">  getPostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPostById</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post</span><br><span class=\"line\">      .findOne(&#123; <span class=\"attr\">_id</span>: postId &#125;)</span><br><span class=\"line\">      .populate(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'author'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'User'</span> &#125;)</span><br><span class=\"line\">      .addCreatedAt()</span><br><span class=\"line\">      .contentToHtml()</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 按创建时间降序获取所有用户文章或者某个特定用户的所有文章</span></span><br><span class=\"line\">  getPosts: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPosts</span> (<span class=\"params\">author</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> query = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (author) &#123;</span><br><span class=\"line\">      query.author = author</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post</span><br><span class=\"line\">      .find(query)</span><br><span class=\"line\">      .populate(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'author'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'User'</span> &#125;)</span><br><span class=\"line\">      .sort(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">-1</span> &#125;)</span><br><span class=\"line\">      .addCreatedAt()</span><br><span class=\"line\">      .contentToHtml()</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 给 pv 加 1</span></span><br><span class=\"line\">  incPv: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">incPv</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Post</span><br><span class=\"line\">      .update(&#123; <span class=\"attr\">_id</span>: postId &#125;, &#123; <span class=\"attr\">$inc</span>: &#123; <span class=\"attr\">pv</span>: <span class=\"number\">1</span> &#125; &#125;)</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要讲解两点：</p>\n<ol>\n<li>我们使用了 markdown 解析文章的内容，所以在发表文章的时候可使用 markdown 语法（如插入链接、图片等等），关于 markdown 的使用请参考： <a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明</a>。</li>\n<li>我们在 PostModel 上注册了 <code>contentToHtml</code>，而 <code>addCreatedAt</code> 是在 lib/mongo.js 中 mongolass 上注册的。也就是说 <code>contentToHtml</code> 只针对 PostModel 有效，而 <code>addCreatedAt</code> 对所有 Model 都有效。</li>\n</ol>\n<p>接下来完成主页的模板，修改 views/posts.ejs 如下：</p>\n<p><strong>views/posts.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% posts.forEach(function (post) &#123; %&gt;</span><br><span class=\"line\">  &lt;%- include(&apos;components/post-content&apos;, &#123; post: post &#125;) %&gt;</span><br><span class=\"line\">&lt;% &#125;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建 views/components/post-content.ejs 用来存放单篇文章的模板片段：</p>\n<p><strong>views/components/post-content.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;post-content&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;four wide column&quot;&gt;</span><br><span class=\"line\">      &lt;a class=&quot;avatar avatar-link&quot;</span><br><span class=\"line\">         href=&quot;/posts?author=&lt;%= post.author._id %&gt;&quot;</span><br><span class=\"line\">         data-title=&quot;&lt;%= post.author.name %&gt; | &lt;%= (&#123;m: &apos;男&apos;, f: &apos;女&apos;, x: &apos;保密&apos;&#125;)[post.author.gender] %&gt;&quot;</span><br><span class=\"line\">         data-content=&quot;&lt;%= post.author.bio %&gt;&quot;&gt;</span><br><span class=\"line\">        &lt;img class=&quot;avatar&quot; src=&quot;/img/&lt;%= post.author.avatar %&gt;&quot;&gt;</span><br><span class=\"line\">      &lt;/a&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;ui segment&quot;&gt;</span><br><span class=\"line\">        &lt;h3&gt;&lt;a href=&quot;/posts/&lt;%= post._id %&gt;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt;&lt;/h3&gt;</span><br><span class=\"line\">        &lt;pre&gt;&lt;%- post.content %&gt;&lt;/pre&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;span class=&quot;tag&quot;&gt;&lt;%= post.created_at %&gt;&lt;/span&gt;</span><br><span class=\"line\">          &lt;span class=&quot;tag right&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;浏览(&lt;%= post.pv || 0 %&gt;)&lt;/span&gt;</span><br><span class=\"line\">            &lt;span&gt;留言(&lt;%= post.commentsCount || 0 %&gt;)&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;% if (user &amp;&amp; post.author._id &amp;&amp; user._id.toString() === post.author._id.toString()) &#123; %&gt;</span><br><span class=\"line\">              &lt;div class=&quot;ui inline dropdown&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;i class=&quot;dropdown icon&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">                &lt;div class=&quot;menu&quot;&gt;</span><br><span class=\"line\">                  &lt;div class=&quot;item&quot;&gt;&lt;a href=&quot;/posts/&lt;%= post._id %&gt;/edit&quot;&gt;编辑&lt;/a&gt;&lt;/div&gt;</span><br><span class=\"line\">                  &lt;div class=&quot;item&quot;&gt;&lt;a href=&quot;/posts/&lt;%= post._id %&gt;/remove&quot;&gt;删除&lt;/a&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">              &lt;/div&gt;</span><br><span class=\"line\">            &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：我们用了 <code>&lt;%- post.content %&gt;</code>，而不是 <code>&lt;%= post.content %&gt;</code>，因为 post.content 是 markdown 转换后的 html 字符串。</p>\n</blockquote>\n<p>修改 routes/posts.js，将：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'posts'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.query.author</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.getPosts(author)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">      res.render(<span class=\"string\">'posts'</span>, &#123;</span><br><span class=\"line\">        posts: posts</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：主页与用户页通过 url 中的 author 区分。</p>\n</blockquote>\n<p>现在完成了主页与用户页，访问 <code>http://localhost:3000/posts</code> 试试吧，现在已经将我们之前创建的文章显示出来了，尝试点击用户的头像看看效果。</p>\n<p>接下来完成文章详情页。新建 views/post.ejs，添加如下代码：</p>\n<p><strong>views/post.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\">&lt;%- include(&apos;components/post-content&apos;) %&gt;</span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>打开 routes/posts.js，将：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'文章详情页'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    PostModel.getPostById(postId), <span class=\"comment\">// 获取文章信息</span></span><br><span class=\"line\">    PostModel.incPv(postId)<span class=\"comment\">// pv 加 1</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> post = result[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'该文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      res.render(<span class=\"string\">'post'</span>, &#123;</span><br><span class=\"line\">        post: post</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在刷新浏览器，点击文章的标题看看浏览器地址的变化吧。</p>\n<blockquote>\n<p>注意：浏览器地址有变化，但页面看不出区别来（因为页面布局一样），后面我们添加留言功能后就能看出区别来了。</p>\n</blockquote>\n<h2 id=\"编辑与删除文章\"><a href=\"#编辑与删除文章\" class=\"headerlink\" title=\"编辑与删除文章\"></a>编辑与删除文章</h2><p>现在我们来完成编辑与删除文章的功能。修改 models/posts.js，在 module.exports 对象上添加如下 3 个方法：</p>\n<p><strong>models/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过文章 id 获取一篇原生文章（编辑文章）</span></span><br><span class=\"line\">getRawPostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRawPostById</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Post</span><br><span class=\"line\">    .findOne(&#123; <span class=\"attr\">_id</span>: postId &#125;)</span><br><span class=\"line\">    .populate(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'author'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'User'</span> &#125;)</span><br><span class=\"line\">    .exec()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过文章 id 更新一篇文章</span></span><br><span class=\"line\">updatePostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updatePostById</span> (<span class=\"params\">postId, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Post.update(&#123; <span class=\"attr\">_id</span>: postId &#125;, &#123; <span class=\"attr\">$set</span>: data &#125;).exec()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过文章 id 删除一篇文章</span></span><br><span class=\"line\">delPostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delPostById</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Post.deleteOne(&#123; <span class=\"attr\">_id</span>: postId &#125;).exec()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：不要忘了在适当位置添加逗号，如 incPv 的结束大括号后。</p>\n</blockquote>\n<blockquote>\n<p>注意：我们通过新函数 <code>getRawPostById</code> 用来获取文章原生的内容（编辑页面用），而不是用 <code>getPostById</code> 返回将 markdown 转换成 html 后的内容。</p>\n</blockquote>\n<p>新建编辑文章页 views/edit.ejs，添加如下代码：</p>\n<p><strong>views/edit.ejs</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(<span class=\"string\">'header'</span>) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ui grid\"</span>&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"four wide column\"</span>&gt;</span><br><span class=\"line\">    &lt;a <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"avatar\"</span></span><br><span class=\"line\">       href=<span class=\"string\">\"/posts?author=&lt;%= user._id %&gt;\"</span></span><br><span class=\"line\">       data-title=<span class=\"string\">\"&lt;%= user.name %&gt; | &lt;%= (&#123;m: '男', f: '女', x: '保密'&#125;)[user.gender] %&gt;\"</span></span><br><span class=\"line\">       data-content=<span class=\"string\">\"&lt;%= user.bio %&gt;\"</span>&gt;</span><br><span class=\"line\">      &lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"avatar\"</span> src=<span class=\"string\">\"/img/&lt;%= user.avatar %&gt;\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"eight wide column\"</span>&gt;</span><br><span class=\"line\">    &lt;form <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ui form segment\"</span> method=<span class=\"string\">\"post\"</span> action=<span class=\"string\">\"/posts/&lt;%= post._id %&gt;/edit\"</span>&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"field required\"</span>&gt;</span><br><span class=\"line\">        &lt;label&gt;标题&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;input type=\"text\" name=\"title\" value=\"&lt;%= post.title %&gt;\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"field required\"</span>&gt;</span><br><span class=\"line\">        &lt;label&gt;内容&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;textarea name=\"content\" rows=\"15\"&gt;&lt;%= post.content %&gt;&lt;/</span>textarea&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;input type=\"submit\" class=\"ui button\" value=\"发布\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>form&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(<span class=\"string\">'footer'</span>) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改 routes/posts.js，将：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/edit 更新文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId/edit'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'更新文章页'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /posts/:postId/edit 更新一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:postId/edit'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'更新文章'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/remove 删除一篇文章</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId/remove'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'删除文章'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/edit 更新文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId/edit'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.getRawPostById(postId)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'该文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (author.toString() !== post.author._id.toString()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'权限不足'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      res.render(<span class=\"string\">'edit'</span>, &#123;</span><br><span class=\"line\">        post: post</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /posts/:postId/edit 更新一篇文章</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:postId/edit'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\">  <span class=\"keyword\">const</span> title = req.fields.title</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = req.fields.content</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!title.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写标题'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!content.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写内容'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.getRawPostById(postId)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (post.author._id.toString() !== author.toString()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'没有权限'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      PostModel.updatePostById(postId, &#123; <span class=\"attr\">title</span>: title, <span class=\"attr\">content</span>: content &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'编辑文章成功'</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 编辑成功后跳转到上一页</span></span><br><span class=\"line\">          res.redirect(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;postId&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(next)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /posts/:postId/remove 删除一篇文章</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId/remove'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\"></span><br><span class=\"line\">  PostModel.getRawPostById(postId)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (post.author._id.toString() !== author.toString()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'没有权限'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      PostModel.delPostById(postId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'删除文章成功'</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 删除成功后跳转到主页</span></span><br><span class=\"line\">          res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(next)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在刷新主页，点击文章右下角的小三角，编辑文章和删除文章试试吧。</p>\n<h2 id=\"留言模型设计\"><a href=\"#留言模型设计\" class=\"headerlink\" title=\"留言模型设计\"></a>留言模型设计</h2><p>我们只需要留言的作者 id、留言内容和关联的文章 id 这几个字段，修改 lib/mongo.js，添加如下代码：</p>\n<p><strong>lib/mongo.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.Comment = mongolass.model(<span class=\"string\">'Comment'</span>, &#123;</span><br><span class=\"line\">  author: &#123; <span class=\"attr\">type</span>: Mongolass.Types.ObjectId, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  content: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  postId: &#123; <span class=\"attr\">type</span>: Mongolass.Types.ObjectId, <span class=\"attr\">required</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">exports.Comment.index(&#123; <span class=\"attr\">postId</span>: <span class=\"number\">1</span>, <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;).exec()<span class=\"comment\">// 通过文章 id 获取该文章下所有留言，按留言创建时间升序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示留言\"><a href=\"#显示留言\" class=\"headerlink\" title=\"显示留言\"></a>显示留言</h2><p>在实现留言功能之前，我们先让文章页可以显示留言列表。首先创建留言的模板，新建 views/components/comments.ejs，添加如下代码：</p>\n<p><strong>views/components/comments.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;ui grid&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;four wide column&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;eight wide column&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ui segment&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;ui minimal comments&quot;&gt;</span><br><span class=\"line\">        &lt;h3 class=&quot;ui dividing header&quot;&gt;留言&lt;/h3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;% comments.forEach(function (comment) &#123; %&gt;</span><br><span class=\"line\">          &lt;div class=&quot;comment&quot;&gt;</span><br><span class=\"line\">            &lt;span class=&quot;avatar&quot;&gt;</span><br><span class=\"line\">              &lt;img src=&quot;/img/&lt;%= comment.author.avatar %&gt;&quot;&gt;</span><br><span class=\"line\">            &lt;/span&gt;</span><br><span class=\"line\">            &lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">              &lt;a class=&quot;author&quot; href=&quot;/posts?author=&lt;%= comment.author._id %&gt;&quot;&gt;&lt;%= comment.author.name %&gt;&lt;/a&gt;</span><br><span class=\"line\">              &lt;div class=&quot;metadata&quot;&gt;</span><br><span class=\"line\">                &lt;span class=&quot;date&quot;&gt;&lt;%= comment.created_at %&gt;&lt;/span&gt;</span><br><span class=\"line\">              &lt;/div&gt;</span><br><span class=\"line\">              &lt;div class=&quot;text&quot;&gt;&lt;%- comment.content %&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">              &lt;% if (user &amp;&amp; comment.author._id &amp;&amp; user._id.toString() === comment.author._id.toString()) &#123; %&gt;</span><br><span class=\"line\">                &lt;div class=&quot;actions&quot;&gt;</span><br><span class=\"line\">                  &lt;a class=&quot;reply&quot; href=&quot;/comments/&lt;%= comment._id %&gt;/remove&quot;&gt;删除&lt;/a&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">              &lt;% &#125; %&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        &lt;% &#125;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;% if (user) &#123; %&gt;</span><br><span class=\"line\">          &lt;form class=&quot;ui reply form&quot; method=&quot;post&quot; action=&quot;/comments&quot;&gt;</span><br><span class=\"line\">            &lt;input name=&quot;postId&quot; value=&quot;&lt;%= post._id %&gt;&quot; hidden&gt;</span><br><span class=\"line\">            &lt;div class=&quot;field&quot;&gt;</span><br><span class=\"line\">              &lt;textarea name=&quot;content&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;input type=&quot;submit&quot; class=&quot;ui icon button&quot; value=&quot;留言&quot; /&gt;</span><br><span class=\"line\">          &lt;/form&gt;</span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：我们在提交留言表单时带上了文章 id（postId），通过 hidden 隐藏。</p>\n</blockquote>\n<p>在文章页引入留言的模板片段，修改 views/post.ejs 为：</p>\n<p><strong>views/post.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;components/post-content&apos;) %&gt;</span><br><span class=\"line\">&lt;%- include(&apos;components/comments&apos;) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建 models/comments.js，存放留言相关的数据库操作，添加如下代码：</p>\n<p><strong>models/comments.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> marked = <span class=\"built_in\">require</span>(<span class=\"string\">'marked'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Comment = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).Comment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 comment 的 content 从 markdown 转换成 html</span></span><br><span class=\"line\">Comment.plugin(<span class=\"string\">'contentToHtml'</span>, &#123;</span><br><span class=\"line\">  afterFind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">comments</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> comments.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">comment</span>) </span>&#123;</span><br><span class=\"line\">      comment.content = marked(comment.content)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> comment</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个留言</span></span><br><span class=\"line\">  create: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> (<span class=\"params\">comment</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.create(comment).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过留言 id 获取一个留言</span></span><br><span class=\"line\">  getCommentById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCommentById</span> (<span class=\"params\">commentId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.findOne(&#123; <span class=\"attr\">_id</span>: commentId &#125;).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过留言 id 删除一个留言</span></span><br><span class=\"line\">  delCommentById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delCommentById</span> (<span class=\"params\">commentId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.deleteOne(&#123; <span class=\"attr\">_id</span>: commentId &#125;).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 删除该文章下所有留言</span></span><br><span class=\"line\">  delCommentsByPostId: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delCommentsByPostId</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.deleteMany(&#123; <span class=\"attr\">postId</span>: postId &#125;).exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 获取该文章下所有留言，按留言创建时间升序</span></span><br><span class=\"line\">  getComments: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComments</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment</span><br><span class=\"line\">      .find(&#123; <span class=\"attr\">postId</span>: postId &#125;)</span><br><span class=\"line\">      .populate(&#123; <span class=\"attr\">path</span>: <span class=\"string\">'author'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'User'</span> &#125;)</span><br><span class=\"line\">      .sort(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">      .addCreatedAt()</span><br><span class=\"line\">      .contentToHtml()</span><br><span class=\"line\">      .exec()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通过文章 id 获取该文章下留言数</span></span><br><span class=\"line\">  getCommentsCount: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCommentsCount</span> (<span class=\"params\">postId</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Comment.count(&#123; <span class=\"attr\">postId</span>: postId &#125;).exec()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小提示：我们让留言也支持了 markdown。<br>注意：删除一篇文章成功后也要删除该文章下所有的评论，上面 delCommentsByPostId 就是用来做这件事的。</p>\n</blockquote>\n<p>修改 models/posts.js，在：</p>\n<p><strong>models/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Post = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).Post</span><br></pre></td></tr></table></figure>\n\n<p>下添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CommentModel = <span class=\"built_in\">require</span>(<span class=\"string\">'./comments'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给 post 添加留言数 commentsCount</span></span><br><span class=\"line\">Post.plugin(<span class=\"string\">'addCommentsCount'</span>, &#123;</span><br><span class=\"line\">  afterFind: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(posts.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> CommentModel.getCommentsCount(post._id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">commentsCount</span>) </span>&#123;</span><br><span class=\"line\">        post.commentsCount = commentsCount</span><br><span class=\"line\">        <span class=\"keyword\">return</span> post</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  afterFindOne: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (post) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> CommentModel.getCommentsCount(post._id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">        post.commentsCount = count</span><br><span class=\"line\">        <span class=\"keyword\">return</span> post</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在 PostModel 上注册了 <code>addCommentsCount</code> 用来给每篇文章添加留言数 <code>commentsCount</code>，在 <code>getPostById</code> 和 <code>getPosts</code> 方法里的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.addCreatedAt()</span><br></pre></td></tr></table></figure>\n\n<p>下添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.addCommentsCount()</span><br></pre></td></tr></table></figure>\n\n<p>这样主页和文章页的文章就可以正常显示留言数了。</p>\n<p>然后将 <code>delPostById</code> 修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过用户 id 和文章 id 删除一篇文章</span></span><br><span class=\"line\">delPostById: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delPostById</span> (<span class=\"params\">postId, author</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Post.deleteOne(&#123; <span class=\"attr\">author</span>: author, <span class=\"attr\">_id</span>: postId &#125;)</span><br><span class=\"line\">    .exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 文章删除后，再删除该文章下的所有留言</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.result.ok &amp;&amp; res.result.n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CommentModel.delCommentsByPostId(postId)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小提示：虽然目前看起来使用 Mongolass 自定义插件并不能节省代码，反而使代码变多了。Mongolass 插件真正的优势在于：在项目非常庞大时，可通过自定义的插件随意组合（及顺序）实现不同的输出，如上面的 <code>getPostById</code> 需要将取出 markdown 转换成 html，则使用 <code>.contentToHtml()</code>，否则像 <code>getRawPostById</code> 则不必使用。</p>\n</blockquote>\n<p>修改 routes/posts.js，在：</p>\n<p><strong>routes/posts.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PostModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/posts'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>下引入 CommentModel:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> CommentModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/comments'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在文章页传入留言列表，将：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /posts/:postId 单独一篇的文章页</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:postId'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.params.postId</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    PostModel.getPostById(postId), <span class=\"comment\">// 获取文章信息</span></span><br><span class=\"line\">    CommentModel.getComments(postId), <span class=\"comment\">// 获取该文章所有留言</span></span><br><span class=\"line\">    PostModel.incPv(postId)<span class=\"comment\">// pv 加 1</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> post = result[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> comments = result[<span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!post) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'该文章不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      res.render(<span class=\"string\">'post'</span>, &#123;</span><br><span class=\"line\">        post: post,</span><br><span class=\"line\">        comments: comments</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>现在刷新文章页试试吧，此时已经显示了留言的输入框。</p>\n<h2 id=\"发表与删除留言\"><a href=\"#发表与删除留言\" class=\"headerlink\" title=\"发表与删除留言\"></a>发表与删除留言</h2><p>现在我们来实现发表与删除留言的功能。将 routes/comments.js 修改如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkLogin = <span class=\"built_in\">require</span>(<span class=\"string\">'../middlewares/check'</span>).checkLogin</span><br><span class=\"line\"><span class=\"keyword\">const</span> CommentModel = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/comments'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST /comments 创建一条留言</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\">  <span class=\"keyword\">const</span> postId = req.fields.postId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = req.fields.content</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 校验参数</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!content.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请填写留言内容'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    req.flash(<span class=\"string\">'error'</span>, e.message)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> comment = &#123;</span><br><span class=\"line\">    author: author,</span><br><span class=\"line\">    postId: postId,</span><br><span class=\"line\">    content: content</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  CommentModel.create(comment)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'留言成功'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 留言成功后跳转到上一页</span></span><br><span class=\"line\">      res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(next)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /comments/:commentId/remove 删除一条留言</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:commentId/remove'</span>, checkLogin, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> commentId = req.params.commentId</span><br><span class=\"line\">  <span class=\"keyword\">const</span> author = req.session.user._id</span><br><span class=\"line\"></span><br><span class=\"line\">  CommentModel.getCommentById(commentId)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">comment</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!comment) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'留言不存在'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (comment.author.toString() !== author.toString()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'没有权限删除留言'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      CommentModel.delCommentById(commentId)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          req.flash(<span class=\"string\">'success'</span>, <span class=\"string\">'删除留言成功'</span>)</span><br><span class=\"line\">          <span class=\"comment\">// 删除成功后跳转到上一页</span></span><br><span class=\"line\">          res.redirect(<span class=\"string\">'back'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(next)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们完成了创建留言和删除留言的逻辑。刷新页面，尝试留言试试吧。留言成功后，将鼠标悬浮在留言上可以显示出 <code>删除</code> 的按钮，点击可以删除留言。</p>\n<p>现在访问一个不存在的地址，如：<code>http://localhost:3000/haha</code> 页面会显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot GET /haha</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"404-页面\"><a href=\"#404-页面\" class=\"headerlink\" title=\"404 页面\"></a>404 页面</h2><p>我们来自定义 404 页面。修改 routes/index.js，在：</p>\n<p><strong>routes/index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/comments'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'./comments'</span>))</span><br></pre></td></tr></table></figure>\n\n<p>下添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 404 page</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!res.headersSent) &#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">404</span>).render(<span class=\"string\">'404'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建 views/404.ejs，添加如下代码：</p>\n<p><strong>views/404.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;%= blog.title %&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们只为了演示 express 中处理 404 的情况，用了腾讯公益的 404 页面，刷新一下页面看下效果吧。</p>\n<p>前面讲到 express 有一个内置的错误处理逻辑，如果程序出错，会直接将错误栈返回并显示到页面上。如访问：<code>localhost:3000/posts/xxx/edit</code> 没有权限编辑的文章页，将会直接在页面中显示错误栈，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Error</span>: 权限不足</span><br><span class=\"line\">    at /Users/nswbmw/Desktop/myblog/routes/posts.js:<span class=\"number\">95</span>:<span class=\"number\">15</span></span><br><span class=\"line\">    at &lt;anonymous&gt;</span><br><span class=\"line\">    at process._tickCallback (internal/process/next_tick.js:<span class=\"number\">188</span>:<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n\n<p>现在我们修改代码，实现复用页面通知。修改 index.js，在 <code>app.listen</code> 上面添加如下代码：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">  req.flash(<span class=\"string\">'error'</span>, err.message)</span><br><span class=\"line\">  res.redirect(<span class=\"string\">'/posts'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们实现了将错误信息用页面通知展示的功能，刷新页面将会跳转到主页并显示『权限不足』的红色通知。</p>\n<p>现在我们来实现日志功能，日志分为正常请求的日志和错误请求的日志，我们希望实现这两种日志都打印到终端并写入文件。</p>\n<h2 id=\"winston-和-express-winston\"><a href=\"#winston-和-express-winston\" class=\"headerlink\" title=\"winston 和 express-winston\"></a>winston 和 express-winston</h2><p>我们使用 <a href=\"https://www.npmjs.com/package/winston\" target=\"_blank\" rel=\"noopener\">winston</a> 和 <a href=\"https://www.npmjs.com/package/express-winston\" target=\"_blank\" rel=\"noopener\">express-winston</a> 记录日志。</p>\n<p>新建 logs 目录存放日志文件，修改 index.js，在：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">'./package'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>下引入所需模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> winston = <span class=\"built_in\">require</span>(<span class=\"string\">'winston'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> expressWinston = <span class=\"built_in\">require</span>(<span class=\"string\">'express-winston'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 路由</span><br><span class=\"line\">routes(app)</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常请求的日志</span></span><br><span class=\"line\">app.use(expressWinston.logger(&#123;</span><br><span class=\"line\">  transports: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> (winston.transports.Console)(&#123;</span><br><span class=\"line\">      json: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      colorize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> winston.transports.File(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'logs/success.log'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"><span class=\"comment\">// 路由</span></span><br><span class=\"line\">routes(app)</span><br><span class=\"line\"><span class=\"comment\">// 错误请求的日志</span></span><br><span class=\"line\">app.use(expressWinston.errorLogger(&#123;</span><br><span class=\"line\">  transports: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> winston.transports.Console(&#123;</span><br><span class=\"line\">      json: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      colorize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> winston.transports.File(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'logs/error.log'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>刷新页面看一下终端输出及 logs 下的文件。<br>可以看出：winston 将正常请求的日志打印到终端并写入了 <code>logs/success.log</code>，将错误请求的日志打印到终端并写入了 <code>logs/error.log</code>。</p>\n<blockquote>\n<p>注意：记录正常请求日志的中间件要放到 <code>routes(app)</code> 之前，记录错误请求日志的中间件要放到 <code>routes(app)</code> 之后。</p>\n</blockquote>\n<h2 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h2><p>如果我们想把项目托管到 git 服务器上（如: <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a>），而不想把线上配置、本地调试的 logs 以及 node_modules 添加到 git 的版本控制中，这个时候就需要 .gitignore 文件了，git 会读取 .gitignore 并忽略这些文件。在 myblog 下新建 .gitignore 文件，添加如下配置：</p>\n<p><strong>.gitignore</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/*</span><br><span class=\"line\">!config/default.*</span><br><span class=\"line\">npm-debug.log</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">coverage</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，通过设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/*</span><br><span class=\"line\">!config/default.*</span><br></pre></td></tr></table></figure>\n\n<p>这样只有 config/default.js 会加入 git 的版本控制，而 config 目录下的其他配置文件则会被忽略，因为把线上配置加入到 git 是一个不安全的行为，通常你需要本地或者线上环境手动创建 config/production.js，然后添加一些线上的配置（如：mongodb 配置）即可覆盖相应的 default 配置。</p>\n<blockquote>\n<p>注意：后面讲到部署到 Heroku 时，因为无法登录到 Heroku 主机，所以可以把以下两行删掉，将 config/production.js 也加入 git 中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; config/*</span><br><span class=\"line\">&gt; !config/default.*</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>然后在 public/img 目录下创建 .gitignore：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ignore everything in this directory</span><br><span class=\"line\">*</span><br><span class=\"line\"># Except this file</span><br><span class=\"line\">!.gitignore</span><br></pre></td></tr></table></figure>\n\n<p>这样 git 会忽略 public/img 目录下所有上传的头像，而不忽略 public/img 目录。同理，在 logs 目录下创建 .gitignore 忽略日志文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ignore everything in this directory</span><br><span class=\"line\">*</span><br><span class=\"line\"># Except this file</span><br><span class=\"line\">!.gitignore</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><h2 id=\"mocha-和-supertest\"><a href=\"#mocha-和-supertest\" class=\"headerlink\" title=\"mocha 和 supertest\"></a>mocha 和 supertest</h2><p><a href=\"https://www.npmjs.com/package/mocha\" target=\"_blank\" rel=\"noopener\">mocha</a> 和 <a href=\"https://www.npmjs.com/package/supertest\" target=\"_blank\" rel=\"noopener\">supertest</a> 是常用的测试组合，通常用来测试 restful 的 api 接口，这里我们也可以用来测试我们的博客应用。<br>在 myblog 下新建 test 文件夹存放测试文件，以注册为例讲解 mocha 和 supertest 的用法。首先安装所需模块：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha supertest --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>修改 package.json，将：</p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"mocha test\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定执行 test 目录的测试。修改 index.js，将：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听端口，启动程序</span></span><br><span class=\"line\">app.listen(config.port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;pkg.name&#125;</span> listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.parent) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 被 require，则导出 app</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports = app</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 监听端口，启动程序</span></span><br><span class=\"line\">  app.listen(config.port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;pkg.name&#125;</span> listening on port <span class=\"subst\">$&#123;config.port&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样做可以实现：直接启动 index.js 则会监听端口启动程序，如果 index.js 被 require 了，则导出 app，通常用于测试。</p>\n<p>找一张图片用于测试上传头像，放到 test 目录下，如 avatar.png。新建 test/signup.js，添加如下测试代码：</p>\n<p><strong>test/signup.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'supertest'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/mongo'</span>).User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> testName1 = <span class=\"string\">'testName1'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> testName2 = <span class=\"string\">'nswbmw'</span></span><br><span class=\"line\">describe(<span class=\"string\">'signup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'POST /signup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> agent = request.agent(app)<span class=\"comment\">// persist cookie when redirect</span></span><br><span class=\"line\">    beforeEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个用户</span></span><br><span class=\"line\">      User.create(&#123;</span><br><span class=\"line\">        name: testName1,</span><br><span class=\"line\">        password: <span class=\"string\">'123456'</span>,</span><br><span class=\"line\">        avatar: <span class=\"string\">''</span>,</span><br><span class=\"line\">        gender: <span class=\"string\">'x'</span>,</span><br><span class=\"line\">        bio: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">        .exec()</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(done)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    afterEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 删除测试用户</span></span><br><span class=\"line\">      User.deleteMany(&#123; <span class=\"attr\">name</span>: &#123; <span class=\"attr\">$in</span>: [testName1, testName2] &#125; &#125;)</span><br><span class=\"line\">        .exec()</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(done)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    after(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      process.exit()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用户名错误的情况</span></span><br><span class=\"line\">    it(<span class=\"string\">'wrong name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      agent</span><br><span class=\"line\">        .post(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">        .type(<span class=\"string\">'form'</span>)</span><br><span class=\"line\">        .field(&#123; <span class=\"attr\">name</span>: <span class=\"string\">''</span> &#125;)</span><br><span class=\"line\">        .attach(<span class=\"string\">'avatar'</span>, path.join(__dirname, <span class=\"string\">'avatar.png'</span>))</span><br><span class=\"line\">        .redirects()</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err)</span><br><span class=\"line\">          assert(res.text.match(<span class=\"regexp\">/名字请限制在 1-10 个字符/</span>))</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 性别错误的情况</span></span><br><span class=\"line\">    it(<span class=\"string\">'wrong gender'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      agent</span><br><span class=\"line\">        .post(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">        .type(<span class=\"string\">'form'</span>)</span><br><span class=\"line\">        .field(&#123; <span class=\"attr\">name</span>: testName2, <span class=\"attr\">gender</span>: <span class=\"string\">'a'</span> &#125;)</span><br><span class=\"line\">        .attach(<span class=\"string\">'avatar'</span>, path.join(__dirname, <span class=\"string\">'avatar.png'</span>))</span><br><span class=\"line\">        .redirects()</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err)</span><br><span class=\"line\">          assert(res.text.match(<span class=\"regexp\">/性别只能是 m、f 或 x/</span>))</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 其余的参数测试自行补充</span></span><br><span class=\"line\">    <span class=\"comment\">// 用户名被占用的情况</span></span><br><span class=\"line\">    it(<span class=\"string\">'duplicate name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      agent</span><br><span class=\"line\">        .post(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">        .type(<span class=\"string\">'form'</span>)</span><br><span class=\"line\">        .field(&#123; <span class=\"attr\">name</span>: testName1, <span class=\"attr\">gender</span>: <span class=\"string\">'m'</span>, <span class=\"attr\">bio</span>: <span class=\"string\">'noder'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'123456'</span>, <span class=\"attr\">repassword</span>: <span class=\"string\">'123456'</span> &#125;)</span><br><span class=\"line\">        .attach(<span class=\"string\">'avatar'</span>, path.join(__dirname, <span class=\"string\">'avatar.png'</span>))</span><br><span class=\"line\">        .redirects()</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err)</span><br><span class=\"line\">          assert(res.text.match(<span class=\"regexp\">/用户名已被占用/</span>))</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册成功的情况</span></span><br><span class=\"line\">    it(<span class=\"string\">'success'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      agent</span><br><span class=\"line\">        .post(<span class=\"string\">'/signup'</span>)</span><br><span class=\"line\">        .type(<span class=\"string\">'form'</span>)</span><br><span class=\"line\">        .field(&#123; <span class=\"attr\">name</span>: testName2, <span class=\"attr\">gender</span>: <span class=\"string\">'m'</span>, <span class=\"attr\">bio</span>: <span class=\"string\">'noder'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'123456'</span>, <span class=\"attr\">repassword</span>: <span class=\"string\">'123456'</span> &#125;)</span><br><span class=\"line\">        .attach(<span class=\"string\">'avatar'</span>, path.join(__dirname, <span class=\"string\">'avatar.png'</span>))</span><br><span class=\"line\">        .redirects()</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> done(err)</span><br><span class=\"line\">          assert(res.text.match(<span class=\"regexp\">/注册成功/</span>))</span><br><span class=\"line\">          done()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>此时编辑器会报语法错误（如：describe 未定义等等），修改 .eslintrc.json 如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"globals\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"describe\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"beforeEach\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"afterEach\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"after\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"it\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，eslint 会忽略 globals 中变量未定义的警告。运行 <code>npm test</code> 看看效果吧，其余的测试请读者自行完成。</p>\n<h2 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h2><p>我们写测试肯定想覆盖所有的情况（包括各种出错的情况及正确时的情况），但光靠想需要写哪些测试是不行的，总也会有疏漏，最简单的办法就是可以直观的看出测试是否覆盖了所有的代码，这就是测试覆盖率，即被测试覆盖到的代码行数占总代码行数的比例。</p>\n<blockquote>\n<p>注意：即使测试覆盖率达到 100% 也不能说明你的测试覆盖了所有的情况，只能说明基本覆盖了所有的情况。</p>\n</blockquote>\n<p><a href=\"https://www.npmjs.com/package/istanbul\" target=\"_blank\" rel=\"noopener\">istanbul</a> 是一个常用的生成测试覆盖率的库，它会将测试的结果报告生成 html 页面，并放到项目根目录的 coverage 目录下。首先安装 istanbul:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i istanbul --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>配置 istanbul 很简单，将 package.json 中：</p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"mocha test\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"istanbul cover _mocha\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：Windows 下需要改成 <code>istanbul cover node_modules/mocha/bin/_mocha</code>。</p>\n<p>即可将 istanbul 和 mocha 结合使用，运行 <code>npm test</code> 终端会打印：</p>\n<p><img src=\"/images/4.14.1.png\" alt></p>\n<p>打开 myblog/coverage/Icov-report/index.html，如下所示：</p>\n<p><img src=\"/images/4.14.2.png\" alt></p>\n<p>可以点进去查看某个代码文件具体的覆盖率，如下所示：</p>\n<p><img src=\"/images/4.14.3.png\" alt></p>\n<p>红色的行表示测试没有覆盖到，因为我们只写了 name 和 gender 的测试。</p>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><h2 id=\"申请-MLab\"><a href=\"#申请-MLab\" class=\"headerlink\" title=\"申请 MLab\"></a>申请 MLab</h2><p><a href=\"https://mlab.com\" target=\"_blank\" rel=\"noopener\">MLab</a> (前身是 MongoLab) 是一个 mongodb 云数据库提供商，我们可以选择 500MB 空间的免费套餐用来测试。注册成功后，点击右上角的 <code>Create New</code> 创建一个数据库（如: myblog），成功后点击进入到该数据库详情页，注意页面中有一行黄色的警告：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A database user is required to connect to this database. To create one now, visit the &apos;Users&apos; tab and click the &apos;Add database user&apos; button.</span><br></pre></td></tr></table></figure>\n\n<p>每个数据库至少需要一个 user，所以我们点击 Users 下的 <code>Add database user</code> 创建一个用户。</p>\n<blockquote>\n<p>注意：不要选中 <code>Make read-only</code>，因为我们有写数据库的操作。</p>\n</blockquote>\n<p>最后分配给我们的类似下面的 mongodb url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds139327.mlab.com:39327/myblog</span><br></pre></td></tr></table></figure>\n\n<p>如我创建的用户名和密码都为 myblog 的用户，新建 config/production.js，添加如下代码：</p>\n<p><strong>config/production.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://myblog:myblog@ds139327.mlab.com:39327/myblog'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>停止程序，然后以 production 配置启动程序:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cross-env --save-dev <span class=\"comment\"># 本地安装 cross-env</span></span><br><span class=\"line\">npm i cross-env -g <span class=\"comment\"># 全局安装 cross-env</span></span><br><span class=\"line\">cross-env NODE_ENV=production supervisor index</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：cross-env 用来兼容 Windows 系统和 Linux/Mac 系统设置环境变量的差异。</p>\n</blockquote>\n<h2 id=\"pm2\"><a href=\"#pm2\" class=\"headerlink\" title=\"pm2\"></a>pm2</h2><p>当我们的博客要部署到线上服务器时，不能单纯的靠 <code>node index</code> 或者 <code>supervisor index</code> 来启动了，因为我们断掉 SSH 连接后服务就终止了，这时我们就需要像 <a href=\"https://www.npmjs.com/package/pm2\" target=\"_blank\" rel=\"noopener\">pm2</a> 或者 <a href=\"https://www.npmjs.com/package/forever\" target=\"_blank\" rel=\"noopener\">forever</a> 这样的进程管理工具了。pm2 是 Node.js 下的生产环境进程管理工具，就是我们常说的进程守护工具，可以用来在生产环境中进行自动重启、日志记录、错误预警等等。以 pm2 为例，全局安装 pm2：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i pm2 -g</span><br></pre></td></tr></table></figure>\n\n<p>修改 package.json，添加 start 的命令：</p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"istanbul cover _mocha\",</span><br><span class=\"line\">  \"start\": \"cross-env NODE_ENV=production pm2 start index.js --name 'myblog'\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后运行 <code>npm start</code> 通过 pm2 启动程序，如下图所示 ：</p>\n<p><img src=\"/images/4.15.1.png\" alt></p>\n<p>pm2 常用命令:</p>\n<ol>\n<li><code>pm2 start/stop</code>: 启动/停止程序</li>\n<li><code>pm2 reload/restart [id|name]</code>: 重启程序</li>\n<li><code>pm2 logs [id|name]</code>: 查看日志</li>\n<li><code>pm2 l/list</code>: 列出程序列表</li>\n</ol>\n<p>更多命令请使用 <code>pm2 -h</code> 查看。</p>\n<h2 id=\"部署到-Heroku\"><a href=\"#部署到-Heroku\" class=\"headerlink\" title=\"部署到 Heroku\"></a>部署到 Heroku</h2><p><a href=\"https://www.heroku.com\" target=\"_blank\" rel=\"noopener\">Heroku</a> 是一个支持多种编程语言的云服务平台，Heroku 也提供免费的基础套餐供开发者测试使用。现在，我们将论坛部署到 Heroku。</p>\n<blockquote>\n<p>注意：新版 heroku 会有填写信用卡的步骤，如果没有信用卡请跳过本节。</p>\n</blockquote>\n<p>首先，需要到 <a href=\"https://toolbelt.heroku.com/\" target=\"_blank\" rel=\"noopener\">https://toolbelt.heroku.com/</a> 下载安装 Heroku 的命令行工具包 toolbelt。然后登录（如果没有账号，请注册）到 Heroku 的 Dashboard，点击右上角 New -&gt; Create New App 创建一个应用。创建成功后运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heroku login</span><br></pre></td></tr></table></figure>\n\n<p>填写正确的 email 和 password 验证通过后，本地会产生一个 SSH public key。在部署到 Heroku 之前，我们需要对代码进行简单的修改。如下：</p>\n<p>1.删掉 .gitignore 中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/*</span><br><span class=\"line\">!config/default.*</span><br></pre></td></tr></table></figure>\n\n<p>因为我们无法登录到 Heroku 主机创建 production 配置文件，所以这里将 production 配置也上传到 Heroku。</p>\n<p>2.打开 index.js，将 <code>app.listen</code> 修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || config.port</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;pkg.name&#125;</span> listening on port <span class=\"subst\">$&#123;port&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>因为 Heroku 会动态分配端口（通过环境变量 PORT 指定），所以不能用配置文件里写死的端口。</p>\n<p>3.修改 package.json，在 scripts 添加：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"heroku\": \"NODE_ENV=production node index\"</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下新建 Procfile 文件，添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web: npm run heroku</span><br></pre></td></tr></table></figure>\n\n<p>Procfile 文件告诉 Heroku 该使用什么命令启动一个 web 服务。更多信息见：<a href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs\" target=\"_blank\" rel=\"noopener\">https://devcenter.heroku.com/articles/getting-started-with-nodejs</a>。</p>\n<p>然后输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">heroku git:remote -a 你的应用名称</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -am <span class=\"string\">\"init\"</span></span><br><span class=\"line\">git push heroku master</span><br></pre></td></tr></table></figure>\n\n<p>稍后，我们的论坛就部署成功了。使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heroku open</span><br></pre></td></tr></table></figure>\n\n<p>打开应用主页。如果出现 “Application error”，使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heroku logs</span><br></pre></td></tr></table></figure>\n\n<p>查看日志，调试完后 commit 并 push 到 heroku重新部署。</p>\n<h2 id=\"部署到-UCloud\"><a href=\"#部署到-UCloud\" class=\"headerlink\" title=\"部署到 UCloud\"></a>部署到 UCloud</h2><h3 id=\"创建主机\"><a href=\"#创建主机\" class=\"headerlink\" title=\"创建主机\"></a>创建主机</h3><ol>\n<li>注册 UCloud</li>\n<li>点击左侧的 <code>云主机</code>，然后点击 <code>创建主机</code>，统统选择最低配置</li>\n<li>右侧付费方式选择 <code>按时</code>（每小时），点击 <code>立即购买</code></li>\n<li>在支付确认页面，点击 <code>确认支付</code></li>\n</ol>\n<p>购买成功后回到主机管理列表，如下所示：</p>\n<p><img src=\"/images/4.15.2.png\" alt></p>\n<blockquote>\n<p>注意：下面所有的 ip 都替换为你自己的外网 ip。</p>\n</blockquote>\n<h3 id=\"环境搭建与部署\"><a href=\"#环境搭建与部署\" class=\"headerlink\" title=\"环境搭建与部署\"></a>环境搭建与部署</h3><p>修改 config/production.js，将 port 修改为 80 端口：</p>\n<p><strong>config/production.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  port: <span class=\"number\">80</span>,</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://myblog:myblog@ds139327.mlab.com:39327/myblog'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>登录主机，用刚才设置的密码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@106.75.47.229</span><br></pre></td></tr></table></figure>\n\n<p>因为是 CentOS 系统，所以我选择使用 yum 安装，而不是下载源码编译安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git <span class=\"comment\">#安装git</span></span><br><span class=\"line\">yum install nodejs <span class=\"comment\">#安装 Node.js</span></span><br><span class=\"line\">yum install npm <span class=\"comment\">#安装 npm</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm i npm -g <span class=\"comment\">#升级 npm</span></span><br><span class=\"line\">npm i pm2 -g <span class=\"comment\">#安装 pm2</span></span><br><span class=\"line\">npm i n -g <span class=\"comment\">#安装 n</span></span><br><span class=\"line\">n v8.9.1 <span class=\"comment\">#安装 v8.9.1 版本的 Node.js</span></span><br><span class=\"line\">n use 8.9.1 <span class=\"comment\">#使用 v8.9.1 版本的 Node.js</span></span><br><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：如果 <code>node -v</code> 显示的不是 8.9.1，则断开 ssh，重新登录主机再试试。</p>\n</blockquote>\n<p>此时应该在 <code>/root</code> 目录下，运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nswbmw/N-blog.git myblog <span class=\"comment\">#或在本机 myblog 目录下运行 rsync -av --exclude=\"node_modules\" ./ root@106.75.47.229:/root/myblog</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> myblog</span><br><span class=\"line\">npm i</span><br><span class=\"line\">npm start</span><br><span class=\"line\">pm2 logs</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：如果不想用 git 的形式将代码拉到云主机上，可以用 rsync 将本地的代码同步到你的 UCloud 主机上，如上所示。</p>\n</blockquote>\n<p>最后，访问你的公网 ip 地址试试吧，如下所示：</p>\n<p><img src=\"/images/4.15.3.png\" alt></p>\n<blockquote>\n<p>小提示：因为我们选择的按时付费套餐，测试完成后，可在主机管理页面选择关闭主机，节约费用。</p>\n</blockquote>\n<h2 id=\"部署到阿里云\"><a href=\"#部署到阿里云\" class=\"headerlink\" title=\"部署到阿里云\"></a>部署到阿里云</h2><h3 id=\"创建主机-1\"><a href=\"#创建主机-1\" class=\"headerlink\" title=\"创建主机\"></a>创建主机</h3><ol>\n<li>注册/登录</li>\n<li>充值 100（因为我们选择『按量付费』，阿里云要求最低账户余额 &gt;= 100）</li>\n<li>进入『云服务器 ECS』</li>\n<li>点击『创建实例』</li>\n</ol>\n<p>进入创建实例页面，按下图选择配置：</p>\n<p><img src=\"/images/4.15.4.png\" alt></p>\n<p>需要注意几点：</p>\n<ol>\n<li>计费方式：按量付费</li>\n<li>公网 ip 地址：分配</li>\n<li>安全组：选中开启 80 端口</li>\n<li>镜像：Ubuntu 16.04 64位</li>\n</ol>\n<p>点击『开通进入下一页』，选中：</p>\n<p><img src=\"/images/4.15.5.png\" alt></p>\n<blockquote>\n<p>注意：这里我们只是演示，所以自动释放时间只设置了几个小时</p>\n</blockquote>\n<p>点击『去开通』创建成功，然后点击提示中的『管理控制台』进入 ECS 管理页，刚才创建的机器需要等待几分钟才会初始化成功。成功后如下所示：</p>\n<p><img src=\"/images/4.15.6.png\" alt></p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>复制创建的机器的公网 ip 地址，运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@39.106.134.66</span><br></pre></td></tr></table></figure>\n\n<p>输入刚才设置的密码登录远程主机。</p>\n<h4 id=\"安装-Node-js-1\"><a href=\"#安装-Node-js-1\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h4><p>我们下载编译好的 Node.js 压缩包，解压然后使用软连接。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.1/node-v8.9.1-linux-x64.tar.xz</span><br><span class=\"line\">tar -xvf node-v8.9.1-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.9.1-linux-x64 nodejs</span><br><span class=\"line\">ln -s ~/nodejs/bin/* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-MongoDB\"><a href=\"#安装-MongoDB\" class=\"headerlink\" title=\"安装 MongoDB\"></a>安装 MongoDB</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz</span><br><span class=\"line\">tar -xvf mongodb-linux-x86_64-ubuntu1604-3.4.10.tgz</span><br><span class=\"line\">mv mongodb-linux-x86_64-ubuntu1604-3.4.10 mongodb</span><br><span class=\"line\">ln -s ~/mongodb/bin/* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">mongod --version</span><br><span class=\"line\">mongo --version</span><br><span class=\"line\">mkdir mongodb/data</span><br><span class=\"line\">mongod --dbpath=mongodb/data &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nswbmw/N-blog.git <span class=\"comment\">#或者你的 GitHub blog 地址</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> N-blog</span><br><span class=\"line\">npm i</span><br><span class=\"line\">vim config/default.js <span class=\"comment\">#修改端口 3000-&gt;80</span></span><br><span class=\"line\">node index</span><br></pre></td></tr></table></figure>\n\n<p>此时，浏览器中访问你的机器的公网 ip 试试吧。</p>\n<h4 id=\"使用-PM2-启动\"><a href=\"#使用-PM2-启动\" class=\"headerlink\" title=\"使用 PM2 启动\"></a>使用 PM2 启动</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i pm2 -g</span><br><span class=\"line\">ln -s ~/nodejs/bin/* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">pm2 start index.js --name=<span class=\"string\">\"myblog\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我们使用 pm2 启动博客，所以关掉终端后博客仍然在运行。</p>"},{"title":"LoopBack3.0官方文档中文增强版","date":"2019-08-13T22:27:41.000Z","_content":"\n**翻译者:** Yingshf\nhttps://github.com/yingsf\n\n\n**翻译官方文档中基础的7部分:**\n\n* **Defining models**\n* **Using built-in models**\n* **Connecting models to data sources**\n* **Working with data**\n* **Adding application logic**\n* **Managing users**\n* **Authentication, authorization, and permissions**\n\n增强版是指: 对官文中描述不清的地方(或者错误的地方)添加了自己的理解和试验代码.所有带___\"译注\"___的地方都是.\n\n[官方文档在此处](http://loopback.io/doc/en/lb3/index.html),有需要的时候可以对比着看.\n\n<!--more-->\n\n---\n\n#### 目录:\n\n* [1. 定义Models - 对应官方文档中Defining models一章](#1)\n  * [1.1 创建Models](#1.1)\n      * [1.1.1 使用model generator创建model](#1.1.1)\n      * [1.1.2 从关系型数据库中发现model](#1.1.2)\n      * [1.1.3 从非结构化数据中创建model](#1.1.3)\n  * [1.2 定制Models](#1.2)\n  * [1.3 将Model附加到数据源](#1.3)\n  * [1.4 通过REST公开Model](#1.4)\n  * [1.5 验证Model的数据](#1.5)\n  * [1.6 创建Model关系](#1.6)\n      * [1.6.1 开启Model关系之旅](#1.6.1)\n      * [1.6.2 BelongsTo关系(多对一,一对一)](#1.6.2)\n      * [1.6.3 HasOne关系(一对一)](#1.6.3)\n      * [1.6.4 HasMany关系(一对多)](#1.6.4)\n      * [1.6.5 HasManyThrough关系(多对多)](#1.6.5)\n      * [1.6.6 HasAndBelongsToMany关系(多对多)](#1.6.6)\n      * [1.6.7 Polymorphic关系(多态)](#1.6.7)\n      * [1.6.8 查询相关model](#1.6.8)\n      * [1.6.9 嵌入式model和关系](#1.6.9)\n      * [1.6.10 嵌套查询](#1.6.10)\n* [2. 使用内置Models - 对应官方文档Using built-in models一章](#2)\n  * [2.1 扩展内置Models](#2.1)\n  * [2.2 为内置Models添加remote methods](#2.2)\n  * [2.3 为内置Models创建数据库表](#2.3)\n  * [2.4 Model属性引用](#2.4)\n  * [2.5 内置Model的REST API](#2.5)\n      * [2.5.1 PersistedModel REST API](#2.5.1)\n      * [2.5.2 Access token REST API](#2.5.2)\n      * [2.5.3 ACL REST API](#2.5.3)\n      * [2.5.4 Application REST API](#2.5.4)\n      * [2.5.5 Relation REST API](#2.5.5)\n      * [2.5.6 Role REST API](#2.5.6)\n      * [2.5.7 User REST API](#2.5.7)\n* [3. 将Model连接到数据源 - 对应官方文档Connecting models to data sources一章](#3)\n  * [3.1 从Model创建数据库schema](#3.1)\n  * [3.2 理解数据源](#3.2)\n  * [3.3 使用数据库事务](#3.3)\n  * [3.4 执行本地SQL](#3.4)\n  * [3.5 构建连接器(暂未翻译)](#3.5)\n* [4. 使用数据 - 对应官方文档Working with data一章](#4)\n  * [4.1 创建,更新和删除数据](#4.1)\n  * [4.2 查询数据](#4.2)\n      * [4.2.1 Fields filter](#4.2.1)\n      * [4.2.2 Include filter](#4.2.2)\n      * [4.2.3 Limit filter](#4.2.3)\n      * [4.2.4 Order filter](#4.2.4)\n      * [4.2.5 Skip filter](#4.2.5)\n      * [4.2.6 Where filter](#4.2.6)\n  * [4.3 高级主题:数据](#4.3)\n      * [4.3.1 Realtime server-sent events](#4.3.1)\n* [5. 添加应用程序逻辑 - 对应官方文档Adding application logic一章](#5)\n  * [5.1 使用LoopBack对象](#5.1)\n  * [5.2 向model中添加业务逻辑](#5.2)\n      * [5.2.1 Remote methods(远程方法)](#5.2.1)\n      * [5.2.2 Remote hooks(远程钩子)](#5.2.2)\n      * [5.2.3 Operation hooks(操作钩子)](#5.2.3)\n      * [5.2.4 Connector hooks(连接器钩子)](#5.2.4)\n  * [5.3 定义引导脚本](#5.3)\n  * [5.4 定义中间件](#5.4)\n  * [5.5 使用当前上下文](#5.5)\n  * [5.6 事件](#5.6)\n  * [5.7 使用promises](#5.7)\n* [6. 管理用户 - 对应官方文档Managing users一章](#6)\n  * [6.1 注册用户](#6.1)\n  * [6.2 用户登录](#6.2)\n  * [6.3 使用领域来分区用户](#6.3)\n* [7. 身份验证,授权和权限 - 对应官方文档Authentication, authorization, and permissions一章](#7)\n  * [7.1 用户模型认证简介](#7.1)\n  * [7.2 控制数据访问](#7.2)\n  * [7.3 进行身份验证请求](#7.3)\n  * [7.4 定义和使用角色](#7.4)\n  * [7.5 访问相关模型](#7.5)\n  * [7.6 创建默认管理员账号](#7.6)\n\n---\n\n<h4 id=\"1\"> 1. 定义Models </h4>\n\n>  **概要:** Models是LoopBack的核心,它代表了后端的数据源,例如: 数据库、或其他各种后端服务(REST、SOAP等).\n\nLoopBack的Model代表了后端系统(如数据库)中的数据,并且默认情况下具有Node API和REST API.此外，您还可以向Model添加验证规则和业务逻辑等功能。\n\n每个LoopBack应用程序都有一组预定义的内置Model,例如User(用户),Role(角色)和Application(应用程序).您可以扩展这些内置Model以满足应用程序的需要。\n\n此外,您还可以使用应用程序定义自己的Model：\n\n使用`model generator`(模型生成器)创建自定义model.这将创建一个model的定义JSON文件(_译注:还有个同名的js文件_),在这个JSON文件中您可以定义model的具体细节.\n\n使用`Datasource.buildModelFromInstance()`为数据源(如SOAP和REST服务)创建动态无模式的model.有关详细信息，请参阅Creating models from unstructured data.\n\n对于由关系型数据库支持的数据源,model通常对应于数据库中的表,使用`model discovery`为基于数据库的数据源创建静态的、模式驱动的模型.有关详细信息，请参阅Discovering models from relational databases.\n\n---\n\n<h4 id=\"1.1\"> 1.1 创建Models </h4>\n\n>  **概要:** 您可以通过`model generator`这种方式来创建model,还可以通过从现有数据库模式进行`discovery`来创建model,还可以通过`实例内省(instance introspection)`的方式对非关系型数据源创建model.\n\n##### 概述\n\n您可以通过各种方式来创建model,这取决于model基于何种数据源(_译注:这并不意味着关系型数据库只能采用discovery的方式来创建model,使用model generator也可以,但表字段过多的话,这是种折磨_).\n\n您可以通过以下3种方式来创建model:\n\n* **使用model generator**.(_译注:_ 建议model name使用首字母大写的格式(非大驼峰格式,就是第一个字母大写).经测试,如果名字是小写,生成器会把你的model name转换成首字母大写格式的(但文件名还是小写),如果名字是大驼峰的,生成器会把你的名字加个\"-\"例如,我输入的名字是coffeeshop,但实际被转成了Coffeeshop(所以我建议直接命名的时候就首字母大写),如果你还在js文件中使用coffeeshop这个名字,StrongLoop会抛出coffeeshop未定义的错误.在例如我输入的名字是CoffeeShop,那么model name虽然还是CoffeeShop,但文件名则被转成coffee-shop.json,看着不美.大家可以自己尝试一下.)\n\n* **使用model discovery创建现有关系型数据的model**: 使用_model discovery_,然后您可以使用LoopBack's schema/model synchronization API来使您的model和数据库保持同步.\n\n* **使用instance introspection**为非关系型数据库或REST APIS创建model.\n\n使用上述3个方法创建的model,都会创建一个`Model definition JSON`文件,这个JSON文件位于`common/models`目录(_译注: 其实还有别的目录_,如果你想让model只供server使用,它会在server/models/下,同理,还可以出现在client下.在common里,代表server和client都可以使用),名字是创建时您设置的名字,例如: `common/models/account.json`.\n\n您还可以使用`LoopBack API`以编程的方式来创建和自定义model,您还可以人工编辑那个JSON文件来创建和自定义model,多数情况下,在创建model的时候,不建议采用人工编辑的方式,但是在修改和自定义的model的时候,可以采用人工编辑的形式.\n\n##### 在JavaScript代码中获取对model的引用.\n\n在JavaScript代码中获取对模型的引用(或\"句柄\")的方式取决于您JavaScript代码所在的位置.\n\n##### 在model的js文件中,如何编写代码获取对model的引用?\n\n>  **警告:** 例如有一个名为\"foo\"的model,它的js文件是`common/models/foo.js`,在这个js文件中,您不能访问model的关系(_译注: 访问别的model_),因为model还没有被加载,如果您想执行对关系的操作,请在boot scripts中实现它.\n\n_译注:_ 上述警告是在告诉你,在某个model对应的js文件中(例如一个名为account的model,它的js文件是account.js),只能把自己的model name传进去.把其他的model name传进去是无效的,不信你可以多传入一个model,然后console.log它,你会发现是undefined.即使你把感觉上是全局对象的`app`传进来,仍然是undefined.\n\n在model的js文件中,model的名字作为参数传入进顶层函数(top-level function),于是在代码里就可以直接使用这个model对象了,例如有一个model叫\"customer\",它的js文件里的代码如下:\n\n```javascript\n// Customer作为参数传进来,如果你使用生成器生成model的话,生成器自动把model名传进来了\n// 你可以试试在Customer后面在多加一个别的已经存在的model,然后console.log它.一定是undefined\nmodule.exports = function(Customer) {\n  // Customer object is available \n  //...\n}\n```\n\nLoopBack还支持Promises以及model和其相关model的CRUD方法的回调.\n\n##### 当启动脚本中,如何以代码的形式获取对model的引用?\n\n在启动脚本中使用`app.models`,你就能获得对所有model的引用.假设你的启动脚本名叫script.js,它位于`/server/boot/script.js`,代码如下:\n\n```javascript\nmodule.exports = function(app) { // 把app传进来\n  var User = app.models.user;\n  var Role = app.models.Role;\n  var RoleMapping = app.models.RoleMapping;\n  var Team = app.models.Team;\n  // 现在可以对上面4个model为所欲为了\n}\n```\n\n---\n\n<h4 id=\"1.1.1\"> 1.1.1 使用model generator创建model </h4>\n\n##### 概述\n\n使用`model generator`是创建新model最简单的方式,你可以使用IBM API Connect:\n\n```bash\n$ apic create --type model\n```\n\n或者使用:\n\n```bash\n$ slc loopback:model\n```\n当执行上述命令创建新model的时候,生成器会提示你若干问题(_译注: 7个_),这些问题用来确定model的相关**属性**,随后,您还可以使用`property generator`来增加新的**属性**.(_译注:这句话中出现了2遍属性这个词,但意义却不同,回答7个问题生成的属性是top-level属性,它是属于model的,这种属性有13个.最后一个属性你可以理解成表字段.现在先不用纠结这些,继续往下看就可以了.)\n\n当您创建model的时候,(例如你创建了一个名为\"myModel\"的model),生成器会默默的为您:\n\n* 创建/common/models/myModel.json,这是model的定义JSON文件.(_译注: 7个问题中有一个问题是model位置的,如果你选择的\"公共\",则放在common下_)\n\n* 创建/common/models/myModel.js,在这个文件里,您可以用编程的方式来扩展model.例如添加个` remote methods`.\n\n* 把你创建的这个model登记(注册)到`/server/model-config.json`中,登记内容包括名字,数据源等.\n\n##### 基本的操作步骤(举例)\n\n在你的application根目录下输入下面的命令,创建一个名为book的新model.\n\n```bash\n$ slc loopback:model book\n```\n或者使用:\n\n```bash\n$ apic create --type model book\n```\n\n回车后,生成器会提示您这么几个问题:\n\n* 选择model要连接哪种数据源,默认情况下,只有一个名为db的内存数据源.如果你创建过别的数据源,这里就会以列表的形式列出来供你选择..\n\n* 选择model的基类,生成器会列出一堆内置的model和你曾经定义过的自定义model.\n\n**注意:**\n\n通常情况下,如果您想将您的数据保存到数据库中的话(例如mysql,mongodb),基类请选择`PersistedModel `,如果您选择了`Model`作为您的基类的话,你这个model就没有CRUD方法\n\n* 选择是否把你的model公开在REST上,默认值是yes.\n\n* 输入自定义复数后缀,默认是英文的复数规则,例如books,cites等.这个复数是用于API的URL的.\n\n* 为model增加一个属性.生成器会提示您(___译注: 这个属性你可以理解为数据库表的字段___):\n\n  * 属性名.\n  \n  * 属性类型.\n  \n  * 是否为必须属性.\n\n##### 在创建完model后又想添加新属性怎么办\n\n使用`property generator`即可,如下:\n\n```bash\n$ [ slc | apic ] loopback:property\n```\n\n回答生成器提出的问题即可完成相关操作.\n\n__译者注:注意标题是添加新属性,所以,修改旧属性是不能用这个的__\n\n##### 给属性添加默认值\n\n编辑model的JSON文件,给属性添加`default`关键字,更多内容后续会讲.\n\n---\n\n<h4 id=\"1.1.2\"> 1.1.2 从关系型数据库中发现model </h4>\n\n##### 译者概述\n\n原文标题叫做*Discovering models from relational databases*.\n\n你可以这样理解它的含义,假设关系型数据库mysql中有个表叫orders,它有200多个字段(可能是设计失误,或者必须要有这么多字段).如果用[1.1.1](#1.1.1)中的生成器来创建model并添加这200多个属性话,不仅特累,而且将来数据库中表结构变化的话,又要手工来维护这个model.\n\n如果解决这个问题?本节介绍的内容就是解决这个问题的.\n\n##### 原文概述\n\n基于已经存在的关系型数据库,LoopBack创建起model来那是轻松加愉快.它支持以下几种连接器(数据库):\n\n* **MySQL connector**\n\n* **PostgreSQL connector**\n\n* **Oracle connector**\n\n* **SQL Server connector**\n\n对于NoSQL数据库(如MongoDB),请改用instance introspection.\n\n连接到关系型数据库的数据源自动获取异步` Database discovery API`(_译注: 这句话显得很突兀,不明白是啥意思.我的理解是一旦model的数据源是关系型数据库,那model就自动获取了一组discovery API_)\n\n##### 基本的操作步骤(举例)\n\n* **第一步:** 使用脚本(例如下面的代码)来发现模型(原文:discover the schema).\n\n* **第二步:** 使用fs.writeFile()将输出保存为`common/models/你的名字.json`.\n\n* **第三步:** 别忘了在`server/model-config.json`登记这个model.\n\n* **第四步:** 启动app(执行: node .)\n\n* **第五步:** 使用`LoopBack Explorer`来验证你的模型是否已经正确定义.\n\n_译注:_ 上面的步骤不要严格效仿,它的核心理念是提醒你要保存json文件,要登记model.在后面的代码中,你会看到该怎么做.\n\n##### discovery样例代码\n\n例如,假设有一个Oracle数据库.首先,我们的代码要设置Oracle数据源.然后调用discoverAndBuildModels()从数据库表中把表结构搂回来并创建模型.别忘了使用`associations: true`选项来保证能把主/外键关系也搂回来.以下为代码,它位于`/server/bin/script.js`文件中:\n\n```javascript\nvar loopback = require('loopback');\n// 设置oracle数据源\nvar ds = loopback.createDataSource('oracle', {\n  \"host\": \"oracle-demo.strongloop.com\",\n  \"port\": 1521,\n  \"database\": \"XE\",\n  \"username\": \"demo\",\n  \"password\": \"L00pBack\"\n});\n\n// 从INVENTORY这个表把表结构搂回来并创建models\n// dataSource.discoverAndBuildModels有三个参数(modelName, [options], [cb])\nds.discoverAndBuildModels('INVENTORY', {visited: {}, associations: true},\nfunction (err, models) {\n  // Now we have a list of models keyed by the model name\n  // Find the first record from the inventory\n  models.Inventory.findOne({}, function (err, inv) {\n    if(err) {\n      console.error(err);\n      return;\n    }\n    console.log(\"\\nInventory: \", inv);\n    // Navigate to the product model\n    // Assumes inventory table has a foreign key relationship to product table\n    inv.product(function (err, prod) {\n      console.log(\"\\nProduct: \", prod);\n      console.log(\"\\n ------------- \");\n    });\n  });\n});\n```\n\n___译注:___ 如果按照上述的文字顺读下来,你就会以为上述代码可以直接把oracle数据库中的表INVENTORY的表结构给取回来然后在建立model,但实际是错误的,官文的这段代码有误导性.在查阅了API以后可以发现,上述代码中的discoverAndBuildModels()能根据表名创建一个如下的json,它确实是一个model,但与你的表没有关系(假设我的表叫coffeeshop).\n\n```json\n{ Coffeeshop: \n   { [Function: ModelConstructor]\n     setMaxListeners: [Function: bound setMaxListeners],\n     getMaxListeners: [Function: bound getMaxListeners],\n     emit: [Function: bound emit],\n     addListener: [Function: bound addListener],\n     on: [Function: bound addListener],\n     prependListener: [Function: bound prependListener],\n     once: [Function: bound once],\n     prependOnceListener: [Function: bound prependOnceListener],\n     removeListener: [Function: bound removeListener],\n     removeAllListeners: [Function: bound removeAllListeners],\n     listeners: [Function: bound listeners],\n     listenerCount: [Function: bound listenerCount],\n     eventNames: [Function: bound eventNames],\n     super_: \n      { [Function: ModelConstructor]\n        setMaxListeners: [Function: bound setMaxListeners],\n        getMaxListeners: [Function: bound getMaxListeners],\n        emit: [Function: bound emit],\n        addListener: [Function: bound addListener],\n        on: [Function: bound addListener],\n        prependListener: [Function: bound prependListener],\n        once: [Function: bound once],\n        prependOnceListener: [Function: bound prependOnceListener],\n        removeListener: [Function: bound removeListener],\n        removeAllListeners: [Function: bound removeAllListeners],\n        listeners: [Function: bound listeners],\n        listenerCount: [Function: bound listenerCount],\n        eventNames: [Function: bound eventNames],\n        super_: [Object],\n        defineProperty: [Function],\n        getPropertyType: [Function],\n        isProtectedProperty: [Function],\n        isHiddenProperty: [Function],\n        mixin: [Function],\n        getDataSource: [Function],\n        observe: [Function],\n        removeObserver: [Function],\n        clearObservers: [Function],\n        notifyObserversOf: [Function],\n        _notifyBaseObservers: [Function],\n        notifyObserversAround: [Function],\n        afterInitialize: null,\n        beforeValidate: null,\n        afterValidate: null,\n        beforeSave: null,\n        afterSave: null,\n        beforeCreate: null,\n        afterCreate: null,\n        beforeUpdate: null,\n        afterUpdate: null,\n        beforeDestroy: null,\n        afterDestroy: null,\n        validatesPresenceOf: [Function],\n        validatesAbsenceOf: [Function],\n        validatesLengthOf: [Function],\n        validatesNumericalityOf: [Function],\n        validatesInclusionOf: [Function],\n        validatesExclusionOf: [Function],\n        validatesFormatOf: [Function],\n        validate: [Function],\n        validateAsync: [Function],\n        validatesUniquenessOf: [Function],\n        getter: {},\n        setter: {},\n        definition: [Object],\n        settings: [Object],\n        forEachProperty: [Function],\n        attachTo: [Function],\n        extend: [Function],\n        registerProperty: [Function],\n        registry: [Object],\n        setup: [Function: setupPersistedModel],\n        _ACL: [Function: getACL],\n        checkAccess: [Function],\n        _getAccessTypeForMethod: [Function],\n        getApp: [Function],\n        remoteMethod: [Function],\n        disableRemoteMethod: [Function],\n        disableRemoteMethodByName: [Function],\n        belongsToRemoting: [Function],\n        hasOneRemoting: [Function],\n        hasManyRemoting: [Function],\n        scopeRemoting: [Function],\n        nestRemoting: [Function],\n        ValidationError: [Object],\n        sharedClass: [Object],\n        sharedCtor: [Object],\n        beforeRemote: [Function],\n        afterRemote: [Function],\n        afterRemoteError: [Function],\n        _runWhenAttachedToApp: [Function],\n        create: [Object],\n        patchOrCreate: [Object],\n        updateOrCreate: [Object],\n        upsert: [Object],\n        patchOrCreateWithWhere: [Object],\n        upsertWithWhere: [Object],\n        replaceOrCreate: [Object],\n        findOrCreate: [Object],\n        exists: [Object],\n        findById: [Object],\n        find: [Object],\n        findOne: [Object],\n        destroyAll: [Object],\n        remove: [Object],\n        deleteAll: [Object],\n        updateAll: [Object],\n        update: [Object],\n        destroyById: [Object],\n        removeById: [Object],\n        deleteById: [Object],\n        count: [Object],\n        replaceById: [Object],\n        getIdName: [Function],\n        setupRemoting: [Function],\n        diff: [Function],\n        changes: [Function],\n        checkpoint: [Function],\n        currentCheckpoint: [Function],\n        replicate: [Function],\n        createUpdates: [Function],\n        bulkUpdate: [Function],\n        getChangeModel: [Function],\n        getSourceId: [Function],\n        enableChangeTracking: [Function],\n        _defineChangeModel: [Function],\n        rectifyAllChanges: [Function],\n        handleChangeError: [Function],\n        rectifyChange: [Function],\n        findLastChange: [Function],\n        updateLastChange: [Function],\n        createChangeStream: [Object] },\n     defineProperty: [Function],\n     getPropertyType: [Function],\n     isProtectedProperty: [Function],\n     isHiddenProperty: [Function],\n     mixin: [Function],\n     getDataSource: [Function],\n     observe: [Function],\n     removeObserver: [Function],\n     clearObservers: [Function],\n     notifyObserversOf: [Function],\n     _notifyBaseObservers: [Function],\n     notifyObserversAround: [Function],\n     afterInitialize: null,\n     beforeValidate: null,\n     afterValidate: null,\n     beforeSave: null,\n     afterSave: null,\n     beforeCreate: null,\n     afterCreate: null,\n     beforeUpdate: null,\n     afterUpdate: null,\n     beforeDestroy: null,\n     afterDestroy: null,\n     validatesPresenceOf: [Function],\n     validatesAbsenceOf: [Function],\n     validatesLengthOf: [Function],\n     validatesNumericalityOf: [Function],\n     validatesInclusionOf: [Function],\n     validatesExclusionOf: [Function],\n     validatesFormatOf: [Function],\n     validate: [Function],\n     validateAsync: [Function],\n     validatesUniquenessOf: [Function],\n     getter: {},\n     setter: {},\n     definition: \n      ModelDefinition {\n        modelBuilder: [Object],\n        name: 'Coffeeshop',\n        rawProperties: [Object],\n        settings: [Object],\n        relations: [],\n        properties: [Object],\n        _ids: [Object] },\n     settings: \n      { strict: false,\n        base: [Object],\n        replaceOnPUT: true,\n        idInjection: false,\n        mysql: [Object] },\n     forEachProperty: [Function],\n     attachTo: [Function],\n     extend: [Function],\n     registerProperty: [Function],\n     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },\n     setup: [Function: setupPersistedModel],\n     _ACL: [Function: getACL],\n     checkAccess: [Function],\n     _getAccessTypeForMethod: [Function],\n     getApp: [Function],\n     remoteMethod: [Function],\n     disableRemoteMethod: [Function],\n     disableRemoteMethodByName: [Function],\n     belongsToRemoting: [Function],\n     hasOneRemoting: [Function],\n     hasManyRemoting: [Function],\n     scopeRemoting: [Function],\n     nestRemoting: [Function],\n     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },\n     sharedClass: \n      SharedClass {\n        name: 'Coffeeshop',\n        ctor: [Circular],\n        _methods: [Object],\n        _resolvers: [Object],\n        _disabledMethods: {},\n        http: [Object],\n        sharedCtor: [Object] },\n     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },\n     beforeRemote: [Function],\n     afterRemote: [Function],\n     afterRemoteError: [Function],\n     _runWhenAttachedToApp: [Function],\n     create: [Function],\n     patchOrCreate: [Function],\n     updateOrCreate: [Function],\n     upsert: [Function],\n     patchOrCreateWithWhere: [Function],\n     upsertWithWhere: [Function],\n     replaceOrCreate: [Function: replaceOrCreate],\n     findOrCreate: [Function: findOrCreate],\n     exists: [Function: exists],\n     findById: [Function: findById],\n     find: [Function: find],\n     findOne: [Function: findOne],\n     destroyAll: [Function: destroyAll],\n     remove: [Function: destroyAll],\n     deleteAll: [Function: destroyAll],\n     updateAll: [Function],\n     update: [Function],\n     destroyById: [Function: deleteById],\n     removeById: [Function: deleteById],\n     deleteById: [Function: deleteById],\n     count: [Function],\n     replaceById: [Function],\n     getIdName: [Function],\n     setupRemoting: [Function],\n     diff: [Function],\n     changes: [Function],\n     checkpoint: [Function],\n     currentCheckpoint: [Function],\n     replicate: [Function],\n     createUpdates: [Function],\n     bulkUpdate: [Function],\n     getChangeModel: [Function],\n     getSourceId: [Function],\n     enableChangeTracking: [Function],\n     _defineChangeModel: [Function],\n     rectifyAllChanges: [Function],\n     handleChangeError: [Function],\n     rectifyChange: [Function],\n     findLastChange: [Function],\n     updateLastChange: [Function],\n     createChangeStream: { [Function] _delegate: true },\n     _mixins: [ [Object], [Object], [Object], [Object] ],\n     _forDB: [Function],\n     defaultScope: [Function],\n     applyScope: [Function],\n     applyProperties: [Function],\n     lookupModel: [Function],\n     getConnector: [Function],\n     findByIds: [Function],\n     all: [Function],\n     _getSetting: [Function],\n     _normalize: [Function],\n     _coerce: [Function],\n     scope: [Function],\n     normalizeInclude: [Function: normalizeInclude],\n     include: [Function],\n     hasMany: [Function: hasMany],\n     belongsTo: [Function],\n     hasAndBelongsToMany: [Function: hasAndBelongsToMany],\n     hasOne: [Function: hasOne],\n     referencesMany: [Function: referencesMany],\n     embedsOne: [Function: embedsOne],\n     embedsMany: [Function: embedsMany],\n     beginTransaction: [Function],\n     Transaction: \n      { [Function: Transaction]\n        super_: [Object],\n        SERIALIZABLE: 'SERIALIZABLE',\n        REPEATABLE_READ: 'REPEATABLE READ',\n        READ_COMMITTED: 'READ COMMITTED',\n        READ_UNCOMMITTED: 'READ UNCOMMITTED',\n        hookTypes: [Object],\n        begin: [Function] } } }\n```\n\n另外一个坑就是mac下strongloop配置oracle连接器有点麻烦,我简单尝试了一下没有成功,于是就利用现成的mysql了.\n\n下面是查阅API文档后写的一段代码([API链接](http://apidocs.strongloop.com/loopback-datasource-juggler/)),可以实现指定表的discovery,然后在创建model的json文件,并登记model.内容如下(已测试):\n\n```javascript\n'use strict';\n\n/**\n * Discover And Build Model And Expose REST API From Mysql Database Table\n *\n * Create By: Yingshf\n * Put this file in the /server/bin/ directory for your application.\n * run: In Your root directory,Execute 'node ./server/bin/discoverAndBuildModel.js'\n */\n\nvar fs = require('fs');\nvar loopback = require('loopback');\n\n// Change to the correct path for your folder\nvar commonFolder = '../../common';\nvar modelsFolder = commonFolder + '/models';\nvar modelConfig = require('../model-config.json');\nvar dataSources = require('../datasources.json');\n\n// dataSourceName must be the name of your datasource in server/datasources.json\n// 'mysqlTables' is a array of table name\nvar dataSourceName = 'mysqlDb';\nvar mysqlTables = ['coffeeshop'];\nvar lowerModelConfigName = null;\nvar ds = loopback.createDataSource('mysql', dataSources[dataSourceName]);\n\nmain();\n\n// Below is function definitions\nfunction main() {\n  // Check if common/models exists\n  // If not, create them and build models from database\n  if (!fs.existsSync(commonFolder)) {\n    fs.mkdirSync(commonFolder);\n  }\n  if (!fs.existsSync(modelsFolder)) {\n    fs.mkdirSync(modelsFolder);\n  }\n\n  discoverAndCreate();\n}\n\nfunction discoverAndCreate(callback) {\n  mysqlTables.forEach(function(tableName, index, array) {\n    ds.discoverSchema(tableName, null, function(err, schema) {\n      lowerModelConfigName = schema.name.toLowerCase();\n      fs.writeFile('common/models/' + lowerModelConfigName + '.json', prettyJSON(schema), function(err) {\n        if (err) throw err;\n        console.log('It\\'s saved!');\n        //If last, then save\n        if (index === array.length - 1) {\n          saveAndExposeSchemas();\n        }\n      });\n      addSchema(schema.name);\n    });\n  });\n}\n\nfunction addSchema(schema) {\n  modelConfig[schema] = {\n    dataSource: dataSourceName,\n    public: true\n  };\n}\n\nfunction saveAndExposeSchemas() {\n  fs.writeFile('server/model-config.json', prettyJSON(modelConfig), function(err) {\n    if (err) throw err;\n    console.log('Schemas are exposed!');\n    console.log('All thing is OK,Bye Bye!');\n    process.exit(0);\n  });\n}\n\nfunction prettyJSON(str) {\n  // 2 means 'Indent with 2 spaces'\n  return JSON.stringify(str, null, 2);\n}\n```\n这段代码与官方文档中的差异在于使用的方法不同,这里使用的是discoverSchema().\n\n更多的与discovery相关的方法如下:\n\n```javascript\n// List database tables and/or views,把数据库里的表名/视图名都取出来\nds.discoverModelDefinitions({views: true, limit: 20}, cb);\n\n// List database columns for a given table/view,把表/视图字段取回来\nds.discoverModelProperties('PRODUCT', cb);\nds.discoverModelProperties('INVENTORY_VIEW', {owner: 'STRONGLOOP'}, cb);\n\n// List primary keys for a given table\nds.discoverPrimaryKeys('INVENTORY',  cb);\n\n// List foreign keys for a given table\nds.discoverForeignKeys('INVENTORY',  cb);\n\n// List foreign keys that reference the primary key of the given table\nds.discoverExportedForeignKeys('PRODUCT',  cb);\n\n// Create a model definition by discovering the given table\nds.discoverSchema(table, {owner: 'STRONGLOOP'}, cb);\n```\n\n---\n\n<h4 id=\"1.1.3\"> 1.1.3 从非结构化数据中创建model </h4>\n\n___译注:___ 如果你是从1.1.2顺读下来的话,也许会以为这节内容跟上节差不多,只不过discovery的对象从关系型数据库变成了mongodb等nosql数据源.但事实不是这样的,LoopBack MongoDB connector不支持discovery.你只能从一个写好的json对象中创建model,所以不要误解了.\n\n对于非结构化数据(如NoSQL数据库和REST服务中的数据),您可以使用实例内省创建模型.实例内省使用buildModelFromInstance()从单个模型**实例**创建模型(_译注:我理解的实例就是一个json,看下面的代码,user就是一个实例,所以, buildModelFromInstance只能从一个json对象去创建model_)。\n\n以下数据源支持实例内省()：\n\n* **MongoDB data sources**\n\n* **REST data sources**\n\n* **SOAP data sources**\n\n举例如下(/server/boot/script.js):\n\n```javascript\nmodule.exports = function(app) {\n  var db = app.dataSources.db;\n\n  // Instance JSON document\n  var user = {\n    name: 'Joe',\n    age: 30,\n    birthday: new Date(),\n    vip: true,\n    address: {\n      street: '1 Main St',\n      city: 'San Jose',\n      state: 'CA',\n      zipcode: '95131',\n      country: 'US'\n    },\n    friends: ['John', 'Mary'],\n    emails: [\n      {label: 'work', id: 'x@sample.com'},\n      {label: 'home', id: 'x@home.com'}\n    ],\n    tags: []\n  };\n\n  // Create a model from the user instance\n  var User = db.buildModelFromInstance('User', user, {idInjection: true});\n\n  // Use the model for create, retrieve, update, and delete\n  var obj = new User(user);\n\n  console.log(obj.toObject());\n\n  User.create(user, function (err, u1) {\n    console.log('Created: ', u1.toObject());\n    User.findById(u1.id, function (err, u2) {\n      console.log('Found: ', u2.toObject());\n    });\n  });\n});\n```\n\n_译注:_ 上述代码还是不能实现创建model的json文件,登记注册model,感兴趣的可以自己查查API来实现这一需求,这里就不写了.\n\n---\n\n<h4 id=\"1.2\"> 1.2 定制Models </h4>\n\n使用`model generator`创建一个model后,你就可以开始定制它了.定制的方式有多种,你可以使用`command-line tool`,或者直接编辑json文件,也可以编写JavaScript代码来实现定制.\n\n##### 使用command-line tool定制model\n\n>   注意: 你不能对一个已经存在的model使用model generator来进行修改和定制.但是,您可以使用命令行工具手动和在一定程度上自定义模型,详见下文.\n\n能使用的命令行工具包括:\n\n* **property generator**.\n\n* **relation generator**.\n\n* **ACL generator**.\n\n##### 通过编辑JSON文件来定制model\n\n下面是一个model的默认属性(用model generator创建model后自动添加的几个属性),例如这个model的json文件是common/models/model.json,它的内容如下:\n\n```json\n{\n  \"name\": \"myModel\",\n  \"base\": \"PersistedModel\",\n  \"properties\": {\n     // Properties listed here depend on your responses to the CLI\n  },\n  \"validations\": [],\n  \"relations\": {},\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\nLoopBack为model添加了如上这些基本设置,对大多数model来说,这是比较直接的.但是对ACL设置来说,可能会有更复杂的交互,想了解更多关于acl的设置,请看**ACL rule precedence**\n\n**从另一个model进行扩展**\n\n你可以让一个model扩展或继承自一个已经存在的model.比如内置的User或者你自定义的model.在model generator中,选择“Select model’s base class”中的model name即可.或者,你可以编辑json文件中的“base”属性来指定你的model是扩展自哪个model.\n\n>  注意:如果你的model需要保存数据到mysql或者mongodb等数据库,那么基类需要选择PersistedModel. 如果选择Model作为model的基类,那你的model就不具备CRUD方法.\n\n例如,下面是customer.json的一段摘抄.它的基类是内置的User:\n\n/common/models/model.json\n\n```josn\n{\n  \"name\": \"Customer\",\n  \"base\": \"User\",\n  \"idInjection\": false,\n...\n}\n```\n\n> 强烈注意:千万不要修改内置model的属性,如果你确实想这么做.你需要创建有一个自定义的model,它继承自你想要修改的那个内置model,然后修改你自定义的这个model来代替直接修改内置model.\n\n你可以创建一个自定义model,它扩展自一个单个的、自定义的model.例如,先定义一个model叫做\"mMyBaseModel\",然后你就可以定义一个名为\"MyModel\"的model,他的基类是\"mMyBaseModel\",他的json文件的内容如下:\n\ncommon/models/MyModel.json\n\n```json\n{\n  \"name\": \"Example\",\n  \"base\": \"MyBaseModel\",\n}\n```\n然后,你可以为这个model增加一些新的属性,例如:\n\n```json\n{\n   \"name\": \"Customer\",\n   \"base\": \"User\",\n   \"properties\": {\n      \"favoriteMovie\": {\n        \"type\": \"string\"\n      }\n   }\n}\n```\n\n了解更多的数据类型信息,请查看**LoopBack types**\n\n**定制model的其他设置**\n\n下面是4个你通常要定制的重要设置(_译注:_ 只翻译了原文内容最多的strict,其余自己理解):\n\n* **plural** - 如果不指定,那默认就是英文规则的复数形式,比如book的复数是books,city的复数是cities.\n\n* **strict** - 这个属性的默认值是false,如果你把它设置为true.那就代表该model仅仅保存具有预定义属性的实例,save或update操作中的任何其他属性都不会保留到数据源.(_译注:_ 我的理解是,假设你的model的json文件中,\"properties\"属性下面预定义了6个字段,这时你开启这个属性为true,那么在save或update操作时,loopback就只认这6个字段,多余的一概抛弃).\n\n* **idInjection** - Whether to automatically add an id property to the model. True by default.\n\n* **http.path** - customized HTTP path of REST endpoints.\n\n访问**Model definition JSON file**可以了解更多信息.\n\n##### 通过JavaScript代码定制model\n\n以编程方式扩展model的基本方法是编辑model对应的js文件,例如，“customer”模型有一个common/ models/customer.js文件（如果使用模型生成器创建模型）.该js脚本在定义模型之后立即执行.**请将脚本视为模型定义的一部分**(使用它进行模型配置和注册).在js文件里,您可以为特定属性添加model关系,复杂验证或默认函数.基本上,您不能在JSON中执行的任何操作都可以在js文件中实现.**但是请注意,此时脚本无权访问app实例**(___译注:这点非常重要,切记,切记.要访问的话需要在boot目录下的脚本中实现___)\n\n在这个js文件中,你还可以通过添加remote method或operation hook来扩展model.\n\n如果不想通过REST公开你的方法,则只需要省略remoteMethod()的调用即可.\n\n**更改内置model的实现**\n\n**通过server boot script**\n\n当将model附加到持久数据源时,它将成为扩展PersistedModel的持久化model.还记得前面介绍过的PersistedModel的特性么,那就是LoopBack会自动为你的model添加一组内置的CRUD操作方法.内置的CRUD不一定能完全符合你的要求,在某些情况下,您可能想要更改实现,这时候请使用/server/boot目录中的JavaScript文件执行此操作.例如,以下代码显示了如何重新实现Note.find()以覆盖内置的find()方法.\n\n/server/boot/script.js\n\n```javascript\nmodule.exports = function(app) {\n  var Note = app.models.Note;\n  var find = Note.find;\n  var cache = {};\n\n  Note.find = function(filter, cb) {\n    var key = '';\n    if(filter) {\n      key = JSON.stringify(filter);\n    }\n    var cachedResults = cache[key];\n    if(cachedResults) {\n      console.log('serving from cache');\n      process.nextTick(function() {\n        cb(null, cachedResults);\n      });\n    } else {\n      console.log('serving from db');\n      find.call(Note, function(err, results) {\n        if(!err) {\n          cache[key] = results;\n        }\n        cb(err, results);\n      });;\n    }\n  }\n}\n```\n\n**通过你的model’s script**\n\n所谓你的model’s script.就是创建model时配套生成的那个js文件.\n\ncommon/models/MyModel.js\n\n```javascript\nmodule.exports = function(MyModel) {\n  MyModel.on('dataSourceAttached', function(obj){\n    var find = MyModel.find;\n    MyModel.find = function(filter, cb) {\n      return find.apply(this, arguments);\n    };\n  });\n};\n```\n\n---\n\n<h4 id=\"1.3\"> 1.3 将Model附加到数据源 </h4>\n\n##### 概要:\n\n数据源使model能够访问和修改后端系统(如关系数据库)中的数据.数据源封装业务逻辑,以在model和各种后端系统(如关系数据库、REST API、SOAP Web服务、存储服务等)之间交换数据.数据源通常提供创建、检索、更新和删除(CRUD)功能.\n\nmodel通过可扩展和可定制的`connectors`访问数据源.一般来说,应用程序代码不直接使用连接器.相反,DataSource类提供了一个API来配置底层连接器,你可以使用这些API。\n\n内置的内存connectors适合开发环境,要使用其他数据源：\n\n* 使用data source generator生成器创建新的数据源，并将其添加到应用程序的datasources.json中.\n\n* 编辑datasources.json以为数据源添加适当的凭据.\n\n* 创建model以连接到数据源或修改现有model定义以使用你刚才添加的那个connectors.\n\n##### 添加一个数据源\n\n使用`data source generator`添加一个新的数据源:\n\n```bash\n$ slc loopback:datasource\n```\n或者\n\n```bash\n$ apic create --type datasource\n```\n\n你还可以使用`API Designer tool`添加数据源.\n\ntool会提示你输入新数据源的名字以及要使用哪种connectors,例如:MySQL, Oracle, REST等等. 下面是一个datasources.json的例子:\n\n/server/datasources.json\n\n```json\n  ...\n  \"corp1\": {\n    \"name\": \"corp1\",\n    \"connector\": \"mysql\"\n  }\n  ...\n```\n\n这个例子创建了一个使用mysql连接器的,名字叫做corp1的数据源.\n\n##### 添加数据源的访问凭证\n\n编辑datasources.json来为数据源添加必要的访问权限信息.例如hostname, username,password, database name.\n\n例如:\n\n/server/datasources.json\n\n```json\n\"corp1\": {\n    \"name\": \"corp1\",\n    \"connector\": \"mysql\",\n    \"host\": \"your-mysql-server.foo.com\",\n    \"user\": \"db-username\",\n    \"password\": \"db-password\",\n    \"database\": \"your-db-name\"\n  }\n```\n\n##### 配置model使用数据源\n\n当你使用model generator创建了新的model时.你可以从列表中选择已经添加好的数据源.如果你没添加过数据源,那么列表中只有一个默认的db数据源,这是个内存数据源.\n\n编辑应用程序的server/model-config.json文件来指定数据源.例如,让myModel使用corp1数据源.\n\nserver/model-config.json\n\n```json\n\"myModel\": {\n    \"dataSource\": \"corp1\",\n    \"public\": true\n  }\n```\n\n默认情况下,model generator创建model时使用db数据源.\n\n---\n\n<h4 id=\"1.4\"> 1.4 通过REST公开Model </h4>\n\n##### 概要\n\nLoopBack的model自动具有一组标准的`HTTP endpoints`,它们为model数据上的创建,读取,更新和删除(CRUD)操作提供REST API.要实现这个,只需要设置model-config.json中的public属性来指定是否公开model的REST API,例如:\n\n/server/model-config.json\n\n```json\n...\n\"MyModel\": {\n  \"public\": true,\n  \"dataSource\": \"db\"\n},\n...\n```\n\n不想公开REST API,把public属性改为false就妥之.\n\n**REST paths**\n\n默认情况下,你的model的REST API访问路径是你的model名字加复数:\n\n_译注:这段我没看明白,因为官文的原文是By default, the REST APIs are mounted to the plural of the model name; specifically:,这个specifically不好翻译.我个人对这段的理解是,下面这3个是个优先级,REST API的访问路径会按照如下的优先级去查找,例如,我的model叫cust,我设置了Model.settings.http.path=/custone,那路径就会变成这个,如果我没设置,那就默认用复数的名字作为路径_\n\n* Model.settings.http.path\n\n* plural, 自定义的复数形式(在Model definition JSON文件中)\n\n* 默认情况下,自动在model名字后面加复数.例如你有个model叫location,默认情况下它被加载为/locations(后面加个复数s).\n\n**使用REST Router** \n\n如果你使用application generator创建你的应用程序, LoopBack会自动添加REST中间件并且把public属性设为true(公开REST).你不需要做任何其他事情.\n\n人工公开model的REST方法请使用loopback.rest,例如下面的代码:\n\n/server/server.js\n\n```javascript\nvar app = loopback();\napp.use(loopback.rest());\n\n// Expose the `Product` model\napp.model(Product);\n```\n\n添加完上述代码后,名为Product的model将会自动具备了从远程mobile访问的create, read, update, delete方法. 此时,model是无模式的并且数据是未被检查的.\n\n你可以在http://localhost:3000/explorer查看生成的REST文档. \n\nLoopBack提供了一组具有REST API的内置model.有关详细信息,请查看**Built-in models REST API**.\n\n**Request format**\n\n对于POST和PUT请求,请求主体可以是JSON,XML或urlencoded格式,这取决于Content-Type头设置为application/json,application/xml或application/x-www-form-urlencoded.\n\n>  提示:将请求的Accept头设置为application/vnd.api-json将导致响应的Content-Type头被自动设置为application/vnd.api-json.\n\n**使用HTTP查询字符串传递JSON对象或数组**\n\n某些REST API从查询字符串中获取json对象或数组.LoopBack支持2种风格来将json对象/数组编码为查询参数.\n\n* Syntax from node-querystring (qs)\n\n* Stringified JSON\n\n例如:\n\n```\nhttp://localhost:3000/api/users?filter[where][username]=john&filter[where][email]=callback@strongloop.com\n\nhttp://localhost:3000/api/users?filter={\"where\":{\"username\":\"john\",\"email\":\"callback@strongloop.com\"}}\n```\n\n下面这个表格描述了2种风格的编码格式:\n\n<table>\n  <tbody>\n    <tr>\n      <th>JSON object/array for the filter object</th>\n      <th>qs style</th>\n      <th>Stringified JSON</th>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\nwhere: {\n  username: 'john',\n  email: 'callback@strongloop.com'\n  }\n}</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter[where][username]=john<br>&amp;</code>filter[where][email]=callback@strongloop.com</pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"where\":\n{\"username\":\"john\",\n \"email\":\"callback@strongloop.com\"}\n}</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\nwhere: {\n    username: {inq: ['john', 'mary']}\n  }\n}</code></pre>\n      </td>\n      <td>\n        <pre>?filter[where][username][inq][0]=john<br>&amp;filter[where][username][inq][1]=mary</pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"where\":\n  {\"username\":{\"inq\":[\"john\",\"mary\"]}}\n}</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\n  include: ['a', 'b']\n}</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter[include]=a&amp;filter[include]=b</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"include\":[\"a\",\"b\"]}</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n_译注:我个人比较喜欢第二种,即Stringified JSON这种filter格式,尤其在strongloop自带的API Explorer中测试API的时候特别方便,请看下图:_\n\n在filter那里填`{\"where\":{\"username\":\"john\",\"email\":\"callback@strongloop.com\"}}`,然后点击try it out,就可以根据指定的用户名和email查询数据了.\n\n![filter](img/filter.jpg)\n\n\n**Response format**\n\n所有请求的响应格式通常是一个位于body或headers中的JSON对象/数组.有些响应的body是空的,例如:\n\n```HTTP/1.1 200 OK\nAccess-Control-Allow-Origin: http://localhost:3000\nAccess-Control-Allow-Credentials: true\nContent-Type: application/json; charset=utf-8\nContent-Length: 59\nVary: Accept-Encoding\nDate: Fri, 24 Oct 2014 18:02:34 GMT\nConnection: keep-alive\n\n{\"title\":\"MyNote\",\"content\":\"This is my first note\",\"id\":1}\n```\n\nHTTP status code表示一个请求是否成功:\n\n* Status code 2xx indicates success\n* Status code 4xx indicates request related issues.\n* Status code 5xx indicates server-side problems\n\n对错误的响应采用以下JSON格式:\n\n* message: String error message.\n\n* stack: String stack trace.\n\n* statusCode: Integer HTTP status code.\n\n例如:\n\n```json\n{\n  \"error\": {\n    \"message\": \"could not find a model with id 1\",\n    \"stack\": \"Error: could not find a model with id 1\\n ...\",\n    \"statusCode\": 404\n  }\n}\n```\n\n**禁用API Explorer**\n\nLoopBack API Explorer在开发应用程序时非常有用,但为了安全起见,您可能不想在生产环境中公开它.\n\n对于使用loopback-component-explorer的应用程序，在生产环境中中禁它可以这么做：\n\n* 将NODE_ENV环境变量设置为“production”.\n\n* 然后在server/component-config.production.json中:\n\nserver/component-config.production.json\n\n```json\n{\n  \"loopback-component-explorer\": null\n}\n```\n\n##### 预定义remote methods\n\n默认情况下,对于那种后面是数据源支持的model(_译注:有点莫名,有不是数据源支持的model么_),LoopBack为他们默认公开了创建,读取,更新和删除(CRUD)操作的REST API.\n\n例如,有一个model名叫Location,LoopBack会自动创建多个具有相应REST端点的Node方法,如下表所示:\n\n| Model (Node) API | HTTP Method | Example Path |\n|---|---|---|\n| [create()](https://apidocs.strongloop.com/loopback/#persistedmodel-create)                                        | POST   | /locations                 |\n| [replaceOrCreate()](https://apidocs.strongloop.com/loopback/#persistedmodel-replaceorcreate)                      | PUT    | /locations                 |\n| [patchOrCreate()](https://apidocs.strongloop.com/loopback/#persistedmodel-upsert)                                 | PATCH  | /locations                 |\n| [exists()](https://apidocs.strongloop.com/loopback/#persistedmodel-exists)                                        | GET    | /locations/:id/exists      |\n| [findById()](https://apidocs.strongloop.com/loopback/#persistedmodel-findbyid)                                    | GET    | /locations/:id             |\n| [find()](https://apidocs.strongloop.com/loopback/#persistedmodel-find)                                            | GET    | /locations                 |\n| [findOne()](https://apidocs.strongloop.com/loopback/#persistedmodel-findone)                                      | GET    | /locations/findOne         |\n| [destroyById() or deleteById()](https://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid)              | DELETE | /locations/:id             |\n| [count()](https://apidocs.strongloop.com/loopback/#persistedmodel-count)                                          | GET    | /locations/count           |\n| [replaceById()](https://apidocs.strongloop.com/loopback/#persistedmodel-replacebyid)                              | PUT    | /locations/:id             |\n| [prototype.patchAttributes()](https://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattributes) | PATCH  | /locations/:id             |\n| [createChangeStream()](https://apidocs.strongloop.com/loopback/#persistedmodel-createchangestream)                | POST   | /locations/change-stream   |\n| [updateAll()](https://apidocs.strongloop.com/loopback/#persistedmodel-updateall)                                  | POST   | /locations/update          |\n| [replaceOrCreate()](https://apidocs.strongloop.com/loopback/#persistedmodel-replaceorcreate)                      | POST   | /locations/replaceOrCreate |\n| [replaceById()](https://apidocs.strongloop.com/loopback/#persistedmodel-replacebyid)                              | POST   | /locations/:id/replace     |\n\nLoopBack 2.0和3.0在默认公开的这些API中唯一不同的是HTTP PUT(both PUT /api/my-models and PUT /api/my-models/:id),在2.x中,默认情况下patch,部分更新.在3.0中,是完全替换更新.\n\n___译注:官方文档中这一节就这些内容,如果仅看篇幅很容易忽略这节的重要性!请回想一下,截至目前,我们掌握了创建model,还知道了从REST API上查询数据(HTTP),但在js代码中怎么获取model的数据?这就是remote methods发挥作用的时候.现在可以不必深入了解,心中有数就可以了.___\n\n**replaceOnPUT flag**\n\n使用model.json中的replaceOnPUT属性来更改mapping replace和update methods的行为.如果replaceOnPUT为true,replaceOrCreate和replaceById使用HTTP PUT方法.如果为false,updateOrCreate和updateAttributes/patchAttributes使用HTTP PUT方法。\n\n以下示例说明如何在location.json中设置replaceOnPUT：\n\n```json\n...\n{\n  name: \"location\",\n  plural: \"locations\",\n  relations: {…},\n  acls: […],\n  properties: { … },\n  replaceOnPUT: true\n}...\n```\n\n##### 公开和隐藏models, methods, and endpoints\n\n公开model到REST上,只需设置public属性为true(/server/model-config.json):\n\n```json\n...\n\"Role\": {\n  \"dataSource\": \"db\",\n  \"public\": false\n},\n...\n```\n**隐藏methods and REST endpoints**\n\n如果不想公开某些创建,检索,更新和删除操作,可以通过在模型上调用disableRemoteMethod()来轻松隐藏它们.例如在model的js文件中,您将添加以下行以隐藏某个预定义的远程方法:\n\ncommon/models/location.js\n\n```javascript\nvar isStatic = true;\nMyModel.disableRemoteMethod('deleteById', isStatic);\n```\n\n现在deleteById()操作以及它对应的REST endpoint就被隐藏了.\n\n>  重要提醒:确定你是在你自己的model上调用disableRemoteMethod(),而不是在内置model进行调用.\n\n下面这个例子隐藏除了login和logout的其余所有方法:\n\nIn server/model-config.json:\n\n```json\n\"MyUser\": {\n  \"dataSource\": \"db\",\n  \"public\": true,\n  \"options\": {\n    \"remoting\": {\n      \"sharedMethods\": {\n        \"*\": false,\n        \"login\": true,\n        \"logout\": true\n      }\n    }\n  }\n}\n```\n\n除了上面那种方法,还可以在`config.json`的remoting对象是隐藏他们:\n\n```json\n\"remoting\": {\n  \"context\": false,\n  ...\n  \"sharedMethods\": {\n    \"*\": false,\n    \"login\": true,\n    \"logout\": true\n  }\n}\n```\n或者你可以通过你的model的js文件来禁用remoteMethods:\n\n```javascript\nMyUser.disableRemoteMethod(\"create\", true);\nMyUser.disableRemoteMethod(\"upsert\", true);\nMyUser.disableRemoteMethod(\"updateAll\", true);\nMyUser.disableRemoteMethod(\"updateAttributes\", false);\n\nMyUser.disableRemoteMethod(\"find\", true);\nMyUser.disableRemoteMethod(\"findById\", true);\nMyUser.disableRemoteMethod(\"findOne\", true);\n\nMyUser.disableRemoteMethod(\"deleteById\", true);\n\nMyUser.disableRemoteMethod(\"confirm\", true);\nMyUser.disableRemoteMethod(\"count\", true);\nMyUser.disableRemoteMethod(\"exists\", true);\nMyUser.disableRemoteMethod(\"resetPassword\", true);\n\nMyUser.disableRemoteMethod('__count__accessTokens', false);\nMyUser.disableRemoteMethod('__create__accessTokens', false);\nMyUser.disableRemoteMethod('__delete__accessTokens', false);\nMyUser.disableRemoteMethod('__destroyById__accessTokens', false);\nMyUser.disableRemoteMethod('__findById__accessTokens', false);\nMyUser.disableRemoteMethod('__get__accessTokens', false);\nMyUser.disableRemoteMethod('__updateById__accessTokens', false);\n\n```\n**Read-Only endpoints的例子**\n\n你可能想让你的model只公开read-only操作,隐藏其余所有的POST, PUT, DELETE.请看下面的例子:\n\ncommon/models/model.js\n\n```javascript\nProduct.disableRemoteMethod('create', true);\t\t\t\t// Removes (POST) /products\nProduct.disableRemoteMethod('upsert', true);\t\t\t\t// Removes (PUT) /products\nProduct.disableRemoteMethod('deleteById', true);\t\t\t// Removes (DELETE) /products/:id\nProduct.disableRemoteMethod(\"updateAll\", true);\t\t\t\t// Removes (POST) /products/update\nProduct.disableRemoteMethod(\"updateAttributes\", false);\t\t// Removes (PUT) /products/:id\nProduct.disableRemoteMethod('createChangeStream', true);\t// removes (GET|POST) /products/change-stream\n```\n\n**隐藏相关model的endpoints**\n\n使用disableRemoteMethod()来禁用相关model的REST endpoints.\n\n例如,有2个model,分别叫post和tag,他们的关系是post hasMany tags.添加如下代码到/common/models/post.js去禁用相关model(tag)的remote methods和对应的REST endpoints: \n\ncommon/models/post.js\n\n```javascript\nmodule.exports = function(Post) {\n  Post.disableRemoteMethod('__get__tags', false);\n  Post.disableRemoteMethod('__create__tags', false);\n  Post.disableRemoteMethod('__destroyById__accessTokens', false); // DELETE\n  Post.disableRemoteMethod('__updateById__accessTokens', false); // PUT\n};\n```\n\n**隐藏属性**\n\n上面说的都是隐藏REST或方法,如果想隐藏属性(可以理解为表字段)T,那就使用hidden属性就可以了.例如:\n\ncommon/models/user.json\n\n```json\n...\n  \"properties\": {\n    ...\n    \"password\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n...\n   \"hidden\": [\"password\"],\n...\n```\n\n更多细节参看 [Model definition JSON file (Hidden properties)](Model-definition-JSON-file.html#hidden-properties).\n\n---\n\n<h4 id=\"1.5\"> 1.5 验证Model的数据 </h4>\n\n模式(schema)对model施加了限制,以确保model将保存与对应的数据库表匹配的数据.\n\nmodel可以在将数据传递到数据存储(例如数据库)之前验证数据,以确保其符合后端模式(schema).\n\n##### 为model添加schema(模式)\n\n验证数据的一种方法是创建model schema,LoopBack将确保数据符合该模式定义.\n\n例如,假设您的应用程序有一个名为product的model.以下代码定义了一个模式并将其分配给model.模式定义了两个属性:name,必需的字符串属性和price,可选的数字属性.\n\ncommon/models/product.js\n\n```javascript\nvar productSchema = {\n  \"name\": { \"type\": \"string\", \"required\": true },\n  \"price\": \"number\"\n};\n// 实际上下面这行代码会报错,因为找不到Model,把Model换成Product就可以了.\nvar Product = Model.extend('product', productSchema);\n```\n\n如果客户端尝试使用额外属性(例如一个名为description的属性)保存产品,那么在应用将数据保存在模型中之前,会删除这些属性.此外,由于name是必需的值,因此只有在产品包含name属性的值时,才会保存模型.\n\n___译注: 以下为实际测试,请仔细阅读___\n\n**基础准备:**\n\n首先,我在mysql数据库里建了一个表,名为city,有2个字段,分别是city_id(int类型),city_name(字符串类型),其中city_id为主键.\n\n然后,我在strongloop中建立了一个model,名为City,注意下面的model定义json中的细节.\n\n```json\n{\n  \"name\": \"City\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,  //  先看一下这个参数,记住它是true,后面会说.\n  \"options\": {\n    \"validateUpsert\": true\n  },\n  \"properties\": {\n    \"city_id\": {\n      \"type\": \"number\",\n      \"required\": true,\n      \"id\": true // 请思考为什么要有这个属性?\n      // 答案:如果我不设置这个参数,并且上面的\"idInjection\"参数还是true\n      // 那么strongloop这个傻x就会默认的认为你的表主键叫\"id\",而事实上是city_id.\n      // 所以在post的时候会报错.\n    },\n    \"city_name\": {\n      \"type\": \"string\",\n      \"required\": true\n    }\n  },\n  \"validations\": [],\n  \"relations\": {},\n  \"acls\": [],\n  \"methods\": {}\n}\n```\n\n接下来启动服务,到API Explorer中看一下city这个model,并进入到post一节,准备开始测试.如下图所示:\n\n![model](img/validaTest.jpg)\n\n看一下上图我画红框地方,你会发现我并没有像上面文档要求的,在js文件里定义schema,但是model schema已经存在了,并且就是你json中定义的样子.\n\n**测试一:多加个schema中没有的字段,然后post,看看是什么效果**\n\n我在上图的data区域内输入如下内容:\n\n```json\n{\n  \"city_id\": 3,\n  \"city_name\": \"Haerbin\",\n  \"rem\":\"我是个多加的字段\"\n}\n```\n\n然后点击try it out!\n\n奇迹出现了!!!请看下图,strongloop居然告诉我成功了:\n\n![ok](img/postField.jpg)\n\n赶紧到数据库里查一眼,确实插入进去了,新增的字段被忽略了.如下图所示:\n\n![dataok](img/dataOK.jpg)\n\n如此智能和灵活,也不知道是好是坏!并且和我想象中的schema会约束数据有点不符!\n\n**测试二:在js中添加schema,然后多加个schema中没有的字段去post,看看是什么效果**\n\n首先,我在city的js文件中添加如下代码:\n\n```javascript\n'use strict';\n\nmodule.exports = function(City) {\n  var citySchema = {\n    \"city_id\": { \"type\": \"number\", \"required\": true, \"id\": true },\n    \"city_name\": { \"type\": \"string\", \"required\": true },\n    \"rem\": { \"type\": \"string\", \"required\": true }\n  };\n  var City = City.extend('City', citySchema);\n};\n```\n请注意,上面代码中的\"rem\"在model的json定义中是不存在的.\n\n然后我重复上面的操作,到API Explorer中进行测试,看下图所示:\n\n![vaTest2](img/vaTest2.jpg)\n\n请注意:上图中model schema红框那里的内容变成了我在js中定义的内容.作为知识要点回顾,这说明js和json定义model都是一样的.\n\n同样的,上面的操作又成功了,数据库里新增了一条记录.这和我想象的还不一样,我以为官方文档中的代码一旦添加到js文件中,就会约束数据,但实际还是没限制(不能说没限制,多余数据被抛弃了).\n\n**测试三:增加strict参数**\n\n如果我想实现\"model定义了几个属性,post的时候如果有多余属性就让strongloop报错\",应该怎么操作.\n\n回想一下,上面其实提到过,在mode的json文件中,增加一条参数.\"strict\": true,就可以了.\n\n测试一下,添加完这个参数,在用多余的字段去post就会报错,如下图所示:\n\n![vaPostErr](img/vaPostErr.jpg)\n\n我还做了个测试,就不贴图了.我测了一下,把city_id输入个字符串(不是数字),然后去post,strongloop会报错(但是报错信息的内容比较恶心,居然提示我city_id不能为空,其实应该提示类型不符).这和下文中要讲的一点一致.那就是model会自动加载后面表格中所列的那些验证方法.\n\n**测试结论:**\n\n其实我主要是想吐槽一下strongloop的官方文档,可能是我智商低,我读到这里的时候,以为按照它要求的,在js文件中添加了schema就可以验证数据了.但实际测试真不是那么回事.所以,不要太相信官文,还是要自己多做测试.\n\n___译注: 以上为实际测试,请仔细阅读___\n\n##### 使用验证方法\n\n附加到持久数据源的每个model都具有Validatable中混合的验证方法,如下表所示:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesabsenceof\" class=\"external-link\" rel=\"nofollow\">validatesAbsenceOf</a></td>\n      <td>验证一个或多个指定属性是否缺失.model不应包括被视为有效的属性,验证字段不为空时失败.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesexclusionof\" class=\"external-link\" rel=\"nofollow\">validatesExclusionOf</a></td>\n      <td>验证排除.要求属性值不在指定的数组中.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesformatof\" class=\"external-link\" rel=\"nofollow\">validatesFormatOf</a></td>\n      <td>\n        <p>验证格式.要求模型包含与给定格式匹配的属性.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesinclusionof\" class=\"external-link\" rel=\"nofollow\">validatesInclusionOf</a></td>\n      <td>验证是否包含在集合中.要求属性的值在指定的数组中.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validateslengthof\" class=\"external-link\" rel=\"nofollow\">validatesLengthOf</a></td>\n      <td>\n        <p>V验证长度.要求属性长度在指定范围内.三种验证：“min”，“max”和“is”.默认错误消息是：</p>\n        <ul>\n          <li>min: too short</li>\n          <li>max: too long</li>\n          <li>is: length is wrong</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesnumericalityof\" class=\"external-link\" rel=\"nofollow\">validatesNumericalityOf</a></td>\n      <td>验证数字.需要属性的值为整数或数字.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatespresenceof\" class=\"external-link\" rel=\"nofollow\">validatesPresenceOf</a></td>\n      <td>验证一个或多个指定属性的存在.需要包含一个被认为有效的属性的模型,验证字段为空时失败.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesuniquenessof\" class=\"external-link\" rel=\"nofollow\">validatesUniquenessOf</a></td>\n      <td>\n        <p>验证唯一性.确保属性的值对模型是唯一的.不适用于所有连接器.目前支持这些连接器.:</p>\n        <ul>\n          <li>In Memory</li>\n          <li>Oracle</li>\n          <li>MongoDB</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n下面是上述那些方法的使用实例:\n\n**Options object**\n\n大多数验证方法接受一个选项参数,其属性取决于所使用的特定方法.不过,有两个共同的适用于所有方法的属性：\n\n* message - Error message to use instead of the default message, if validation fails.\n\n* allowNull - Whether null values are allowed.\n\n请看下面的例子:\n\ncommon/models/user.js\n\n```javascript\nmodule.exports = function(user) {\n  user.validatesPresenceOf('name', 'email');\n  user.validatesLengthOf('password', {min: 5, message: {min: 'Password is too short'}});\n  user.validatesInclusionOf('gender', {in: ['male', 'female']});\n  user.validatesExclusionOf('domain', {in: ['www', 'billing', 'admin']});\n  user.validatesNumericalityOf('age', {int: true});\n  user.validatesUniquenessOf('email', {message: 'email is not unique'});\n};\n```\n___译注:测试一下,不测不放心___\n\n在model的js文件中加一个验证city_id是否为数字并且返回指定错误信息的代码,如下:\n\n```javascript\n'use strict';\n\nmodule.exports = function(City) {\n  // 自定义一个名为customValidator的验证方法\n  City.validate('city_id', customValidator, { message: 'stop瞎整!' });\n  // 判断city_id是否为数字\n  function customValidator(err) {\n    if (isNaN(this.city_id)) err();\n  };\n};\n```\n\n然后在API Explorer中测试一下,效果如下:\n\n![vaDefErr](img/vaDefErr.jpg)\n\n效果还可以,虽然错误信息那块有点多,将来在收拾它.\n\n>  提示: 当您在模型实例上调用isValid()时,将调用验证方法,并在每次创建或更新模型实例时自动调用验证方法.您不必自己去调用isValid()来验证数据.要在调用upsert()时强制执行验证约束,请确保在模型定义JSON文件中将validateUpsert选项设置为true.默认情况下,模型生成器将此属性设置为true.\n\n要显式调用验证约束,请调用isValid(),例如:\n\n___译注:实际测试下面代码还是不好使,并且代码后面少了个\")\"___\n\n```javascript\nuser.isValid(function (valid) {\n  if (!valid) {\n    user.errors // hash of errors {attr: [errmessage, errmessage, ...], attr: ...}\n  }\n```\n另一个定义验证约束的示例,这次使用正则表达式:\n\n```javascript\nvar re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]-(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]-)*)|(\\\".-\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]-\\.)-[a-zA-Z]{2,}))$/;\n\nUserModel.validatesFormatOf('email', {with: re, message: 'Must provide a valid email'});\nif (!(UserModel.settings.realmRequired || UserModel.settings.realmDelimiter)) {\n  UserModel.validatesUniquenessOf('email', {message: 'Email already exists'});\n  UserModel.validatesUniquenessOf('username', {message: 'User already exists'});\n}\n```\n\n要为创建新模型实例的模型添加验证,您不需要调用isValid().您可以通过添加验证器调用添加验证:\n\ncommon/models/MyModel.js\n\n```javascript\nmodule.exports = function(MyModel) {\n  MyModel.validatesLengthOf('name', { min: 5, message: { min: 'Name should be 5- characters' } });\n  //...\n};\n```\n\n##### 本地化验证信息\n\n可以在客户端上本地化验证错误消息,而不是修改服务器返回的错误响应.验证错误响应会包含error.details.codes中的错误代码,使客户端能够将错误映射到本地化消息.这里是一个示例错误响应:\n\nerror.details.codes\n\n___译注:这段说的比较空,在哪?怎么设置都没说?我在model的js中试了重定义error对象,res对象都不好使,可能是我的问题.___\n\n```json\n{\n  \"name\": \"ValidationError\",\n  \"status\": 422,\n  \"message\": \"The Model instance is not valid. See error object `details` property for more info.\",\n  \"statusCode\": 422,\n  \"details\": {\n    \"context\": \"user\",\n    \"codes\": {\n      \"password\": [\n        \"presence\"\n      ],\n      \"email\": [\n        \"uniqueness\"\n      ]\n   },\n    \"messages\": {\n      \"password\": [\n       \"can't be blank\"\n     ],\n      \"email\": [\n        \"Email already exists\"\n      ]\n    }\n  }\n}\n```\n\n---\n\n<h4 id=\"1.6\"> 1.6 创建Model关系 </h4>\n\n##### 概述\n\n单个模型虽然易于理解和使用.但在现实中,模型通常是有联系(connected)或相关的.当您使用多个模型构建真实的应用程序时,通常需要定义模型之间的关系。 例如：\n\n* 客户有很多订单,每个订单都属于一个客户.\n\n* 用户可以被分配一个或多个角色,角色可以有零个或多个用户.\n\n* 医生伺候许多患者,患者也可以看许多医生.\n\n对于有联系的模型,LoopBack为每个有联系的model公开了一组API以实现每个**模型实例**之间的交互,而且还可以根据客户端的需要在这些有联系的model上查询和过滤信息.\n\n您可以在模型之间定义以下关系：\n\n* BelongsTo relations\n\n* HasOne relations\n\n* HasMany relations\n\n* HasManyThrough relations\n\n* HasAndBelongsToMany relations\n\n* Polymorphic relations(多态关系)\n\n* Embedded relations(嵌入关系) (embedsOne and embedsMany)\n\n您可以在模型定义JSON文件或JavaScript代码中定义模型关系,最终结果是一样的(_译注:但是后面不建议使用js代码_).\n\n当为model定义关系时,LoopBack会向model中添加一组方法,详见每种关系类型的章节.\n\n##### 使用关系生成器relation generator\n\n对于已经存在的model创建新的关系是非常简单的.使用`slc loopback:relation`, 或者`apic loopback:relation`这2个命令即可.\n\n生成器会提示你输入关系类型(belongsTo, hasMany等)和与之相关联的model name.\n\n##### Relation options(关系选项)\n\n大多数关系类型有3个选项:\n\n* Scope (_译注:scope可以理解为查询条件或过滤器或者model的实例,可能不太准确_)\n\n* Properties(属性)\n\n* Custom scope methods(自定义scope方法)\n\n**Scope**\n\nscope可以是object或函数,它接受**所有关联scope**上的过滤器/查询条件.\n\n当scope是object时,它有常见的过滤器选项,例如:where, order, include, limit, offset等\n\n这些选项会被合并到默认过滤器中,这意味着where部分将进行AND运算(_译注:我理解,大概意思就是你定义的where会和原来默认过滤器的where进行AND,而其他的则会覆盖默认过滤器的选项_).其他选项通常会覆盖默认值(标准mergeQuery行为).\n\n当scope是函数时,它将接收当前实例,以及默认过滤器对象(_译注:函数入参_).\n\n例如:\n\n```javascript\n// only allow products of type: 'shoe', always include products\nCategory.hasMany(Product, {\n    as: 'shoes', \n    // scope是object\n    scope: { \n        where: { type: 'shoe' }, \n        include: 'products'\n    }\n});\nProduct.hasMany(Image, {\n    // scope是函数,inst是当前实例,filter是默认过滤器对象.\n    // 但inst到底是谁,官文的注释说这里的inst是category,不太理解.\n    scope: function(inst, filter) { \n        return { type: inst.type }; \n    }\n});  // inst is a category - match category type with product type.\n```\n\n**Properties**\n\n与scope类似,Properties也可以是object或者函数.\n\n___译注,下面两句我保留了原文,因为我翻译的不太好___\n\n当Properties是object时,the keys refer to the instance, the value will be the attribute key on the related model (mapping).这个意思大概是说Properties对象的key是**当前实例**的属性引用,而Properties对象的value是它**相关model**的属性映射.\n\n当Properties是函数时,the resulting object (key/values) are merged into the related model directly.意思大概是说生成的对象直接被合并进它的**关系model**中.\n\n例如,以下关系将`type`转换到product这个model,并且在创建时将`category name`取消规范化为categoryName\n\n```javascript\nCategory.hasMany(Product, {\n    as: 'shoes', \n    properties: {\n        type: 'type',\n        category: 'categoryName'\n    }\n});\n```\n\n上述是Properties为object时的例子,如果要以函数的形式完成同样的操作,例子如下:\n\n```javascript\nProduct.hasMany(Image, {\n    properties: function(inst) { // inst is a category\n        return {type: inst.type, categoryName: inst.name};\n  }\n});\n```\n\n___译注:截至到目前,\"// inst is a category\"这个注释已经出现了好几次,我没太看懂inst为什么会代表category这个model,按字面理解,它好像更应该代表Product这个model.先这样吧,以后再说.___\n\n**invertProperties(反转属性)**\n\n通常情况下,属性从父对象传递到子对象,但是有时可以做相反的操作.要启用此选项,请使用invertProperties选项.可以参见**Embedded models (embed with belongsTo)**里面的例子.\n\n**Custom scope methods**\n\n最后,您可以使用scopeMethods属性添加自定义scope method.同样,该选项可以是对象或函数.\n\n>  重要提示: 默认情况下,自定义的scope method不会作为remote methods公开,你必须手工设置functionName.shared = true才可以.\n\n例子:\n\n```javascript\nvar reorderFn = function(ids, cb) {\n  console.log(this.name); // `this` refers to the RelationDefinition  - `images` (relation name) \n  // Do some reordering here & save cb(null, [3, 2, 1]); }; \n  // Manually declare remoting params \n  reorderFn.shared = true; \n  reorderFn.accepts = { arg: 'ids', type: 'array', http: { source: 'body' } }; \n  reorderFn.returns = { arg: 'ids', type: 'array', root: true }; \n  reorderFn.http = { verb: 'put', path: '/images/reorder' }; \n  Product.hasMany(Image, { scopeMethods: { reorder: reorderFn } });\n}\n```\n\n**Exposing REST APIs for related models**\n\n以下示例演示如何通过REST API访问连接的模型:\n\n/server/script.js\n\n```javascript\nvar db = loopback.createDataSource({connector: 'memory'});\n  Customer = db.createModel('customer', {\n    name: String,\n    age: Number\n  });\n  Review = db.createModel('review', {\n    product: String,\n    star: Number\n  });\n  Order = db.createModel('order', {\n    description: String,\n    total: Number\n  });\n\n  Customer.scope(\"youngFolks\", {where: {age: {lte: 22}}});\n  Review.belongsTo(Customer, {foreignKey: 'authorId', as: 'author'});\n  Customer.hasMany(Review, {foreignKey: 'authorId', as: 'reviews'});\n  Customer.hasMany(Order, {foreignKey: 'customerId', as: 'orders'});\n  Order.belongsTo(Customer, {foreignKey: 'customerId'});\n```\n\n---\n\n<h4 id=\"1.6.1\"> 1.6.1 开启Model关系之旅 </h4>\n\n>  一个简要的教程,说明如何设置model关系\n\n```bash\n$ git clone https://github.com/strongloop/loopback-example-relations.git\n$ cd loopback-example-relations\n$ npm install\n$ node .\n```\n\n___译注:原文接下来一堆内容,都是介绍这个git的详细结构和内容的,我省略了大部分内容,只保留了model定义这几个与后续文档紧密相关的内容___ \n\n**创建models**\n\n* Name: `Customer`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: Yes\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n    * age\n      * number\n      * Not Required\n\n* Name: `Order`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: Yes\n  * Custom plural form: Leave blank\n  * Properties:\n    * \tdescription\n      * String\n      * Not Required\n    * date\n      * date\n      * Not Required\n\n* Name: `Account`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n    * date\n      * date\n      * Not Required\n\n* Name: `Address`\n  * Data source: transient\n  * Base class: Model\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * street\n      * String\n      * Not Required\n    * city\n      * String\n      * Not Required\n    * state\n      * String\n      * Not Required\n    * zipCode\n      * String\n      * Not Required\n\n* Name: `Author`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n\n* Name: `Book`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: Yes\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n\n* Name: `EmailAddress`\n  * Data source: transient\n  * Base class: PersistedModel\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * label\n      * String\n      * Not Required\n    * address\n      * String\n      * Not Required\n\n* Name: `Link`\n  * Data source: transient\n  * Base class: Model\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * id\n      * number\n      * Required > Please set \"id\": true manually for this property, like link.json\n    * name\n      * String\n      * Not Required\n    * notes\n      * String\n      * Not Required\n\n* Name: `Reader`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n\n**定义model关系**\n\n* `Customer`\n  * has many\n    * `Order`\n      * Property name for the relation: `orders`\n      * Custom foreign key: `customerId`\n      * Require a through model: No\n    * `Other Relations:` (please add them manually)\n\n```json\n\"address\": {\n  \"type\": \"embedsOne\",\n  \"model\": \"Address\",\n  \"property\": \"billingAddress\",\n  \"options\": {\n    \"validate\": true,\n    \"forceId\": false\n  }\n},\n\"emails\": {\n  \"type\": \"embedsMany\",\n  \"model\": \"EmailAddress\",\n  \"property\": \"emailList\",\n  \"options\": {\n    \"validate\": true,\n    \"forceId\": false\n  }\n},\n\"accounts\": {\n  \"type\": \"referencesMany\",\n  \"model\": \"Account\",\n  \"property\": \"accountIds\",\n  \"options\": {\n    \"validate\": true,\n    \"forceId\": false\n  }\n},\n```\n* `Book`(please add them manually)\n\n```json\n\"people\": {\n    \"type\": \"embedsMany\",\n    \"model\": \"Link\",\n    \"scope\": {\n      \"include\": \"linked\"\n    }\n}\n```\n\t\n* `Link`(please add them manually)\n\n```json\n\"linked\": {\n  \"type\": \"belongsTo\",\n  \"polymorphic\": {\n    \"idType\": \"number\"\n  },\n  \"properties\": {\n    \"name\": \"name\"\n  },\n  \"options\": {\n    \"invertProperties\": true\n  }\n}\n```\n\n* `Order`\n  * belongs to\n    * `Customer`\n      * Property name for the relation: Leave blank - defaults to customer\n      * Custom foreign key: Leave blank\n\n---\n\n<h4 id=\"1.6.2\"> 1.6.2 BelongsTo关系(多对一,或一对一) </h4>\n\n##### 概述\n\nbelongsTo关系是指一个model与另一个model建立多对一(many-to-one)或一对一(one-to-one)的连接.在多对一关系中,声明model的每个实例\"属于\"另一个model的至多一个实例,而目标model可以具有许多声明model.\n\n例如,假设应用程序有customers和orders两个model:\n\n* 每个订单只能由一个客户设置: ”Order belongsTo (one) Customer”.\n\n* 一个客户可以有多个订单: ”Customer hasMany Orders”.\n\n这种belongsTo关系是hasMany关系的逻辑反射.\n\n声明模型(Order)具有引用目标模型(Customer)的主键属性的外键属性.如果主键不存在,LoopBack将自动添加一个(_译注:这句话是说order有个外键,内容是customer的主键_).\n\n另一种belongsTo关系是一对一的关系,它类似于many-to-one,但不同的是,一对一关系要求拥有模型的每个实例只能有一个声明模型的实例.\n\n例如,假设应用程序有customers和adress两个model：\n\n* 每个地址只能与一个客户相关联：“地址belongsTo一个客户”。\n\n* 客户只能有一个地址：“客户hasOne一个地址”。\n\n这种belongsTo关系是hasOne关系的逻辑反射.\n\n##### 定义belongsTo关系\n\n使用关系生成器`relation generator`创建两个model之间的关系.该工具将提示您输入model的名称,相关model的名称和其他必需的信息.该工具将相应地修改model定义JSON文件(例如,common/models/customer.json).\n\n例如，下面是loopback-example-relation中的订单模型的JSON文件：\n\n**common/models/order.json**\n\n```json\n{\n  \"name\": \"Order\",          // 这个就是前面说的\"声明模型(model)\"\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"customer\": {           // 关系名\n      \"type\": \"belongsTo\",  // 关系类型\n      \"model\": \"Customer\",  // 关联的model,也就是前面说的\"目标模型(model)\"\n      \"foreignKey\": \"\"      // 为空,所以loopback自动指定customer的customerId为外键\n    }\n  },\n  ...\n```\n\n或者,你还可以通过js代码来定义“belongsTo”关系, **虽然一般不推荐这么做**:\n\n**common/models/order.js**\n\n```javascript\nOrder.belongsTo(Customer, {foreignKey: 'customerId'});\n```\n\n如果声明model没有外键属性,LoopBack将添加一个具有相同名称的属性.属性的类型将与目标模型的`id`属性的类型相同(_译注:id属性是永远存在的,如果你没指定,loopback默认也指定_).\n\n如果不指定它们,那么LoopBack指定关系名称和外键如下：\n\n* 关系名称：驼峰式的模型名称,例如,对于“Customer”模型,关系是“customer”.\n* 外键：附加了`Id`的关系名称,例如,对于关系名称“customer”,默认外键是“customerId”.\n\n##### 添加method到model\n\n一旦定义belongsTo关系,LoopBack会自动添加一个带有关系名称的方法到声明模型类的原型,例如:`Order.prototype.customer(...)`\n\n根据参数,该方法可用于get或set所属模型实例.方法调用的结果在内部缓存,并通过对方法的后续同步调用提供.\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>order.customer(function(err, customer) {<br>  ...<br>});</pre>\n      </td>\n      <td>Get the customer for the order asynchronously(异步获取定单的客户)</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var customer = order.customer();</pre>\n      </td>\n      <td>\n        <p>Synchronously get the results of a previous get call to <span>customer(...)(同步获取之前的get调用结果给客户)</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre>order.customer(customer);</pre>\n      </td>\n      <td>Set the customer for the order(设置定单的客户)</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"1.6.3\"> 1.6.3 HasOne关系(一对一) </h4>\n\n##### 概述\n\nhasOne关系与另一个model建立了一对一的连接,这使得声明模型的每个实例具有另一个模型的\"has one\"实例.hasOne关系是hasMany关系的退化.\n\n##### 定义hasOne关系\n\n使用关系生成器`relation generator`创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).\n\n例如,假设有两个model:supplier和account\n\n**common/models/supplier.json**\n\n```json\n{\n  \"name\": \"supplier\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"supplier_acct\": {\n      \"type\": \"hasOne\",\n      \"model\": \"account\",\n      \"foreignKey\": \"supplierId\"\n    }\n  },\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\nsupplier(供应商)有一个account(帐号), 在声明模型上有个外键:account.supplierId -> supplier.id.\n\n_译注: 观察上面supplier的json,你会发现,它自身的model定义中只有一个名为name的字段.这时,在它的关系中定义的foreignKey会不会合并到supplier的model中,大家可以试一下._\n\n**common/models/account.json**\n\n```json\n{\n  \"name\": \"account\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\",\n      \"required\": true\n    },\n    \"acctmgr\": {\n      \"type\": \"string\"\n    },\n    \"supplierId\": {\n      \"type\": \"number\",\n      \"required\": true\n    }\n  },\n  \"validations\": [],\n  \"relations\": {},\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\n或者,你可以通过模型的js代码来定义“hasOne”关系, **虽然通常情况下不建议在和么做**:\n\n**common/models/supplier.js**\n\n```javascript\nSupplier.hasOne(Account, {foreignKey: 'supplierId', as: 'account'});\n```\n\n如果目标模型没有外键属性,LoopBack将添加一个具有相同名称的属性.属性的类型将与目标模型的id属性的类型相同.**请注意,外键属性是在目标模型上定义的(例如,Account)**.\n\n如果不指定它们,那么LoopBack生成关系名称和外键如下:\n\n* 关系名称:驼峰式模型名称,例如,对于\"supplier\"模型，关系是\"supplier\".(_译注:你看出驼峰了么,我是没看出来_)\n* 外键:附有Id的关系名称,例如,对于关系名称\"supplier\",默认外键是\"supplierId\".\n\n##### 添加method到model\n\n一旦定义了hasOne关系,LoopBack会自动添加一个带有关系名称的方法到声明模型类的原型.例如:supplier.prototype.account(...).\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account(function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>\n        <p>Find the supplier's account model.</p>\n        <div class=\"sl-hidden\"><strong>REVIEW COMMENT from Rand</strong><br>You cannot supply a filter, as you can for hasMany right?</div>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var supplier = supplier.account.build(data);</pre>\n        <p>Or equivalently:</p>\n        <pre>var account = new account({supplierId: supplier.id, ...});</pre>\n      </td>\n      <td>Build a new account for the supplier with the supplierId to be set to the id of the supplier. No persistence is involved.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.create(data, function(err, account) {<br>  ...<br>});</pre>\n        <p>Or, equivalently:</p>\n        <pre>account.create({supplierId: supplier.id, ...}, function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new account for the supplier. If there is already an account, an error will be reported.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.destroy(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove the account for the supplier.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.update({balance: 100}, function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>Update the associated account.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"1.6.4\"> 1.6.4 HasMany关系(一对多) </h4>\n\n##### 概述\n\nhasMany关系与另一个模型建立一对多连接.你经常在belongsTo关系的“另一边”找到这个关系.此关系指示模型的每个实例具有另一个模型的零个或多个实例.例如,在具有客户和订单两个模型的应用程序中,客户可以有许多订单.\n\n##### 定义hasMany关系\n\n使用关系生成器`relation generator`创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).\n\n例如,下面是一个model的json定义文件:\n\n**common/models/customer.json**\n\n```json\n{\n  \"name\": \"Customer\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"reviews\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Review\",\n      \"foreignKey\": \"authorId\"\n    },\n  ...\n```\n\n或者,你可以通过模型的js代码来定义“hasOne”关系, **虽然通常情况下不建议在和么做**:\n\n**common/models/customer.js**\n\n```javascript\nCustomer.hasMany(Review, {as: 'reviews', foreignKey: 'authorId'});\n```\n\n如果不指定它们,那么LoopBack生成关系名称和外键如下:\n\n* 关系名称:驼峰式的模型复数名称,例如,对于\"Order\"模型，关系是\"orders\".\n* 外键:附有Id的关系名称,例如,对于关系名称\"Customer\",默认外键是\"customerId\".\n\n##### 添加method到model\n\n一旦你定义了一个“hasMany”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:Customer.prototype.orders(...).\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders([filter],\n  function(err, orders) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find orders for the customer, optionally using provided [filter](Querying-data.html)</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var order = customer.orders.build(data);</pre>\n        <p>Or equivalently:</p>\n        <pre>var order = new Order({customerId: customer.id, ...});</pre>\n      </td>\n      <td>Build a new order for the customer with the customerId to be set to the id of the customer. No persistence is involved.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.create(data,\n  function(err, order) {<br>  ...<br>});</pre>\n        <p>Or, equivalently:</p>\n        <pre>Order.create({customerId: customer.id, ...},\n  function(err, order) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new order for the customer.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.destroyAll(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove all orders for the customer.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.findById(orderId,\n  function(err, order) {<br>   ...<br>});</pre>\n      </td>\n      <td>Find an order by ID.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.destroy(orderId,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Delete an order by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"1.6.5\"> 1.6.5 HasManyThrough关系(多对多) </h4>\n\n##### 概述\n\nhasManyThrough关系设置了与另一个模型的多对多连接.此关系表示`通过第三(中介)模型，声明模型可以与另一模型的零个或多个实例匹配`(_译注:这句不太好理解,但是看下面的图就能理解了).例如,在医生的申请中,如果病人预约见医生,有关的关系声明可能是:\n\n![hasManyThrough](img/hasManyThrough.jpg)\n\n第三(中介)模型(Appointment),有2个外键属性(physicianId和patientId),这2个外键分别引用声明模型(Physician)的主键,以及目标模型(Patient)的主键.\n\n##### 定义hasManyThrough关系\n\n使用关系生成器`relation generator`创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).\n\n创建hasManyThrough关系时,对\"Require a through model\"这个问题回答**Yes**,然后指定model即可,如下所示:\n\n```bash\n[?] Require a through model? Yes\n[?] Choose a through model: Appointment\n```\n\n例如:\n\n**common/models/physician.json**\n\n```json\n{  \n  \"name\": \"Physician\",\n  \"base\": \"PersistedModel\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"patients\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Patient\",\n      \"foreignKey\": \"physicianId\",\n      \"through\": \"Appointment\"\n    },\n  ...\n```\n\n**common/models/patient.json**\n\n```json\n{  \n  \"name\": \"Patient\",\n  \"base\": \"PersistedModel\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"physicans\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Physician\",\n      \"foreignKey\": \"patientId\",\n      \"through\": \"Appointment\"\n    },\n  ...\n```\n\n**common/models/appointment.json**\n\n```json\n{  \n  \"name\": \"Appointment\",\n  \"base\": \"PersistedModel\",\n  \"properties\": {\n    \"appointmentDate\": {\n      \"type\": \"date\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"physician\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Physician\",\n      \"foreignKey\": \"physicianId\"\n    },\n    \"patient\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Patient\",\n      \"foreignKey\": \"patientId\"\n    },\n  ...\n```\n\n你还可以通过js代码来设置hasManyThrough关系,**虽然通常情况下不建议在和么做**:\n\n**common/models/physician.js**\n\n```javascript\n//...\nAppointment.belongsTo(Patient);\nAppointment.belongsTo(Physician);\n\nPhysician.hasMany(Patient, {through: Appointment});\nPatient.hasMany(Physician, {through: Appointment});\n                                                   // Now the Physician model has a virtual property called patients:\nPhysician.patients(filter, callback);              // Find patients for the physician\nPhysician.patients.build(data);                    // Build a new patient\nPhysician.patients.create(data, callback);         // Create a new patient for the physician\nPhysician.patients.destroyAll(callback);           // Remove all patients for the physician\nPhysician.patients.add(patient, callback);         // Add an patient to the physician\nPhysician.patients.remove(patient, callback);      // Remove an patient from the physician\nPhysician.patients.findById(patientId, callback);  // Find an patient by id\n```\n\n**定义外键属性**\n\nhasManyThrough关系具有指示外键属性(字段)名称的keyThrough属性.如果未指定,它将默认为带有附加ID的toModelName.例如:\n\n* Physician.hasMany(Patient, {through: Appointment}) - keyThrough defaults to patientId.\n* Patient.hasMany(Physician, {through: Appointment})- keyThrough defaults to physicianId.\n\n上面的keyThrough属性将用于匹配这些foreignKeys：\n\n```javascript\nAppointment.belongsTo(Physician, {as: 'foo', foreignKey: 'physicianId'});\nAppointment.belongsTo(Patient, {as: 'bar', foreignKey: 'patientId'});\n```\n\n你可以显式指定keyThrough属性:\n\n```javascript\nPhysician.hasMany(Patient, {through: Appointment, foreignKey: 'fooId', keyThrough: 'barId'});\nPatient.hasMany(Physician, {through: Appointment, foreignKey: 'barId', keyThrough: 'fooId'});\n// keyThroughs above will be used to match foreignKeys below\nAppointment.belongsTo(Physician, {as: 'foo'}); // foreignKey defaults to 'fooId'\nAppointment.belongsTo(Patient, {as: 'bar'});   // foreignKey defaults to 'barId'\n```\n\n**在JSON中定义keyThrough**\n\n下面是使用外键定义hasManyThrough关系的示例.考虑下面的表:\n\n* STUDENTS(ID,STUNAME): student information\n* COURSES(ID,COURNAME): course information\n* COURSTU(COURID,STUID): table with foreign keys that handle the many-to-many mapping\n\n你可以按照如下所示在JSON文件中定义关系:\n\n**common/models/courses.json**\n\n```json\n...\n  \"relations\": {\n    \"students\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Students\",\n      \"foreignKey\": \"courid\",\n      \"through\": \"Courstu\",\n      \"keyThrough\": \"stuid\"\n    }\n...\n```\n\n**common/models/students.json**\n\n```json\n\"relations\": {\n    \"courses\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Courses\",\n      \"foreignKey\": \"stuid\",\n      \"through\": \"Courstu\",\n      \"keyThrough\": \"courid\"\n    }\n```\n\n**Self throug)**\n\n在某些情况下,您可能想要定义从模型到其自身的关系.例如,考虑一个社交媒体应用程序,用户可以follow其他用户.在这种情况下,用户可以follow许多其他用户并且可以被其他用户follow.下面的代码显示了如何定义,以及相应的keyThrough属性:\n\n**common/models/user.js**\n\n```javascript\nUser.hasMany(User, {as: 'followers', foreignKey: 'followeeId', keyThrough: 'followerId', through: Follow});\nUser.hasMany(User, {as: 'following', foreignKey: 'followerId', keyThrough: 'followeeId', through: Follow});\nFollow.belongsTo(User, {as: 'follower'});\nFollow.belongsTo(User, {as: 'followee'});\n```\n\n##### 添加method到model\n\n一旦你定义了一个“hasManyThrough”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:physician.patients.create(...).\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients(filter,\n  function(err, patients) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find patients for the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var patient = physician.patients.build(data);</pre>\n      </td>\n      <td>Create a new patient.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.create(data,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new patient for the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.destroyAll(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove all patients for the physician</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.add(patient,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Add a patient to the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.remove(patient,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove a patient from the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.findById(patientId,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find an patient by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n这些关系方法提供了用于与相关对象(上述示例中的患者)一起工作的API.但是,它们不允许您在单个调用中访问相关对象(Patient)和“through”记录(Appointment).\n\n例如,如果要添加新患者并在特定日期创建预约,则必须进行两次调用(REST请求):\n\n1.通过Patient.create创建\n\n`POST /patients`\n\n```json\n{\n  \"name\": \"Jane Smith\"\n}\n```\n\n2.通过Appointment.create创建appointment,将patientId属性设置为Patient.create返回的id.\n\n`POST /appointments`\n\n```json\n{\n  \"patientId\": 1,\n  \"physicianId\": 1,\n  \"appointmentDate\": \"2014-06-01\"\n}\n```\n\n以下查询可用于列出给定医生的所有患者,包括其约会日期:\n\n```\nGET /appointments?filter={\"include\":[\"patient\"],\"where\":{\"physicianId\":2}}\n```\n\n响应返回:\n\n```json\n[\n  {\n    \"appointmentDate\": \"2014-06-01\",\n    \"id\": 1,\n    \"patientId\": 1,\n    \"physicianId\": 1,\n    \"patient\": {\n      \"name\": \"Jane Smith\",\n      \"id\": 1\n    }\n  }\n]\n```\n\n---\n\n<h4 id=\"1.6.6\"> 1.6.6 HasAndBelongsToMany关系(多对多) </h4>\n\n##### 概述\n\nhasAndBelongsToMany关系创建了与另一个模型的**直接**多对多连接,没有中间模型.例如,某个应用程序具有名为组件(assembly)和部件(part)的2个model,其中每个组件具有许多部件,并且每个部件出现在许多组件中,您可以这样声明模型:\n\n##### 定义hasAndBelongsToMany关系\n\n使用关系生成器`relation generator`创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).\n\n![assembly](img/assembly.jpg)\n\n例如,下面是assembly模型的JSON文件的摘录,表示了assembly(组件)和part(部件)模型之间的hasAndBelongsToMany关系:\n\n**/common/models/assembly.json**\n\n```json\n{\n  \"name\": \"Assembly\",\n  \"plural\": \"Assemblies\",\n  \"relations\": {\n    \"parts\": {\n      \"type\": \"hasAndBelongsToMany\",\n      \"model\": \"Part\"\n    },\n...\n```\n\n你还可以通过js代码定义hasAndBelongsToMany关系,虽然通常情况下不建议这么做:\n\n**/common/models/assembly.js**\n\n```javascript\nPart.hasAndBelongsToMany(Assembly);\nAssembly.hasAndBelongsToMany(Part);\n```\n\n**通过REST API添加关系**\n\n通过REST API添加关系时,连接模型必须存在才能添加关系.例如,在上面的“Assembly”和“Part”模型示例中,要通过REST API接口将“Part”的实例添加到“Assembly”中,必须存在一个“AssemblyPart”模型才能工作.\n\n**大多数时候,你应该使用method(方法)添加“hasAndBelongToMany”关系**到服务器端的模型:\n\n**Example method**\n\n```javascript\nassembly.parts.add(part, function(err) {\n  //...\n});\n```\n\n如果您需要使用REST添加关系,首先检查是否首先存在“AssemblyPart”模型.然后使用此代码添加关系:\n\n**Rest Example Method**\n\n```javascript\nAssembly.Parts.link({id:assemblyId, fk: partId}, partInstance,  function(value, header) {\n  //success\n});\n```\n\n##### 为model添加method\n\n一旦你定义了一个“hasAndBelongsToMany”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:assembly.parts.create(...).\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts(filter,\n  function(err, parts) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find parts for the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var part = assembly.parts.build(data);</pre>\n      </td>\n      <td>Build a new part.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.create(data,\n  function(err, part) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new part for the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.add(part,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Add a part to the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.remove(part,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove a part from the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.findById(partId,\n  function(err, part) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find a part by ID.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.destroy(partId,\nfunction(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Delete a part by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"1.6.7\"> 1.6.7 Polymorphic关系(多态) </h4>\n\n##### 概述\n\nLoopBack支持多态关系(polymorphic relations),其中模型可以属于多个其他模型,在单个关联上。 例如,您可能具有属于作者模型或读者模型的图片模型.\n\n_译注: 上面翻译的不好,原文在这里,自己理解LoopBack supports polymorphic relations in which a model can belong to more than one other model, on a single association. For example, you might have a Picture model that belongs to either an Author model or a Reader model_\n\n下面的示例使用三个示例模型:Picture,Author,和Reader,其中Picture可以属于Author或Reader.\n\n##### HasMany的polymorphic关系实现\n\n常用的选项都被支持,例如:'photos'指定一个不同的relation name/accessor(关系名称/访问器).\n\n**common/models/author.json**\n\n```json\n{\n  \"name\": \"Author\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"pictures\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Picture\",\n      { \"polymorphic\": \"imageable\" }\n    }\n  }\n...\n```\n\n和:\n\n**common/models/reader.json**\n\n```json\n{\n  \"name\": \"Reader\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"pictures\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Picture\",\n      \"polymorphic\": {\n        \"as\": \"imageable\",\n        \"foreignKey\": \"imageableId\",\n        \"discriminator\": \"imageableType\"\n       } \n    }\n  }\n...\n```\n\n或者,你可以在js代码中定义关系:\n\n**common/models/author.js**\n\n```javascript\nAuthor.hasMany(Picture, { polymorphic: 'imageable' });\n```\n\n和:\n\n**common/models/reader.js**\n\n```javascript\nReader.hasMany(Picture, { polymorphic: { // alternative syntax  \n  as: 'imageable', // if not set, default to: reference\n  foreignKey: 'imageableId', // defaults to 'as - Id'\n  discriminator: 'imageableType' // defaults to 'as - Type'\n  } \n});\n```\n\n##### HasManyThrough的polymorphic关系实现\n\n要定义hasMany多态关系,必须有一个“through”模型,类似于标准的HasManyThrough关系.\n\n例如,\"ImageLink\":\n\n**/common/models/ImageLink.json**\n\n```json\n{\n  \"name\": \"ImageLink\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"author\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Author\",\n      \"foreignKey\": \"authorId\"\n    },\n    \"pictures\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Picture\",\n      \"polymorphic\": {\n        \"foreignKey\": \"imageableId\",\n        \"discriminator\": \"imageableType\"\n      }\n    }\n  },\n...\n}\n```\n\n下面这个例子就是polymorphic hasManyThrough关系:\n\n**/common/models/Author.json**\n\n```json\n{\n  \"name\": \"Author\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"pictures\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Picture\",\n      \"polymorphic\": {\n        \"foreignKey\": \"imageableId\",\n        \"discriminator\": \"imageableType\"\n      },\n      \"through\": \"ImageLink\",\n      \"keyThrough\": \"authorId\"\n    }\n  },\n...\n}\n```\n\n同样的,用js实现也可以,例子是下面这个:\n\n**/common/models/Author.js**\n\n```javascript\nAuthor.hasMany(Picture, {\n  as: 'pictures',\n  polymorphic: {\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  },\n  through: ImageLink,\n  keyThrough: 'authorId'\n});\n```\n\n##### BelongsTo的polymorphic关系实现\n\n因为你动态地定义了相关的模型,所以你不能在前面声明它(_译注:原文是you cannot declare it up front,我翻译的好像不准_). 因此,不是传入相关模型(名称),而是指定多态关系的名称.\n\n**common/models/picture.json**\n\n```json\n{\n  \"name\": \"Picture\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"author\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Author\",\n      \"polymorphic\": {\n        \"foreignKey\": \"imageableId\",\n        \"discriminator\": \"imageableType\"\n      }\n    }\n  },\n...\n```\n\n或者,使用js代码:\n\n**common/models/picture.js**\n\n```javascript\nPicture.belongsTo('imageable', {\n  polymorphic: true\n}); \n// Alternatively, use an object for setup\nPicture.belongsTo('imageable', {\n  polymorphic: {\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  }\n});\n```\n\n##### HasAndBelongsToMany的polymorphic关系实现\n\n这需要一个明确的“through”模型,例如:PictureLink.\n\n关系`Picture.belongsTo(PictureLink)`和`Picture.belongsTo('imageable',{polymorphic：true})`将自动设置.\n\n对于PictureLink所需的属性也是如此(true).\n\n**/common/models/model.js**\n\n```javascript\nAuthor.hasAndBelongsToMany(Picture, {\n  through: PictureLink,\n  polymorphic: 'imageable'\n});\nReader.hasAndBelongsToMany(Picture, {\n  through: PictureLink,\n  polymorphic: 'imageable'\n});\n// Optionally, define inverse hasMany relations with '(invert: true)'\nPicture.hasMany(Author, {\n  through: PictureLink,\n  polymorphic: 'imageable',\n  invert: true\n});\nPicture.hasMany(Reader, {\n  through: PictureLink,\n  polymorphic: 'imageable',\n  invert: true\n});\n```\n\n##### HasOne的polymorphic关系实现\n\n如下所示,您可以指定'avatar'来显式设置关系的名称.如果未设置,它将默认为多态名称.\n\n**/common/models/model.js**\n\n```javascript\nPicture.belongsTo('imageable', {polymorphic: true});\nAuthor.hasOne(Picture, {as: 'avatar', polymorphic: 'imageable'});\nReader.hasOne(Picture, {polymorphic: {as: 'imageable'}});\n```\n\n##### 处理polymorphic.idType\n\n因为modelTo在前面是未知的(它是多态的),你不能依靠`modelTo`来获得`foreignKey`类型.您可以显式声明`idType`,如下所示.\n\n```json\n[{\n  url: 'john.jpg',\n  imageableType: 'Author',\n  imageableId: '1',\n  id: 1\n}, {\n  url: 'joe.jpg',\n  imageableType: 'Reader',\n  imageableId: '1',\n  id: 2\n}]\n\nAuthors: [{\n  username: 'John',\n  id: 1\n}]\n\nReaders: [{\n  name: 'Joe',\n  id: 1\n}]\n```\n\n```javascript\nvar Author = app.models.Author;\nvar Reader = app.models.Reader;\nvar Picture = app.models.Picture;\n\nAuthor.hasOne(Picture, {\n  as: 'avatar',\n  polymorphic: {\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  }\n});\n\nReader.hasOne(Picture, {\n  as: 'imageable',\n  polymorphic: {\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  }\n});\n\nPicture.belongsTo('owner', {\n  idName: 'username',\n  polymorphic: {\n    idType: Author.definition.properties.username.type,\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  }\n});\n\n//Creating demo author, reader pictures then listing them\nfunction createAuthor(cb) {\n  Author.create({\n    username: \"John\"\n  }).then(function(author) {\n    author.avatar.create({\n      url: \"john.jpg\"\n    }, function() {\n      cb();\n    });\n  });\n}\n\nfunction createReader(cb) {\n  Reader.create({\n    name: \"Joe\"\n  }).then(function(reader) {\n    reader.imageable.create({\n      url: \"joe.jpg\"\n    }, function() {\n      cb();\n    });\n  });\n}\n\nfunction listPictures() {\n  Picture.find(function(err, res) {\n    console.log(\"\\nPictures:\\n\", res);\n  })\n}\n\nfunction listReaders() {\n  Reader.find(function(err, res) {\n    console.log(\"\\nReaders:\\n\", res);\n  })\n}\n\nfunction listAuthors() {\n  Author.find(function(err, res) {\n    console.log(\"\\nAuthors:\\n\", res);\n  })\n}\n\n//executing the demo\ncreateAuthor(function() {\n  createReader(function() {\n    listPictures();\n    listAuthors();\n    listReaders();\n  });\n});\n```\n\n---\n\n<h4 id=\"1.6.8\"> 1.6.8 查询相关model </h4>\n\n##### 概述\n\n关系通过将外键属性连接到主键属性来定义两个模型之间的连接.对于每种关系类型,LoopBack自动将辅助方法混合到模型类中,以帮助导航和关联模型实例以加载或构建数据图.\n\n通常,客户端应用程序想要从图中选择相关数据,例如获得用户信息和最近放置的订单.LoopBack提供了几种方法来在查询中表达这些要求.\n\n##### Inclusion\n\n要在查询的响应中包括相关模型,请使用查询对象的`include`属性或在模型类上使用include()方法. `include`可以是字符串,数组或对象.有关详细信息,请参阅`Include filter`.\n\n以下示例说明有效的格式.\n\nLoad all user posts with only one additional request:\n\n**/server/script.js**\n\n```javascript\nUser.find({include: 'posts'}, function() {\n  //...\n});\n```\n\n或者用js代码:\n\n**/server/script.js**\n\n```javascript\nUser.find({include: ['posts']}, function() {\n  //...\n});\n```\n\nLoad all user posts and orders with two additional requests:\n\n**/server/script.js**\n\n```javascript\nUser.find({include: ['posts', 'orders']}, function() {\n  //...\n});\n```\n\nLoad all post owners (users), and all orders of each owner:\n\n**/server/script.js**\n\n```javascript\nPost.find({include: {owner: 'orders'}}, function() {\n  //...\n});\n```\n\nLoad all post owners (users), and all friends and orders of each owner:\n\n**/server/script.js**\n\n```javascript\nPost.find({include: {owner: ['friends', 'orders']}}, function() {\n  //...\n});\n```\n\nLoad all post owners (users), all posts (including images), and orders of each owner:\n\n**/server/script.js**\n\n```javascript\nPost.find({include: {owner: [{posts: 'images'} , 'orders']}}, function() {\n  //...\n});\n```\n\nThe model class also has an include() method. For example, the code snippet below will populate the list of user instances with posts:\n\n**/server/script.js**\n\n```javascript\nUser.include(users, 'posts', function() {\n  //...\n});\n```\n\n##### Scope\n\n使用Scoping可以将查询定义为目标模型类或原型的方法.例如:\n\n**/server/boot/script.js**\n\n```javascript\nUser.scope('top10Vips', {where: {vip: true}, limit: 10});\n\nUser.top10Vips(function(err, vips) {\n});\n```\n\nYou can create the same function using a custom method too:\n\n**/server/boot/script.js**\n\n```javascript\nUser.top10Vips = function(cb) {\n  User.find({where: {vip: true}, limit: 10}, cb);\n};\n```\n\n##### 使用包含关系的过滤器参数\n\n在查询相关模型以从相关模型返回数据时,可以在过滤器(例如,where,order,fields,include过滤器)上使用参数.\n\n例如:考虑Student,Class和Teacher模型，其中Student有多个Class,并且Teacher有多个Class.\n\n查找所有学生,并返回所有他们的课程与教这些课的教师,以及所有的学生注册的这些课,诸如此类,等等.\n\n```javascript\nStudent.find({\n  \"filter\": {\n    \"include\": {\n      \"relation\": \"classes\",\n      \"scope\": {\n        \"include\": [\"teachers\", \"students\"]\n      }\n    }\n  }\n});\n```\n\n另一个例子:找到一个特定的老师,也返回所有他们的课程,以及所有学生注册的这些课.\n\n```javascript\nTeacher.find({\n  \"filter\": {\n    \"where\": {\n      \"id\": $state.params.id\n    },\n    \"include\": {\n      \"relation\": \"classes\",\n      \"scope\": {\n        \"include\": [\"students\"]\n      }\n    }\n  }\n});\n```\n\n---\n\n<h4 id=\"1.6.9\"> 1.6.9 嵌入式model和关系 </h4>\n\n>  LoopBack支持如下这几种(5种)嵌入关系：embedsOne，embedsMany，embedsMany with belongsTo和referencesMany。\n\n##### 概述\n\nLoopBack的relations使您能够在模型之间创建连接,并提供导航/聚合API来处理模型实例的图形(graph).除了传统的以外,LoopBack还支持以下嵌入关系:\n\n* **EmbedsOne** - 一个model嵌入了另一个model.例如:Customer里面迁入了billingAddress.\n\n* **EmbedsMany** - 一个model嵌入许多其他model的实例.例如:Customer可以有很多个email地址,并且每一个email都是一个复合对象,它包括标签和地址等.\n\n* **EmbedsMany** with belongsTo - a model that embeds many links to related people, such as an author or a reader. \n\n* **ReferencesMany**\n\n> Important: 您可以使用关系数据库的嵌入关系,但数据将始终以字符化JSON格式存储.\n\n##### EmbedsOne\n\nEmbedsOne用于表示嵌入其他模型的模型,例如,Customer嵌入一个billingAddress.\n\n**Sample embedded model**\n\n```json\n{\n  id: 1,\n  name: 'John Smith',\n  billingAddress: {\n    street: '123 Main St',\n    city: 'San Jose',\n    state: 'CA',\n    zipCode: '95124'\n  }\n}\n```\n\n在js代码中定义关系\n\n**common/models/customer.js**\n\n```javascript\nCustomer.embedsOne(Address, {\n  as: 'address', // default to the relation name - address\n  property: 'billingAddress' // default to addressItem\n});\n```\n\nParameters for the definition\n\n* **methods** - Scoped methods for the given relation\n* **properties** - Properties taken from the parent object\n* **scope** - Default scope\n* **options** - Options\n* **default** - Default value\n* **property** - Name of the property for the embedded item\n* **as** - Name of the relation\n\nOptions\n\n* **forceId** - force generation of ida for embedded items, default to false(强制生成嵌入项的ida,默认为false)\n* **validate** - denote if the embedded items should be validated, default to true(表示是否应该验证嵌入的项目,默认为true)\n* **persistent** - denote if the embedded items should be persisted, default to false(表示嵌入的项目是否应该持久化,默认为false)\n\n在json中定义关系\n\n**common/models/customer.json**\n\n```json\n{\n  \"name\": \"Customer\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"relations\": {\n    \"address\": {\n      \"type\": \"embedsOne\",\n      \"model\": \"Address\",\n      \"property\": \"billingAddress\",\n      \"options\": {\n        \"validate\": true,\n        \"forceId\": false\n      }\n    }\n    ...\n  }\n```\n\nHelper methods(辅助方法)\n\n* customer.address()\n* customer.address.build()\n* customer.address.create()\n* customer.address.update()\n* customer.address.destroy()\n* customer.address.value()\n\nOperation hooks\n\n您可以在embedsOne关系中,为嵌入模型定义`before save`和`after save`的`operation hooks`. 然后,更新或创建容器模型的实例将触发嵌入式模型上的operation hook.发生这种情况时,ctx.isNewInstance为false,因为只创建容器模型的新实例.\n\n例如,如果`Customer embedsOne Address`,并且您在地址模型上定义了一个'before save'hook,则创建新的Customer实例将触发操作挂钩.\n\n##### EmbedsMany\n\n使用embedsMany关系来指示模型可以嵌入另一个模型的许多实例.例如,客户可以有多个电子邮件地址,每个电子邮件地址是一个包含标签和地址的复合对象.\n\n**Sample model instance with many embedded models**\n\n```json\n{\n  id: 1,\n  name: 'John Smith',\n  emails: [{\n    label: 'work',\n    address: 'john@xyz.com'\n  }, {\n    label: 'home',\n    address: 'john@gmail.com'\n  }]\n}\n```\n\n>  Important:把embedsMany作为一个实际的关系,和hasMany关系相比,没有任何不同.例如:这意味着,您不能只是通过嵌入/嵌套数据来POST完整对象,从而一次创建所有内容.因此,使用上面的示例添加一个客户和多个电子邮件地址将需要两个POST操作,一个用于客户记录,一个用于多个电子邮件地址数据.\n\n在js代码中定义关系\n\n**common/models/customer.js**\n\n```javascript\nCustomer.embedsOne(EmailAddress, {\n  as: 'emails', // default to the relation name - emailAddresses\n  property: 'emailList' // default to emailAddressItems\n});\n```\n\nParameters for the definition\n\n* methods\n* properties\n* scope\n* options\n* default\n* property\n* as\n\nOptions\n\n* forceId\n* validate\n* persistent\n\n在json中定义关系\n\n**common/models/customer.json**\n\n```json\n{\n  \"name\": \"Customer\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"relations\": {\n    \"emails\": {\n      \"type\": \"embedsMany\",\n      \"model\": \"EmailAddress\",\n      \"property\": \"emailList\",\n      \"options\": {\n        \"validate\": true,\n        \"forceId\": false\n      }\n    }\n    ...\n  }\n```\n\nHelper methods(辅助方法)\n\n* customer.emails()\n* customer.emails.create()\n* customer.emails.build()\n* customer.emails.findById()\n* customer.emails.destroyById()\n* customer.emails.updateById()\n* customer.emails.exists()\n* customer.emails.add()\n* customer.emails.remove()\n* customer.emails.get() - alias to findById\n* customer.emails.set() - alias to updateById\n* customer.emails.unset() - alias to destroyById\n* customer.emails.at()\n* customer.emails.value()\n\nOperation hooks\n\n您可以在embedsMany关系中为嵌入模型定义`before save`和`after save`的operation hooks.然后m更新或创建容器模型的实例将触发嵌入式模型上的operation hook.发生这种情况时,ctx.isNewInstance为false,因为只创建容器模型的新实例.\n\n例如,如果`Customer embedsOne Address`,并且您在地址模型上定义了一个`before save`hook,则创建一个新的Customer实例将触发operation hook.\n\n##### EmbedsMany with belongsTo\n\n使用embedsMany with belongsTo关系来表示可以嵌入许多链接到其他模型的模型.例如一个book模型嵌入许多相关人物的链接(例如作者或读者).每个链接属于一个人,它是多态的,因为一个人可以是一个作者或一个读者.\n\n**Exampel embedsMany with belongsTo model instance**\n\n```json\n{ \n  id: 1\n  name: 'Book 1',\n  links: [{\n    notes: 'Note 1',\n    id: 1,\n    linkedId: 1,\n    linkedType: 'Author',\n    name: 'Author 1'\n  }, {\n  notes: 'Note 2',\n    id: 2,\n    linkedId: 1,\n    linkedType: 'Reader',\n    name: 'Reader 1'\n  }]\n}\n```\n\nDefine the embedsMany relation for Book\n\n**common/models/book.json**\n\n```json\n{\n  \"name\": \"Book\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"people\": {\n      \"type\": \"embedsMany\",\n      \"model\": \"Link\",\n      \"scope\": {\n        \"include\": \"linked\"\n      }\n    }\n  },\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\nDefine the polymorphic belongsTo relation for Link\n\n**common/models/link.json**\n\n```json\n{\n  \"name\": \"Link\",\n  \"base\": \"Model\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\",\n      \"id\": true\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"notes\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"linked\": {\n      \"type\": \"belongsTo\",\n      \"polymorphic\": {\n        \"idType\": \"number\"\n      },\n      \"properties\": {\n        \"name\": \"name\"\n      },\n      \"options\": {\n        \"invertProperties\": true\n      }\n    }\n  },\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\n##### ReferencesMany\n\nSample referencesMany model instance\n\n```json\n{\n  id: 1,\n  name: 'John Smith',\n  accounts: [\n    \"saving-01\", \"checking-01\",\n  ]\n}\n```\n\nParameters for the definition\n\n* methods\n* properties\n* foreignKey\n* scope\n* options\n* default\n* as\n\nOptions\n\n* forceId\n* validate\n* persistent\n\nDefine the relation in code\n\n**common/models/customer.json**\n\n```json\n{\n  \"name\": \"Customer\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"relations\": {\n    \"accounts\": {\n      \"type\": \"referencesMany\",\n      \"model\": \"Account\",\n      \"foreignKey\": \"accountIds\",\n      \"options\": {\n        \"validate\": true,\n        \"forceId\": false\n      }\n    }\n...\n}\n```\n\nHelper methods\n\n* customer.accounts()\n* customer.accounts.create()\n* customer.accounts.build()\n* customer.accounts.findById()\n* customer.accounts.destroy()\n* customer.accounts.updateById()\n* customer.accounts.exists()\n* customer.accounts.add()\n* customer.accounts.remove()\n* customer.accounts.at()\n\n##### Transient versus persistent for the embedded model(嵌入模型的瞬态与永久)\n\nDefine a transient data source\n\n**server/datasources.json**\n\n```json\n{\n  ...\n  \"transient\": {\n    \"name\": \"transient\",\n    \"connector\": \"transient\"\n  }\n}\n```\n\nUse the transient data source for embedded models\n\n**server/model-config.json**\n\n```json\n{\n  ...\n  \"Customer\": {\n    \"dataSource\": \"db\",\n    \"public\": true\n  },\n  \"Address\": {\n    \"dataSource\": \"transient\",\n    \"public\": false\n  },\n  \"EmailAddress\": {\n    \"dataSource\": \"transient\",\n    \"public\": false\n  },\n  \"Account\": {\n    \"dataSource\": \"db\",\n    \"public\": false\n  }\n}\n```\n\n---\n\n<h4 id=\"1.6.10\"> 1.6.10 嵌套查询 </h4>\n\n除了使用LoopBack API直接查询数据,嵌套模型可以是API endpoints(端点).为此,必须使用nestRemoting函数.\n\n>  Important:通常,最好在引导脚本(boot script)中执行嵌套查询,以确保所有模型都已加载.虽然可以在模型定义JSON文件中执行嵌套查询,但必须使用事件来确保已加载相关模型.\n\n了解嵌套查询的最简单的方法是通过一个例子.\n\n假设应用程序有 book, chapter, page, and image models模型,和:\n\n* Each book can have many pages and chapters.\n* Each chapter and page can have many notes.\n* Each book has an image.\n\n以下JSON块显示了和page和chapter模型有关系的的Book模型.\n\n**common/models/book.json**\n\n```json\n{\n  \"name\": \"Book\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"options\": {\n    \"validateUpsert\": true\n  },\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"pages\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Page\",\n      \"foreignKey\": \"\",\n      \"through\": \"\"\n    },\n    \"chapters\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Chapter\",\n      \"foreignKey\": \"\",\n      \"through\": \"\"\n    }\n  },\n  \"acls\": [],\n  \"methods\": {}\n}\n```\n\n**common/models/chapter.json**\n\n```json\n{\n  \"name\": \"Chapter\",\n  ...\n  \"relations\": {\n    \"notes\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Note\",\n      \"foreignKey\": \"\",\n      \"through\": \"\"\n    }\n  },\n  ...\n}\n```\n\n**common/models/page.json**\n\n```json\n{\n  \"name\": \"Page\",\n  ...\n  \"relations\": {\n    \"notes\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Note\",\n      \"foreignKey\": \"\",\n      \"through\": \"\"\n    }\n  },\n  ...\n}\n```\n\n**common/models/image.json**\n\n```json\n{\n  \"name\": \"Image\",\n  ...\n  \"relations\": {\n    \"book\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Book\",\n      \"foreignKey\": \"\",\n      \"required\": true\n    }\n  },\n  ...\n}\n```\n\n您可以通过常规关系查询特定图书的页面,如以下API端点所示:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages</td>\n      <td>An array of pages data</td>\n      <td>Queries pages of a specific book</td>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456</td>\n      <td>An object of a page data</td>\n      <td>Queries a page data of a specific page under a specific book</td>\n    </tr>\n  </tbody>\n</table>\n\n但是,要更深入地查询嵌套模型并将它们作为API端点,您需要使用模型nestRemoting()函数:\n\n```javascript\nBook.nestRemoting('pages');\nBook.nestRemoting('chapters');\nImage.nestRemoting('book');\n```\n\n上述代码启用以下嵌套查询:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456/notes</td>\n      <td>An array of notes objects</td>\n      <td>Queries all of the notes associated with a specific page under a specific book</td>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456/notes/567</td>\n      <td>An object of a note data</td>\n      <td>Queries a specific note associated with a specific page under a specific book</td>\n    </tr>\n  </tbody>\n</table>\n\n或者,由于图像属于书实例,所以,您可以通过他们的图像查询他们的网页:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/images/345/book/pages</td>\n      <td>An array of pages of a book</td>\n      <td>Queries all of the pages of the book, whose associated image id is 345</td>\n    </tr>\n    <tr>\n      <td>/api/images/345/book/pages/456</td>\n      <td>An object of a page data</td>\n      <td>Queries page with the id of 456 under the book, whose associated image id is 345</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2\"> 2. 使用内置Models </h4>\n\n##### 概述\n\nLoopBack为常见使用场景提供了有用的内置models:\n\n* **Application model** - 包含具有自己的标识和与LoopBack服务关联配置的客户端应用程序的元数据.\n\n* **User model** - 注册和验证本地或第三方服务的用户.\n\n* **Access control models** - 包括ACL,AccessToken,Scope,Role和RoleMapping模型,用于控制对应用程序,资源和方法的访问.\n\n* **Email model** - 使用SMTP或第三方服务向您的应用用户发送电子邮件.\n\n内置模型（电子邮件除外）扩展自PersistedModel,因此它们自动具有完整的创建,更新和删除(CRUD)操作.\n\n>  注意:默认情况下,只有User model通过REST公开.要暴露其他内置模型,请在server/model-config.json中将模型的public属性更改为true.使用警告:将某些模型暴露于公共API可能是一种安全风险.\n\n##### Access control models\n\n使用访问控制模型来控制对应用程序,资源和方法的访问.这些模型包括:\n\n* ACL\n* AccessToken\n* Scope\n* Role\n* RoleMapping\n\n___ACL model___\n\nACL模型将主体连接到受保护的资源.系统向主体(用户或应用程序,以及那些可以被分组为角色的主体)授予权限.\n\n* 保护资源：模型数据和操作(模型/属性/方法/关系)\n* 是否允许给定的客户端应用程序或用户访问(读取,写入或执行)受保护的资源.\n\n创建新的ACL实例.\n\n**server/boot/script.js**\n\n```javascript\nACL.create({\n    principalType: ACL.USER, \n    principalId: 'u001', \n    model: 'User', \n    property: ACL.ALL,\n    accessType: ACL.ALL, \n    permission: ACL.ALLOW}, function (err, acl) {\n        ACL.create({\n            principalType: ACL.USER, \n            principalId: 'u001', \n            model: 'User', \n            property: ACL.ALL,\n            accessType: ACL.READ, \n            permission: ACL.DENY}, function (err, acl) {\n            }\n        );\n    }\n);\n```\n\n---\n\n<h4 id=\"2.1\"> 2.1 扩展内置Models </h4>\n\n##### 使用JSON来扩展内置model\n\n当使用模型生成器创建模型时,选择基本模型,即模型将“扩展”的模型,并从中继承方法和属性.该工具将相应地在模型定义JSON文件中设置基本属性.例如,对于扩展PersistedModel的模型:\n\n**/common/models/model.json**\n\n```json\n{\n  \"name\": \"Order\",\n  \"base\": \"PersistedModel\",\n  ...\n```\n\n要更改基本模型,只需编辑JSON文件并更改基本属性.\n\n一般来说,当您想要使用连接器(如MySQL或MongoDB)将数据存储在数据库中时,请使用`PersistedModel`作为基本模型.使用`Model`作为不具有CRUD语义的模型的基础,例如,使用诸如SOAP和REST之类的连接器.\n\n>  提示:扩展内置的User模型以创建表示用户或客户的自己的模型.此模型提供注册,登录和恢复密码的功能.扩展内置User模型时,请使用除\"User\"以外的模型名称,例如\"customer\"或\"client\".不要将其命名为\"User\",因为这将与内置User模型冲突.为了避免混淆,最好避免使用小写字母\"u\"的\"user\".\n\n##### 使用js代码来扩展内置model\n\n您还可以使用模型JavaScript文件/common/models/_modelName_.js中的JavaScript文件扩展模型(其中,modelName是模型的名称),例如:\n\n**/common/models/user.js**\n\n```javascript\nvar properties = {\n  firstName: {\n    type: String,\n    required: true\n  }\n};\n\nvar options = {\n  relations: {\n    accessTokens: {\n      model: accessToken,\n      type: hasMany,\n      foreignKey: userId\n    },\n    account: {\n      model: account,\n      type: belongsTo\n    },\n    transactions: {\n      model: transaction,\n      type: hasMany\n    }\n  },\n  acls: [{\n    permission: ALLOW,\n    principalType: ROLE,\n    principalId: $everyone,\n    property: myMethod\n  }]\n};\n\nvar user = loopback.Model.extend('user', properties, options);\n```\n\n___Mixing in model definitions___\n\n您可能需要创建共享一组公共属性和逻辑的模型.LoopBack使您能够将一个或多个其他模型“混合(mix-in)”到单个模型中.例如:\n\n**common/models/myModel.js**\n\n```javascript\nvar TimeStamp = modelBuilder.define('TimeStamp', {\n  created: Date,\n  modified: Date\n});\nvar Group = modelBuilder.define('Group', {\n  groups: [String]\n});\nUser.mixin(Group, TimeStamp);\n```\n\n_设置自定义model_\n\n您可能需要为自定义模型执行其他设置,例如添加另一个模型的远程方法.要实现这些,请在新模型上实施setup()方法.loopback.Model.extend()函数调用setup(),因此在setup()中输入的代码将在创建模型时自动执行.\n\n例如:\n\n**common/models/myModel.js**\n\n```javascript\nMyModel = Model.extend('MyModel');\n\nMyModel.on('myEvent', function() {\n  console.log('meep meep!');\n});\n\nMyExtendedModel = MyModel.extend('MyExtendedModel');\n\nMyModel.emit('myEvent'); // nothing happens (no event listener)\n\n// this is where `setup()` becomes handy\n\nMyModel.setup = function() {\n  var MyModel = this;\n  // since setup is called for every extended model\n  // the extended model will also have the event listener\n  MyModel.on('myEvent', function() {\n    MyModel.printModelName();\n  });\n}\n```\n\n---\n\n<h4 id=\"2.2\"> 2.2 为内置Models添加remote methods </h4>\n\n要向内置模型添加远程方法.您可以扩展模型,然后将远程方法添加到新模型,或将其添加到引导脚本中.如此处示例所述:\n\n此示例将为内置的User模型添加\"greet\"方法.\n\n##### Boot script\n\n通常,要向User模型添加远程方法,您需要将其添加到/common/models/user.js中.然而,对于内置模型,这个文件将覆盖内置的模型定义,所以你必须在启动脚本中创建和附加我们的远程方法,例如:\n\n**server/boot/userRemoteMethods.js**\n\n```javascript\nmodule.exports = function(app) {\n  const User = app.models.User;\n\n  User.greet = function(msg, cb) {\n    cb(null, 'Greetings... ' - msg);\n  };\n\n  User.remoteMethod(\n    'greet', {\n      accepts: {\n        arg: 'msg',\n        type: 'string'\n      },\n      returns: {\n        arg: 'greeting',\n        type: 'string'\n      }\n    }\n  );\n};\n```\n\n##### ACLs\n\n默认情况下,User模型的ACL拒绝除了明确列入白名单的所有请求,因此您必须为远程方法添加ACL记录. 最常见的做法是编辑/common/models/user.json这样的文件,但是这个文件会覆盖内置的版本,所以这是不可能的.相反,您可以在model-config.json中定义ACL.\n\n例如:\n\n**server/model-config.json**\n\n```json\n{\n  \"User\": {\n    \"dataSource\": \"db\",\n    \"acls\": [{\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"greet\"\n    }]\n  },\n  ...\n}\n```\n\n现在,所有用户都可以向/Users/greet发送POST请求,并访问此内置模型上的新自定义方法.\n\n##### 其他注意事项\n\n* 以这种方式添加远程方法**不会将它们添加到Swagger JSON**.这意味着您不会在API Explorer中看到“Users/greet”方法.\n* 通过设计,您可以通过`environment specific configurations`覆盖model-config.json中的设置.记住在定义ACL时,如上所示.\n\n---\n\n<h4 id=\"2.3\"> 2.3 为内置Models创建数据库表 </h4>\n\nLoopBack应用程序附带一小组内置模型.要为这些内置模型创建数据库表,请使用`auto-migration`.\n\n>  重要:如果数据库具有现有表,则运行automigrate()将删除并重新创建表,从而可能导致数据丢失.要避免此问题,请使用autoupdate().\n\n为LoopBack内置model创建数据库表情遵循以下步骤:\n\n1. 按照[1.3 将Model附加到数据源](#1.3)的操作来指定数据源.\n2. 创建`server/create-lb-tables.js`,代码如下:\n\n```javascript\nvar server = require('./server');\nvar ds = server.dataSources.db;\nvar lbTables = ['User', 'AccessToken', 'ACL', 'RoleMapping', 'Role'];\nds.automigrate(lbTables, function(er) {\n  if (er) throw er;\n  console.log('Loopback tables [' - lbTables - '] created in ', ds.adapter.name);\n  ds.disconnect();\n});\n```\n\n最后,人工执行这个脚本:\n\n```bash\n$ cd server\n$ node create-lb-tables.js\n```\n\n---\n\n<h4 id=\"2.4\"> 2.4 Model属性引用 </h4>\n\n>  重要:此参考信息正在移至API文档.直到完成才在这里提供.\n\n\n原文比较少,所以就不翻译了.可以自己去看一下.[链接在这](#http://loopback.io/doc/en/lb3/Model-property-reference.html)\n\n---\n\n<h4 id=\"2.5\"> 2.5 内置Model的REST API </h4>\n\nLoopBack提供了一些具有REST API的内置模型.其中许多都从通用PersistedModel REST API继承端点.\n\n默认情况下,LoopBack使用`/api`作为应用程序REST API的URI根.要更改它,请在应用程序app.js文件中设置`apiPath`变量.\n\n内置model有:\n\n* PersistedModel REST API\n* Access token REST API\n* ACL REST API\n* Application REST API\n* Email (See the email connector page)\n* Relation REST API\n* Role REST API\n* User REST API\n\n---\n\n<h4 id=\"2.5.1\"> 2.5.1 PersistedModel REST API </h4>\n\n>  概要:PersistedModel是连接到持久数据源(如数据库)的模型的基类,也是所有内置模型(电子邮件除外)的基类.\n\n##### 概述\n\nPersistedModel是连接到持久数据源(如数据库)的模型的基类,也是所有内置模型(电子邮件除外)的基类.它提供所有标准的创建,读取,更新和删除(CRUD)操作,并为它们公开REST端点.\n\n默认情况下,LoopBack使用`/api`作为REST API的URI根.您可以通过更改应用程序`/server/config.json`文件中的restApiRoot属性来更改此属性.有关详细信息,请参阅config.json.\n\nModel REST API的端点通常是模型名称的复数形式.默认情况下,这只是带有\"s\"的名称.例如,如果模型是\"car\",则\"cars\"是复数形式.您可以在模型定义JSON文件中自定义复数形式.\n\n>  注意:您不能自定义到PersistedModel REST API端点的路由.但是,您可以使用server/ config.json中的rest.normalizeHttpPath属性来控制如何从自定义模型构造REST API端点.有关更多信息,请参阅config.json (Remoting properties).\n\n##### 创建model实例\n\n创建模型的新实例并将其持久保存到数据源.\n\n`POST /_modelName_`\n\n参数:\n\n* 表单数据 - 模型实例数据.可以是表示单个模型实例或模型实例数组的JSON.\n\n例子:\n\n**Request URL**: POST  http://localhost:3000/api/locations\n\n**Request body**: {\"name\": \"L1\", \"street\": \"107 S B St\", \"city\": \"San Mateo\", \"zipcode\": \"94401\"}\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n  \"id\": \"96\",\n  \"street\": \"107 S B St\",\n  \"city\": \"San Mateo\",\n  \"zipcode\": 94401,\n  \"name\": \"L1\"\n}\n```\n\n##### Update / insert实例\n\n更新现有模型实例或将新实例插入数据源.更新将覆盖请求数据对象中的任何指定的属性.它不会删除现有的,除非该值设置为null.\n\n执行upsertto检测是否有匹配的实例.如果没有,则插入(创建)一个新实例.如果有匹配的实例,则更新它.\n\n`PUT /_modelName_`\n\n参数:\n\n* 表单数据 - JSON格式的model实例数据\n\n例子:\n\n_Insert_\n\n**Request URL**: PUT  http://localhost:3000/api/locations\n\n**Request body**: {\"name\": \"L1\", \"street\": \"107 S B St\", \"city\": \"San Mateo\", \"zipcode\": \"94401\"}\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n  \"id\": 98,\n  \"street\": \"107 S B St\",\n  \"city\": \"San Mateo\",\n  \"zipcode\": 94401,\n  \"name\": \"L1\"\n}\n```\n\n_Update_\n\n**Request URL**: PUT  http://localhost:3000/api/locations\n\n**Request body**: \n\n```json\n{\n  \"id\": \"98\",\n  \"name\": \"L4\",\n  \"street\": \"107 S B St\",\n  \"city\": \"San Mateo\",\n  \"zipcode\": \"94401\"\n}\n```\n\n**Response status code**: 200\n\n**Response body**: \n\n```json\n{ \n  \"id\": 98,\n  \"street\": \"107 S B St\",\n  \"city\": \"San Mateo\",\n  \"zipcode\": 94401,\n  \"name\": \"L4\"\n}\n```\n\n##### 检查实例存在\n\n在数据源中根据ID检查实例是否存在\n\n`GET /_modelName_/_modelID_/exists`\n\n参数:\n\n* modelID - model instance ID\n\n例子:\n\n**Request URL**: GET http://localhost:3000/api/locations/88/exists\n\n**Response status code**: 200\n\n**Response body**: javascript {\"exists\": true}\n\n##### 根据ID查找实例\n\n从数据源中根据ID查找一个model实例\n\n`GET /modelName/modelID?filter=[filterType1]=<val1>&filter[filterType2]=<val2>...`\n\n参数:\n\n* **modelID** - Model instance ID\n\n* _filterType1, filterType2_, and so on, are the filter types. This operation supports only include and fields filters. See Include filter and Fields filter for more information.\n\n* _val1, val2_ are the corresponding values.\n\n例子:\n\n**Request URL**: GET  http://localhost:3000/api/locations/88\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n    \"id\": 88,\n    \"street\": \"390 Lang Road\",\n    \"city\": \"Burlingame\",\n    \"zipcode\": 94010,\n    \"name\": \"Bay Area Firearms\"\n}\n```\n\n##### 查找匹配实例\n\n从数据源中,根据过滤器,查找所有匹配的实例.\n\n`GET /modelName?filter=[filterType1]=<val1>&filter[filterType2]=<val2>...`\n\n参数:\n\n将参数作为过滤器的HTTP查询参数的值传递,其中:\n\n* _filterType1, filterType2_, and so on, are the filter types.\n\n* _val1, val2_ are the corresponding values.\n\n例子:\n\nRequest without filter:\n\n**Request URL**: GET  http://localhost:3000/api/locations\n\nRequest with a filter to limit response to two records:\n\n**Request URL**: GET  http://localhost:3000/api/locations?filter[limit]=2\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n[\n  { \n  \"id\": \"87\",\n  \"street\": \"7153 East Thomas Road\",\n  \"city\": \"Scottsdale\",\n  \"zipcode\": 85251,\n  \"name\": \"Phoenix Equipment Rentals\"\n  },\n  { \n    \"id\": \"88\",\n    \"street\": \"390 Lang Road\",\n    \"city\": \"Burlingame\",\n    \"zipcode\": 94010,\n    \"name\": \"Bay Area Firearms\"\n  }\n]\n```\n\n##### 查找第一个实例\n\n从数据源中,根据过滤器,查找第一个匹配的实例.\n\n`GET /modelName/findOne?filter=[filterType1]=<val1>&filter[filterType2]=<val2>...`\n\n参数:\n\n查询参数:\n\n* filter - 定义位置,顺序,字段,跳过和限制的过滤器.它和find的filter参数一样.\n\n例子:\n\n**Request URL**: GET  http://localhost:3000/api/locations/findOne?filter[where][city]=Scottsdale\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n  \"id\": \"87\",\n  \"street\": \"7153 East Thomas Road\",\n  \"city\": \"Scottsdale\",\n  \"zipcode\": 85251,\n  \"name\": \"Phoenix Equipment Rentals\"\n}\n```\n\n##### 删除model实例\n\n从数据源根据ID删除model实例.\n\n`DELETE /modelName/modelID`\n\n参数:\n\n* modelID  - model instance ID\n\n例子:\n\n**Request URL**: DELETE  http://localhost:3000/api/locations/88\n\n**Response status code**: 204\n\n##### 删除所有匹配的实例\n\n>  警告:默认情况下,此操作不会通过REST公开,以防止无意中删除数据.\n\n从与指定的where子句匹配的数据源中删除model的实例.\n\n`DELETE /modelName?filter=[filterType1]=<val1>&filter[filterType2]=<val2>...`\n\n参数:\n\n* filter - 用于定义位置,顺序,字段,跳过和限制的过滤器.它和find的filter参数一样.\n\n例子:\n\n**Request URL**: DELETE  http://localhost:3000/api/locations?[where][city]=Dallas\n\n**Response status code**: 200\n\n##### 获取匹配的实例数量(_译注:可以理解为count(*)_)\n\n从与指定的where子句匹配的数据源中count model的实例.\n\n`GET /modelName/count?where[property]=value`\n\n参数:\n\n* where - 匹配模型实例的条件.\n\n例子:\n\nCount without “where” filter\n\n**Request URL**: GET  http://localhost:3000/api/locations/count\n\nCount with a “where” filter\n\n**Request URL**: GET  http://localhost:3000/api/locations/count?where[city]=Burlingame\n\n**Response status code**: 200\n\n**Response body**:\n\n{count: 6}\n\n##### 更新model实例属性\n\n更新model实例属性并持久化进数据源.\n\n`PUT /model/modelID`\n\n参数:\n\n* data - An object containing property name/value pairs\n* modelID - The model instance ID\n\n例子:\n\n**Request URL**: PUT  http://localhost:3000/api/locations/88\n\n**Request body**:\n\n```json\n{\"name\": \"L2\"}\n```\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n  \"id\": \"88\",\n  \"street\": \"390 Lang Road\",\n  \"city\": \"Burlingame\",\n  \"zipcode\": 94010,\n  \"name\": \"L2\"\n}\n```\n\n##### 更新匹配的model实例\n\n更新匹配model实例的属性,并持久化到数据源.\n\n`POST /modelName/update?where[property]=value`\n\n参数:\n\n* data - An object containing property name/value pairs.\n* where - The where object to select matching instances. See Where filter for more information.\n\n例子:\n\n**Request URL**: POST  http://localhost:3000/api/locations/update?where[city]=Burlingame\n\n**Request body**: {\"city\": \"San Jose\"}\n\n**Response status code**: 200\n\n##### 创建更改流(Create Change Stream)\n\n创建一个新的更改流:\n\n`POST /modelName/change-stream?format=event-stream`\n\n参数:\n\n* 表单数据 - 模型实例数据.表示单个模型实例的JSON或模型实例的数组.\n\n例子:\n\n**Request URL**: POST  http://localhost:3000/api/locations/\n\n**Request body**: {\"city\": \"San Jose\"}\n\n##### 获取更改流\n\n`GET /modelName/change-stream?format=event-stream`\n\n---\n\n<h4 id=\"2.5.2\"> 2.5.2 Access token REST API </h4>\n\n访问令牌REST API中的所有端点都是从通用PersistedModel REST API继承.为方便起见,此处提供了参考.\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>URI Pattern</th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th width=\"200\">Description</th>\n      <th width=\"300\">Arguments</th>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#create-model-instance\">Add access token instance</a> and persist to data source.\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of accessTokens that match specified filter.</td>\n      <td>\n        One or more filters in query parameters:\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert access token instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find access token by ID</a>: Return data for the specified access token instance ID.</td>\n      <td><em>id</em>, the access token instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified access token ID and persist.</td>\n      <td>\n        Query parameters:\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete access token</a> with specified instance ID.</td>\n      <td><em>id</em>, access token ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified access token ID exists.\n      </td>\n      <td>\n        URI path:\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of access token instances</a>&nbsp;that matches specified where clause.\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first access token instance</a> that matches specified filter.\n      </td>\n      <td>Same as <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2.5.3\"> 2.5.3 ACL REST API </h4>\n\nACL REST API中的所有端点都继承自PersistedModel REST API.为方便起见,此处提供了参考.\n\n默认情况下,不显示ACL REST API.要公开它,请将以下内容添加到models.json中:\n\n```json\n\"acl\": {\n  \"public\": true,\n  \"options\": {\n    \"base\": \"ACL\"\n  },\n  \"dataSource\": \"db\"\n}\n```\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/acls</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add ACL instance</a><span> and persist to data source.</span></p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/acls</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a><span> of ACLs that match specified filter.</span></td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert ACL instance</a><span> and persist to data source.</span></td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find ACL by ID</a><span>: Return data for the specified ACL instance ID.</span></td>\n      <td><em>id</em>, the ACL instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a><span> for specified ACL ID and persist.</span></td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete ACL</a><span> with specified instance ID.</span></td>\n      <td><em>id</em>, acls ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a><span>: Return true if specified ACL ID exists.</span></p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of ACL instances</a><span>&nbsp;that matches specified where clause.</span></p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/acls/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first ACL instance</a><span> that matches specified filter.</span></p>\n      </td>\n      <td>Same as <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2.5.4\"> 2.5.4 Application REST API </h4>\n\nApplication  REST API中的所有端点都继承自PersistedModel REST API.为方便起见.此处提供了参考.\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/applications</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add application instance</a> and persist to data source.</p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/applications</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of applications that match specified filter.</td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert application instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find application by ID</a>: Return data for the specified application instance ID.</td>\n      <td><em>id</em>, the application instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified application ID and persist.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete application</a> with specified instance ID.</td>\n      <td><em>id</em>, application ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified application ID exists.</p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of application instances</a>&nbsp;that matches specified where clause.</p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/applications/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first application instance</a> that matches specified filter.</p>\n      </td>\n      <td>Same as&nbsp;<a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2.5.5\"> 2.5.5 Relation REST API </h4>\n\n这些端点是PersistedModel REST API的一部分,但是为了方便参考,这里提供.\n\n##### 获取相关model实例\n\n`GET /<model1-name>/<instanceID>/<model2-name>`\n\n参数:\n\n* `<instanceID>` - ID of instance in model1.\n* `<model1-name>` - name of first model. \n* `<model2-name>` - name of second related model.\n\n例子:\n\nRequest:\n\n`GET http://localhost:3000/locations/88/inventory`\n\nResponse:\n\n```json\n[\n  {\n    \"productId\": \"2\",\n    \"locationId\": \"88\",\n    \"available\": 10,\n    \"total\": 10\n  },\n  {\n    \"productId\": \"3\",\n    \"locationId\": \"88\",\n    \"available\": 1,\n    \"total\": 1\n  }\n]\n```\n\n##### Get hasMany related model instances\n\n列出由instance-ID标识指定的`<model-name>`的hasMany关系的相关模型实例.\n\n`GET /<model-name>/<instance-ID>/<hasManyRelationName>`\n\n##### Create hasMany related model instance\n\n为hasMany关系的`<instance-ID>`标识的指定`<model-name>`创建相关模型实例.(_译注:原文在这里,以下不翻译了,容易造成误解,Create a related model instance for specified <model-name> identified by <instance-ID>, for hasMany relationship._)\n\n`POST /<model1-name>/<instance-ID>/<hasMany-Relation-Name>`\n\n##### Delete hasMany related model instances\n\nDelete related model instances for specified `<model-name>` identified by `<instance-ID>`, for hasMany relationship.\n\n`DELETE /<model1-name>/<instance-ID>/<hasMany-relation-name>`\n\n##### List belongsTo related model instances\n\nList the related model instances for the given model identified by `<instance-ID>`, for hasMany relationship.\n\n`GET /model-name/<instance-ID>/<belongsTo-relation-name>`\n\n##### Aggregate models following relations\n\n通常期望在对查询的响应中包含相关模型的实例,以使得客户端不必进行多个调用.\n\n`GET /<model1-name>?filter[include]=...`\n\n参数:\n\n* include - The object that describes a hierarchy of relations to be included(描述要包含的关系的层次结构的对象)\n\n例子:\n\n`GET /api/members?filter[include]=posts`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1\n      }\n    ]\n  },\n  {\n    \"name\": \"Member B\",\n    \"age\": 22,\n    \"id\": 2,\n    \"posts\": [\n      {\n        \"title\": \"Post D\",\n        \"id\": 4,\n        \"memberId\": 2\n      }\n    ]\n  },\n...\n]\n```\n\nThe following request retrieves all members, including the posts, which further includes the author:\n\n`GET /api/members?filter[include][posts]=author`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      }\n    ]\n  },\n  {\n    \"name\": \"Member B\",\n    \"age\": 22,\n    \"id\": 2,\n    \"posts\": [\n      {\n        \"title\": \"Post D\",\n        \"id\": 4,\n        \"memberId\": 2,\n        \"author\": {\n          \"name\": \"Member B\",\n          \"age\": 22,\n          \"id\": 2\n        }\n      }\n    ]\n  },\n  ...\n]\n```\n\nThe following request retrieves all members who are 21 years old, including the posts, which further includes the author:\n\n`GET /api/members?filter[include][posts]=author&filter[where][age]=21`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      }\n    ]\n  }\n]\n```\n\nThe following request retrieves two members, including the posts, which further includes the author: \n\n`GET /api/members?filter[include][posts]=author&filter[limit]=2`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      }\n    ]\n  },\n  {\n    \"name\": \"Member B\",\n    \"age\": 22,\n    \"id\": 2,\n    \"posts\": [\n      {\n        \"title\": \"Post D\",\n        \"id\": 4,\n        \"memberId\": 2,\n        \"author\": {\n          \"name\": \"Member B\",\n          \"age\": 22,\n          \"id\": 2\n        }\n      }\n    ]\n  }\n]\n```\n\nThe following request retrieves all members, including the posts and passports.\n\n`GET /api/members?filter[include]=posts&filter[include]=passports`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1\n      }\n    ],\n    \"passports\": [\n      {\n        \"number\": \"1\",\n        \"id\": 1,\n        \"ownerId\": 1\n      }\n    ]\n  },\n  {\n    \"name\": \"Member B\",\n    \"age\": 22,\n    \"id\": 2,\n    \"posts\": [\n      {\n        \"title\": \"Post D\",\n        \"id\": 4,\n        \"memberId\": 2\n      }\n    ],\n    \"passports\": [\n      {\n        \"number\": \"2\",\n        \"id\": 2,\n        \"ownerId\": 2\n      }\n    ]\n  }, ... ]\n```\n\n---\n\n<h4 id=\"2.5.6\"> 2.5.6 Role REST API </h4>\n\nRole REST API中的所有端点都从通用PersistedModel REST API继承.为方便起见,此处提供了参考.\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/roles</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add role instance</a> and persist to data source.</p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/roles</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of roles that match specified filter.</td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert role instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find role by ID</a>: Return data for the specified role instance ID.</td>\n      <td><em>id</em>, the role instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified role ID and persist.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete role</a> with specified instance ID.</td>\n      <td><em>id</em>, role ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified role ID exists.</p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of role instances</a>&nbsp;that matches specified where clause.</p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/roles/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first role instance</a> that matches specified filter.</p>\n      </td>\n      <td>Same as&nbsp;<a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2.5.7\"> 2.5.7 User REST API </h4>\n\n下面表格中的所有端点都继承自PersistedModel REST API,但以下情况除外：\n\n* Log in user - `POST /users/login`\n* Log out user - `POST /users/logout`\n* Confirm email address - `GET /users/confirm`\n* Reset password - `POST /users/reset`\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>URI Pattern</th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th style=\"width:300px;\">Arguments</th>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add user instance</a> and persist to data source. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.</p>\n      </td>\n      <td>\n        <p>JSON object (in request body) providing <a href=\"http://apidocs.strongloop.com/loopback/#user\" class=\"external-link\" rel=\"nofollow\">User object properties</a>: <code>username</code>, <code>password</code>, <code>email</code>. LoopBack sets values for <code>emailVerified</code> and <code>verificationToken</code>.</p>\n        <p>NOTE: A value for <code>username</code> is not required, but a value for <code>email</code> is. LoopBack validates a unique value for <code>password</code> is provided. LoopBack does not automatically maintain values of the <code>created</code> and <code>lastUpdated</code> properties; you can set them manually if you wish.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a> of users that match specified filter. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert user instance</a> and persist to data source. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>JSON object (in request body)</p>\n        <p>Same as for <code>POST /users</code></p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find user by ID</a>: Return data for the specified user ID. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td><em>id</em>, the user ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update user attributes</a> for specified user ID and persist. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete user</a> with specified instance ID. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td><em>id</em>, user ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>Returns access token for specified user ID.</td>\n      <td>\n        <ul>\n          <li><em>id</em>, user ID, in URI path</li>\n          <li>where in query parameters</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>POST</td>\n      <td>Deny</td>\n      <td>Create access token for specified user ID.</td>\n      <td>\n        <p><em>id</em>, user ID, in URI path</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td>Delete access token for specified user ID.</td>\n      <td>\n        <p><em>id</em>, user ID, in URI path</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/confirm</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"#confirm-email-address\">Confirm email address</a> for specified user.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>uid</li>\n          <li>token</li>\n          <li>redirect</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-count\" class=\"external-link\" rel=\"nofollow\">Return number of user instances</a>&nbsp;that match specified where clause. Inherited from <a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\"Where\" filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p>Check instance existence: Return true if specified user ID exists. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>users</em> - Model name</li>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p>Find first user instance that matches specified filter. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\n      <p>One or more filters in query parameters:</p>\n      <ul>\n        <li>where</li>\n        <li>include</li>\n        <li>order</li>\n        <li>limit</li>\n        <li>skip / offset</li>\n        <li>fields</li>\n      </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/login[?include=user]</code></td>\n      <td>\n        <p>POST</p>\n      </td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"#log-in-user\">Log in</a> the specified user.</p>\n      </td>\n      <td>\n        <p>Username and password in POST body.</p>\n        <p>If query parameter is <code>include=user</code>, then returns the user object.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>/users/logout</code>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td><a href=\"#log-out-user\">Log out</a> the specified user.</td>\n      <td>Access token in POST body.</td>\n    </tr>\n    <tr>\n      <td><code>/users/reset</code></td>\n      <td>POST</td>\n      <td>&nbsp;</td>\n      <td><a href=\"#reset-password\">Reset password</a> for the specified user.</td>\n      <td>In POST body</td>\n    </tr>\n  </tbody>\n</table>\n\n##### Log in user\n\n`POST /users/login`\n\n您必须在请求正文中提供用户名或电子邮件以及密码.为了确保这些值被加密,请将它们作为正文的一部分,并确保通过HTTPS提供应用程序.\n\n您还可以通过提供具有秒值的ttl(存活时间)属性来指定访问令牌有效的有效期.\n\n例子:\n\n**Request URL**: POST  http://localhost:3000/users/login\n\n**Request body**: \n\n```json\n{ \"email\": \"foo@bar.com\", \"password\": \"bar\", \"ttl\": 86400 }\n```\n\n**Response status code**: 200\n\n**Response body**: \n\n```json\n{ \n  \"id\": \"PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE\", \n  \"ttl\": 86400,\n  \"created\": \"2014-12-23T08:31:33.464Z\",\n  \"userId\": 1\n}\n```\n\n用户会话的访问令牌存储在在响应的id键中.它必须在查询参数`access_token`中为需要用户登录的所有API指定,例如:\n\n`http://localhost:3000/api/Users/logout?access_token=PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE`\n\n##### Log out user\n\n`POST /users/logout`\n\n例子:\n\n**Request URL**: `POST  http://localhost:3000/api/Users/logout?access_token=PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE`\n\n**Response status code**: 204\n\n##### 确认邮件地址\n\n要求用户在登录前验证其电子邮件地址,这将向用户发送一封电子邮件,其中包含用于验证其地址的链接.一旦用户点击链接,他们将被重定向到web根(\"/\"),并将能够正常登录.\n\n`GET /users/confirm`\n\n参数:\n\nQuery parameters:\n\n* uid\n* token\n* redirect\n\n返回值:\n\nIf token invalid: HTTP 400\n\nIf user not found: HTTP 404\n\nIf successful: HTTP 204\n\n##### 重置密码\n\n`POST /users/reset`\n\n参数:\n\nPOST payload:\n\n```json\n{\n  \"email\": \"foo@bar.com\"\n  ...\n}\n```\n\nReturn value\n\n`200 OK`\n\n您必须处理\"resetPasswordRequest\"事件才能向正确的用户发送包含访问令牌的重置电子邮件.\n\n下面的示例显示了如何获取用户可以用来重置密码的访问令牌:\n\n**common/models/user.js**\n\n```javascript\nUser.on('resetPasswordRequest', function (info) {\n  console.log(info.email); // the email of the requested user\n  console.log(info.accessToken.id); // the temp access token to allow password reset\n\n  // requires AccessToken.belongsTo(User)\n  info.accessToken.user(function (err, user) {\n    console.log(user); // the actual user\n  });\n});\n```\n\n---\n\n<h4 id=\"3\"> 3. 将Model连接到数据源 </h4>\n\n##### 概要\n\n![dsModel](img/dsModel.jpg)\n\nLoopBack模型通过提供创建,检索,更新和删除(CRUD)功能的数据源连接到后端系统,如数据库.LoopBack还将其他后端服务(例如REST API,SOAP Web服务和存储服务等)概括为数据源.\n\n数据源由使用数据库驱动程序或其他客户端API实现数据交换逻辑的连接器支持.一般来说,应用程序不直接使用连接器,而是使用DataSource和PersistedModel API访问数据源.\n\n##### 基础步骤\n\n1. 使用`data source generator`创建新数据源.\n   \n   例如:\n   \n   ```bash\n   $ slc loopback:datasource\n   ? Enter the data-source name: mysql-corp\n   ? Select the connector for mysql: MySQL (supported by StrongLoop)\n   ```\n   按照提示命名数据源并选择要使用的连接器.这将新数据源添加到datasources.json中.\n2. 编辑`server/datasources.json`以添加必要的身份验证凭据:通常为主机名,用户名,密码和数据库名称.\n\n   例如:\n   \n   **server/datasources.json**\n   \n   ```json\n   \"mysql-corp\": {\n   \"name\": \"mysql-corp\",\n   \"connector\": \"mysql\",\n   \"host\": \"your-mysql-server.foo.com\",\n   \"user\": \"db-username\",\n   \"password\": \"db-password\",\n   \"database\": \"your-db-name\"\n  }\n  ```\n3. 使用npm安装连接器\n  \n  例如:\n  \n  ```bash\n  $ cd <your-app>\n  $ npm install --save loopback-connector-mysql\n  ```\n4. 使用model generator创建model\n  \n   ```bash\n   $ slc loopback:model\n   ? Enter the model name: myModel\n   ? Select the data-source to attach myModel to: mysql (mysql)\n   ? Select model's base class: PersistedModel\n   ? Expose myModel via the REST API? Yes\n   ? Custom plural form (used to build REST URL):\n   Let's add some test2 properties now.\n   ```\n\n##### 连接器\n\n下表列出了商业支持的LoopBack连接器.\n\n<table>\n  <thead>\n    <tr>\n      <td colspan=\"3\" data-highlight-colour=\"red\" style=\"text-align: center;\"><strong>Database connectors</strong></td>\n    </tr>\n    <tr>\n      <th style=\"text-align: center;\">Connector</th>\n      <th>Module</th>\n      <th>Installation</th>\n    </tr>\n    <tr>\n      <td><a href=\"https://cloudant.com/\" class=\"external-link\" rel=\"nofollow\">IBM Cloudant</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-cloudant\" class=\"external-link\" rel=\"nofollow\">loopback-connector-cloudant</a></td>\n      <td><code>npm install --save loopback-connector-cloudant</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"http://www.ibm.com/analytics/us/en/technology/cloud-data-services/dashdb/\" class=\"external-link\" rel=\"nofollow\">IBM DashDB</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-dashdb\" class=\"external-link\" rel=\"nofollow\">loopback-connector-dashdb</a></td>\n      <td><code>npm install --save loopback-connector-dashdb</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"http://www.ibm.com/analytics/us/en/technology/db2/\" class=\"external-link\" rel=\"nofollow\">IBM DB2</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-db2z\" class=\"external-link\" rel=\"nofollow\">loopback-connector-db2</a></td>\n      <td><code>npm install --save loopback-connector-db2</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www-01.ibm.com/software/data/db2/zos/family/\" class=\"external-link\" rel=\"nofollow\">IBM DB2 for z/OS</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-db2z\" class=\"external-link\" rel=\"nofollow\">loopback-connector-db2z</a></td>\n      <td><code>npm install --save loopback-connector-db2z</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www-01.ibm.com/software/data/informix/\" class=\"external-link\" rel=\"nofollow\">IBM Informix</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-informix\" class=\"external-link\" rel=\"nofollow\">loopback-connector-informix</a></td>\n      <td><code>npm&nbsp;install&nbsp;loopback-connector-informix&nbsp;--save</code></td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"Memory-connector.html\">Memory connector</a></td>\n      <td>Built in to LoopBack</td>\n      <td>Not required; suitable for development and debugging only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"MongoDB-connector.html\">MongoDB</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mongodb\" class=\"external-link\" rel=\"nofollow\">loopback-connector-mongodb</a></td>\n      <td><code>npm install --save loopback-connector-mongodb</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"MySQL-connector.html\">MySQL</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mysql\" class=\"external-link\" rel=\"nofollow\">loopback-connector-mysql</a></td>\n      <td><code>npm install --save loopback-connector-mysql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Oracle-connector.html\">Oracle</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-oracle\" class=\"external-link\" rel=\"nofollow\">loopback-connector-oracle</a></td>\n      <td><code>npm install --save loopback-connector-oracle</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"PostgreSQL-connector.html\">PostgreSQL</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mysql\" class=\"external-link\" rel=\"nofollow\">loopback-connector-postgresql</a></td>\n      <td><code>npm install --save loopback-connector-postgresql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"SQL-Server-connector.html\">SQL Server</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mssql\" class=\"external-link\" rel=\"nofollow\">loopback-connector-mssql</a></td>\n      <td><code>npm install --save loopback-connector-mssql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.sqlite.org/\" class=\"external-link\" rel=\"nofollow\">SQLite 3.x</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-sqlite3\" class=\"external-link\" rel=\"nofollow\">loopback-connector-sqlite3</a></td>\n      <td><code>npm install --save loopback-connector-sqlite3</code></td>\n    </tr>\n    <tr>\n      <td colspan=\"3\"><strong>Other connectors</strong></td>\n    </tr>\n    <tr>\n      <td><a href=\"Email-connector.html\">Email connector</a></td>\n      <td>Built in to LoopBack</td>\n      <td>\n        <p>Not required</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"Push-connector.html\">Push connector</a>  </td>\n      <td><a href=\"https://github.com/strongloop/loopback-component-push\" class=\"external-link\" rel=\"nofollow\">loopback-component-push</a></td>\n      <td><code>npm install --save loopback-component-push</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Remote-connector.html\">Remote connector</a></td>\n      <td><a href=\"https://github.com/strongloop/loopback-connector-remote\" class=\"external-link\" rel=\"nofollow\">loopback-connector-remote</a></td>\n      <td><code>npm install --save loopback-connector-remote</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"REST-connector.html\">REST</a></td>\n      <td><a href=\"http://github.com/strongloop/loopback-connector-rest\" class=\"external-link\" rel=\"nofollow\">loopback-connector-rest</a></td>\n      <td><code>npm install --save loopback-connector-rest</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"SOAP-connector.html\">SOAP</a></td>\n      <td><a href=\"http://github.com/strongloop/loopback-connector-soap\" class=\"external-link\" rel=\"nofollow\">loopback-connector-soap</a></td>\n      <td><code>npm install --save loopback-connector-soap</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Storage-connector.html\">Storage connector</a></td>\n      <td><a href=\"https://github.com/strongloop/loopback-component-storage\" class=\"external-link\" rel=\"nofollow\">loopback-component-storage</a>    </td>\n      <td><code>npm install --save loopback-component-storage</code></td>\n    </tr>\n  </tbody>\n</table>\n\n##### 安装连接器\n\n在你的应用程序根目录运行`npm install --save <_connector-module_>` ,然后它会把相关依赖保存到`package.json`文件中,例如安装Oracle database connector:\n\n```bash\n$ cd <your-app>\n$ npm install --save loopback-connector-oracle\n```\n\n**package.json**\n\n```json\n...\n\"dependencies\": {\n  \"loopback-connector-oracle\": \"latest\"\n}\n...\n```\n\n##### 创建数据源\n\n使用`data source generator`创建数据源.\n\n数据源属性:\n\n数据源属性取决于所使用的特定数据源.但是,数据库连接器(Oracle,MySQL,PostgreSQL,MongoDB等)的数据源共享一组公用属性,如下表所述:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>connector</td>\n      <td>String</td>\n      <td>\n        <p>Connector name; for example:</p>\n        <ul>\n          <li>\"memory\"</li>\n          <li>\"loopback-connector-mongodb\" or \"mongodb\"</li>\n          <li>\"loopback-connector-mysql\" or \"mysql\"</li>\n          <li>\"loopback-connector-oracle\" or \"oracle\"</li>\n          <li>\"loopback-connector-postgresql\" or \"postgresql\"</li>\n          <li>\"loopback-connector-rest\" or \"rest\"</li>\n          <li>\"loopback-connector-mssql\" or \"mssql\"</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>database</td>\n      <td>String</td>\n      <td>Database name</td>\n    </tr>\n    <tr>\n      <td>debug</td>\n      <td>Boolean</td>\n      <td>If true, turn on verbose mode to debug database queries and lifecycle.</td>\n    </tr>\n    <tr>\n      <td>host</td>\n      <td>String</td>\n      <td>Database host name</td>\n    </tr>\n    <tr>\n      <td>password</td>\n      <td>String</td>\n      <td>Password to connect to database</td>\n    </tr>\n    <tr>\n      <td>port</td>\n      <td>Number</td>\n      <td>Database TCP port</td>\n    </tr>\n    <tr>\n      <td>url</td>\n      <td>String</td>\n      <td>\n        <p>Combines and overrides <code>host</code>,&nbsp;<code>port</code>,&nbsp;<code>user</code>,&nbsp;<code>password</code>, and&nbsp;<code>database</code>&nbsp;properties.</p>\n        <p>Only valid with <a href=\"MongoDB-connector.html\">MongoDB connector</a>, <a href=\"PostgreSQL-connector.html\">PostgreSQL connector</a>, and <a href=\"SQL-Server-connector.html\">SQL Server connector</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>username</td>\n      <td>String</td>\n      <td>Username to connect to database</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"3.1\"> 3.1 从Model创建数据库schema </h4>\n\nLoopBack _auto-migration_根据应用程序的模型创建数据库模式.在关系数据库中,auto-migration为每个模型创建一个表,并为模型中的每个属性在表中创建一个列.auto-migration为附加到数据源的所有模型创建表,包括内置模型.\n\n一旦定义了模型,如果需要调整数据库以匹配模型,LoopBack可以相应地创建或更新(同步0数据库模式. LoopBack提供了两种方法来将模型定义与表模式同步:\n\n* **Auto-migrate**: 基于模型定义自动创建或重新创建表模式. \n\n* **Auto-update**: 根据模型定义自动更改表模式.\n\n>  警告:如果现有表的名称与模型名称匹配,Auto-migration将删除现有表.当表里有数据时,请使用自动更新以避免数据丢失.\n\n##### Auto-migrate\n\n下面的数据源支持auto-migration:\n\n* Oracle\n* PostgreSQL\n* MySQL\n* SQL Server\n* MongoDB\n\n下面是个auto-migration的例子.\n\n**/common/models/model.js**\n\n```javascript\nvar schema_v1 = {\n  \"name\": \"CustomerTest\",\n  \"options\": {\n    \"idInjection\": false,\n    \"oracle\": {\n      \"schema\": \"LOOPBACK\",\n      \"table\": \"CUSTOMER_TEST\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"type\": \"String\",\n      \"length\": 20,\n      \"id\": 1\n    },\n    \"name\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 40\n    },\n    \"email\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 40\n    },\n    \"age\": {\n      \"type\": \"Number\",\n      \"required\": false\n    }\n  }\n};\n```\n\n假设模型在Oracle数据库中没有相应的表,您可以使用autoMigrate()创建相应的模式对象以反映模型定义.\n\n**/common/models/model.js**\n\n```javascript\nvar ds = Model.app.dataSources.oracle;\n\nds.createModel(schema_v1.name, schema_v1.properties, schema_v1.options);\n\nds.automigrate(function () {\n  ds.discoverModelProperties('CUSTOMER_TEST', function (err, props) {\n    console.log(props);\n  });\n});\n```\n\n上面的代码将在oracle数据库中创建如下对象:\n\n* A table CUSTOMER_TEST.\n* A sequence CUSTOMER_TEST_ID_SEQUENCE for keeping sequential IDs.\n* A trigger CUSTOMER_ID_TRIGGER that sets values for the primary key.\n\n现在假设你打算对你的model做一些改变.下面是它的代码:\n\n**/common/models/model.js**\n\n```javascript\nvar schema_v2 = {\n  \"name\": \"CustomerTest\",\n  \"options\": {\n    \"idInjection\": false,\n    \"oracle\": {\n      \"schema\": \"LOOPBACK\",\n      \"table\": \"CUSTOMER_TEST\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"type\": \"String\",\n      \"length\": 20,\n      \"id\": 1\n    },\n    \"email\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 60,\n      \"oracle\": {\n        \"columnName\": \"EMAIL\",\n        \"dataType\": \"VARCHAR\",\n        \"dataLength\": 60,\n        \"nullable\": \"Y\"\n      }\n    },\n    \"firstName\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 40\n    },\n    \"lastName\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 40\n    }\n  }\n}\n```\n\n##### MongoDB indexes\n\n运行autoMigrate()创建缺少的索引,但是如果它们的定义更改,则autoMigrate()不会修改它们.如果模型的索引定义更改,您必须通过MongoDB shell修改它们,或删除它们并重新创建它们.有关详细信息请参阅MongoDB文档.\n\n##### Auto-update\n\n如果数据库中存在现有表,则运行autoMigrate()将删除并重新创建表.这意味着数据将丢失.要避免此问题,请使用auto-update(). autoupdate()计算LoopBack模型和数据库表定义之间的差异,并相应地更改表,而不是删除表并重新创建它们.这样,只要属性未从模型中删除.列数据就会保留.\n\n例如:\n\n**/server/script.js**\n\n```javascript\nds.createModel(schema_v2.name, schema_v2.properties, schema_v2.options);\nds.autoupdate(schema_v2.name, function (err, result) {\n  ds.discoverModelProperties('CUSTOMER_TEST', function (err, props) {\n    console.log(props);\n  });\n});\n```\n\n要检查是否需要数据库更改,请使用isActual()方法.它接受一个回调参数,该参数根据数据库状态接收一个布尔值:\n\n* 如果数据库结构过时则为False\n* 数据源和数据库同步时为True\n\n**/server/script.js**\n\n```javascript\ndataSource.isActual(models, function(err, actual) {\n  if (!actual) {\n    dataSource.autoupdate(models, function(err, result) {\n      // ...\n    });\n  }\n});\n```\n\n---\n\n<h4 id=\"3.2\"> 3.2 理解数据源 </h4>\n\n![dsIntr](img/dsIntr.jpg)\n\n##### 概述\n\n上图说明了LoopBack模型,DataSource和连接器之间的关系.\n\n1. 定义模型.\n\n2. 创建ModelBuilder或DataSource的实例.DataSource从ModelBuilder扩展.ModelBuilder负责将模型定义编译为表示模型类的JavaScript构造函数.DataSource从ModelBuilder继承该函数.\n\n3. 使用ModelBuilder或DataSource从模型定义构建一个JavaScript构造函数(即模型类).从ModelBuilder构建的模型类可以稍后附加到DataSource,以接收混合的数据访问函数.\n\n4. 作为步骤2的一部分,DataSource使用设置对象初始化底层连接器,该对象为连接器实例提供配置.连接器与DataSource协作将函数定义为要混合到模型类中的DataAccessObject.DataAccessObject包括静态和原型方法的列表.它可以根据连接器的功能实现创建,检索,更新和删除操作或其他特定功能.\n\nDataSource对象是LoopBack应用程序与后端系统集成的统一接口.它是围绕模型类的数据访问逻辑的工厂.通过各种连接器的能力,DataSource提供了与数据库或服务交互的必要抽象,以将业务逻辑与管道技术分离.\n\n##### 以编程方式创建DataSource\n\n`DataSource constructor`接受下面的参数:\n\n* **name**: Optional name of the data source instance being created. \n\n* **settings**: An object of properties to configure the connector. Must include a connector property, specifying the connector to use. See Connecting models to data sources (Connectors).\n\n例如:\n\n```javascript\nvar DataSource = require('loopback-datasource-juggler').DataSource;\n\nvar dataSource = new DataSource({\n    connector: require('loopback-connector-mongodb'),\n    host: 'localhost',\n    port: 27017,\n    database: 'mydb'\n});\n```\n\n传递给DataSource构造函数的连接器参数可以是以下之一:\n\n* The connector module from require(connectorName)\n* The full name of the connector module, such as ‘loopback-connector-oracle’\n* The short name of the connector module, such as ‘oracle’, which will be converted to ‘loopback-connector-‘\n* A local module under ./connectors/ folder\n\n```javascript\nvar ds1 = new DataSource('memory');\nvar ds2 = new DataSource('loopback-connector-mongodb'));\nvar ds3 = new DataSource(require('loopback-connector-oracle'));\n```\n\nLoopBack提供了内置内存连接器,它使用内存存储来进行创建,检索,更新和删除操作.\n\n`Settings`参数用来配置连接器.`Settings`对象的格式和默认值取决于特定连接器,但常用字段包括:\n\n* host: Database host\n* port: Database port\n* username: Username to connect to database\n* password: Password to connect to database\n* database: Database name\n* debug: Turn on verbose mode to debug db queries and lifecycle\n\n##### 从数据源创建model\n\nDataSource从ModelBuilder扩展,ModelBuilder是一个只有属性的纯模型类的工厂.DataSource使用Connector连接到数据库和其他后端系统.\n\n```javascript\nvar DataSource = require('loopback-datasource-juggler').DataSource;\nvar ds = new DataSource('memory');\n\nvar User = ds.define('User', {\n  name: String,\n  bio: String,\n  approved: Boolean,\n  joinedAt: Date,\n  age: Number\n});\n```\n\n单个数据源中的所有模型类共享相同的连接器类型和一个数据库连接或连接池.但是可以使用多个数据源连接到不同的数据库.\n\n或者，您可以将从ModelBuilder创建的plain model构造函数附加到DataSource.\n\n```javascript\nvar ModelBuilder = require('loopback-datasource-juggler').ModelBuilder;\nvar builder = new ModelBuilder();\n\nvar User = builder.define('User', {\n  name: String,\n  bio: String,\n  approved: Boolean,\n  joinedAt: Date,\n  age: Number\n});\n\nvar DataSource = require('loopback-datasource-juggler').DataSource;\nvar ds = new DataSource('memory');\n\nUser.attachTo(ds); // The create, retrieve, update, and delete\n                   // methods will be mixed into the User constructor\n```\n\n##### 为连接器创建数据源\n\n应用程序代码不直接使用连接器.相反,您可以创建一个DataSource来与连接器交互.\n\n下面是个使用内存连接器的例子:\n\n```javascript\nvar memory = loopback.createDataSource({\n  connector: loopback.Memory\n});\n```\n\n下面是使用oracle连接器的例子:\n\n```javascript\nvar DataSource = require('loopback-datasource-juggler').DataSource;\nvar oracleConnector = require('loopback-connector-oracle');\n\nvar ds = new DataSource(oracleConnector, {\n  host: 'localhost',\n  database: 'XE',\n  username: 'username',\n  password: 'password',\n  debug: true\n});\n```\n\n传递给DataSource构造函数的连接器参数可以是以下之一:\n\n* The connector module from require('connectorName')\n* The full name of the connector module, such as 'loopback-connector-oracle'.\n* The short name of the connector module, such as 'oracle', that LoopBack converts to 'loopback-connector-oracle' (for example).\n* A local module in the /connectors folder\n\n##### 初始化连接器\n\n连接器模块可以导出为初始化函数,这个初始化函数可供拥有DataSource的实例调用.\n\n```javascript\nexports.initialize = function (dataSource, postInit) {\n\n  var settings = dataSource.settings || {};   // The settings is passed in from the dataSource\n\n  var connector = new MyConnector(settings);  // Construct the connector instance\n  dataSource.connector = connector;           // Attach connector to dataSource\n  connector.dataSource = dataSource;          // Hold a reference to dataSource\n  // ...\n};\n```\n\nDataSource使用自身和一个可选的`postInit`回调函数作为参数来调用`initialize`方法.连接器从`dataSource(自身)`参数接收设置,并使用它配置与后端系统的连接.\n\n请注意connector和dataSource设置了对方的引用(_译注:相互引用_).\n\n初始化时,连接器可能会自动连接到数据库.一旦连接建立,dataSource对象发出'connected'事件,并设置`connected`标志为true，但没有必要等待'connected'事件,因为所有的查询缓存和执行时会在收到dataSource的'connected'事件后自动执行.\n\n要断开与数据库服务器的连接,请调用dataSource.disconnect方法.如果连接器具有连接/断开连接的能力，则此调用将转发到连接器.\n\n---\n\n<h4 id=\"3.3\"> 3.3 使用数据库事务 </h4>\n\n##### 概要\n\n事务是单个逻辑工作单元执行的数据操作序列.许多关系数据库支持事务以帮助实现数据一致性和业务逻辑需求.\n\n当模型连接到以下连接器之一时,LoopBack模型可以在事务中执行操作.\n\n* MySQL connector (IMPORTANT: Only with InnoDB as the storage engine).\n* PostgreSQL connector\n* SQL Server connector\n* Oracle connector\n\n##### 事务API\n\n在事务中执行操作通常包括以下步骤:\n\n* Start a new transaction.\n* Perform create, read, update, and delete operations in the transaction.\n* Commit or rollback the transaction.\n\n##### Start transaction\n\n使用`beginTransaction`方法来开始一个事务.\n\n例如, for a Post model:\n\n```javascript\nPost.beginTransaction({isolationLevel: Post.Transaction.READ_COMMITTED}, function(err, tx) {\n  // Now we have a transaction (tx)\n});\n```\n\n_Isolation levels_\n\n调用beginTransaction()时可以选择指定事务隔离级别.LoopBack事务支持以下隔离级别:\n\n* Transaction.READ_UNCOMMITTED\n* Transaction.READ_COMMITTED (default)\n* Transaction.REPEATABLE_READ\n* Transaction.SERIALIZABLE\n\n如果你没指定,则默认的事务隔离级别是`READ_COMMITTED`.\n\n>  提示: Oracle only supports READ_COMMITTED and SERIALIZABLE\n\n##### Perform operations in a transaction\n\n在事务中执行创建,检索,更新和删除操作.将由事务对象组成的第二个参数添加到标准的create(),upsert(),destroyAll()等方法.\n\n例如,again assuming a Post model:\n\n```javascript\nPost.create({title: 't1', content: 'c1'}, {transaction: tx}, function(err, post) {\n  post.updateAttributes({content: 'c2', {transaction: tx}, function(err, newPost) {\n    //\n    newPost.reviews.create({content: 'r1'}, {transaction: tx}, function(err, newPost) {\n    });\n  }\n});\n```\n\n##### Commit or rollback\n\nCommit the transaction:\n\n```javascript\ntransaction.commit(function(err) {\n});\n```\n\nOr to rollback the transaction:\n\n```javascript\ntransaction.rollback(function(err) {\n});\n```\n\nPlease note all three APIs support the Promise flavor. See an example at [https://github.com/strongloop/loopback-connector-mysql/blob/master/test/transaction.promise.test.js](https://github.com/strongloop/loopback-connector-mysql/blob/master/test/transaction.promise.test.js).\n\n##### Set up timeout\n\n您可以指定事务的超时时间(以毫秒为单位).如果事务在超时之前未完成(提交或回滚),则默认情况下会在超时后自动回滚.可以使用timeout hook捕获超时事件.\n\nFor example, again assuming a Post model:\n\n```javascript\nPost.beginTransaction({\n    isolationLevel: Transaction.READ_COMMITTED,\n    timeout: 30000 // 30000ms = 30s\n  }, function(err, tx) {\n    tx.observe('timeout', function(context, next) {\n      // handle timeout\n      next();\n    });\n});\n```\n\n##### 传播事务\n\n传播事务是指显示的为CRUD和relation methods的options参数传递一个transaction对象.\n\nFor example, again assuming a Post model:\n\n```javascript\nvar options = {transaction: tx};\nPost.create({title: 't1', content: 'c1'}, options, function(err, post) {\n  post.updateAttributes({content: 'c2', options, function(err, newPost) {\n    //\n    newPost.reviews.create({content: 'r1'}, options, function(err, newPost) {\n    });\n  }\n});\n```\n\n##### Set up transaction hooks\n\n事务有四种(_译注:眼瞅着是5种_)类型的可观察事件:\n\n* before commit\n* after commit\n* before rollback\n* after rollback\n* timeout\n\n```javascript\ntx.observe('before commit', function(context, next) {\n  // ...\n  next();\n});\n\ntx.observe('after commit', function(context, next) {\n  // ...\n  next();\n});\n\ntx.observe('before rollback', function(context, next) {\n  // ...\n  next();\n});\n\ntx.observe('after rollback', function(context, next) {\n  // ...\n  next();\n});\n```\n\n##### 避免长时间等待或死锁\n\n请注意,具有特定隔离级别的事务将锁定数据库对象.在事务内异步执行多个方法具有阻止其他事务(显式或隐式)的巨大可能性.为了避免长时间等待甚至死锁，您应该:\n\n* 让事务尽可能短暂.\n* 不要在多个事务中序列化方法的执行.\n\n---\n\n<h4 id=\"3.4\"> 3.4 执行本地SQL </h4>\n\n>  警告:此功能尚未完全测试,并且未正式支持,API可能会在将来的版本中更改.\n\nTo execute SQL directly against your data-connected model, use the following:\n\n```javascript\ndataSource.connector.execute(_sql_, _params_, _cb_);\n```\n\nor\n\n```javascript\ndataSource.connector.query(_sql_, _params_, _cb_); // For 1.x connectors\n```\n\nWhere:\n\n* sql - The SQL string.\n* params - parameters to the SQL statement.\n* cb - callback function\n\n---\n\n<h4 id=\"3.5\"> 3.5 构建连接器 </h4>\n\n##### 概述\n\n本文适用于想要创建新连接器类型以连接到当前不支持的数据源的开发人员.它将引导您完成MySQL连接器的实施,以教您如何为关系数据库开发连接器.但是,许多概念也适用于创建到其他类型的数据源的连接器\n\n___译注:iworks暂时用不到这里,暂时先不翻译了___\n\n---\n\n<h4 id=\"4\"> 4. 使用数据 </h4>\n\n一旦定义了模型,就可以使用创建,读取,更新和删除(CRUD)操作向模型添加数据,处理数据并进行查询. 所有连接到持久性数据存储(如数据库)的LoopBack模型都会自动拥有PersistedModel类的创建,检索,更新和删除操作.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>REST</th>\n      <th>LoopBack model method<br>(Node API)*</th>\n      <th>Corresponding SQL<br>Operation</th>\n    </tr>\n    <tr>\n      <td>Create</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">PUT /<em>modelName</em></a></p>\n        <p><a href=\"PersistedModel-REST-API.html#update--insert-instance\">POST /<em>modelName</em></a></p>\n      </td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-create\" class=\"external-link\" rel=\"nofollow\">create()</a><sup>*</sup></code></td>\n      <td>INSERT</td>\n    </tr>\n    <tr>\n      <td>Read (Retrieve)</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">GET /modelName?filter=...</a></td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-find\" class=\"external-link\" rel=\"nofollow\">find()</a><sup>*</sup></code></td>\n      <td>SELECT</td>\n    </tr>\n    <tr>\n      <td>Update (Modify)</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#update--insert-instance\">POST /<em>modelName</em></a>&nbsp;</p>\n        <p><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">PUT /modelName</a></p>\n      </td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-updateall\" class=\"external-link\" rel=\"nofollow\">updateAll()</a><sup>*</sup></code></td>\n      <td>UPDATE</td>\n    </tr>\n    <tr>\n      <td>Delete (Destroy)</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">DELETE /<em>modelName</em>/<em>modelID</em></a></td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid\" class=\"external-link\" rel=\"nofollow\">destroyById()</a><sup>*</sup></code></td>\n      <td>DELETE</td>\n    </tr>\n  </tbody>\n</table>\n\n(*)列出的方法只是比较常用的例子,其他方法也可以提供类似的功能.例如:findById(),findOne()和findOrCreate().有关更多信息,请参阅PersistedModel API文档.\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API.\n\n---\n\n<h4 id=\"4.1\"> 4.1 创建,更新和删除数据 </h4>\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\nPersistedModel有一套方法用于创建,更新和删除数据.\n\n模型数据也称为模型实例.在数据库术语中,从概念上理解,模型对应于表,并且模型实例对应于表中的行或记录.\n\n##### Creating data (model instances)\n\n使用以下PersistedModel方法添加数据,即插入或创建实例:\n\n* [create](http://apidocs.strongloop.com/loopback/#persistedmodel-create) - 创建一个新的模型实例(记录).\n\n* [upsert](http://apidocs.strongloop.com/loopback/#persistedmodel-upsert) - 根据指定的[ID property](http://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#id-properties)属性检查实例(记录)是否存在,该属性必须具有唯一值.如果实例已存在,则方法将更新该实例.否则,它插入一个新实例.\n\n* [findOrCreate](http://apidocs.strongloop.com/loopback/#persistedmodel-findorcreate) - 查找与第一个参数提供的过滤器对象匹配的一个实例.如果找到,则返回对象.如果未找到,则创建一个新实例(记录).\n\n    >  重要: 请确保在过滤器对象中包含where子句.没有where,findOrCreate会查找并返回集合中的第一条记录,这可能导致意外的行为.\n\n* [save](http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-save) - 保存模型实例.如果实例没有ID,则调用[create](http://apidocs.strongloop.com/loopback/#persistedmodel-create).触发器:验证,保存,更新或创建.\n\n##### Updating data (model instances)\n\n静态方法(在Model对象上调用):\n\n* [updateAll](http://apidocs.strongloop.com/loopback/#persistedmodel-updateall) - 更新与指定的where子句匹配的多个实例(记录)[where clause](http://loopback.io/doc/en/lb3/Where-filter.html). \n\n>  要点: 与updateAll()一起使用的where子句与查询的where子句略有不同.从where子句中省略{where：...},只需提供条件作为第一个参数.有关详细信息，请参阅[where clause](http://loopback.io/doc/en/lb3/Where-filter.html)\n\n实例方法(在单个模型实例上调用):\n\n* [updateAttribute](http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattribute) - 更新单个属性(property).\n\n* [updateAttributes](http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattributes) - 更新属性集(properties).在更新前执行验证.\n\n##### Performing bulk updates(执行批量更新)\n\n* [createUpdates](http://apidocs.strongloop.com/loopback/#persistedmodel-createupdates)\n\n* [bulkUpdate](http://apidocs.strongloop.com/loopback/#persistedmodel-bulkupdate)\n\n##### Deleting data\n\n静态方法(在Model对象上调用):\n\n* [destroyAll](http://apidocs.strongloop.com/loopback/#persistedmodel-destroyall) - 删除与可选Where过滤器匹配的所有模型实例[Where filter](http://loopback.io/doc/en/lb3/Where-filter.html).\n\n* [destroyById](http://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid) - 删除指定ID的模型实例.\n\n>  重要:destroyAll()的where子句与查询的where子句略有不同.从where子句中省略{where：...}.只需提供条件作为第一个参数\n\n浏览更多信息,请访问[Where filter](http://loopback.io/doc/en/lb3/Where-filter.html).\n\n---\n\n<h4 id=\"4.2\"> 4.2 查询数据 </h4>\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n##### 概述\n\n查询是对返回一组数据或结果的模型的读取操作.您可以使用过滤器,使用Node API和REST API查询LoopBack模型,如下表所示.过滤器指定返回的数据集的条件,两个API的功能和选项是相同的,唯一的区别是在HTTP请求中使用的语法与Node 函数调用.在这两种情况下,LoopBack模型都返回JSON.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Query</th>\n      <th>Model API (Node)</th>\n      <th>REST API</th>\n    </tr>\n    <tr>\n      <td>\n        <p>Find all model instances using specified filters.&nbsp;</p>\n        <p>&nbsp;</p>\n      </td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-find\" class=\"external-link\" rel=\"nofollow\">find(filter, callback)</a></code></p>\n        <p>Where filter is a JSON object containing the query filters.</p>\n        <p>See <a href=\"Querying-data.html\">Filters</a> below.</p>\n      </td>\n      <td>\n        <p> <code>GET /<em>modelName</em>?filter...</code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Model REST API - Find matching instances</a>.</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>Find first model instance using specified filters.</td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findone\" class=\"external-link\" rel=\"nofollow\">findOne(filter, callback)</a></code></p>\n        <p>Where filter is a JSON object containing the query filters.</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n      <td>\n        <p><code><span>GET /<em>modelName</em>/findOne?filter...</span></code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-first-instance\">Model REST API - Find first instance</a>.&nbsp;</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>Find instance by ID.</td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findbyid\" class=\"external-link\" rel=\"nofollow\">findById(id, [filter,] callback)</a></code></p>\n        <p>Where optional filter is a JSON object <span>containing the query filters.</span></p>\n        <p><span><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></span>\n        </p>\n      </td>\n      <td>\n        <p><code><span>GET /</span><em>modelName</em><span>/</span><em>modelID</em></code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Model REST API - Find instance by ID</a>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n>  重要:REST查询必须在URL查询字符串中包含字符串\"filter\".而Node API调用则在JSON中不包括字符串\"filter\".LoopBack API Explorer将\"过滤器\"添加到查询字符串,但必须在filter字段中输入[Stringified JSON](http://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries).还要确保您使用的引号是正确的直引号(“)(_译注:半角引号_),而不是弯曲或印刷引号(”或“).这些通常很难在视觉上区分.\n\nLoopBack支持以下几种过滤器:\n\n* Fields filter\n* Include filter\n* Limit filter\n* Order filter\n* Skip filter\n* Where filter\n\n使用带有where和limit限制过滤器的find()方法的示例:\n\n```javascript\nAccount.find({where: {name: 'John'}, limit: 3}, function(err, accounts) { /* ... */ });\n```\n\n用REST实现则是:\n\n`/accounts?filter[where][name]=John&filter[limit]=3`\n\n##### 过滤器(Filters)\n\n在REST和Node API中,您可以使用任意数量的过滤器来定义查询.\n\nLoopBack支持特定的过滤器语法:它很像SQL,但是专门用于安全地序列化,无需注入和本地JavaScript.以前，只有PersistedModel.find()方法(和相关方法)支持此语法.\n\n下表描述了LoopBack的过滤器类型:\n\n<table>\n  <thead>\n    <tr>\n      <th>Filter type</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>fields</td>\n      <td>Object, Array, or String</td>\n      <td>\n        <p>Specify fields to include in or exclude from the response.</p>\n        <p>See <a href=\"Fields-filter.html\">Fields filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>include</td>\n      <td>String, Object, or Array</td>\n      <td>\n        <p>Include results from related models, for relations such as&nbsp;<em>belongsTo</em>&nbsp;and&nbsp;<em>hasMany</em>.</p>\n        <p>See <a href=\"Include-filter.html\">Include filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>Number</td>\n      <td>\n        <p>Limit the number of instances to return.</p>\n        <p>See <a href=\"Limit-filter.html\">Limit filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>order</td>\n      <td>String</td>\n      <td>\n        <p>Specify sort order: ascending or descending.</p>\n        <p>See <a href=\"Order-filter.html\">Order filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>skip (offset)</td>\n      <td>Number</td>\n      <td>\n        <p>Skip the specified number of instances.</p>\n        <p>See <a href=\"Skip-filter.html\">Skip filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>where</td>\n      <td>Object</td>\n      <td>\n        <p>Specify search criteria; similar to a WHERE clause in SQL.</p>\n        <p>See <a href=\"Where-filter.html\">Where filter</a>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\nREST语法:\n\n`?filter_filterType_=_spec_&_filterType_=_spec_....`\n\n您可以应用于单个请求的过滤器数量仅受最大网址长度限制,后者通常取决于所使用的客户端.\n\n>  重要: 在查询字符串中?filter后没有等号.例如:http://localhost:3000/api/books?filter[where][id]=1\n\nNode语法:\n\n指定filters作为find()和findOne()的第一个参数: \n\n`{ filterType: spec, filterType: spec, ... }`\n\n您可以应用的过滤器数量理论上没有限制.\n\n* filterType是:where,include,order,limit,skip或fields.\n\n* spec是过滤器的规范:例如对于where过滤器,这是结果必须匹配的逻辑条件.对于include过滤器,它指定要包括的相关字段.\n\n##### 在REST查询中使用\"stringified\"JSON\n\n除了上述标准REST语法之外,您还可以在REST查询中使用\"stringified JSON\".为此,只需使用为Node语法指定的JSON,如下所示:\n\n`?filter={ Stringified-JSON }`\n\n其中Stringified-JSON是来自Node语法的字符串化JSON.但是在JSON中,所有keys/strings必须用引号(\")括起来.\n\n>  重要:当使用带字符的JSON时,必须在查询字符串中的?filter后使用等号.例如:http：// localhost：3000 / api / books？filter = {％22where％22：{％22id％22：2}}\n\n例如: `GET /api/activities/findOne?filter={\"where\":{\"id\":1234}}`\n\n#### 过滤对象数组\n\n[Loopback-filters](https://github.com/strongloop/loopback-filters)模块实现了LoopBack的过滤器语法.使用此模块,可以使用MyModel.find(filter)支持的相同语法过滤对象数组.\n\n>  提示:我们计划将所有模块转换为使用loopback-filter,所以它将成为LoopBack常见的内置过滤机制.\n\n下面是几个例子:\n\n```javascript\nvar data = [{n: 1}, {n: 2}, {n: 3, id: 123}];\nvar filter = {where: {n: {gt: 1}}, skip: 1, fields: ['n']};\nvar filtered = require('loopback-filters')(data, filter);\nconsole.log(filtered); // => [{n: 3}]\n```\n\n有关更多细节,假设您正在解析逗号分隔值的(CSV)文件,并且您需要输出价格在10到100之间的所有值.要使用LoopBack过滤器语法,您需要创建您自己的CSV连接器或使用内存连接器,这两者都需要一些额外的与您的实际目标无关的工作.\n\n解析CSV(使用像node-csv这样的模块)后,您将拥有一个类似这样的对象数组(例如,带有10,000个唯一项):\n\n```\n[\n  {price: 85, id: 79},\n  {price: 10, id: 380},\n  //...\n]\n```\n\n要过滤行,你可以使用类似这样的通用JavaScript:\n\n```javascript\ndata.filter(function(item) {\n  return item.price < 100 && item.price >= 10\n});\n```\n\n这对于过滤来说非常简单,但是排序,字段选择和更高级的操作则变得有点困难.除此之外,你通常还要接受参数作为输入.例如:\n\n```javascript\nvar userInput = {min: 10, max: 100}\n\ndata.filter(function(item) {\n  return item.price < userInput.min && item.price >= userInput.max\n});\n```\n\n上述代码用LoopBack filter重写是very easy的:\n\n`filter(data, {where: {input: {gt: userInput.min, lt: userInput.max}}})`\n\n或者,如果你只是采用过滤器对象语法作为用户输入:\n\n`filter(data, userInput)`\n\n但是`loopback-filters`支持的不仅仅是排除和包括.它还支持字段选择(包括/排除字段),排序,地理/距离排序,限制和跳过(_译注:原文如下(including / excluding fields), sorting, geo/distance sorting, limiting and skipping._).所有这些都是通过用户输入轻松创建的声明性语法.\n\n作为LoopBack用户,这是一个非常强大的东西.通常,您将学习如何使用find()过滤器语法编写一些复杂的查询.在这之前你需要弄清楚,如何在JavaScript中做同样的事情（可能使用一个库,如underscore）.现在使用`loopback-filters`模块,在您的客户端应用程序中,您可以重复使用您发送到服务器的,相同的过滤器对象来过滤数据库,而不必与LoopBack服务器进行任何交互.\n\n---\n\n<h4 id=\"4.2.1\"> 4.2.1 Fields filter </h4>\n\n_fields filter_指定要在结果中包括或排除的属性(字段).\n\n##### REST API\n\n`filter[fields][_propertyName_]=<true|false>&filter[fields][propertyName]=<true|false>...`\n\n请注意,要在REST中包含多个字段,请使用多个过滤器.\n\n您还可以在REST查询中使用stringified JSON format(_译注:看上一节_).\n\n##### Node API\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n`{ fields: {_propertyName_: <true|false>, _propertyName_: <true|false>, ... } }`\n\n其中:\n\n* _propertyName_ is the name of the property (field) to include or exclude.\n\n* Use _true_ to include the property or _false_ to exclude it from results.\n\n默认情况下,查询返回结果中的所有模型属性.但是,如果您指定至少一个值为true的字段过滤器,则默认情况下查询将只包括您特别指定要包含的过滤器字段.\n\n例子:\n\n只返回id, make, and model properties:\n\nREST\n\n`?filter[fields][id]=true&filter[fields][make]=true&filter[fields][model]=true`\n\nNode API\n\n`{ fields: {id: true, make: true, model: true} }`\n\n返回:\n\n```json\n[{\n    \"id\": \"1\",\n    \"make\": \"Nissan\",\n    \"model\": \"Titan\"\n  }, {\n    \"id\": \"2\",\n    \"make\": \"Nissan\",\n    \"model\": \"Avalon\"\n  },\n  ...\n]\n```\n\n排除vin属性的例子:\n\nREST\n\n`?filter[fields][vin]=false`\n\nNode API\n\n`{ fields: {vin: false} }`\n\n---\n\n<h4 id=\"4.2.2\"> 4.2.2 Include filter </h4>\n\n_ include filter_使您能够在查询中包括相关模型的结果,例如具有belongsTo或hasMany关系的模型.\n\ninclude filter的值可以是字符串,数组或对象.\n\n>  重要:You can use an include filter with find(), findOne() and findById().\n\n##### REST API\n\n`filter[include][relatedModel]=propertyName`\n\n您还可以在REST查询中使用stringified JSON format.\n\n##### Node API\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n```\n{include: 'relatedModel'}\n{include: ['relatedModel1', 'relatedModel2', ...]}\n{include: {relatedModel1: [{relatedModel2: 'relationName'} , 'relatedModel']}}\n```\n\n其中:\n\n* _relatedModel, relatedModel1, and relatedModel2_ are the names (pluralized) of related models.\n\n* _relationName_ is the name of a relation in the related model. \n\n例子:\n\nInclude relations without filtering:\n\n```javascript\nUser.find({include: 'posts'}, function() { /* ... */ });\n```\n\nReturn all user posts and orders with two additional requests:\n\n```javascript\nUser.find({include: ['posts', 'orders']}, function() { /* ... */ });\n```\n\nReturn all post owners (users), and all orders of each owner:\n\n```javascript\nPost.find({include: {owner: 'orders'}}, function() { /* ... */ });\n```\n\nReturn all post owners (users), and all friends and orders of each owner:\n\n```javascript\nPost.find({include: {owner: ['friends', 'orders']}}, function() { /* ... */ });\n```\n\nReturn all post owners (users), and all posts and orders of each owner. The posts also include images.\n\n```javascript\nPost.find({include: {owner: [{posts: 'images'} , 'orders']}}, function() { /* ... */ });\n```\n\nInclude with filters\n\n在某些情况下,您可能要对包含的相关模型应用过滤器.\n\n>  注意:将过滤器应用于相关模型时,查询将返回第一个模型的结果以及包含过滤器查询的相关模型的任何结果,类似于SQL中的\"左连接\"\n\nLoopBack支持使用以下语法(例如):\n\n```javascript\nPost.find({\n  include: {\n    relation: 'owner', // include the owner object\n    scope: { // further filter the owner object\n      fields: ['username', 'email'], // only show two fields\n      include: { // include orders for the owner\n        relation: 'orders', \n        scope: {\n          where: {orderId: 5} // only select order with id 5\n        }\n      }\n    }\n  }\n}, function() { /* ... */ });\n```\n\n对于只有`$authenticated`或`$owner`角色的用户,在访问权限的真实场景里,请使用findById().例如,以下示例使用过滤器执行分页.(_译注:翻译的不准,原文如下For real-world scenarios where only users in $authenticated or $owner roles should have access, use findById(). For example, the following example uses filters to perform pagination:_)\n\n```javascript\nPost.findById('123', {\n  include: {\n    relation: 'orders',\n    scope: { // fetch 1st \"page\" with 5 entries in it\n      skip:0,\n      limit:5\n    }\n  }\n}, function() { /* ... */ });\n```\n\nAccess included objects\n\n在Node.js API中,调用toJSON()将带有相关项的返回模型实例转换为纯JSON对象.例如:\n\n```javascript\nPost.find({include: {owner: [{posts: 'images'} , 'orders']}}, function(err, posts) {\n posts.forEach(function(post) {\n   // post.owner points to the relation method instead of the owner instance\n   var p = post.toJSON();\n   console.log(p.owner.posts, p.owner.orders);\n });\n //... \n});\n```\n\n请注意关系属性,例如`post.owner`引用关系方法的JavaScript函数.\n\nREST examples\n\n这些示例假定customer模型与reviews模型具有hasMany关系. \n\nReturn all customers including their reviews:\n\n`/customers?filter[include]=reviews`\n\nReturn all customers including their reviews which also includes the author:\n\n`/customers?filter[include][reviews]=author`\n\nReturn all customers whose age is 21, including their reviews which also includes the author:\n\n`/customers?filter[include][reviews]=author&filter[where][age]=21`\n\nReturn first two customers including their reviews which also includes the author\n\n`/customers?filter[include][reviews]=author&filter[limit]=2`\n\nReturn all customers including their reviews and orders\n\n`/customers?filter[include]=reviews&filter[include]=orders`\n\n---\n\n<h4 id=\"4.2.3\"> 4.2.3 Limit filter </h4>\n\n_limit filter_限制返回的记录数.\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n##### REST API\n\n`filter[limit]=_n_`\n\nYou can also use stringified JSON format in a REST query.\n\n##### Node API\n\n`{limit: _n_}`\n\n其中n是要返回的结果(记录)的最大数目.\n\n例子:\n\n仅返回前五个查询结果:\n\nREST\n\n`/cars?filter[limit]=5`\n\nNode API\n\n```javascript\nCars.find({limit: 5},  function() {\n    //...\n})\n```\n\n---\n\n<h4 id=\"4.2.4\"> 4.2.4 Order filter </h4>\n\n_order filter_指定如何对结果进行排序:根据指定的属性升序(ASC)或降序(DESC).\n\n##### REST API\n\n根据一个属性排序: \n\n`filter[order]=propertyName <ASC|DESC>`\n\n根据2个或更多属性排序:\n\n`filter[order][0]=propertyName <ASC|DESC>&filter[order][1]propertyName]=<ASC|DESC>...`\n\nYou can also use stringified JSON format in a REST query.\n\n>  注意:默认排序可以在[default scope.](http://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#default-scope)配置\n\n##### Node API\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n根据一个属性排序: \n\n`{ order: 'propertyName <ASC|DESC>' }`\n\n根据2个或更多属性排序:\n\n`{ order: ['propertyName <ASC|DESC>', 'propertyName <ASC|DESC>',...] }`\n\n其中:\n\n* _propertyName_ is the name of the property (field) to sort by. \n\n* `<ASC|DESC>` signifies either ASC for ascending order or DESC for descending order.\n\n例子:\n\n返回三个最响的武器,按audibleRange属性排序\n\nREST\n\n`/weapons?filter[order]=audibleRange%20DESC&filter[limit]=3`\n\nNode API\n\n```javascript\nweapons.find({\n  order: 'price DESC',\n  limit: 3\n});\n```\n\n---\n\n<h4 id=\"4.2.5\"> 4.2.5 Skip filter </h4>\n\n_skip filter_省略指定的返回记录数.这是有用的,例如,分页响应.\n\n使用`offset`作为`skip`的别名.\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n##### REST API\n\n`?filter=[skip]=n`\n\nYou can also use stringified JSON format in a REST query.\n\n##### Node API\n\n`{skip: n}`\n\nn是被跳过的最大记录数.\n\n例子:\n\n此REST请求将跳过返回的前50条记录:\n\n`/cars?filter[skip]=50`\n\n等价的Node API是:\n\n```javascript\nCars.find( {skip: 50},  function() { /* ... */ } )\n```\n分页例子:\n\n以下REST请求说明如何对查询结果进行分页.每个request请求返回十条记录,第一个返回前十个,第二个返回第11个到第20个,依此类推...\n\n```\n/cars?filter[limit]=10&filter[skip]=0\n/cars?filter[limit]=10&filter[skip]=10\n/cars?filter[limit]=10&filter[skip]=20\n...\n```\n\n使用Node API实现上述效果:\n\n```javascript\nCars.find({limit: 10, skip: 0},  function() { /* ... */ });\nCars.find({limit: 10, skip: 10}, function() { /* ... */ });\nCars.find({limit: 10, skip: 20}, function() { /* ... */ });\n```\n\n---\n\n<h4 id=\"4.2.6\"> 4.2.6 Where filter </h4>\n\nwhere过滤器指定要匹配的一组逻辑条件,类似于SQL查询中的WHERE子句.\n\n##### REST API\n\n在下面的第一种形式中,条件是等价的,也就是说,它测试属性是否等于value.下面的第二种形式适用于所有其他条件.\n\n`filter[where][property]=value`\n\n`filter[where][property][op]=value`\n\n例如,如果存在具有odo属性的cars模型,则以下查询将查找odo大于5000的实例:\n\n`/cars?filter[where][odo][gt]=5000`\n\n找到cars与odo小于30,000的实例:\n\n`/cars?filter[where][odo][lt]=30000`\n\n##### 过滤器限制\n\n>  重要：_译注:不好翻,直接上原文.There is a limit of twenty filters (combined with AND or OR) using this format, due to the use of qs. When there are more than twenty, the filter is converted into an Object where it is expecting an Array. See LoopBack issue #2824 for more details._\n\n有两种方法可以解决过滤器限制：\n\n* 将大过滤器对象编码为\"stringified JSON\".\n* 在调用引导之前(before boot is called),在server/server.js中手动覆盖限制.\n\n**Encode filter object as JSON**\n\n```\nhttp://localhost:3000/api/Books\n?filter={\"where\":{\"or\":[{\"id\":1},{\"id\":2},...,{\"id\":20\"},{\"id\":21}]}}\n```\n\n**Override limit in server.js**\n\n```javascript\n// In `server/server.js`, before boot is called\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\nvar qs = require('qs');\n\nvar app = module.exports = loopback();\napp.set('query parser', function(value, option) {\n  return qs.parse(value, {arrayLimit: 500});\n});\n\napp.start = function() {\n  ...\n```\n\n##### Node API\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n**where子句**\n\n对于查询方法,如find(),findOrCreate()或findOne(),使用下面的第一个表单来测试等价性,也就是说property是否等于value.对于所有其他条件,请使用下面的第二个表单.\n\n`{where: {property: value}} `\n\n`{where: {property: {op: value}}}`\n\n其中:\n\n* _property_ is the name of a property (field) in the model being queried.\n\n* _value_ is a literal value. \n\n* _op_ is one of the operators listed below.\n\n`Cars.find({where: {carClass:'fullsize'}});`\n\n等价的REST查询是:\n\n`/api/cars?filter[where][carClass]=fullsize`\n\n>  提示:上面的where子句语法是查询,而不是count().对于所有其他方法,包括count(),省略{where : ... }包装器.请参阅下面的`Where clause for other methods`\n\n**Where clause for other methods**\n\n>  重要:当为查询以外的方法调用Node API时,即对于更新和删除(和`count()`)的方法,不要在{where：...}对象中包装where子句,只需使用条件作为参数.参见下面的例子\n\n在下面的第一种形式中,条件是等价的,也就是说它测试属性是否等于value.第二种形式适用于所有其他条件.\n\n`{property: value}`\n\n`{property: {op: value}}`\n\n其中:\n\n* _property_ is the name of a property (field) in the model being queried.\n\n* _value_ is a literal value. \n\n* _op_ is one of the operators listed below.\n\n例如,下面显示了对模型的updateAll()方法的一个where子句.注意在参数中缺少{where：...}.\n\n```javascript\nvar myModel = req.app.models.Thing;\nvar theId = 12;\nmyModel.updateAll( {id: theId}, {regionId: null}, function(err, results) {\n\treturn callback(err, results);\n});\n```\n\n更多的例子,例如调用destroyAll():\n\n```javascript\nvar RoleMapping = app.models.RoleMapping;\nRoleMapping.destroyAll( { principalId: userId }, function(err, obj) { ... } );\n```\n\n要删除cost属性大于100的所有记录:\n\n```javascript\nproductModel.destroyAll({cost: {gt: 100}}, function(err, obj) { ... });\n```\n\n**带过滤器的默认scopes**\n\n将`scope`添加到模型定义(在model.json文件中)会自动向名为defaultScope()的模型添加一个方法.当创建,更新或查询模型时,LoopBack将调用此方法.\n\n>  提示:带有where过滤器的默认scopes可能无法正常工作！\n\n每次创建或更新模型实例时,生成的defaultScope()方法将修改与where过滤器匹配的模型属性,以强制执行指定的值.\n\n如果不希望以此方式应用默认scope,请尽可能使用命名的scope.\n\n如果必须使用默认scope,但不希望它影响upsert(),那么,在调用upsert()之前,可以覆盖模型的defaultScope()方法.\n\n例如：\n\n```javascript\nvar defaultScope = Report.defaultScope;\n  Report.defaultScope = function(){};\n  Report.upsert({id: reportId, 'deleted': true}, function(...) {\n    Report.defaultScope = defaultScope;\n    ...\n  });\n```\n\n##### 操作(运算)符\n\n此表描述\"where\"过滤器中可用的操作符,参见下面的示例.\n\n| Operator  | Description|\n| ------------- | ------------- |\n| = | Equivalence. See [examples](#equivalence) below.|\n| and | Logical AND operator. See [AND and OR operators](#and-and-or-operators) and [examples](#and--or) below.|\n| or | Logical OR operator. See [AND and OR operators](#and-and-or-operators) and [examples](#and--or) below.|\n| gt, gte | Numerical greater than (&gt;); greater than or equal (&gt;=). Valid only for numerical and date values. See [examples](#gt-and-lt) below. <br/><br/>  For Geopoint values, the units are in miles by default. See [Geopoint](http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint) for more information.|\n| lt, lte | Numerical less than (&lt;); less than or equal (&lt;=). Valid only for numerical and date values. <br/><br/>For geolocation values, the units are in miles by default. See [Geopoint](http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint) for more information. |\n| between | True if the value is between the two specified values: greater than or equal to first value and less than or equal to second value. See [examples](#gt-and-lt) below. <br/><br/> For geolocation values, the units are in miles by default. See [Geopoint](http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint) for more information.|\n| inq, nin | In / not in an array of values. See [examples](#inq) below.|\n| near | For geolocations, return the closest points, sorted in order of distance. Use with `limit` to return the _n_ closest points. See [examples](#near) below.|\n| neq | Not equal (!=) |\n| like, nlike | LIKE / NOT LIKE operators for use with regular expressions. The regular expression format depends on the backend data source.  See [examples](#like-and-nlike) below. |\n| ilike, nilike | ILIKE / NOT ILIKE operators for use with regular expressions. The regular expression format depends on the backend data source. See [examples](#ilike-and-nilike) below. |\n| regexp | Regular expression. See [examples](#regular-expressions) below. |\n\n**AND和OR操作符**\n\n使用AND和OR运算符可以基于简单的过滤条件(使用以下语法)创建复合逻辑过滤器.\n\nNode API\n\n`{where: {<and|or>: [condition1, condition2, ...]}}`\n\nREST API\n\n`[where][<and|or>][0]condition1&[where][<and|or>]condition2...`\n\n其中_condition1_和_condition2_是过滤器条件.\n\n**正则表达式**\n\n您可以在where过滤器中使用正则表达式,并使用以下语法.您可以在where子句中使用正则表达式进行更新和删除,以及查询.\n\n基本上,regexp就像一个运算符,其中提供正则表达式值作为比较值.\n\n>  提示：正则表达式值还可以包括一个或多个标志.例如,将/i附加到正则表达式以执行不区分大小写的匹配.\n\nNode API\n\n`{where: {property: {regexp: <expression>}}}`\n\n其中_<expression>_:\n\n* String defining a regular expression (for example, '^foo' ).\n* Regular expression literal (for example, /^foo/ ).\n* Regular expression object (for example, new RegExp(/John/)).\n\n简写格式:\n\n`{where: {property: <expression>}}}`\n\n其中_<expression>_:\n\n* Regular expression literal (for example, /^foo/ ).\n* Regular expression object (for example, new RegExp(/John/)).\n\n>  提示:上述where子句语法用于查询.对于更新和删除,请忽略{where：...}包装器.\n\n例如,此查询返回模型以大写字母\"T\"开头的所有汽车:\n\n```javascript\nCars.find( {\"where\": {\"model\": {\"regexp\": \"^T\"}}} );\n```\n\n或者使用简写格式:\n\n```javascript\nCars.find( {\"where\": {\"model\": /^T/} } );\n```\n\nREST\n\n`filter[where][property][regexp]=expression`\n\n其中:\n\n* property is the name of a property (field) in the model being queried.\n* expression is the JavaScript regular expression string. \n\n正则表达式值还可以包括一个或多个标志.例如,将/i附加到正则表达式以执行不区分大小写的匹配.\n\n>  提示:在REST API中使用正则表达式标志时，必须在正则表达式前面使用斜杠字符(/).\n\n以下REST查询返回模型以大写\"T\"开头的所有汽车:\n\n```\n/api/cars?filter[where][model][regexp]=^T\n```\n\n以下REST查询返回以大写\"T\"或小写\"t\"开头的所有模型:\n\n```\n/api/cars?filter[where][model][regexp]=/^t/i\n```\n\n注意,由于正则表达式包括一个标志,所以它前面是一个斜杠(/).\n\n##### 例子\n\n**Equivalence(等于)**\n\n查询名为M1911的武器:\n\n**REST**\n\n```\n/weapons?filter[where][name]=M1911\n```\n\ncarClass是\"fullsize\"的汽车:\n\n**REST**\n\n```\n/api/cars?filter[where][carClass]=fullsize\n```\n\n**Node实现**:\n\n```javascript\nCars.find({ where: {carClass:'fullsize'} });\n```\n\n**gt and lt**\n\n```javascript\nONE_MONTH = 30 * 24 * 60 * 60 * 1000;  // Month in milliseconds\ntransaction.find({\n      where: {\n        userId: user.id,\n        time: {gt: Date.now() - ONE_MONTH}\n      }\n    }\n```\n\n例如,以下查询使用_where_过滤器返回雇员模型的所有实例,该过滤器指定要大于某个日期(大于): \n\n```\n/employees?filter[where][date][gt]=2014-04-01T18:30:00.000Z\n```\n\nNode实现:\n\n```javascript\nEmployees.find({\n  where: { \n    date: {gt: new Date('2014-04-01T18:30:00.000Z')}\n  }\n});\n```\n\n射程超过900米的前三个武器:\n\n```\n/weapons?filter[where][effectiveRange][gt]=900&filter[limit]=3\n```\n\nWeapons的audibleRange属性小于10:\n\n```\n/weapons?filter[where][audibleRange][lt]=10\n```\n\n**and / or**\n\n以下代码是使用\"and\"运算符查找标题为\"我的帖子\"且内容为\"Hello\"的帖子的示例.\n\n```javascript\nPost.find({where: {and: [{title: 'My Post'}, {content: 'Hello'}]}}, \n          function (err, posts) {\n            ...\n});\n```\n\nREST实现:\n\n```\n?filter[where][and][0][title]=My%20Post&filter[where][and][1][content]=Hello\n```\n\n使用\"or\"运算符查找标题为\"我的帖子\"或内容为\"Hello\"的帖子的示例.\n\n```javascript\nPost.find({where: {or: [{title: 'My Post'}, {content: 'Hello'}]}}, \n          function (err, posts) {\n            ...\n});\n```\n\n更复杂的例子. 请看这个表达式`(field1= foo and field2=bar) OR field1=morefoo`:\n\n```javascript\n{\n   or: [\n     { and: [{ field1: 'foo' }, { field2: 'bar' }] },\n     { field1: 'morefoo' }\n   ]\n }\n```\n\n**between**\n\n例子:\n\n```\nfilter[where][price][between][0]=0&filter[where][price][between][1]=7\n```\n\nNode实现:\n\n```javascript\nShirts.find({where: {size: {between: [0,7]}}}, function (err, posts) { ... } )\n```\n\n**near**\n\nThe `where.<field>.near` 不同于其他过滤器:大多数where过滤器限制返回的记录数,而`near`则是对返回结果进行排序.这很像SQL order by子句.通过将其与limit组合,可以创建诸如这样的查询,这个查询根据跟定经纬度获取最接近的三个记录.\n\n例如:\n\n```\n/locations?filter[where][geo][near]=153.536,-28.1&filter[limit]=3\n```\n\nGeoPoints可以是以下任意一种形式:\n\n```javascript\nlocation = new GeoPoint({lat: 42.266271, lng: -72.6700016}); // GeoPoint\nlocation = '42.266271,-72.6700016';                          // String\nlocation = [42.266271, -72.6700016];                         // Array\nlocation = {lat: 42.266271, lng: -72.6700016};               // Object Literal\n\nRestaurants.find({where: {geo: {near: location }}}, function callback(...\n```\n\n**near (ordering _and limiting by distance_)**\n\nnear过滤器可以接受2个额外属性:\n\n*   `maxDistance`\n*   `unit`\n\n当`maxDistance`包含在过滤器中时,near表现得更像典型的where过滤器,将结果限制在到某个位置的给定距离内的结果.默认情况下,maxDistance以英里为单位测量距离.\n\n例如,查找给定地理位置两英里内的所有餐馆:\n\n```javascript\nvar userLocation = new GeoPoint({\n  lat: 42.266271,\n  lng: -72.6700016\n});\nvar resultsPromise = Restaurants.find({\n  where: {\n    location: {\n      near: userLocation,\n      maxDistance: 2\n    }\n  }\n});\n```\n\n要更改距离(测量)单位,请指定`unit`的值为以下一种:\n\n* `kilometers`\n* `meters`\n* `miles`\n* `feet`\n* `radians`\n* `degrees`\n\n例如,要使用公里而不是英里:\n\n```javascript\nvar resultsPromise = Restaurants.find({\n  where: {\n    location: {\n      near: userLocation,\n      maxDistance: 2,\n      unit: 'kilometers'\n    }\n  }\n});\n```\n\n>  注意:如果单位值错误,例如\"mile\"而不是\"miles\",LoopBack将默认忽略过滤器！\n\n**like and nlike**\n\nlike和nlike(not like)运算符使您能够匹配SQL正则表达式.正则表达式格式取决于后端数据源.\n\nlike的例子:\n\n```javascript\nPost.find({where: {title: {like: 'M.-st'}}}, function (err, posts) { ... });\n```\n\nnlike的例子:\n\n```javascript\nPost.find({where: {title: {nlike: 'M.-XY'}}}, function (err, posts) {\n```\n\n使用memory connector时:\n\n```javascript\nUser.find({where: {name: {like: '%St%'}}}, function (err, posts) { ... });\nUser.find({where: {name: {nlike: 'M%XY'}}}, function (err, posts) { ... });\n```\n\n**ilike and nilike**\n\nilike和nilike(不是ilike)运算符使您能够匹配不区分大小写的SQL正则表达式.正则表达式格式取决于后端数据源.\n\nilike例子:\n\n```javascript\nPost.find({where: {title: {ilike: 'm.-st'}}}, function (err, posts) { ... });\n```\n\nnilike例子:\n\n```javascript\nPost.find({where: {title: {nilike: 'm.-xy'}}}, function (err, posts) {\n```\n\n使用memory connector时:\n\n```javascript\nUser.find({where: {name: {ilike: '%st%'}}}, function (err, posts) { ... });\nUser.find({where: {name: {nilike: 's%xy'}}}, function (err, posts) { ... });\n```\n\n**inq**\n\ninq运算符检查指定的属性值是否与数组中提供的任何值匹配.一般的语法是:\n\n```javascript\n{where: { property: { inq: [val1, val2, ...]}}}\n```\n\n其中:\n\n* _property_ is the name of a property (field) in the model being queried.\n* _val1, val2_, and so on, are literal values in an array.\n\ninq例子:\n\n```javascript\nPosts.find({where: {id: {inq: [123, 234]}}}, \n  function (err, p){... });\n```\n\nREST:\n\n```\n/medias?filter[where][keywords][inq]=foo&filter[where][keywords][inq]=bar\n```\n\nOr \n\n```\n?filter={\"where\": {\"keywords\": {\"inq\": [\"foo\", \"bar\"]}}}\n```\n\n---\n\n<h4 id=\"4.3\"> 4.3 高级主题:数据 </h4>\n\n_译注:这里只翻译一处,因为其他的3个主题与angularjs有关,目前不涉及_\n\n---\n\n<h4 id=\"4.3.1\"> 4.3.1 Realtime server-sent events </h4>\n\n##### 概述\n\nPersistedModel API支持使用CRUD方法和createChangeStream()方法的组合,实现从服务器到客户端的流式更改.\n\nChangeStream使服务器能够向客户端发送模型更改.客户端向初始请求通知更改,然后服务器将这些更改推送到客户端.\n\n##### Creating ChangeStreams on the server\n\n**设置**\n\n首先,添加event-stream到你的Node app:\n\n```bash\n$ npm install -save event-stream\n```\n\n**禁用压缩**\n\n事件流不适用于Node compression.要禁用npm compression,请从server/middleware.json中删除条目,如下所示:\n\n```json\n...\n\"compression\": {\n  \"enabled\":false\n},\n...\n```\n\n**脚本**\n\n下面是一个在LoopBack应用程序中使用createChangeStream()方法的基本示例:\n\n**server/boot/realtime.js**\n\n```javascript\nvar es = require('event-stream');\nmodule.exports = function(app) {\n  var MyModel = app.models.MyModel;\n  MyModel.createChangeStream(function(err, changes) {\n    changes.pipe(es.stringify()).pipe(process.stdout);\n  });\n  MyModel.create({\n    foo: 'bar'\n  });\n}\n```\n\n此示例将打印以下内容到控制台:\n\n```json\n{\"target\":1,\"data\":{\"foo\":\"bar\",\"id\":1},\"type\":\"create\"}\n```\n\n##### Pushing data to clients\n\n此示例显示如何使用EventSource API从浏览器使用ChangeStream,该API是内置于大多数浏览器中的.下面的示例代码假设一个名为MyModel的模型,并将响应记录到浏览器JavaScript控制台.\n\n**Browser script**\n\n```javascript\nvar urlToChangeStream = '/api/MyModels/change-stream?_format=event-stream';\nvar src = new EventSource(urlToChangeStream);\nsrc.addEventListener('data', function(msg) {\n  var data = JSON.parse(msg.data);\n  console.log(data); // the change object\n});\n```\n\n要推送数据,服务器上的模型必须更改.例如,如果添加新记录(模型实例).\n\n发生这种情况时,在浏览器JavaScript控制台中,您将看到:\n\n```json\nObject {target: 2, data: Object, type: \"create\"}\n```\n\n---\n\n<h4 id=\"5\"> 5. 添加应用程序逻辑 </h4>\n\n在构建应用程序时,通常需要实现自定义逻辑以处理数据并在响应客户端请求之前执行其他操作.在LoopBack中,有三种方法：\n\n* 向模型添加逻辑 - 添加远程方法,远程钩子和操作钩子(adding `remote methods`, `remote hooks` and `operation hooks`).\n* 定义引导脚本 - 编写在应用程序启动时运行的脚本(在/server/boot目录中).\n* 定义中间件 - 向应用程序添加自定义中间件.\n\n---\n\n<h4 id=\"5.1\"> 5.1 使用LoopBack对象 </h4>\n\n##### 概述\n\nLoopBack中主要的javascript对象包括:\n\n* [App](http://apidocs.strongloop.com/loopback/#var-app-loopback)\n* [Models](http://apidocs.strongloop.com/loopback/#model)\n* [Data sources](http://apidocs.strongloop.com/loopback-datasource-juggler/#define-new-datasource)\n\n如何获取对这些对象的引用取决于代码的位置以及要引用的对象(_译注:代码位置例如boot script,model的js文件等位置_).\n\n##### 获取App对象的引用\n\n获取对App对象的引用是至关重要的,因为从App中可以获得对其他对象(如model和data source)的引用.通常你可以在以下几种方式中获取app对象的句柄：\n\n* Model scripts: /common/models/_modelName_.js(其中modelName是模型的名称).\n\n* /server/boot中的引导脚本.\n\n* Middleware(在boot scripts中和/server/server.js中注册的中间件）\n\n* 您自己的自定义脚本\n\nApp对象为典型的LoopBack应用程序的各个部分提供上下文.\n\n**在boot script中获取对App对象的引用**\n\n要在引导脚本中获取对`app`对象的引用,请将其作为导出函数的第一个参数传递进去.\n\n下面是个带有回调函数的异步启动脚本的例子:\n\n**Asynchronous boot script - /server/boot/your-script.js**\n\n```javascript\nmodule.exports = function(app, cb) { //app is injected by LoopBack\n  //...\n};\n```\n\n下面是个不带回调函数的异步脚本的例子:\n\n**Synchronous boot script - /server/boot/your-script.js**\n\n```javascript\nmodule.exports = function(app) { //app is injected by loopback\n  //...\n};\n```\n\n**在middleware中获取对App对象的引用**\n\nLoopBack在中间件的`request `对象中自动设置app了对象(实际上,在底层是Express在做它).您可以在server/server.js中访问,如下所示:\n\n**Middleware - /server/server.js**\n\n```javascript\n...\napp.use(function(req, res, next) {\n  var app = req.app;\n  //...\n});\n...\n```\n\n**在自定义脚本中获取对App对象的引用**\n\n如果您需要在自己的自定义脚本中引用应用程序,只需要`require`它(如示例中所示):\n\n**A custom script - /server/your-script.js**\n\n```javascript\nvar app = require('/server/server');\n...\n```\n\n你只需要require`/server/server.js`,就像任何Node模块一样.\n\n**在model的js文件中获取对App对象的引用**\n\n要在模型生成器(Model generator)支持的模型中获取`app`对象的句柄,仍然是使用\"require\",就像任何Node模块一样:\n\n**Model - /common/models/book.js**\n\n```javascript\nvar app = require('../../server/server'); //require `server.js` as in any node.js app\n\nmodule.exports = function(Book) {\n  //...\n};\n```\n\n对于model,有一个特殊情况.从除了/common/models/model.js之外的任何地方,你实际上可以通过使用`model.app`的模型获得对`app`的引用.\n\n例如:\n\n```javascript\n...\nBook.app\n...\n```\n\n但是,需要注意的是,您不能在/common/model/model.js中引用model.app,因为此文件在引导完成之前不会添加`app`属性.这意味着您不能在/common/models/model.js中执行以下操作:\n\n**CANNOT do this in a model script**\n\n```javascript\nmodule.exports = function(Book) {\n  Book.app... //won't work because `.app` has not been added to the Book object yet\n});\n```\n\n但是,您可以获得对app INSIDE remote methods, remote hooks和model hooks的引用,因为这些是在应用程序完成加载后触发的(即在loopback.boot运行之后|/在server/server.js调用boot(...)之后）.\n\n这意味着你可以:\n\n```javascript\nmodule.exports = function(Book) {\n  Book.read(cb) {\n    var app = Book.app;\n    console.log(app.models...)\n    cb();\n  };\n  Book.remoteMethod(\n    'read', // read里有对app的引用\n    ...\n  });\n};\n```\n\n当然,你可以在remote hooks和remote methods中做同样的事情,但要注意加载时序.简单地说,`model.app`将不可用,直到应用程序完成引导,即在/server/server.js中运行boot().这里的想法是,在我们的模型被添加到应用程序之前定义它们.应用程序完成引导后,您就可以访问模型的`app`属性.\n\n访问应用程序对象的最简单的方法是通过Model.on('attached')事件.\n\n```javascript\nmodule.exports = function(MyModel) {\n  var app;\n  MyModel.on('attached', function(a) {\n    app = a;\n    // perform any setup that requires the app object\n  });\n};\n```\n\n##### 使用app对象\n\nLoopBack的app对象在主脚本中定义,如下:\n\n**/server/server.js**\n\n```javascript\nvar loopback = require('loopback');\nvar app = loopback();\n```\n\napp对象扩展自`Express app obejct`,继承了它的所有属性和方法,以及LoopBack app obejct的所有其他属性和方法.\n\n>  重要:在某些地方,如启动脚本中,app可能不叫app,而叫做server.\n\n##### 使用model对象\n\n**获取对model对象的引用**\n\n一旦你获得了`app`对象的句柄,你就可以通过app对象上的models属性来获得对特定model的引用.\n\n**Boot script - /server/boot/your-script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var app = app.models.Book;\n  //...\n};\n```\n\n在你自己的脚本中:\n\n**A custom script - /server/your-script.js**\n\n```javascript\nvar app = require('/server/server');\n```\n\n**获取对不相关模型的引用**\n\n您可以使用诸如`MyModel.app.models.MyRelatedModel`这样的表达式轻松的引用相关模型(_译注:相关模型是指建立了关系的model_).但是如果与其他模型没有关系,这将不起作用.在这种情况下,您需要像下面这样获取对应用程序对象的引用.\n\n```javascript\nrequire('../../server/server')\n```\n\n例如,假设您想要在observer (hook)中引用User模型,如下:\n\n**common/models/my-model.js**\n\n```javascript\nmodule.exports = function(MyModel) {\n  var app = require('../../server/server');\n\n  MyModel.observe('loaded', function( ctx, next) {\n   var User = app.models.User;\n   ...\n   User.create(...);\n   ...\n});\n```\n\n##### 使用data source对象\n\n**获取对data sources的引用**\n\n类似于在模型上获取句柄,您需要首先获取`app`对象的句柄,然后访问`app.datasources`属性即可:\n\n**Boot script - /server/boot/your-script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var dataSource = app.datasources.db; //db can be any registered datasource in `/server/datasources.json`\n  ...\n};\n```\n\n或者在你自己的脚本中:\n\n**A custom script - /server/your-script.js**\n\n```javascript\nvar app = require('./server/server');\n...\nvar datasource = app.datasources.db;\n...\n```\n\n或者在中间件中:\n\n**Middleware - /server/server.js**\n\n```javascript\n...\napp.use(function(req, res, next) {\n  var dataSource = app.datasources.db;\n  ...\n});\n...\n```\n\n或者在model的js文件中:\n\n**Model - /common/models/model.js**\n\n```javascript\nmodule.exports = function(Book) {\n  Book.read = function() {\n    var dataSource = Book.app.datasources.db;\n  };\n  Book.remoteMethod(\n    'read',\n     ...\n  );\n};\n```\n\n在model的js文件中要注意,因为诸如下面这样的代码是不会起作用的:\n\n```javascript\nModel - /common/models/model.js\n\nmodule.exports = function(Book) {\n  Book.app... //`Book` is not registered yet! This WON'T WORK.\n};\n```\n\n---\n\n<h4 id=\"5.2\"> 5.2 向model中添加业务逻辑 </h4>\n\n有三种方法可以向模型添加自定义逻辑:\n\n___译注:下面三个极其重要,要记住他们的作用场景___\n\n* **Remote methods**(远程方法) - REST端点映射到Node函数.\n* **Remote hooks**(远程钩子) - 在执行`remote method`时触发的逻辑(之前或之后).\n* **Operation hooks**(操作钩子) - 当模型对数据源执行创建,读取,更新和删除操作时触发的逻辑.\n\n您可以通过配置如何调用每个方法来进一步优化自定义逻辑的时序.在任何情况下,你都需要编写自己的逻辑,因为LoopBack只提供了触发逻辑的机制.\n\n---\n\n<h4 id=\"5.2.1\"> 5.2.1 Remote methods(远程方法) </h4>\n\n>  概要:远程方法是模型的静态方法,它通过自定义REST端点来公开.\n\n##### 概述\n\n远程方法是模型的静态方法,它通过自定义的REST端点公开.使用远程方法可以实现:LoopBack标准模型REST API不提供的操作.\n\n>  注意:定义远程方法的最简单的方法是使用远程方法生成器(remote method generator)\n\n##### 如何定义远程方法\n\n要定义远程方法:\n\n1. 在/common/models目录中编辑模型定义JSON文件,例如,要将远程方法附加到Person模型,请编辑/common/models/person.js.\n\n2. 定义处理request请求的方法(_译注:函数定义_).请注意,方法的名称将确定远程方法是静态的还是实例的方法.如果方法名称从`prototype.`开始,说明它是实例方法,否则,它是一个静态方法.\n\n3. 调用`remoteMethod()`注册该方法,使用两个参数调用它:\n\n  * 第一个参数是一个字符串,它是您在步骤2中定义的方法的名称.\n  * 第二个参数(可选)为REST端点提供了额外的配置.\n\n>  重要：LoopBack模型生成器会自动将驼峰形式的模型名称(例如MyModel)转换为小写横线名称(my-model).例如,如果您使用模型生成器创建名为\"FooBar\"的模型,它将在common/models中创建文件foo-bar.json和foo-bar.js.但是,模型名称FooBar将通过模型的name属性保留.\n\n**例子**\n\n假设您有一个Person模型,并且您要在REST端点中添加一个`/greet`端点,该端点返回一个带有请求中提供的名称的问候语(greeting).请您将此代码添加到/common/models/person.js来实现它:\n\n**/common/models/person.js**\n\n```javascript\nmodule.exports = function(Person){\n\n    Person.greet = function(msg, cb) {\n      cb(null, 'Greetings... ' - msg);\n    }\n\n    Person.remoteMethod('greet', {\n          accepts: {arg: 'msg', type: 'string'},\n          returns: {arg: 'greeting', type: 'string'}\n    });\n};\n```\n\n现在,您发起一个post请求到`/api/people/greet`端点,携带的数据是`{\"msg\": \"John\"}`.您将会在shell中收到如下结果:`Greetings... John!`.\n\n>  注意:上面的REST API请求使用复数形式\"people\"而不是“person”.\n\n##### 注册远程方法\n\n所有的LoopBack模型都有一个`remoteMethod()`静态方法,使用这个方法来注册一个`remote method(远程方法)`:\n\n```javascript\nmodel.remoteMethod(requestHandlerFunctionName, [options])\n```\n\n其中:\n\n* model是要添加远程方法的模型对象,在我们的示例中是Person.\n* requestHandlerFunctionName是一个字符串,指定远程方法的名称,例如\"greet\".\n* options是指定配置REST端点的参数对象,见下文.\n\n**Options**\n\noptions参数是一个包含用于配置远程方法REST端点的键/值对的Javascript对象.\n\n>  重要:所有的options属性都是可选的.但是,如果远程方法需要参数,则必须指定accept.如果remote方法返回一个值,则必须指定returns.\n\n<table>\n  <thead>\n    <tr>\n      <th width=\"50\">Option</th>\n      <th>Description</th>\n      <th width=\"260\">Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>accepts</td>\n      <td>\n        Defines arguments that the remote method accepts that map to the static method you define. For the example above, the function signature is <pre>Person.greet(name, age, callback)...</pre> so\n        <code>name</code> is the first argument, <code>age</code> is the second argument and callback is automatically provided by LoopBack (do not specify it in your <code>accepts</code> array). For more information, see <a href=\"Remote-methods.html#argument-descriptions\">Argument descriptions</a>.<br/><br/>\n        The default value is the empty array, <code>[ ]</code>.\n      </td>\n      <td>\n        <pre style=\"font-size: 80%;\">{  ...\n  accepts: [\n   {arg: 'name',\n    type: 'string'},\n   {arg: 'age',\n    type: 'number'}, ...],\n  ... }</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>\n        Text description of the method, used by API documentation generators such as Swagger.\n        You can put long strings in an array if needed (see note below).\n      </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>http.path</td>\n      <td>\n        HTTP path (relative to the model) at which the method is exposed.\n      </td>\n      <td>\n        <pre>http: {path: '/sayhi'}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.verb</td>\n      <td>\n        HTTP method (verb) at which the method is available. One of:\n        <ul>\n          <li>get</li>\n          <li>post (default)</li>\n          <li>patch</li>\n          <li>put</li>\n          <li>del</li>\n          <li>all</li>\n        </ul>\n      </td>\n      <td>\n     <pre>http: {path: '/sayhi',\nverb: 'get'}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.status</td>\n      <td>Default HTTP status set when the callback is called without an error.</td>\n      <td>\n      <pre>http: {status: 201}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.errorStatus</td>\n      <td>Default HTTP status set when the callback is called with an error.</td>\n      <td>\n        <pre>http: {errorStatus: 400}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>notes</td>\n      <td>\n        Additional notes, used by API documentation generators like Swagger.\n        You can put long strings in an array if needed (see note below).\n      </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>returns</td>\n      <td>\n        Describes the remote method's callback arguments; See <a href=\"Remote-methods.html#argument-descriptions\">Argument descriptions</a>. The <code>err </code>argument is assumed; do not specify.\n        Default if not provided is the empty array,  <code>[]</code>.\n      </td>\n      <td>\n        <pre>returns: {arg: 'greeting',\ntype: 'string'}</pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n**参数描述**\n\n`accept`和`returns`这2个可选属性,可以是单个参数的对象,或者是个数组,数组的内容是有序的参数集.下表描述了每个单独参数的属性.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Property (key)</th>\n      <th width=\"100\">Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>arg</td>\n      <td>String</td>\n      <td>Argument name</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>String or Array</td>\n      <td>\n        A text description of the argument. This is used by API documentation generators like Swagger.\n        You can put long strings in an array if needed (see note above).\n      </td>\n    </tr>\n    <tr>\n      <td>http</td>\n      <td>Object or Function</td>\n      <td>For input arguments: a function or an object describing mapping from HTTP request to the argument value. See <a href=\"Remote-methods.html\">HTTP mapping of input arguments</a> below.</td>\n    </tr>\n    <tr>\n      <td>http.target</td>\n      <td>String</td>\n      <td>\n        Map the callback argument value to the HTTP response object. The following values are supported.\n        <ul>\n          <li><code>status</code> sets the <code>res.statusCode</code> to the provided value</li>\n          <li><code>header</code> sets the <code>http.header</code> or <code>arg</code> named header to the value</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>required</td>\n      <td>Boolean</td>\n      <td>True if argument is required; false otherwise.</td>\n    </tr>\n    <tr>\n      <td>root</td>\n      <td>Boolean</td>\n      <td>For callback arguments: set this property to <code>true</code>\n         if your function has a single callback argument to use as the root object returned to remote caller.\n        Otherwise the root object returned is a map (argument-name to argument-value).\n      </td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>String</td>\n      <td>Argument datatype; must be a <a href=\"LoopBack-types.html\">Loopback type</a>. Additionally, callback arguments allow a special type \"file\"; see below.</td>\n    </tr>\n    <tr>\n      <td>default</td>\n      <td>String</td>\n      <td>Default value that will be used to populate loopback-explorer input fields and swagger documentation.\n        <strong>Note</strong>: This value will not be passed into remote methods function if argument is not present.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n例如,单个参数,指定其为对象:\n\n```json\n{arg: 'myArg', type: 'number'}\n```\n\n多个参数,则需要数组来存放:\n\n```json\n[\n  {arg: 'arg1', type: 'number', required: true},\n  {arg: 'arg2', type: 'array'}\n]\n```\n\n**返回文件(流)响应**\n\n您可以为回调参数指定{type：'file'，root：true},它会被直接发送给response body.file参数可以设置为以下值之一:\n\n* String\n* Buffer\n* ReadableStream (anything that exposes .pipe() method)\n\n例如:\n\n```javascript\nmodule.exports = function(MyModel) {\n  MyModel.download = function(cb) {\n    // getTheStreamBody() can be implemented by calling http.request() or fs.readFile() for example\n    getTheStreamBody(function(err, stream) {\n      if (err) return cb(err);\n      // stream can be any of: string, buffer, ReadableStream (e.g. http.IncomingMessage)\n      cb(null, stream, 'application/octet-stream');\n    });\n  };\n\n  MyModel.remoteMethod('download', {\n    returns: [\n      {arg: 'body', type: 'file', root: true},\n      {arg: 'Content-Type', type: 'string', http: { target: 'header' }}\n    ]\n  });\n};\n```\n\n**输入参数的HTTP映射**\n\n有两种方法可以为输入参数指定HTTP映射:\n\n* 提供一个具有`source`属性的对象.\n* 指定一个自定义映射函数\n\n**使用具有source属性的对象**\n\n要使用第一种方法为输入参数指定HTTP映射,请提供具有`source`属性的对象,该属性具有下表中所示的值之一.\n\n<table>\n  <thead>\n    <tr>\n      <th>Value of source property</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>body</td>\n      <td>The whole request body is used as the value.</td>\n    </tr>\n    <tr>\n      <td>form<br>query<br>path </td>\n      <td>\n        The value is looked up using <code>req.param</code>, which searches route arguments, the request body and the query string.\n        Note that <code>query</code> and <code>path</code> are aliases for <code>form</code>.\n      </td>\n    </tr>\n    <tr>\n      <td>req</td>\n      <td>The <a href=\"http://expressjs.com/4x/api.html#req\" class=\"external-link\" rel=\"nofollow\">Express HTTP request object</a>.</td>\n    </tr>\n    <tr>\n      <td>res</td>\n      <td>The <a href=\"http://expressjs.com/4x/api.html#res\" class=\"external-link\" rel=\"nofollow\">Express HTTP response object</a>.</td>\n    </tr>\n    <tr>\n      <td>context</td>\n      <td>The whole context object, which holds request and response objects.</td>\n    </tr>\n  </tbody>\n</table>\n\n例如,将整个请求正文作为值的参数:\n\n```json\n{ arg: 'data', type: 'object', http: { source: 'body' } }\n```\n\n另一个显示Express HTTP请求和响应对象的示例:\n\n```json\n[\n {arg: 'req', type: 'object', 'http': {source: 'req'}},\n {arg: 'res', type: 'object', 'http': {source: 'res'}}\n]\n```\n\n**使用自定义映射函数**\n\n指定输入参数的HTTP映射的第二种方法是指定自定义映射函数,例如:\n\n```javascript\n{\n  arg: 'custom',\n  type: 'number',\n  http: function(ctx) {\n    // ctx is LoopBack Context object\n\n    // 1\\. Get the HTTP request object as provided by Express\n    var req = ctx.req;\n\n    // 2\\. Get 'a' and 'b' from query string or form data and return their sum.\n    return -req.param('a') - req.param('b');\n  }\n}\n```\n\n如果不指定映射,LoopBack将像下面这样确定值(假设`name`为要解析的输入参数的名称):\n\n1. 如果有JSON格式的请求参数args,则它使用`args['name']`的值.\n2. 否则,它使用req.param('name').\n\n**将返回指定为非JSON格式(_译注:原文Returning data outside of a JSON field_)**\n\n使用arg属性指定返回参数将自动返回一个JSON对象,您的数据存储在同名的字段中.\n\n如果要将数据作为主响应返回,例如数组,可以通过在returns对象中设置root属性并省略arg来实现.\n\n```json\nreturns: {type: 'array', root: true}\n```\n\n##### 设置远程方法的路由\n\n默认情况下,远程方法公开在：\n\n`POST http://apiRoot/modelName/methodName`\n\n其中:\n\n* apiRoot是应用程序的API根路径.\n* modelName是模型的复数名称.\n* methodName是函数名.\n\n回想之前的greet例子,远程方法公开在：\n\n`POST /api/people/greet`\n\n要更改路由,请使用remoteMethod()方法的options参数的http.path和http.verb属性,例如:\n\n**/common/models/model.js**\n\n```javascript\nPerson.remoteMethod('greet',{\n  accepts: {arg: 'msg', type: 'string'},\n  returns: {arg: 'greeting', type: 'string'},\n  http: {path: '/sayhi', verb: 'get'}\n});\n```\n\n上述代码将默认路由改变到:\n\n`GET /api/people/sayhi`\n\n于是,一个到`http://localhost:3000/api/people/sayhi?msg=LoopBack%20developer`的GET请求将返回:\n\n```json\n{\"greeting\": \"Greetings... LoopBack developer\"}\n```\n\n##### 向远程方法添加ACLs\n\n要限制对自定义远程方法的访问,请以控制对任何模型API的访问的相同方式使用ACL生成器(ACL generator).自定义远程方法的访问类型为Execute.\n\n**基础应用**\n\n例如,要拒绝调用上面示例中使用的greet方法:\n\nshell\n\n```bash\n$ slc loopback:acl\n[?] Select the model to apply the ACL entry to: Person\n[?] Select the ACL scope: A single method\n[?] Enter the method name: greet\n[?] Select the access type: Execute\n[?] Select the role: All users\n[?] Select the permission to apply: Explicitly deny access\n```\n\nshell\n\n```bash\n$ slc loopback:acl\n[?] Select the model to apply the ACL entry to: Person\n[?] Select the ACL scope: A single method\n[?] Enter the method name: greet\n[?] Select the access type: Execute\n[?] Select the role: All users\n[?] Select the permission to apply: Explicitly deny access\n```\n\n然后,该工具创建以下访问控制规范:\n\n**/common/models/person.json**\n\n```json\n...\n\"acls\": [{\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"$everyone\",  // apply the ACL to everyone\n  \"permission\": \"DENY\",        // DENY attempts to invoke this method\n  \"property\": \"greet\"          // applies the access control to the greet() method\n}],\n...\n```\n\n**高级应用**\n\n另一个例子,允许只为该模型对象的`$owner`调用一个远程方法:\n\n**/common/models/YourModel.js**\n\n```javascript\nmodule.exports = function(YourModel) {\n  //...\n  YourModel.remoteMethod(\n    'someRemoteMethod',\n    {\n      accepts: [\n        {arg: 'id', type: 'number', required: true}\n      ],\n      // mixing ':id' into the rest url allows $owner to be determined and used for access control\n      http: {path: '/:id/some-remote-method', verb: 'get'}\n    }\n  );\n};\n```\n\n##### 格式化远程方法的响应\n\n您可以通过添加引导脚本来重新格式化所有远程方法返回的响应,该引导脚本修改app.remotes()返回的对象,如下所示:\n\n**/server/boot/hook.js**\n\n```javascript\nmodule.exports = function(app) {\n  var remotes = app.remotes();\n  // modify all returned values\n  remotes.after('**', function (ctx, next) {\n    ctx.result = {\n      data: ctx.result\n    };\n\n    next();\n  });\n};\n```\n\n##### 禁用远程方法\n\n使用`Model.disableRemoteMethod(name, isStatic)`和`Model.disableRemoteMethodByName(name)`来禁用远程方法.更多的信息请访问:\n\n* [Model.disableRemoteMethod](http://apidocs.strongloop.com/loopback/#model-disableremotemethod)\n* [Model.disableRemoteMethodByName](http://apidocs.strongloop.com/loopback/#model-disableremotemethodbyname)\n\n---\n\n<h4 id=\"5.2.2\"> 5.2.2 Remote hooks(远程钩子) </h4>\n\n##### 概述\n\nLoopBack提供了两种钩子:\n\n* 远程钩子(Remote hooks),在调用远程方法之前或之后执行.它可以是自定义的远程方法或继承自PersistedModel的标准创建,检索,更新和删除方法.\n* 当模型执行创建,检索,更新和删除操作时执行的操作钩子(Operation hooks).\n\n远程钩子(remote hook)使您能够在客户端调用远程方法之前或之后执行函数:\n\n* **beforeRemote()**,在远程方法之前运行.\n* **afterRemote()**,在远程方法成功完成后运行.\n* **afterRemoteError()**,在远程方法发生error后运行.\n\n\n>  提示: 使用beforeRemote钩子可以验证和清除远程方法的输入.因为beforeRemote钩子在执行远程方法之前运行,所以它可以访问远程方法的输入,但不能访问结果.在将远程方法的结果发送到远程客户端之前,可以使用afterRemote钩子来进行修改,记录或其他操作.因为afterRemote钩子在执行远程方法之后运行,它可以访问远程方法的结果,但是不能修改输入参数.\n\n**Signature**\n\nbeforeRemote()和afterRemote()具有相同的Signature,下面的语法使用beforeRemote,但是afterRemote是相同的.\n\n对于静态自定义远程方法：\n\n```javascript\n_modelName_.beforeRemote( _methodName_, function( ctx, next) {\n    //...\n    next();\n});\n```\n\n实例方法和静态内置方法(如upsert()或create())需要回调中的第三个参数：\n\n```javascript\n_modelName_.beforeRemote( _methodName_, function( ctx, _modelInstance_, next) {\n    //...\n    next();\n});\n```\n\nafterRemoteError()的signature有一点点不同:它只有2个参数\n\n```javascript\n_modelName_.afterRemoteError( _methodName_, function( ctx, next) {\n    //...\n    next();\n});\n```\n\n其中:\n\n* `_modelName_`是远程钩子附加到的模型的名称.\n* `_methodName_`是触发远程钩子的方法的名称.可以是自定义远程方法或从PersistedModel继承的标准创建,检索,更新和删除方法.它可以包括匹配多个方法的通配符(见下文).\n* `ctx`是上下文对象.\n* `_modelInstance_`是受影响的模型实例.\n\n上面的语法包括对next()的调用,要提醒您,您必须在远程钩子的回调函数中的某一点调用next().它不一定必须在函数结束时出现,但必须在函数完成之前的某个点调用.\n\n**通配符**\n\n您可以在`_methodName_`中使用以下通配符：\n\n* 星号'\\*'匹配任何字符,直到第一次出现分隔符字符'.'\n* 双星号匹配任何字符,包括分隔符字符'.'\n\n例如，使用\"*.*\"匹配任何静态方法,使用'prototype.*'来匹配任何实例方法.\n\n##### 例子\n\n以下示例为revEngine()远程方法定义beforeRemote和afterRemote钩子:\n\n**common/models/car.js**\n\n```javascript\nmodule.exports = function(Car) {\n  // remote method\n  Car.revEngine = function(sound, cb) {\n    cb(null, sound - ' ' - sound - ' ' - sound);\n  };\n  Car.remoteMethod(\n    'revEngine',\n    {\n      accepts: [{arg: 'sound', type: 'string'}],\n      returns: {arg: 'engineSound', type: 'string'},\n      http: {path:'/rev-engine', verb: 'post'}\n    }\n  );\n  // remote method before hook\n  Car.beforeRemote('revEngine', function(context, unused, next) {\n    console.log('Putting in the car key, starting the engine.');\n    next();\n  });\n  // remote method after hook\n  Car.afterRemote('revEngine', function(context, remoteMethodOutput, next) {\n    console.log('Turning off the engine, removing the key.');\n    next();\n  });\n...\n}\n```\n\n以下示例在远程方法名称中使用通配符.当执行名称以\"save\"结尾的任何远程方法时,将调用此远程钩子:\n\n**common/models/customer.js**\n\n```javascript\nCustomer.beforeRemote('*.save', function(ctx, unused, next) {\n  if(ctx.req.accessToken) {\n    next();\n  } else {\n    next(new Error('must be logged in to update'))\n  }\n});\n\nCustomer.afterRemote('*.save', function(ctx, user, next) {\n  console.log('user has been saved', user);\n  next();\n});\n```\n\n>  重要: 钩子的第二个参数(上例中的user)是ctx.result,它不总是可用\n\n下面是更多使用通配符的远程钩子的示例,以便在调用任何远程方法之前运行函数.\n\n**common/models/customer.js**\n\n```javascript\n// ** will match both prototype.* and *.*\nCustomer.beforeRemote('**', function(ctx, user, next) {\n  console.log(ctx.methodString, 'was invoked remotely'); // customers.prototype.save was invoked remotely\n  next();\n});\n\nOther wildcard examples\n// run before any static method eg. User.find\nCustomer.beforeRemote('*', ...);\n\n// run before any instance method eg. User.prototype.save\nCustomer.beforeRemote('prototype.*', ...);\n\n// prevent password hashes from being sent to clients\nCustomer.afterRemote('**', function (ctx, user, next) {\n  if(ctx.result) {\n    if(Array.isArray(ctx.result)) {\n      ctx.result.forEach(function (result) {\n        delete result.password;\n      });\n    } else {\n      delete ctx.result.password;\n    }\n  }\n\n  next();\n});\n```\n\nA safer means of effectively white-listing the fields to be returned by copying the values into new objects(_译注:这句翻译不好,保留原文_):\n\n**common/models/account.js**\n\n```javascript\nvar WHITE_LIST_FIELDS = ['account_id', 'account_name'];\n\nAccount.afterRemote('**', function(ctx, modelInstance, next) {\n  if (ctx.result) {\n    if (Array.isArray(modelInstance)) {\n      var answer = [];\n      ctx.result.forEach(function (result) {\n        var replacement ={};\n        WHITE_LIST_FIELDS.forEach(function(field) {\n          replacement[field] = result[field];\n        });\n        answer.push(replacement);\n      });\n    } else {\n      var answer ={};\n      WHITE_LIST_FIELDS.forEach(function(field) {\n        answer[field] = ctx.result[field];\n      });\n    }\n    ctx.result = answer;\n  }\n  next();\n});\n```\n\n**afterRemoteError的例子**\n\n当实例方法speak()失败时执行附加操作:\n\n**common/models/dog.js**\n\n```javascript\nDog.afterRemoteError('prototype.speak', function(ctx, next) {\n  console.log('Cannot speak!', ctx.error);\n  next();\n});\n```\n\n将额外的元数据附加到error对象:\n\n**common/models/dog.js**\n\n```javascript\nDog.afterRemoteError('**', function(ctx, next) {\n  if (!ctx.error.details) ctx.result.details = {};\n  ctx.error.details.info = 'intercepted by a hook';\n  next();\n})\n```\n\n向调用者报告不同的error:\n\n**common/models/dog.js**\n\n```javascript\nDog.afterRemoteError('prototype.speak', function(ctx, next) {\n  console.error(ctx.error);\n  next(new Error('See server console log for details.'));\n});\n```\n\n##### 上下文对象(Context object)\n\n远程钩子提供了一个包含传输特定数据(例如HTTP的req和res)的Context`ctx`对象.`ctx`对象还具有跨传输的一组一致的API.\n\n应用程序使用loopback.rest()中间件来提供以下额外的ctx属性:\n\n* `ctx.req`:Express Request对象.\n\n* `ctx.result`:Express Response对象.\n\n传递给afterRemoteError()钩子的上下文对象具有一个附加属性`ctx.error`,设置为由远程方法报告的错误.\n\n其他属性：\n\n* `ctx.args` - 是指包含HTTP请求参数定义的对象,可以使用arg定义从请求中查找值.这些是远程方法的输入值.\n\n* `ctx.result` - An object keyed by the argument names. Exception: If the root property is true, then it’s the value of the argument that has root set to true(_译注:这句暂时保留原文,等做完实验再说_).\n\n**ctx.req.accessToken**\n\n调用远程方法的用户的`accessToken`.\n\n>  重要: 如果远程方法未由登录用户(或其他主体)调用,则ctx.req.accessToken未定义.\n\n**ctx.result**\n\n在`afterRemote`钩子期间,`ctx.result`将包含要发送到客户端的数据.所以,可以修改此对象以在发送数据之前对其进行转换.\n\n>  重要: ctx.result的值可能不会始终可用\n\n如果远程方法显式的指定了返回值,那么只有`ctx.result`才会被设置.因此,您的远程方法必须执行以下操作:\n\n```javascript\nMyModel.remoteMethod('doSomething', {\n  // ...\n  returns: {arg: 'redirectUrl', type: 'string'}\n});\n```\n\n---\n\n<h4 id=\"5.2.3\"> 5.2.3 Operation hooks(操作钩子) </h4>\n\n>  概要:操作钩子由执行特定高级创建,读取,更新或删除操作的所有方法触发.在LoopBack版本3.0中对操作钩子进行了大量更改.\n\n##### 概述\n\nOperation hooks不与特定方法绑定,而是被执行特定高级创建,读取,更新或删除操作的所有方法触发. 使用操作钩子使您能够拦截修改数据的操作,而与调用它们的特定方法无关(例如,`create`,`save`或`updateOrCreate`).\n\nAPI很简单：使用`Model.observe(_name_，_observer_)`,其中name是操作钩子的字符串名称,例如\"before save\",observer是`function observer(context, callback)`.子模型继承observers(观察者),您可以为一个钩子注册多个observers(观察者).\n\n下表总结了PersistedModel创建,检索,更新和删除方法调用的操作钩子.\n\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>Method&nbsp;→<br>&nbsp;</p>\n        <p>Operation hook ↓</p>\n      </th>\n      <th>find<br>findOne<br>findById</th>\n      <th>exists</th>\n      <th>count</th>\n      <th>create</th>\n      <th>upsert</th>\n      <th>findOrCreate</th>\n      <th>deleteAll<br>deleteById </th>\n      <th>updateAll</th>\n      <th>prototype<br>.save</th>\n      <th>prototype<br>.delete</th>\n      <th>prototype<br>.updateAttributes</th>\n      <th>\n        prototype<br>.replaceAttributes\n      </th>\n      <th>replaceById</th>\n      <th>replaceOrCreate</th>\n      <th>upsertWithWhere</th>\n    </tr>\n    <tr>\n      <th>access</th>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>before save</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>after save</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>before delete</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <th>after delete</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <th>loaded</th>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>persist</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n  </tbody>\n</table>\n\n**Operation hook上下文对象**\n\n上下文对象特定于操作钩子,并且与传递到通过Model.beforeRemote和Model.afterRemote注册的远程钩子的上下文对象没有任何关系.请注意，上下文对象与loopback.getCurrentContext()提供的\"当前上下文\"无关.\n\n**所有钩子和操作的公共属性**\n\n目标模型\n\n属性`context.Model`设置为作为操作目标的模型的构造函数.例如`Product.find()`设置`context.Model = Product`.\n\n操作选项\n\n上下文对象有一个options属性,它允许钩子访问由特定模型方法(操作)的调用者提供的任何选项.\n\n例如:\n\n```javascript\nvar FILTERED_PROPERTIES = ['immutable', 'birthday'];\nMyModel.observe('before save', function filterProperties(ctx, next) {\n  if (ctx.options && ctx.options.skipPropertyFilter) return next();\n  if (ctx.instance) {\n    FILTERED_PROPERTIES.forEach(function(p) {\n      ctx.instance.unsetAttribute(p);\n    });\n  } else {\n    FILTERED_PROPERTIES.forEach(function(p) {\n      delete ctx.data[p];\n    });\n  }\n  next();\n});\n\n// immutable is not updated\nMyModel.updateOrCreate({\n  id: 1,\n  immutable: 'new value'\n}, cb);\n\n// immutable is changed\nMyModel.updateOrCreate({\n  id: 2,\n  immutable: 'new value'\n}, {\n  skipPropertyFilter: true\n}, cb);\n```\n\n**共享hookState属性**\n\n单个操作调用的所有钩子都保存`ctx.hookState`属性.\n\n例如,对于`Model.create()`调用的“access”, “before save”和“after save”都在`ctx.hookState`中传递的相同对象.\n\n这样钩子可以在\"before\"和\"after\"钩子之间传递状态日期.\n\n**钩子和操作的具体属性**\n\n除了上面列出的公共属性,每个钩子都提供了附加属性来标识受操作和变化影响的模型实例.一般规则是上下文提供`instance`属性或一对`data`和`where`属性.\n\n**instance**\n\n当操作影响单个实例并执行所有模型属性的完全update/create/delete(例如`PersistedModel.create()`)时,将提供此属性.\n\n**where + data**\n\n当操作影响多个实例(例如`PersistedModel.updateAll()`)或执行模型属性子集的部分更新(例如`PersistedModel.prototype.updateAttributes()`）时,上下文提供了一个where过滤器用于查找受影响的记录和包含要进行的更改的plain`data`对象.\n\n**isNewInstance**\n\n一些操作提供用于区分CREATE操作和UPDATE操作的标志.有关详细信息请参阅单个钩子的文档.\n\n>  重要: 只有某些连接器支持ctx.isNewInstance.其他连接器则是未定义的.请参阅检查ctx.isNewInstance的支持(_译注:官方文档上此处给的链接打不开_).\n\n**currentInstance**\n\n此属性由执行单个实例的部分更改的钩子提供.它包含受影响的模型实例,您应该将值视为只读(不可变).\n\n**检查ctx.isNewInstance的支持情况**\n\n`ctx.isNewInstance`的初始实现仅包括对内存,MongoDB和MySQL连接器的支持.您可以通过测试“after save”返回的值来检查连接器是否支持此功能.\n\n例如:\n\n```javascript\nMyModel.observe('after save', function(ctx, next) {\n  console.log('supports isNewInstance?', ctx.isNewInstance !== undefined);\n  next();\n});\n// It's important to provide a value for the id property\n// Include also values for any required properties\nMyModel.updateOrCreate({\n  id: 123\n}, console.log);\n```\n\n**访问受影响的实例**\n\n仅影响单个实例的操作(所有创建,检索,更新和删除操作,除了`PersistedModel.deleteAll`和`PersistedModel.updateAll`）通常在上下文对象中提供受影响的实例.但是,根据操作,此实例可以是可修改的`ctx.instance`或只读的`ctx.currentInstance`:\n\n<table>\n  <tbody>\n    <tr>\n      <th>&nbsp;</th>\n      <th>before save</th>\n      <th>persist</th>\n      <th>after save</th>\n      <th>before delete</th>\n      <th>after delete</th>\n    </tr>\n    <tr>\n      <td><code>create</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</span></td>\n    </tr>\n    <tr>\n      <td><code>findOrCreate</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>updateOrCreate</code></td>\n      <td><em>n/a*</em></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>upsertWithWhere</code></td>\n      <td><em>n/a*</em></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>updateAll</code></td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>prototype.save</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>prototype.updateAttributes</code></td>\n      <td><code><span>ctx.currentInstance</span></code></td>\n      <td><code><span>ctx.currentInstance</span></code></td>\n      <td><code><span>ctx.instance</span></code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td>\n        <p><code>prototype.delete</code></p>\n      </td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td><code><span>ctx.where.id</span></code></td>\n      <td><code><span>ctx.where.id</span></code></td>\n    </tr>\n    <tr>\n      <td><code>deleteAll</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n    </tr>\n    <tr>\n      <td><span>replaceOrCreate</span></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td>---</td>\n      <td>---</td>\n    </tr>\n    <tr>\n      <td>\n        <p><span>prototype.replaceAttributes/</span></p>\n        <p><span>replaceById</span></p>\n      </td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td>---</td>\n      <td>---</td>\n    </tr>\n  </tbody>\n</table>\n\n(*)操作`updateOrCreate`和`upsertWithWhered`在“before save”钩子中不提供任何实例.因为我们不能预先告诉操作是否会导致UPDATE或CREATE,我们不能确定是否有任何存在的\"currentInstance\"受操作影响.\n\n有关详细信息,请参阅以下部分.\n\n##### Hooks(钩子)\n\nLoopBack提供如下这些操作钩子:\n\n* access\n* before save\n* after save\n* before delete\n* after delete\n* loaded\n* persist\n\n下表列出了PersistedModel方法调用的钩子:\n\n<table>\n  <tbody>\n    <tr>\n      <th width=\"160\">Method name</th>\n      <th>Hooks invoked</th>\n    </tr>\n    <tr>\n      <td>\n        <p>all<br>find<br>findOne <br>findById  <br>exists<br>count </p>\n      </td>\n      <td>access, loaded</td>\n    </tr>\n    <tr>\n      <td>create</td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>upsert (aka updateOrCreate)</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>upsertWithWhere</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>findOrCreate</td>\n      <td>access, before save*, after save*, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>deleteAll (destroyAll)<br>deleteById (destroyById)</td>\n      <td>access, before delete, after delete</td>\n    </tr>\n    <tr>\n      <td>updateAll</td>\n      <td>access, before save, after save, persist</td>\n    </tr>\n    <tr>\n      <td>prototype.save</td>\n      <td>before save, after save, persist, loaded</td>\n    </tr>\n    <tr>\n      <td>prototype.delete</td>\n      <td>before delete, after delete</td>\n    </tr>\n    <tr>\n      <td>prototype.<br/>updateAttributes</td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>replaceOrCreate</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>prototype.<br/>replaceAttributes\n        <br/>replaceById<\n      </td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n  </tbody>\n</table>\n\n(*)当`findOrCreate`找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发`before save`钩子,即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.\n\n**access**\n\n每当为模型查询数据库时,即调用PersistedModel的任何create,retrieve,update和delete方法时,都会触发`access`钩子. Observers(观察者)可以修改查询,例如添加额外的限制.\n\n>  注意:原型方法不会触发access钩子,因为钩子已经被从数据库加载模型实例的方法触发了.例如,当您通过REST API调用原型方法时,会进行两个模型调用:static findById()(触发\"access\"钩子),然后根据请求创建原型方法.\n\n上下文属性\n\n* `model` - 将被查询的模型的构造函数\n* `query` - 包含字段的查询,`where`,`include`,`order`等等.\n\n例子:\n\n```javascript\nMyModel.observe('access', function logQuery(ctx, next) {\n  console.log('Accessing %s matching %s', ctx.Model.modelName, ctx.query.where);\n  next();\n});\n\nMyModel.observe('access', function limitToTenant(ctx, next) {\n  ctx.query.where.tenantId = loopback.getCurrentContext().tenantId;\n  next();\n});\n```\n\n**before save**\n\n在修改(创建,更新)模型实例之前触发`before save`钩子,特别是当调用PersistedModel的以下方法时:\n\n* create()\n* upsert()\n* upsertWithWhere()\n* findOrCreate()*\n* updateAll()\n* prototype.save()\n* prototype.updateAttributes()\n* replaceOrCreate()\n* prototype.replaceById() / replaceAttributes()\n\n(*)当`findOrCreate`找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发`before save`钩子,即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.\n\n钩子在调用模型验证函数之前触发.\n\n由于在调用验证器之前触发`before save`钩子,因此可以使用它来确保空值或使用缺省值填充缺少值.\n\n根据触发此钩子的方法,上下文将具有以下属性集之一:\n\n* 完全保存单个模型\n  * `Model` - 将被保存的模型的构造函数\n  * `instance` - 要保存的模型实例,该值是Model类的一个实例.\n\n* 多个模型的部分更新\n  * `Model` - 将被保存的模型的构造函数\n  * `where` - where过滤器描述将影响哪些实例\n  * `data` - 更新期间应用的（部分）数据\n  * `currentInstance` - 受影响的实例,请参见下面的prototype.updateAttributes触发.\n\n___ctx.isNewInstance___\n\n在设置ctx.instance时,`before save`钩子提供`ctx.isNewInstance`属性,并具有以下值:\n\n* 所有CREATE操作均为真\n* 所有UPDATE和REPLACE操作均为False\n* updateOrCreate,upsertWithWhere,replaceOrCreate,prototype.save,prototype.updateAttributes和updateAll操作的值都是Undefined(未定义).\n\n___嵌入关系(Embedded relations)___\n\n您可以为嵌入在另一个模型中的模型定义`before save`钩子.然后,更新或创建包含模型的实例将触发嵌入模型上的操作钩子.发生这种情况时,`ctx.isNewInstance`为false,因为只创建容器模型的新实例.\n\n例如,如果`Customer embedsOne Address`,并且您在地址模型上定义了一个`before save`钩子,则创建一个新的Customer实例将触发操作钩子.\n\n___在before save钩子中操作模型数据___\n\n如上所述,上下文提供`instance `属性或一对`data`以及`where`属性.在`ctx.instance`中公开一个完整的模型实例允许钩子调用自定义模型的实例方法(例如,当地址等订单数据改变时,钩子可以调用`order.recalculateShippingAndTaxes()`）.这就是为什么LoopBack创建,检索,更新和删除操作会提供实例(如果可能).\n\n当提供实例对象不可行时.有两个异常值得注意:\n\n1. `PersistedModel.updateAll`更新与提供的查询匹配的多个实例.LoopBack甚至不从数据库加载它们的数据,它是由数据库来查找这些实例并应用必要的更改.\n\n2. `PersistedModel.updateAttributes`执行部分更新，只修改模型属性的子集.虽然LoopBack具有可用的模型实例,但它还需要知道应该在数据库中更改哪些模型属性.在`ctx.data`中传递操作有效内容 - 一个仅包含应该修改的属性的纯对象 - 使钩子实现可以轻松地添加/删除要修改的属性.您仍然可以通过`ctx.currentInstance`访问要修改的模型实例,只要将其视为不可变(只读)即可.\n\n例子:\n\n```javascript\nMyModel.observe('before save', function updateTimestamp(ctx, next) {\n  if (ctx.instance) {\n    ctx.instance.updated = new Date();\n  } else {\n    ctx.data.updated = new Date();\n  }\n  next();\n});\n\nMyModel.observe('before save', function computePercentage(ctx, next) {\n  if (ctx.instance) {\n    ctx.instance.percentage = 100 * ctx.instance.part / ctx.instance.total;\n  } else if (ctx.data.part && ctx.data.total) {\n    ctx.data.percentage = 100 * ctx.data.part / ctx.data.total;\n  } else if (ctx.data.part || ctx.data.total) {\n    // either report an error or fetch the missing properties from DB\n  }\n  next();\n});\n```\n\n___移除不需要的属性___\n\n要删除(取消设置)模型实例中的属性,将其值设置为undefined或删除属性是不够的.必须调用`unsetAttribute(name)`. 但是,不要忘记处理上下文具有数据属性的情况!由于数据对象是普通对象,因此可以通过delete操作符以常规方式删除属性.\n\n例子:\n\n```javascript\nMyModel.observe('before save', function removeUnwantedField(ctx, next) {\n  if (ctx.instance) {\n    ctx.instance.unsetAttribute('unwantedField');\n  } else {\n    delete ctx.data.unwantedField;\n  }\n  next();\n});\n```\n\n这将完全删除字段,并防止将伪数据插入数据库.\n\n**after save**\n\n在模型更改成功地保持到数据源之后调用`after save`钩子,特别是当调用PersistedModel的以下方法时:\n\n* create()\n* upsert()\n* upsertWithWhere()\n* findOrCreate()*\n* updateAll()\n* prototype.save()\n* prototype.updateAttributes()\n* prototye.replaceAttributes() / replaceById()\n* replaceOrCreate()\n\n(*)当`findOrCreate`找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发`before save`钩子(_译注:这里原文是不是有问题?应该是after save吧_),即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.\n\n根据触发此钩子的方法,上下文将具有以下属性集之一:\n\n* 单个模型被更新：\n  * `Model` - 将被保存的模型的构造函数.\n  * `instance` - 保存的模型实例.该值是Model类的实例,并包含由数据存储计算的更新值(例如,自动生成的ID).\n\n     > 注意： after save钩子将对ctx.instance的更改返回给调用者(REST客户端),但不会将它们持久保存到数据库!\n\n* 通过`Model.updateAll`对更多模型实例进行部分更新：\n  * `Model` - 将被保存的模型的构造函数.\n  * `where` - where过滤器描述查询哪些实例.请参阅下面的警告.\n  * 'data` - 在更新期间应用的(部分)数据.\n\n     >  注意：您不能可靠地使用\"after save\"的\"where\"查询来查找受影响的模型.考虑下面的调用:\n     \n     ```javascript\n     MyModel.updateAll({ color: 'yellow' }, { color: 'red' }, cb);\n     ```\n     \n     此时,\"after save\"钩子是运行的,但是没有记录会匹配这个查询条件{ color: 'yellow' }.\n     \n`after save`在设置`ctx.instance`时提供`ctx.isNewInstance`属性,并具有以下值:\n\n* 所有CREATE操作后为true.\n* 所有UPDATE/REPLACE操作后为False.\n* `updateOrCreate`,`prototype.save`和`prototype.updateAttributes`需要连接器来报告是创建了新实例还是更新了现有实例.当连接器提供此信息时,`ctx.isNewInstance`为True或False. 当连接器不支持此功能(见下文)时,该值为undefined.\n\n>  重要:只有某些连接器支持ctx.isNewInstace.其他连接器是未定义的.请参阅检查ctx.isNewInstance的支持.\n\n___Embedded relations(嵌入关系)___\n\n您可以为嵌入在另一个模型中的模型定义`after save`钩子.然后,更新或创建包含模型的实例将触发嵌入模型上的操作钩子.发生这种情况时,`ctx.isNewInstance为false`,因为只创建容器模型的新实例.\n\n例如,如果`Customer embedsOne Address`,并且您在地址模型上定义了一个`after save`钩子,则创建一个新的Customer实例将触发操作钩子.\n\n例子:\n\n```javascript\nMyModel.observe('after save', function(ctx, next) {\n  if (ctx.instance) {\n    console.log('Saved %s#%s', ctx.Model.modelName, ctx.instance.id);\n  } else {\n    console.log('Updated %s matching %j',\n      ctx.Model.pluralModelName,\n      ctx.where);\n  }\n  next();\n});\n```\n\n**before delete**\n\n在从数据源中删除模型之前触发`before delete`钩子,特别是当调用PersistedModel的以下方法时:\n\n* `destroyAll()` (same as `deleteAll()`)\n* `destroyById()`(same as `deleteById()`)\n* `prototype.destroy()` (same as `prototype.delete()`)\n\n>  重要: `before delete`钩子不接收删除的模型实例ID的列表,因为后端数据存储器(例如关系数据库或NoSQL数据库)不提供此信息.但是,当删除单个模型实例时,钩子接收包含要删除的实例的id的ctx.where.\n\n_Context properties(上下文属性)_\n\n* `Model ` - 将被查询的模型的构造函数\n* `where` - where过滤器描述将删除哪些实例\n\n例子:\n\n```javascript\nMyModel.observe('before delete', function(ctx, next) {\n  console.log('Going to delete %s matching %j',\n    ctx.Model.pluralModelName,\n    ctx.where);\n  next();\n});\n```\n\n要拒绝基于某些条件删除模型,请调用带有错误的next()以中止删除操作.\n\n例子:\n\n```javascript\nif (subscriptions.length > 0) {\n  //Stop the deletion of this Client\n  var err = new Error(\"Client has an active subscription, cannot delete\");\n  err.statusCode = 400;\n  console.log(err.toString());\n  next(err);\n} else {\n  next();\n}\n```\n\n**after delete**\n\n>  重要:`after delete`钩子不接收已删除模型实例ID的列表,因为后端数据存储(如关系数据库或NoSQL数据库)不提供此信息.但是,当删除单个模型实例时,钩子接收包含要删除的实例的id的ctx.where.\n\n在从数据源中删除一些模型之后触发`after delete`钩子,特别是当调用PersistedModel的以下方法时:\n\n* `destroyAll()` (same as `deleteAll()`)\n* `destroyById()`(same as `deleteById()`)\n* `prototype.destroy()` (same as `prototype.delete()`)\n\n_Context properties(上下文属性)_\n\n* `Model ` - 将被查询的模型的构造函数\n* `where` - where过滤器描述哪些实例被删除\n\n例子:\n\n```javascript\nMyModel.observe('after delete', function(ctx, next) {\n  console.log('Deleted %s matching %j',\n    ctx.Model.pluralModelName,\n    ctx.where);\n  next();\n});\n```\n\n**loaded**\n\n这个钩子由PersistedModel的以下方法触发:\n\n* find()\n* findOne()\n* findById()\n* exists()\n* count()\n* create()\n* upsert() (same as updateOrCreate())\n* upsertWithWhere()\n* findOrCreate()*\n* prototype.save()\n* prototype.updateAttributes()\n* replaceOrCreate()\n* prototype.replaceAttributes() / replaceById()\n\n>  重要:默认情况下,create和updateAttributes不会将数据库更新应用于返回到回调的模型实例,因此\"loaded\"挂钩所做的任何更改都将被丢弃.要更改此行为,请设置每个模型选项updateOnLoad：true.\n\nLoopBack在连接器获取数据之后,在从该数据创建模型实例之前调用此钩子.这使钩子能够解密数据.注意:此钩子使用原始数据库数据调用,而不是完整的模型实例.\n\n_Context properties(上下文属性)_\n\n* `data` - 连接器返回的数据(从数据库加载)\n\n**persist**\n\n此钩子由将数据保存到数据源的操作触发,具体来说,是PersistedModel的以下方法:\n\n* create()\n* upsert() (same as updateOrCreate())\n* upsertWithWhere()\n* findOrCreate()*\n* prototype.save()\n* prototype.updateAttributes()\n* updateAll()\n* replaceOrCreate()\n* prototype.replaceAttributes() / replaceById()\n\n不要将此钩子与\"before save\"钩子混淆:\n\n* **before save** - 使用此钩子观察(并操作)将要保存的模型实例(例如,设置国家代码并且国家名称未填写时,填写国家/地区名称).\n\n* **persist** - 使用此钩子在数据被持久化到数据源(例如,加密数据库中的值)之前观察(和操作)数据.\n\n在`create`期间通过persist钩子将应用的更新反映到数据库中,但是相同的更新不会反映在create回调里获得的实例对象中.\n\n其次,对于实现原子`findOrCreate`的连接器,每次都会创建对象的新实例,即使稍后在数据库中找到现有记录也是如此.所以:\n\n* ctx.data.id和ctx.currentInstance.id都设置为新ID.\n* ctx.isNewInstance为true\n\n_上下文属性(Context properties)_\n\n* `data` - 将发送到连接器的数据保存到数据库\n* `currentInstance` - 受影响的模型实例\n* `isNewInstance` - 见下文\n\n对于这个钩子来说,`ctx.isNewInstance`是:\n\n* True for all CREATE operations\n* False for all UPDATE operations\n* Undefined for updateOrCreate, , upsertWithWhere, replaceOrCreate, prototype.save, prototype.updateAttributes, and updateAll operations.\n\n**afterInitialize hook**\n\n>  重要:afterInitialize不是严格的操作钩子,它实际上是唯一没有被弃用的模型钩子.\n它是一个同步方法,没有回调函数,在钩子中执行逻辑后,不需要调用next().\n\n在模型初始化后调用此钩子.例如:\n\n**/common/models/coffee-shop.js**\n\n```javascript\n...\nCoffeeShop.afterInitialize = function() {\n  //your logic goes here\n};\n...\n```\n\n大多数操作需要在实际执行操作之前初始化模型,但是有一些情况下不会触发initialize事件,例如对exists,count或批量更新REST端点的HTTP请求.\n\n---\n\n<h4 id=\"5.2.4\"> 5.2.4 Connector hooks(连接器钩子) </h4>\n\n>  概要:连接器钩子由连接器操作触发\n\n##### 概述\n\n连接器负责在模型方法上与后端系统交互,连接器钩子使应用程序能够拦截连接器执行.\n\n##### Hooks(钩子)\n\n**before execute**\n\n在连接器向后端发送请求之前,调用\"before execute\"钩子.\n\n```javascript\nvar connector = MyModel.getDataSource().connector;\nconnector.observe('before execute', function(ctx, next) {\n  // ...\n  next();\n});\n```\n\n要终止调用,请调用`ctx.end(err, result)`,例如:\n\n```javascript\nvar connector = MyModel.getDataSource().connector;\nconnector.observe('before execute', function(ctx, next) {\n  // ...\n  ctx.end(null, cachedResponse);\n});\n```\n\n**after execute**\n\n在连接器从后端接收到响应之后,调用\"after execute\"钩子.\n\n```javascript\nconnector.observe('after execute', function(ctx, next) {\n  // ...\n  next();\n});\n```\n\n##### Context(上下文)\n\n上下文对象包含要操作的钩子的信息.它根据连接器的类型而变化.\n\n_SQL based connectors (MySQL, PostgreSQL, SQL Server, Oracle)_\n\n```json\nbefore: {req: {sql: 'SELECT ...', params: [1, 2]}, end: ...}\n```\n\n```json\nafter: {req: {sql: 'SELECT ...', params: [1, 2]}, res: ..., end: ...}\n```\n\n_MongoDB connector_\n\n```json\nbefore: {req: {command: ..., params: ...}, end: ...}\n```\n\n```json\nafter: {req: {...}, res: {...}, end: ...}\n```\n\nreq.command is the command for the mongodb collection.\nreq.params is the parameters passing to the mongodb driver.\nres is the object received from the mongodb driver.\n\n_REST connector_\n\n```json\nbefore: {req: {...}, end: ...}\n```\n\n```json\nafter: {req: {...}, res: {...}, end: ...}\n```\n\nreq is the object passing to request module.\nres is the object received from request module.\n\n_SOAP connector_\n\n```json\nbefore: {req: {...}, end: ...}\n```\n\n```json\nafter: {req: {...}, res: {...}, end: ...}\n```\n\nreq is the object passing to request module.\nres is the object received from request module.\n\n---\n\n<h4 id=\"5.3\"> 5.3 定义引导脚本 </h4>\n\n##### 概述\n\nLoopBack引导程序,`loopback-boot`执行应用程序初始化(也称为引导).当应用程序启动时,引导程序:\n\n* 配置数据源.\n* 定义自定义模型.\n* 配置模型并将模型附加到数据源.\n* 配置应用程序设置.\n* 运行/server/boot目录中的引导脚本.\n\nloopback-boot模块导出一个初始化应用程序的`boot()`函数.例如,从标准的scaffolded server.js脚本:\n\n```javascript\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\nvar app = module.exports = loopback();\n// ...\nboot(app, __dirname, function(err) {\n  if (err) throw err;\n  // start the server if `$ node server.js`\n  if (require.main === module)\n    app.start();\n});\n```\n\n>  注意:如果您使用应用程序生成器创建应用程序,那么您不需要执行任何操作来引导应用程序 - 上述代码会自动为您架设脚本.\n\n**使用引导脚本**\n\n除了由LoopBack引导程序执行的操作之外,还可以使用引导脚本执行自定义初始化.当应用程序启动时,LoopBack加载`server/boot`目录中的所有脚本.默认情况下,LoopBack按字母顺序加载启动脚本. 您可以使用boot()的options参数自定义引导脚本加载顺序.有关详细信息,请参阅引导脚本加载顺序.\n\n##### 预定义的引导脚本\n\n应用程序生成器将创建以下引导脚本:\n\n* `/server/boot/root.js`在根端点(\"/\")绑定loopback.status()中间件以提供基本状态信息.\n* `/server/boot/authentication.js` - 通过调用app.enableAuth()为应用程序启用身份验证.\n\n**API连接**\n\nAPI Connect LoopBack生成器不会创建启用身份验证的authentication.js启动脚本.要启用用户模型身份验证,您必须自己添加此脚本.\n\n##### 使用boot script generator\n\n除了预定义的引导脚本之外,还可以自定义引导脚本,以在应用程序启动时执行自己的逻辑.\n\n使用引导脚本生成器快速生成引导脚本模板.根据对生成器提示的响应方式,它将为同步或异步引导脚本生成模板:\n\n**Synchronous boot script template**\n\n```javascript\nmodule.exports = function(app) {\n};\n```\n\n**Asynchronous boot script template**\n\n```javascript\nmodule.exports = function(app, cb) {\n  process.nextTick(cb); // Remove if you pass `cb` to an async function yourself\n};\n```\n\n##### 同步和异步引导脚本\n\nLoopBack支持同步和异步引导脚本.使用的类型取决于任务的性质.对于不想阻止程序执行的任务(如数据库请求或网络操作),请使用异步启动脚本.\n\n两种类型的引导脚本都必须导出包含脚本操作的函数.对于两种类型的引导脚本,此函数的签名是类似的,但是异步引导脚本函数需要一个额外的回调参数.\n\n**Bootstrap function arguments**\n\n```javascript\nmodule.exports = function(app, [callback]) {\n  ...\n}\n```\n\n<table>\n  <tbody>\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Required</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>app</td>\n      <td>Object</td>\n      <td>Yes</td>\n      <td>\n        <p>The application context object. Provides a handle the the application, so (for example) you can get model objects:</p>\n        <pre>var User = app.models.User;</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>callback</td>\n      <td>Function</td>\n      <td>Only for asynchronous boot scripts</td>\n      <td>Call the callback function when your application logic is done.</td>\n    </tr>\n  </tbody>\n</table>\n\n**异步引导脚本**\n\n异步引导脚本必须导出具有两个参数的函数:\n\n* 应用程序对象`app`.此对象使您能够访问系统定义的变量和配置.\n* 回调函数,使您能够根据应用程序逻辑来计算响应时间.\n\n>  重要:当脚本完成时,必须调用回调函数将控制权传回应用程序.\n\n例如,此引导脚本打印\"hello world\"并在三秒(3000毫秒)后触发回调函数.\n\n**/server/boot/script.js**\n\n```javascript\nmodule.exports = function(app, callback) {\n  setTimeout(function() {\n    console.log('Hello world');\n    callback();\n  }, 3000);\n};\n```\n\n**同步引导脚本**\n\n同步启动脚本必须导出一个函数,它接受一个参数,应用程序对象`app`.此对象使您能够访问系统定义的变量和配置.\n\n例如,此引导脚本检索在应用程序中注册的所有模型的名称,并将它们显示到控制台.\n\n**/server/boot/script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var modelNames = Object.keys(app.models);\n  var models = [];\n  modelNames.forEach(function(m) {\n    var modelName = app.models[m].modelName;\n    if (models.indexOf(modelName) === -1) {\n      models.push(modelName);\n    }\n  });\n  console.log('Models:', models);\n};\n```\n\n##### 引导脚本加载顺序\n\nLoopBack按文件名的字母顺序执行启动脚本,因此指定启动脚本加载顺序的最简单方法是按照文件名.例如,您可以命名引导脚本01-your-first-script.js,02-your-second-script.js等.这确保LoopBack按照您想要的顺序加载脚本.例如在/server/boot中的默认引导脚本之前.\n\n>  注意: LoopBack按字母顺序处理引导脚本,一次一个(不并行).这适用于同步和异步引导脚本\n\n您还可以在/server/server.js中为boot()函数调用指定加载顺序选项.替换默认的scaffolded函数调用:\n\n**/server/server.js**\n\n```javascript\n...\nboot(app, __dirname);\n...\n```\n\nWith something like this:\n\n```javascript\n...\nbootOptions = { \"appRootDir\": __dirname, \n                \"bootScripts\" : [ \"/full/path/to/boot/script/first.js\", \"//full/path/to/boot/script/second.js\", ... ]\n};\nboot(app, bootOptions);\n...\n```\n\n然后应用程序将按照bootScripts数组中指定的顺序执行脚本,指定每个脚本的完整目录路径.您还可以指定相对目录路径.\n\n>  重要: 使用上面的技术,在bootScripts中指定的自定义引导脚本运行完之后,应用程序将仍然按照字母顺序运行/server/boot中的所有引导脚本(除非您移动或删除它们).\n\n如果需要,您还可以在`bootDirs`属性中指定一个或多个目录,应用程序将在`bootScripts`中指定的那些字符之后,然后在`/server/boot`目录中指定的字母顺序之前,在该目录中运行脚本.\n\n---\n\n<h4 id=\"5.4\"> 5.4 定义中间件 </h4>\n\n##### 概述\n\n中间件是指向REST端点发出HTTP请求时执行的函数.由于LoopBack基于Express,所以LoopBack中间件与Express中间件相同.但是,LoopBack添加了中间件阶段的概念,以清楚地定义中间件被调用的顺序.使用阶段有助于避免标准Express中间件可能出现的顺序问题.\n\nLoopBack支持以下类型的中间件:\n\n* **Pre-processing middleware** - 自定义应用程序逻辑的预处理中间件.请参阅静态中间件的示例.\n* **Dynamic request handling middleware** - 动态请求处理中间件提供动态生成的响应,例如从模板呈现的HTML页面和对REST API请求的JSON响应.请参阅预处理中间件的示例.\n* **Static middleware** - 静态中间件用于提供静态客户端资源.请参阅静态中间件的示例.\n* **Error-handling middleware** - 错误处理中间件处理请求错误.请参见错误处理中间件的示例.\n\n**如何添加中间件**\n\n要向应用程序添加中间件:\n\n1. 指定中间件功能:\n  * 如果使用现有的函数或包,请将代码添加到应用程序或安装包.\n  * 如果要创建新的中间件函数,请编一个.请参阅定义新的中间件处理程序函数.\n\n2. 注册中间件:\n  * 编辑服务器/middleware.json.这是注册中间件的推荐方法.请参阅在middleware.json中注册中间件.\n  * 或者,在应用程序代码中注册中间件.请参阅在JavaScript中注册中间件.\n\n**中间件阶段**\n\nLoopBack定义了许多阶段,对应于应用程序执行的不同方面.注册中间件时,您可以指定应用程序调用它的阶段.请参阅在middleware.json中注册中间件和使用LoopBack API.如果您使用Express API注册中间件(或路由),则它会在路由阶段开始时执行.\n\n预定义的阶段是:\n\n1. `initial` - 中间件可以运行的第一个点.\n2. `session` - 准备会话对象.\n3. `auth` - 处理身份验证和授权.\n4. `parse` - 解析请求体.\n5. `routes` - 实现应用程序逻辑的HTTP路由.通过Express API `app.use`,`app.route`,`app.get`(和其他HTTP动词)注册的中间件在此阶段开始运行.对于子应用程序(如loopback/server/middleware/rest或loopback-explorer)也使用此阶段.\n6. `files` - 服务静态资源.\n7. `final` - 处理错误和未知网址的请求.\n\n每个阶段除了主阶段之外还具有\"before\"和\"after\"子阶段,在阶段名称后面编码,以冒号分隔.例如,对于\"initial\"阶段,中间件按此顺序执行:\n\n1. initial:before \n2. initial\n3. initial:after\n\n单个子阶段中的中间件按注册顺序执行.但是,你不应该依赖这样的顺序.当顺序重要时,始终使用适当的阶段显式地订购中间件.\n\n##### 指定中间件函数\n\n**使用Express中间件**\n\n您可以使用任何与Express兼容的中间件,请参阅Express文档以获取部分列表.\n\n只需安装:\n\n```bash\n$ npm install --save <module-name>\n```\n\n然后简单地注册它,使其根据需要被调用.请参阅在middleware.json中注册中间件和在JavaScript中注册中间件.\n\n**定义一个新的中间件处理函数**\n\n如果没有现有的中间件是你所需要的,你可以轻松地编写自己的中间件处理函数.要在middleware.json中注册中间件函数,需要创建一个返回中间件函数的构造函数(factory)函数.\n\n按照惯例,将中间件函数放在server/middleware目录中.\n\n中间件处理程序函数接受三个参数,或四个参数,如果它是错误处理中间件.一般形式是:\n\n```javascript\nfunction myMiddlewareFunc([err,] req, res, next) {\n    // ...\n}\n```\n\n<table>\n  <tbody>\n    <tr>\n      <th width=\"60\">Name</th>\n      <th width=\"100\">Type</th>\n      <th>Optional?</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>err</td>\n      <td>Object</td>\n      <td>Required for error-handling middleware.</td>\n      <td>\n        <p>Use <em>only</em> for error-handling middleware.</p>\n        <p>Error object, usually an instance or <code>Error</code>; for more information, see <a href=\"Error-object.html\">Error object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>req</td>\n      <td>Object</td>\n      <td>No</td>\n      <td>\n        <p>The Express <a href=\"http://expressjs.com/4x/api.html#request\" class=\"external-link\" rel=\"nofollow\">request object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>res</td>\n      <td>Object</td>\n      <td>No</td>\n      <td>\n        <p>The Express <a href=\"http://expressjs.com/4x/api.html#response\" class=\"external-link\" rel=\"nofollow\">response object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>Function</td>\n      <td>No</td>\n      <td>Call <code>next()</code> after your application logic runs to pass control to the next middleware handler.</td>\n    </tr>\n  </tbody>\n</table>\n\n具有三个参数的中间件函数的示例,调用以在先前处理程序未报告错误时处理请求:\n\n**Regular middleware**\n\n```javascript\nreturn function myMiddleware(req, res, next) {\n    // ...\n};\n```\n\n这里是这个函数的构造函数(工厂)在middleware.json中注册时使用此表单.\n\n**Regular middleware**\n\n```javascript\nmodule.exports = function() {\n  return function myMiddleware(req, res, next) {\n    // ...\n  }\n};\n```\n\n一个具有四个参数的中间件函数的示例,仅当遇到错误时调用.\n\n**Error handler middleware**\n\n```javascript\nfunction myErrorHandler(err, req, res, next) {\n  // ...\n}\n```\n\n**打包中间件函数**\n\n要跨多个项目共享中间件,请创建一个包,用于导出中间件构造函数(factory)函数,该函数接受配置选项并返回中间件处理函数,例如,如下所示.\n\n如果您使用应用程序生成器创建的现有项目,要实现可与其他项目共享的新中间件处理程序,请将中间件构造函数放在server/middleware目录中,例如server/middleware/myhandler.js.\n\n```javascript\nmodule.exports = function(options) {\n  return function customHandler(req, res, next) {\n    // use options to control handler's behavior\n  }\n};\n```\n\n##### 在middleware.json注册中间件\n\n注册中间件的最简单的方法是在server/middleware.json中.此文件指定所有应用程序的中间件函数及其调用阶段.\n\n当使用应用程序生成器创建应用程序时,它会创建一个默认的middleware.json文件,如下所示:\n\n**server/middleware.json**\n\n```json\n{\n  \"initial:before\": {\n    \"loopback#favicon\": {}\n  },\n  \"initial\": {\n    \"compression\": {}\n  },\n  \"session\": {},\n  \"auth\": {},\n  \"parse\": {},\n  \"routes\": {},\n  \"files\": {},\n  \"final\": {\n    \"loopback#urlNotFound\": {}\n  },\n  \"final:after\": {\n    \"errorhandler\": {}\n  }\n}\n```\n\nmiddleware.json中的每个顶级键定义了一个中间件阶段或子阶段,例如\"initial\",\"session:before\"或\"final\".阶段按照它们在文件中出现的顺序运行.\n\n每个阶段都是一个JSON对象,其中包含要在该阶段中调用的每个中间件函数的键.例如,\"loopback/server/middleware/favicon\"或\"compression\".\n\n一般来说,每个阶段都有以下语法:\n\n```javascript\nphase[:sub-phase] : {\n middlewarePath : {\n   [ enabled: [true | false] ]\n   [, name: nameString ]\n   [, params : paramSpec ]\n   [, methods: methodSpec ]\n   [ paths : routeSpec ]\n }\n};\n```\n\n其中:\n\n* _phase_:是上面列出的预定义阶段之一(初始,会话,auth等)或自定义阶段,请参阅添加自定义阶段.\n* _sub-phase_:(可选)可以在`before`或`after`.\n* _name_:可选中间件名称.请参阅下面的中间件配置属性.\n* _middlewarePath_:中间件函数的路径.请参阅下面的中间件功能路径.\n* _paramSpec_:中间件参数的值,通常为JSON对象.请参阅下面的中间件配置属性.\n* _methodSpec_:HTTP方法,例如'GET','POST'和'PUT'.如果不存在,则适用于所有方法.\n* _routeSpec_:触发中间件的REST端点.\n\n**中间件函数的路径**\n\n通过以下方式指定中间件函数(middlewarePath)的路径:\n\n* 对于安装在项目中的外部中间件模块,只需使用模块的名称,例如`compression`.\n* 对于安装在项目中的模块中的脚本,请使用模块的路径,例如loopback/server/middleware/rest.\n* 对于具有自定义中间件函数的脚本,请使用相对于middleware.json的路径,例如`./middleware/custom`.\n* 脚本文件的绝对路径(不推荐).\n\n此外,您可以使用速记格式`{_module _}＃{_ fragment_}`,其中fragment是:\n\n* 由模块导出的属性,例如`loopback＃favicon`解析为`require('loopback').favicon`.\n* 模块的`server/middleware`目录中的文件,例如`require('loopback/server/middleware/ favicon')`.\n* 模块中间件目录中的文件,例如`require('loopback/middleware/favicon')`.\n\n**中间件配置属性**\n\n您可以在每个中间件部分指定以下属性.它们都是可选的:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>String</td>\n      <td>An optional name for the entry. It can be used to identify an entry within the same phase/path for the purpose of merging</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>enabled</td>\n      <td>Boolean</td>\n      <td>\n        <p>Whether to register or enable the middleware. You can override this property in environment-specific files, for example to disable certain middleware when running in production. For more information, see <a href=\"Defining-middleware.html\">Environment-specific configuration</a></p>\n      </td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td>params</td>\n      <td>Object or Array</td>\n      <td>\n        <p>Parameters to pass to the middleware handler (constructor) function. Most middleware constructors take a single \"options\" object parameter; in that case the&nbsp;<code>params</code>&nbsp;value is that object.</p>\n        <p>To specify a project-relative path (for example, to a directory containing static assets), start the string with the prefix&nbsp;<code>$!</code>. Such values are interpreted as paths relative to the file&nbsp;<code>middleware.json</code>. &nbsp;</p>\n        <p>See examples below.</p>\n      </td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>methods</td>\n      <td>String[]</td>\n      <td>Specifies the HTTP methods, such as 'GET', 'POST', and 'PUT'. If not present, it will apply to all methods.</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>paths</td>\n      <td>String[]</td>\n      <td>Specifies the REST endpoint(s) that trigger the middleware. In addition to a literal string, route can be a path matching pattern, a regular expression, or an array including all these types. For more information, see the&nbsp;<a href=\"http://expressjs.com/4x/api.html#app.use\" class=\"external-link\" rel=\"nofollow\">app.use (Express documentation)</a>.&nbsp;</td>\n      <td>Triggers on all routes</td>\n    </tr>\n    <tr>\n      <td>optional</td>\n      <td>Boolean</td>\n      <td>Specify whether the middleware is optional. Optional middleware do not throw, even if they are not installed or cannot be resolved in the file system.</td>\n      <td>N/A</td>\n    </tr>\n  </tbody>\n</table>\n\n采用单个\"options\"对象参数的典型中间件函数示例:\n\n```json\n\"compression\": {\n   \"params\": {\n     \"threshold\": 512\n   }\n}\n```\n\n需要多个参数的中间件函数示例,其中使用参数数组:\n\n```json\n\"morgan\": {\n   \"params\": [\"dev\", {\n     \"buffer\": true\n   }]\n }\n```\n\n静态中间件的条目,用于从项目根目录中的客户端目录提供内容:\n\n```json\n//...\n\"files\": {\n  \"loopback#static\": {\n    \"params\": \"$!../client\"\n  }\n}\n//...\n```\n\n静态中间件的条目,用于从项目根目录中的多个目录提供内容:\n\n```json\n//...\n\"files\": {\n  \"loopback#static\": [{\n    \"name\": \"x\",\n    \"paths\": [\"/x\"],\n    \"params\": \"$!../client/x\"\n  },\n  {\n    \"name\": \"y\",\n    \"paths\": [\"/y\"],\n    \"params\": \"$!../client/y\"\n  }]\n}\n//...\n```\n\n**在值中使用变量**\n\n对于任何中间件配置属性,可以使用以下语法在值中指定变量:\n\n`${_ var_}`\n\n其中var是app对象的属性.这些属性包括:\n\n* 应用程序范围属性,如config.json中定义的属性.\n* Express应用程序对象属性.\n\nFor example, the following middleware.json configuration will load LoopBack’s built-in rest middleware (loopback.rest) during the routes phase at the path resolved by app.get('restApiRoot'), which defaults to /api.(_译注:暂时保留原文,翻译不好_)\n\n```json\n{\n  \"routes\": {\n    \"loopback#rest\": {\n      \"paths\": [\"${restApiRoot}\"]\n    }\n  }\n}\n```\n\nThe following example loads hypothetical middleware named environmental during the routes phase at the return value of app.get(env), typically either /development or /production.(_译注:暂时保留原文,翻译不好_)\n\n```json\n{\n  \"routes\": {\n    \"environmental\": {\n      \"paths\": \"${env}\"\n    }\n  }\n}\n```\n\n**添加自定义阶段**\n\n除了middleware.json中的预定义阶段之外,您还可以通过添加新的顶级键来添加自己的自定义阶段.\n\n例如,下面是一个middleware.json文件,定义了\"parse\"之后和\"routes\"之前的一个新阶段\"log\":\n\n**server/middleware.json**\n\n```json\n{\n  ...\n  \"parse\": {},\n  \"log\": { ... },\n  \"routes\": {}\n  ...\n}\n```\n\n**环境特定配置**\n\n您可以通过`middleware.local.js,middleware.local.json和middleware.env_.js或middleware.env_.json`进一步自定义配置,其中env是NODE_ENV环境变量(通常是开发或生产)的值.\n\n##### 用javascript注册中间件\n\n您可以在JavaScript代码中注册中间件:\n\n* LoopBack API,您可以指定希望中间件执行的阶段.\n* Express API,中间件在路由阶段的开始处执行.\n\n**使用LoopBack API**\n\n要使用LoopBack阶段API注册中间件,请使用以下应用程序方法:\n\n* middleware()\n* middlewareFromConfig()\n* defineMiddlewarePhases()\n\n例如:\n\n**server/server.js**\n\n```javascript\nvar loopback = require('loopback');\nvar morgan = require('morgan');\nvar errorhandler = require('error-handler');\n\nvar app = loopback();\n\napp.middleware('routes:before', morgan('dev'));\napp.middleware('final', errorhandler());\napp.middleware('routes', loopback.rest());\n```\n\n**使用Express API**\n\n>  重要: 当您使用Express API注册中间件时,它始终在路由阶段开始时执行.\n\n您可以通过调用app.use()为指定路由的所有HTTP请求指定中间件,在主应用程序脚本文件/server/server.js中使用Express定义中间件的\"常规方式\".您还可以使用app.get()仅指定GET请求中间件,使用app.post()指定仅针对POST请求的中间件,等等.有关更多信息,请参阅Express.ini文档中的app.METHOD.\n\n这里是app.use()的一般签名:\n\n```javascript\napp.use([route], function([err,] req, res, next) {\n  //...\n  next();\n});\n```\n\n像往常一样,app是LoopBack应用程序对象: app = loopback（）.\n\n参数为:\n\n* route,一个可选参数,指定中间件绑定到的URI路由或\"装载路径\".当应用程序在此路由接收到HTTP请求时,它调用(或触发)处理函数.\n* 中间件处理函数(或只是\"中间件函数\").请参阅定义新的中间件处理程序函数.\n\n例如：\n\n**server/server.js**\n\n```javascript\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\n\nvar app = module.exports = loopback();\n\n// Bootstrap the application, configure models, datasources and middleware.\n// Sub-apps like REST API are mounted via boot scripts.\nboot(app, __dirname);\n// this middleware is invoked in the \"routes\" phase\napp.use('/status', function(req, res, next) {\n  res.json({ running: true });\n});\n```\n\n**指定路由**\n\n`_route_`参数是一个字符串,指定将触发中间件的REST端点.如果不提供参数,那么中间件将在所有路由上触发.除了字符串,`_route_`可以是路径匹配模式,正则表达式或包含所有这些类型的数组.有关更多信息,请参阅app.use()的Express文档.\n\n例如，要为以\"/greet\"开头的所有端点注册中间件:\n\n**/server/server.js**\n\n```javascript\napp.use('/greet', function(req, res, next ) { \n  //...\n});\n```\n\n上述中间件由以\"/greet\"开头的所有路由触发,因此\"/greet/you\",\"greet/me/and/you\"将触发它.\n\n要为所有端点注册中间件:\n\n**server/server.js or server/boot/scripts.js**\n\n```javascript\napp.use(function(req, res, next ) {\n  //...\n});\n```\n\n**Caveats(警告)**\n\n使用中间件时有一些事情要注意,主要是中间件声明顺序.使用\"全部\"路由时,请注意中间件注册的顺序.\n\n例如:\n\n**server/server.js**\n\n```javascript\n//...\napp.get('/', function(req, res, next) {\n  res.send('hello from `get` route');\n});\napp.use(function(req, res, next) {\n  console.log('hello world from \"catch-all\" route');\n  next();\n});\napp.post('/', function(req, res, next) {\n  res.send('hello from `post` route')\n});\n//...\n```\n\n在这种情况下,由于GET /中间件结束响应链,所以在发出get请求时,不会触发\"catch-all\"中间件.但是,当向/发出POST请求时,\"catch-all\"路由会被触发,因为它在post路由之前被声明.执行POST将显示来自\"catch-all\"路由和POST /路由的控制台消息.\n\n##### 例子\n\n**静态中间件**\n\n静态中间件,用于从项目根目录中的client目录提供内容:\n\n```json\n//...\n\"files\": {\n  \"loopback#static\": {\n    \"params\": \"$!../client\"\n  }\n}\n//...\n```\n\n**预处理中间件**\n\n使用预处理中间件为应用程序中的各种端点应用自定义逻辑.通过注册处理程序函数以在对特定端点或多个端点发出HTTP请求时执行某些操作来执行此操作.\n\n>  重要：始终在路由之前的阶段注册预处理中间件,例如初始或解析.\n\n预处理中间件必须在处理程序函数的结尾调用next(),以将控制权传递给下一个中间件.如果你不这样做,你的应用程序将基本上\"冻结\".从技术上讲,next()不必发生在函数的结尾(例如,它可能发生在if / else块),但是处理函数必须最终调用它.\n\n例如:\n\n```javascript\nmodule.exports = function() {\n  return function tracker(req, res, next) {\n    console.log('Request tracking middleware triggered on %s', req.url);\n    var start = process.hrtime();\n    res.once('finish', function() {\n      var diff = process.hrtime(start);\n      var ms = diff[0] * 1e3 + diff[1] * 1e-6;\n      console.log('The request processing time is %d ms.', ms);\n    });\n    next();\n  };\n};\n```\n\n此中间件通知服务器显示在所有应用程序路由上处理传入HTTP请求所花费的时间.\n\n你可以看到这个中间件在使用LoopBack入门的基本LoopBack应用程序(或任何标准的LoopBack应用程序):\n\n1. 将上面的代码添加到server/middleware/tracker.js.\n2. 编辑(或创建)server/middleware.json并在\"初始\"阶段注册新的中间件.\n   \n   **server/middleware.json**\n   \n   ```json\n   {\n      \"initial\": {\n      \"./middleware/tracker\": {}\n      }\n   }\n   ```\n\n3. 启动应用程序:`node .`\n4. 访问`http://localhost:3000`.\n\nIn the console, you will see (for example):\n\n```\n...\nRequest tracking middleware triggered on /.\nThe request processing time is 4.281957 ms. //your results will vary\n```\n\n**路由中间件**\n\n对于提供JSON的路由,最佳实践是创建一个新模型并将路由实现为远程方法.对于提供非JSON响应的路由,最佳实践是在server.js或引导脚本中为它们定义标准的\"Express方式\".有关详细信息,请参阅路由和路由(Express文档).\n\n>  注意: 如果在路由或路由上添加中间件,在阶段之后,它将不会在路由匹配后执行.相反,它将被忽略,因为路由已经匹配.\n\n**错误处理中间件**\n\n使用错误处理中间件处理请求错误.虽然您可以自由注册任何数量的错误处理中间件,但请务必在\"final\"阶段注册它们.LoopBack默认注册两个错误处理中间件:\n\n* `urlNotFound`中间件将所有到达中间件的请求转换为状态为404的错误对象,以使404错误响应与\"通常\"错误响应一致.\n* `errorhandler`中间件来自errorhandler模块,以前在Express v.3中作为`express.errorHandler`可用.有关自定义此错误处理程序的信息.请参阅自定义REST错误处理.\n\n自定义错误处理中间件的示例:\n\n```javascript\nmodule.exports = function() { \n  return function logError(err, req, res, next) { \n    console.log('ERR', req.url, err); \n  };\n};\n```\n\n要注册这个中间件:\n\n1. Add the code above to /server/middleware/log-error.js.\n2. Edit /server/middleware.json and register the new middleware in the “final” phase: \n\n   ```json\n   {\n     \"final\": {\n     \"./middleware/log-error\": {}\n     }\n   }\n   ```\n\n3. Start the application.\n\n4. Load http://localhost:3000/url-does-not-exist in your browser.\n\n---\n\n<h4 id=\"5.5\"> 5.5 使用当前上下文 </h4>\n\n>  警告: 不推荐使用当前上下文功能!loopback-context的当前实现基于已知存在许多问题的模块continuation-local-storage(例如,参见issue＃59).因此,loopback-context在许多情况下不工作,从LoopBack的问题跟踪器中报告的问题可以看出.参见loopback issue＃1495更新和一个替代解决方案.\n\nLoopBack应用程序有时需要访问上下文信息来实现业务逻辑,例如:\n\n* 访问当前登录的用户.\n* 访问HTTP请求(如URL和标头).\n\n调用LoopBack模型方法的典型请求通过具有异步回调链的多个层传递.并不总是可以通过方法参数传递所有信息.\n\n##### Error messages\n\nLoopBack 3.0删除了当前上下文API.使用当前上下文的应用程序在收到其第一个HTTP请求时将打印以下错误消息:\n\n```\nUnhandled error for request GET /api/Users:\nError: remoting.context option was removed in version 3.0.\nFor more information, see https://loopback.io/doc/en/lb3/Using-current-context.html\nfor more details.\n    at restApiHandler (.../node_modules/loopback/server/middleware/rest.js:44:15)\n    at Layer.handle [as handle_request] (.../node_modules/express/lib/router/layer.js:95:5)\n    ...\n```\n\n要删除此警告,请禁用由内置REST处理程序添加的上下文中间件.将server/config.json中的remoting.context属性设置为false,例如:\n\n**server/config.json**\n\n```json\n{\n  \"remoting\": {\n    \"context\": false,\n    ...\n  },\n  ...\n}\n```\n\n如果您的应用程序依赖于loopback.getCurrentContext,请按照以下说明重新使用您的代码直接使用loopback-context.\n\n##### 安装loopback-context\n\n```bash\n$ npm install --save loopback-context\n```\n\n##### 配置上下文传播\n\n要设置LoopBack应用程序为每个传入的HTTP请求创建一个新的上下文,请在server/middleware.json中配置per-context中间件,如下所示:\n\n```json\n{\n  \"initial\": {\n    \"loopback-context#per-request\": {},\n  }\n  ...\n}\n```\n\n>  重要:默认情况下,HTTP req/res对象不会设置到当前上下文.您需要将enableHttpContext设置为true以启用req/res对象的自动填充.\n\n##### 使用当前上下文\n\n一旦启用上下文传播,就可以使用LoopBackContext.getCurrentContext()访问当前上下文对象.上下文将在中间件(如果它在上下文中间件之后加载),远程钩子,模型钩子和自定义方法中可用.\n\n```javascript\nvar LoopBackContext = require('loopback-context');\n\nMyModel.myMethod = function(cb) {\n  var ctx = LoopBackContext.getCurrentContext();\n  // Get the current access token\n  var accessToken = ctx && ctx.get('accessToken');\n  ...\n  // Set more information on current context\n  ctx.set('foo', { bar: 'val' } );\n\n  ...\n}\n```\n\n##### 在远程方法中使用当前授权用户\n\n在高级用例中,例如,当您想要添加自定义中间件时,必须在中间件链中的正确位置(在依赖于LoopBackContext.getCurrentContext的中间件之前)添加上下文中间件.\n\n>  重要: LoopBackContext.perRequest()检测在相同请求上多次调用时的情况,并在后续运行中立即返回.\n\n这里的示例代码使用中间件函数将当前认证的用户放入上下文中,以便远程方法可以使用它:\n\n**/server/server.js**\n\n```javascript\n...\n// -- Add your pre-processing middleware here --\napp.use(LoopBackContext.perRequest());\napp.use(loopback.token());\napp.use(function setCurrentUser(req, res, next) {\n  if (!req.accessToken) {\n    return next();\n  }\n  app.models.UserModel.findById(req.accessToken.userId, function(err, user) {\n    if (err) {\n      return next(err);\n    }\n    if (!user) {\n      return next(new Error('No user with this access token was found.'));\n    }\n    var loopbackContext = LoopBackContext.getCurrentContext();\n    if (loopbackContext) {\n      loopbackContext.set('currentUser', user);\n    }\n    next();\n  });\n});\n\n// boot scripts mount components like REST API\n...\n```\n\n**/common/models/YourModel.js**\n\n```javascript\nvar loopback = require('loopback');\nvar LoopBackContext = require('loopback-context');\nmodule.exports = function(YourModel) {\n  ...\n  //remote method\n  YourModel.someRemoteMethod = function(arg1, arg2, cb) {\n    var ctx = LoopBackContext.getCurrentContext();\n    var currentUser = ctx && ctx.get('currentUser');\n    console.log('currentUser.username: ', currentUser.username); // voila!\n    ...\n    cb(null);\n  };\n  ...\n};\n```\n\n---\n\n<h4 id=\"5.6\"> 5.6 事件 </h4>\n\nLoopBack app对象是一个Node EventEmitter,因此具有app.emit()和app.on()方法.\n\n除了标准的Node事件,LoopBack应用程序和模型还能发起其他事件.\n\n##### 应用程序事件\n\n默认情况下,使用应用程序生成器创建的应用程序在运行引导脚本后启动时会发出\"started\"事件.\n\n##### 模型事件\n\n所有模型发出以下事件:\n\n默认情况下,基本的LoopBack模型对象具有属性和方法\"mixed in\":\n\n* 包含对象 - 允许您加载多个对象的关系并优化请求数.\n* 可验证对象 - 提供验证方法.请参阅验证模型数据。\n\n当定义模型之间的关系时,RelationMixin对象对象也会混合到模型对象中.\n\n**附件**\n\n`Model`已附加到`app`后发出.\n\n**dataSourceAttached**\n\n在`Model `已附加到`DataSource`之后发出.\n\n**set(设置)**\n\n设置模型属性时发出,参数:inst,模型实例,对象.\n\n例如：\n\n```javascript\nMyModel.on('set', function(inst) {\n  console.log('model with id %s has been changed', inst.id);\n  // => model with id 1 has been changed\n});\n```\n\nArguments: data, an object.\n\n##### PersistedModel事件\n\nPersistedModels还有一个更改的事件,监听模型更改.\n\n例如:\n\n```javascript\nMyPersistedModel.on('changed', function(obj) {\n   console.log(obj) // => the changed model\n});\n```\n\n##### User模型事件\n\n`User `模型User.resetPassword()方法发出了\"resetPasswordRequest\"事件.\n\n---\n\n<h4 id=\"5.7\"> 5.7 使用promises </h4>\n\n暂不翻译......\n\n--\n\n<h4 id=\"6\"> 6 管理用户 </h4>\n\n>  概要: LoopBack的内置用户模型提供基本的用户管理功能.\n\n##### 概述\n\nLoopBack的内置用户模型提供基本的用户管理功能,如:\n\n* 通过电子邮件注册和确认.\n* 登录和注销.\n* 创建访问令牌.\n* 重设密码.\n\n>  重要: 您必须创建自己的自定义模型(命名为\"客户\"或\"客户端\"),它扩展了内置用户模型,而不是直接使用内置用户模型.内置的用户模型提供了大量常用的功能,您可以通过您的自定义模型使用.此外,LoopBack在单个应用程序中不支持基于用户模型的多个模型.也就是说,在单个应用程序中,不能有多个模型从内置User模型派生.\n\n##### 创建和验证(授权)用户\n\n创建和验证用户的基本过程是:\n\n1. 使用User.create()方法注册一个新用户,继承自通用的PersistedModel对象.有关详细信息,请参阅注册用户.\n2. 通过调用User.login()登录用户以获取访问令牌.有关详细信息,请参阅登录用户.\n3. 使用访问令牌进行后续的API调用.在HTTP头中提供访问令牌或作为REST API调用的查询参数,如使用访问令牌进行身份验证请求中所示.\n\n**性能提示**\n\n要在登录和创建用户期间提高性能,请尝试本地化安装bcrypt.\n\n```bash\n$ npm install --save bcrypt\n```\n\n##### 理解内置User模型\n\n默认情况下,LoopBack应用程序具有由user.json定义的内置用户模型(此文件是LoopBack框架的一部分,不要修改它,而是遵循扩展内置模型中的过程).\n\n>  提示:有关LoopBack用户模型如何执行身份验证的基本介绍，请参阅用户模型身份验证简介.\n\n**默认访问控制**\n\n内置的User模型有如下的ACL:\n\n```json\n{\n  \"name\": \"User\",\n  \"properties\": {\n    ...\n    \"acls\": [{\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"DENY\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"create\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$owner\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"deleteById\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"login\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"logout\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$owner\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"findById\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$owner\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"updateAttributes\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"confirm\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"resetPassword\",\n      \"accessType\": \"EXECUTE\"\n    }],\n    //...\n  }\n}\n```\n\n上述ACL拒绝所有操作,然后选择性地允许:\n\n* 任何人都创建一个新用户(用户实例).\n* 任何人登录,注销,确认其身份,并重置自己的密码.\n* 用户对自己的用户记录(实例)执行deleteById,findById和updateAttributes.\n\n>  重要提示: 无法使用ACL生成器直接修改内置模型(例如User模型).但是,您可以创建扩展内置用户模型的自定义模型,然后使用ACL生成器定义添加到默认用户模型的访问控制.例如,您可以创建扩展内置用户模型的客户或客户端模型,然后使用该工具修改该模型的ACL.由于模型不从其基本模型继承ACL,因此必须为新的自定义模型定义ACL.\n\n**User领域**\n\nsee [Partitioning users with realms](http://loopback.io/doc/en/lb3/Partitioning-users-with-realms.html).\n\n---\n\n<h4 id=\"6.1\"> 6.1 注册用户 </h4>\n\n>  概要: 内置用户模型提供了注册新用户并确认其电子邮件地址的方法.\n\nLoopBack用户模型提供了注册新用户和确认其电子邮件地址的方法.您还可以使用loopback-component-passport模块将登录信息与Facebook,Google和其他第三方提供商集成.\n\n##### 使用LoopBack User模型注册用户\n\n**创建新用户**\n\n通过添加模型实例创建用户(注册用户),与任何其他模型相同,电子邮件和密码是唯一必需的属性.\n\n**/boot/server/my-boot-script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var User = app.models.User;\n  User.create({email: 'foo@bar.com', password: 'bar'}, function(err, userInstance) {\n    console.log(userInstance);\n  });\n  //...\n```\n\n通过REST,使用`POST / users`端点来创建新的用户实例,例如:\n\n**REST**\n\n```\ncurl -X POST -H \"Content-Type:application/json\"         \\\n-d '{\"email\": \"me@domain.com\", \"password\": \"secret\"}'   \\\nhttp://localhost:3000/api/users\n```\n\n**添加其他注册约束**\n\n通常,您可能希望在注册过程中添加方法,例如查看给定的用户名是否可用,或者电子邮件地址是否已注册.一个好的方法是在User对象上添加方法作为beforeRemote钩子.有关详细信息,请参阅远程钩子.\n\n**验证邮件地址**\n\n通常,应用程序将要求用户在能够登录之前验证其电子邮件地址.这将向用户发送一封电子邮件,其中包含用于验证其地址的链接.一旦用户跟随链接,他们将被重定向到web根(\"/\"),并将能够正常登录.\n\n要强制实施此约束,请将emailVerificationRequired用户模型属性设置为true,在server/model-config.json中.\n\n**server/model-config.json**\n\n```json\n...\n\"user\": {\n    \"dataSource\": \"db\",\n    \"public\": true,\n    \"options\": {\n      \"emailVerificationRequired\": true\n    }\n...\n```\n\n在REST上,使用GET /users/confirm端点来验证用户的电子邮件地址.有关详细信息,请参阅用户REST API.\n\n此示例在调用create()方法后执行的User模型上创建remote钩子.\n\n>  重要: 在使用下面的示例之前,您必须设置User模型以及Mail数据源.\n\n**/common/models/user.js**\n\n```javascript\nvar config = require('../../server/config.json');\nvar path = require('path');\n\nmodule.exports = function(user) {\n  //send verification email after registration\n  user.afterRemote('create', function(context, userInstance, next) {\n    console.log('> user.afterRemote triggered');\n\n    var options = {\n      type: 'email',\n      to: userInstance.email,\n      from: 'noreply@loopback.com',\n      subject: 'Thanks for registering.',\n      template: path.resolve(__dirname, '../../server/views/verify.ejs'),\n      redirect: '/verified',\n      user: user\n    };\n\n    userInstance.verify(options, function(err, response, next) {\n      if (err) return next(err);\n\n      console.log('> verification email sent:', response);\n\n      context.res.render('response', {\n        title: 'Signed up successfully',\n        content: 'Please check your email and click on the verification link ' -\n            'before logging in.',\n        redirectTo: '/',\n        redirectToLinkText: 'Log in'\n      });\n    });\n  });\n...\n```\n\n##### 通过第三方系统注册用户\n\n使用LoopBack Passport组件(loopback-component-passport)使用户能够使用以下来源的现有凭据注册和登录应用程序:\n\n* Facebook\n* Google\n* Twitter\n\n有关详细信息,请参阅[使用Passport进行第三方登录](http://loopback.io/doc/en/lb3/Third-party-login-using-Passport.html)\n\n---\n\n<h4 id=\"6.2\"> 6.2 用户登录 </h4>\n\n>  概要:内置用户模型提供登录用户,注销用户和重置用户密码的方法.\n\n##### 使用LoopBack User模型\n\n**登录**\n\n通过调用User.login()方法登录(验证)用户,并提供包含密码和电子邮件或用户名属性作为第一个参数的对象.该方法返回访问令牌.\n\n此示例在引导脚本中创建一个路由以处理登录请求:\n\n**/server/boot/routes.js**\n\n```javascript\n...\napp.post('/login', function(req, res) {\n  User.login({\n    email: req.body.email,\n    password: req.body.password\n  }, 'user', function(err, token) {\n    if (err) {\n      res.render('response', { //render view named 'response.ejs'\n        title: 'Login failed',\n        content: err,\n        redirectTo: '/',\n        redirectToLinkText: 'Try again'\n      });\n      return;\n    }\n\n    res.render('home', { //login user and render 'home' view\n      email: req.body.email,\n      accessToken: token.id\n    });\n  });\n});\n//...\n```\n\n>  重要: User.login()有一个可选的第二个参数,它是一个字符串或一个字符串数组.为此参数传入\"user\"以包括用户信息.对于REST apis,使用?include = user.\n\n有关完整的示例,请参阅loopback-example-user-management中的routes.js.\n\n您还可以通过提供具有以秒为单位的值的ttl属性来指定访问令牌的有效期.\n\n例如:\n\n**Boot script**\n\n```javascript\nvar TWO_WEEKS = 60 * 60 * 24 * 7 * 2;\nUser.login({\n  email: 'me@domain.com',           // must provide email or \"username\"\n  password: 'secret',               // required by default\n  ttl: TWO_WEEKS                    // keep the AccessToken alive for at least two weeks\n}, function (err, accessToken) {\n  console.log(accessToken.id);      // => GOkZRwg... the access token\n  console.log(accessToken.ttl);     // => 1209600 time to live\n  console.log(accessToken.created); // => 2013-12-20T21:10:20.377Z\n  console.log(accessToken.userId);  // => 1\n});\n```\n\n如果登录尝试不成功,将按以下格式返回错误.\n\n```json\n{\n  \"status\": 401,             // or 400 if the credentails object is invalid\n  \"message\": \"login failed\"  // could also be \"realm is required\" or \"username or email is required\"\n}\n```\n通过REST,使用POST /users/login端点.\n\n例如:\n\n```bash\ncurl -X POST -H \"Content-Type:application/json\" \\\n-d '{\"email\": \"me@domain.com\", \"password\": \"secret\", \"ttl\": 1209600000}' \\\nhttp://localhost:3000/api/users/login\n```\n返回值是具有id属性的JSON对象,该属性是在后续请求中使用的访问令牌.\n\n例如:\n\n```json\n{\n  \"id\": \"GOkZRwgZ61q0XXVxvxlB8TS1D6lrG7Vb9V8YwRDfy3YGAN7TM7EnxWHqdbIZfheZ\",\n  \"ttl\": 1209600,\n  \"created\": \"2013-12-20T21:10:20.377Z\",\n  \"userId\": 1\n}\n```\n\n**登出**\n\n使用User.logout()方法登出用户,提供用户的访问令牌作为参数.\n\n在下面的示例中,创建了处理登出请求的路由:\n\n**/server/boot/routes.js**\n\n```javascript\n//...\n//log a user out\napp.get('/logout', function(req, res, next) {\n  if (!req.accessToken) return res.sendStatus(401); //return 401:unauthorized if accessToken is not present\n  User.logout(req.accessToken.id, function(err) {\n    if (err) return next(err);\n    res.redirect('/'); //on successful logout, redirect\n  });\n});\n//...\n```\n\n通过REST,使用POST /users/logout端点,再次在POST有效内容的sid属性中提供用户的访问令牌.\n\n要通过REST API销毁访问令牌，请使用POST /users/logout端点.\n\n```bash\nACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK\nVERB=POST # any verb is allowed\n\n# Authorization Header\ncurl -X VERB -H \"Authorization: $ACCESS_TOKEN\" \\\nhttp://localhost:3000/api/users/logout\n\n# Query Parameter\ncurl -X VERB http://localhost:3000/api/users/logout?access_token=$ACCESS_TOKEN\n```\n\n##### 重置用户密码\n\n使用User.resetPassword()方法重置用户的密码.此方法为临时登录创建一个短期访问令牌,允许用户在忘记时更改密码.\n\n例如,在下面的routes.js(在loopback-example-user-management中),创建一个路由: /request-password-reset来处理密码重置请求:\n\n**/server/boot/routes.js**\n\n```javascript\n//send an email with instructions to reset an existing user's password\napp.post('/request-password-reset', function(req, res, next) {\n  User.resetPassword({\n    email: req.body.email\n  }, function(err) {\n    if (err) return res.status(401).send(err);\n    res.render('response', {\n      title: 'Password reset requested',\n      content: 'Check your email for further instructions',\n      redirectTo: '/',\n      redirectToLinkText: 'Log in'\n    });\n  });\n});\n//...\n```\n\n您必须处理\"resetPasswordRequest\"事件,才能将包含由resertPassword()方法生成的短期访问令牌的重置电子邮件发送给正确的用户(请参见下面的示例):\n\n>  重要: 下面的示例假设您已经设置了User模型和Mail数据源.\n\n**/common/models/user.js**\n\n```javascript\n//...\n//send password reset link when password reset requested\nuser.on('resetPasswordRequest', function(info) {\n  var url = 'http://' - config.host - ':' - config.port - '/reset-password';\n  var html = 'Click <a href=\"' - url - '?access_token=' -\n      info.accessToken.id - '\">here</a> to reset your password';\n  //'here' in above html is linked to : 'http://<host:port>/reset-password?access_token=<short-lived/temporary access token>'\n  user.app.models.Email.send({\n    to: info.email,\n    from: info.email,\n    subject: 'Password reset',\n    html: html\n  }, function(err) {\n    if (err) return console.log('> error sending password reset email');\n    console.log('> sending password reset email to:', info.email);\n  });\n});\n//...\n```\n\n并且当用户按照链接重置密码时,临时访问令牌用于使用updateAttribute()方法查找用户和更新密码,如下所示:\n\n**/server/boot/routes.js**\n\n```javascript\n//...\nUser.findById(req.accessToken.userId, function(err, user) {\n   if (err) return res.sendStatus(404);\n   user.updateAttribute('password', req.body.password, function(err, user) {\n   if (err) return res.sendStatus(404);\n     console.log('> password reset processed successfully');\n     res.render('response', {\n       title: 'Password reset success',\n       content: 'Your password has been reset successfully',\n       redirectTo: '/',\n       redirectToLinkText: 'Log in'\n     });\n   });\n});\n//...\n```\n\n了解详细的例子,请看loopback-example-user-management中的routes.js.\n\n##### 通过第三方系统账号登录\n\n您可以与支持OAuth的第三方系统(例如Google,Facebook或Twitter)集成,而不必使用LoopBack的用户系统.\n\n了解更多信息,请看 [Third-party login using Passport](http://loopback.io/doc/en/lb3/Third-party-login-using-Passport.html).\n\n---\n\n<h4 id=\"6.3\"> 6.3 使用领域来分区用户 </h4>\n\n默认情况下,LoopBack用户模型管理全局命名空间中的所有用户.它不隔离不同的应用程序.在某些情况下,您可能需要将用户划分到多个命名空间,以使不同的应用程序具有单独的用户.LoopBack使用领域来支持:\n\n* 属于单个全局域(或无域)的用户和应用程序.\n* 将用户和应用程序分布到多个领域.用户或应用程序只能属于一个领域.每个领域可以有很多用户和许多应用程序.\n* 每个应用程序是唯一的领域,每个用户属于应用程序(通过领域).\n\n每个应用程序或用户实例在领域中仍具有唯一的ID.当应用程序/用户注册时,它可以分配到一个领域.`User.login()`函数:\n\n* Honors the realm property from the user credential(_译注:保留原文_).\n* 允许从用户名/电子邮件的前缀中提取领域.\n\nUser模型中的两个设置控制领域：\n\n* realmRequired(Boolean): 默认值为false.\n* realmDelimiter(string): 如果配置,电子邮件或用户名可以前缀为<realm><realmDelimiter><username或email>,例如myRealm: john或myRealm:john@sample.com.如果不存在,将不检查用户名或电子邮件的前缀.\n\n例如:\n\n**server/model-config.json**\n\n```json\n\"User\": {\n  \"dataSource\": \"db\",\n  \"options\": {\n    \"realmRequired\": true,\n    \"realmDelimiter\": \":\"\n  }\n},\n```\n\n启用领域时,必须在调用User.create()时提供领域属性,例如:\n\n```javascript\nUser.create({\n  realm: 'myRealm',\n  username: 'john',\n  email: 'john@sample.com',\n  password: 'my-password'\n}, callback);\n```\n\n要登录领域内的用户,凭证还应包括领域属性.\n\n```javascript\nUser.login({\n  realm: 'myRealm',\n  username: 'john',\n  password: 'my-password'\n}, callback);\n```\n\n如果配置了realmDelimiter(例如,\":\"),则登录名允许将领域作为前缀传递给用户名或电子邮件.\n\n```javascript\nUser.login({\n  username: 'myRealm:john',\n  password: 'my-password'\n}, callback);\n```\n\n---\n\n<h4 id=\"7\"> 7. 身份验证,授权和权限 </h4>\n\n>  概要:LoopBack包括内置的基于令牌的身份验证.\n\n大多数应用程序需要控制谁可以访问数据或调用服务.通常,这涉及要求用户登录以访问受保护的数据,或者需要用于其他应用的授权令牌以访问受保护的数据.\n\nLoopBack应用程序通过模型访问数据,因此控制对数据的访问意味着对模型施加限制.也就是说,指定谁或什么可以读/写数据或在模型上执行方法.\n\n当您使用LoopBack应用程序生成器(application generator)创建应用程序时,将自动启用访问控制,除非您选择\"empty-server\"应用程序类型.要为\"empty-server\"应用程序启用访问控制,必须添加调用enableAuth()的引导脚本.例如,在server/boot/authentication.js中:\n\n```javascript\nmodule.exports = function enableAuthentication(server) {\n  server.enableAuth();\n};\n```\n\n##### 访问控制概念\n\nLoopBack的访问控制系统围绕几个核心概念构建,如下表所示.\n\n| Term | Description | Responsibility | Example |\n|---|---|---|---|\n| Principal | An entity that can be identified or authenticated. | Represents identities of a request to protected resources. | A user <br/> An application <br/> A role (please note a role is also a principal) |\n| Role | A group of principals with the same permissions. | Organizes principals into groups so they can be used. | **Dynamic role**: <br/>`$everyone` (for all users) <br/>`$unauthenticated` (unauthenticated users) <br/> `$owner` (the principal is owner of the model instance), which can be:<br/>&nbsp;&nbsp;&#9702; A simple property called `userId`<br/>&nbsp;&nbsp;&#9702; A simple property called `owner`<br/>&nbsp;&nbsp;&#9702; A relation to a model that extends User.  <br/><br/> **Static role**: admin (a defined role for administrators) |\n| RoleMapping | Assign principals to roles | Statically assigns principals to roles. | Assign user with id 1 to role 1 <br/> Assign role 'admin' to role 1 |\n| ACL | Access control list | Controls if a principal can perform a certain operation against a model. | Deny everyone to access the project model.<br/> Allow 'admin' role to execute `find()` method on the project model. |\n\n##### 一般过程\n\n实现应用程序访问控制的一般过程是:\n\n1. **Specify user roles**(指定用户角色):定义应用程序需要的用户角色.例如,您可以为匿名用户,授权用户和管理员创建角色.\n\n2. **Define access for each role and model method**(为每个角色和模型方法定义访问权限):例如,您可以允许匿名用户读取银行列表,但不允许他们执行其他操作.LoopBack模型具有一组内置方法,每个方法映射到READ或WRITE访问类型.实质上,此步骤等于指定是否允许每个角色和每个模型被访问,如下面的示例所示.\n\n3. **Implement authentication**(实现身份验证):在应用程序中,添加创建(注册)新用户,登录用户(获取和使用身份验证令牌)和注销用户的代码.\n\n##### 公开和隐藏模型,方法和端点\n\n要通过REST公开模型,请在/server/model-config.json中将public属性设置为true:\n\n```json\n...\n  \"Role\": {\n    \"dataSource\": \"db\",\n    \"public\": false\n  },\n...\n```\n\n**隐藏method和REST endpoints**\n\n如果不想公开某些创建,检索,更新和删除操作.则可以通过在模型上调用disableRemoteMethod()来轻松隐藏它们.例如,按照前面的例子,按照约定,自定义模型代码将放在文件common/models/location.js中.您将添加以下行以\"隐藏\"预定义的远程方法之一:\n\n**common/models/location.js**\n\n```javascript\nvar isStatic = true;\nMyModel.disableRemoteMethod('deleteById', isStatic);\n```\n\n现在,deleteById()操作和相应的REST端点将不会公开.\n\n对于原型对象的方法,如updateAttributes():\n\n**common/models/location.js**\n\n```javascript\nvar isStatic = false;\nMyModel.disableRemoteMethod('updateAttributes', isStatic);\n```\n\n>  重要:确保在您自己的自定义模型上调用disableRemoteMethod(),而不是一个内置模型.在下面的示例中,例如,调用是MyUser.disableRemoteMethod(),而不是User.disableRemoteMethod().\n\n这里有一个隐藏`MyUser`模型的所有方法的例子,除了`login`和`logout`：\n\n```javascript\nMyUser.disableRemoteMethod(\"create\", true);\nMyUser.disableRemoteMethod(\"upsert\", true);\nMyUser.disableRemoteMethod(\"updateAll\", true);\nMyUser.disableRemoteMethod(\"updateAttributes\", false);\n\nMyUser.disableRemoteMethod(\"find\", true);\nMyUser.disableRemoteMethod(\"findById\", true);\nMyUser.disableRemoteMethod(\"findOne\", true);\n\nMyUser.disableRemoteMethod(\"deleteById\", true);\n\nMyUser.disableRemoteMethod(\"confirm\", true);\nMyUser.disableRemoteMethod(\"count\", true);\nMyUser.disableRemoteMethod(\"exists\", true);\nMyUser.disableRemoteMethod(\"resetPassword\", true);\n\nMyUser.disableRemoteMethod('__count__accessTokens', false);\nMyUser.disableRemoteMethod('__create__accessTokens', false);\nMyUser.disableRemoteMethod('__delete__accessTokens', false);\nMyUser.disableRemoteMethod('__destroyById__accessTokens', false);\nMyUser.disableRemoteMethod('__findById__accessTokens', false);\nMyUser.disableRemoteMethod('__get__accessTokens', false);\nMyUser.disableRemoteMethod('__updateById__accessTokens', false);\n```\n\n**Read-Only endpoints例子**\n\n您可能希望仅在模型上公开只读操作,隐藏所有POST,PUT,DELETE动词.\n\n**common/models/model.js**\n\n```javascript\nProduct.disableRemoteMethod('create', true);\t\t// Removes (POST) /products\nProduct.disableRemoteMethod('upsert', true);\t\t// Removes (PUT) /products\nProduct.disableRemoteMethod('deleteById', true);\t// Removes (DELETE) /products/:id\nProduct.disableRemoteMethod(\"updateAll\", true);\t\t// Removes (POST) /products/update\nProduct.disableRemoteMethod(\"updateAttributes\", false); // Removes (PUT) /products/:id\nProduct.disableRemoteMethod('createChangeStream', true); // removes (GET|POST) /products/change-stream\n```\n\n**隐藏相关模型的endpoints**\n\n要为相关模型方法禁用REST端点,请使用disableRemoteMethod().\n\n例如,如果有post和tag模型,其中post有多个标签,请将以下代码添加到/common/models/post.js以禁用相关模型和相应REST端点的远程方法:\n\n**common/models/model.js**\n\n```javascript\nmodule.exports = function(Post) {\n  Post.disableRemoteMethod('__get__tags', false);\n  Post.disableRemoteMethod('__create__tags', false);\n  Post.disableRemoteMethod('__destroyById__accessTokens', false); // DELETE\n  Post.disableRemoteMethod('__updateById__accessTokens', false); // PUT\n};\n```\n\n---\n\n<h4 id=\"7.1\"> 7.1 用户模型认证简介 </h4>\n\n**相关文章:**\n\nLoopBack为认证和授权提供了一个全功能的解决方案.按照此处的步骤,使用StrongLoop API Explorer查看内置用户模型的工作原理概述.\n\n首先,如果你没有这样做,请按照LoopBack入门中的第一步,下载loopback-getting-started应用程序并运行它.\n\n打开http://localhost:3000/explorer,查看StrongLoop API Explorer.然后:\n\n##### 创建新用户\n\n点击`POST /Users`创建新用户\n\n![cuser](img/cuser.jpg)\n\n在`Parameters`下,单击`data`字段并输入具有电子邮件和密码属性的JSON对象,例如:\n\n```json\n{\n   \"email\": \"foo@bar.com\",\n   \"password\": \"xxx\"\n}\n```\n\n基本用户模型验证电子邮件是否具有电子邮件地址的标准格式,并且密码不为空.\n\n![cuserdata](img/cuserdata.jpg)\n\n点击`Try it Out!`提交. \n\n你会收到值为200的响应代码,并且在Response Body中会显示新建用户的邮件地址和主键id.\n\n![cuserres](img/cuserres.jpg)\n\n##### 使用新用户登录\n\n现在点击`POST /Users/login`登录.将包含您之前输入的电子邮件和密码的相同JSON复制并传递到凭据字段,然后点击`Try it Out!`\n\n![loginuser](img/loginuser.jpg)\n\n现在,响应将包含用户的授权令牌:\n\n![logintoken](img/logintoken.jpg)\n\n##### 设置access token\n\n选择并复制响应正文中id属性的值,并将其粘贴到API Explorer窗口右上角的accessToken字段中:\n\n![settoken](img/settoken.jpg)\n\n执行此操作后,消息将更改为令牌集.此时,您创建的用户现在已登录并向应用程序进行身份验证.\n\n现在可以执行某些REST操作,例如:单击GET /Users/{id},在id字段中输入1,然后单击Try It Out！ 以获取您自己的用户记录的用户模型实例数据:\n\n>  注意:某些操作受到限制,即使您已通过身份验证.例如,您无法查看其他用户的记录.\n\n---\n\n<h4 id=\"7.2\"> 7.2 控制数据访问 </h4>\n\n>  概要: LoopBack使用访问控制列表(ACL)来控制谁可以访问什么数据.\n\n##### 启用身份验证\n\n当您使用LoopBack应用程序生成器创建应用程序时,将自动启用访问控制,除非您选择\"empty-server\"应用程序类型.要为\"empty-server\"应用程序启用访问控制,必须添加调用enableAuth()的引导脚本.例如,在server/boot/authentication.js中:\n\n```javascript\nmodule.exports = function enableAuthentication(server) {\n  server.enableAuth();\n};\n```\n\n##### 指定用户角色\n\n指定用户角色的第一步是确定应用程序需要的角色.大多数应用程序将有未经身份验证或匿名的用户(未登录的用户)和经过身份验证的用户(已登录的用户).此外,许多应用程序将具有提供广泛访问权限的管理角色.并且应用可以具有任何数量的附加用户角色.\n\n例如,startkicker应用程序由四种类型的用户组成:来宾,所有者,团队成员和管理员.每个用户类型都可以根据其角色和我们定义的访问控制列表(ACL)访问应用程序的各个部分.\n\n**用户访问类型**\n\nLoopBack提供了一个内置的User模型,具有相应的REST API,继承了PersistedModel对象的所有\"CRUD\"方法.LoopBack用户模型的每个CRUD方法映射到READ或WRITE访问类型,如下所示:\n\nREAD:\n\n* exists - 确定用户是否存在的布尔方法.\n* findById - 按ID查找用户.\n* find - 查找符合指定条件的所有用户.\n* findOne - 查找与指定条件匹配的单个用户实例.\n* count - 返回与指定条件匹配的用户数.\n\nWRITE:\n\n* create - 创建新用户.\n* updateAttributes(update) - 更新用户记录.\n* upsert(更新或插入) - 更新或插入新的用户记录.\n* destroyById(相当于removeById或deleteById) - 删除具有指定ID的用户.\n\n对于其他方法,默认访问类型为EXECUTE.例如,自定义方法映射到EXECUTE访问类型.\n\n##### 定义访问控制\n\n使用ACL生成器为应用程序设置访问控制.在这之前,你必须清楚地知道如何为你的应用程序配置访问控制.\n\n例如,以下是loopback-example-access-control如何设置用户及其权限:\n\n- Guest - Guest\n  - Role = $ everyone，$ unauthenticated\n  - 有权访问\"List projects\"功能,但没有其他\n\n- John - 项目所有者\n  - Role = $ everyone，$ authenticated，teamMember，$ owner\n  - 可以访问除\"View all projects\"之外的所有功能\n\n- Jane - 项目团队成员\n  - Role = $ everyone，$ authenticated，teamMember\n  - 可以访问所有功能,除了“View all projects”和“Withdraw”\n\n- Bob - 管理员\n  - Role = $ everyone，$ authenticated，admin\n  - 可以访问除\"Withdraw\"之外的所有功能\n\n一旦你创建了这种规范,你可以很容易地构造命令来设置访问控制,如下所示.\n\n##### 使用ACL生成器定义访问控制\n\n为应用程序定义访问控制的最简单方法是使用ACL生成器.这使您能够在运行时之前创建静态定义.生成器会提示您输入所有必要的信息:\n\n```bash\n$ slc loopback:acl\n```\n\n**例子**\n\n例如,以下是为loopback-example-access-control示例定义ACL条目的提示的答案.\n\nDeny access to all project REST endpoints\n\n- Select the model to apply the ACL entry to: All existing models\n- Select the ACL scope: All methods and properties\n- Select the access type: All (match all types)\n- Select the role: All users\n- Select the permission to apply: Explicitly deny access\n\nAllow unrestricted access to GET `/api/projects/listProjects`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: listProjects\n- Select the access type: Execute\n- Select the role: All users\n- Select the permission to apply: Explicitly grant access\n\nOnly allow admin unrestricted access to GET `/api/projects`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: find\n- Select the access type: Read\n- Select the role: other\n- Enter the role name: admin\n- Select the permission to apply: Explicitly grant access\n\nOnly allow team members access to GET `/api/projects/:id`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: findById\n- Select the access type: Read\n- Select the role: other\n- Enter the role name: teamMember\n- Select the permission to apply: Explicitly grant access\n\nAllow authenticated users to access POST `/api/projects/donate`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: donate\n- Select the access type: Execute\n- Select the role: Any authenticated user\n- Select the permission to apply: Explicitly grant access\n\nAllow owners access to POST `/api/projects/withdraw`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: withdraw\n- Select the access type: Execute\n- Select the role: The user owning the object\n- Select the permission to apply: Explicitly grant access\n\n##### 应用访问控制规则\n\n每个传入请求都映射到具有三个属性的对象:\n\n- model - 目标模型名称,例如'order'\n- property - 目标方法名称,例如'find'.您还可以指定一个方法名称数组,以对所有方法应用相同的约束.\n- accessType - 访问类型,'EXECUTE','READ'和'WRITE'\n\nACL规则被描述为一个对象数组,每个对象由在Model definition JSON file - ACLs中列出的属性组成.\n\n1.  model\n2.  property\n3.  accessType\n4.  principalType\n    1.  USER\n    2.  APP\n    3.  ROLE\n        1.  custom roles\n        2.  $owner\n        3.  $authenticated\n        4.  $unauthenticated\n        5.  $everyone\n5.  permission\n    1.  DENY\n    2.  ALLOW\n\n**ACL规则优先级**\n\n单个模型可能应用了多个ACL:基本模型(或模型)的ACL和模型本身的ACL,在模型定义JSON文件中定义. LoopBack通过添加具有权限和访问类型的优先级规则的所有适用的ACL来解决任何冲突,从而确定最终ACL.\n\n权限优先级按此顺序应用:\n\n1.  DENY\n2.  ALLOW\n3.  DEFAULT\n\n因此,例如,某个操作和用户组的DENY规则优先于同一操作和组的ALLOW规则.\n\n按照以下顺序应用访问类型优先级(按特殊性顺序):\n\n1.  Type (read, write, replicate, update)\n2.  Method name\n3.  Wildcard(通配符)\n\n一般来说,更具体的规则将优先于更一般的规则.例如,拒绝访问经过身份验证的用户的操作的规则将优先于拒绝对所有用户的访问的规则.\n\nLoopBack通过将请求与每个规则匹配的细节来对多个规则进行排序.它通过按照属性的分级顺序对每个ACL规则检查访问请求来计算细节.\n\n在每个级别,匹配产生三点:\n\n1.  完全匹配\n2.  通配符匹配（'*'）\n3.  无匹配\n\n较高级别的匹配优先于较低级别的匹配.例如,在模型级别的完全匹配将超过通配符匹配.\n\n例如,考虑以下访问请求:\n\n```json\n{\n  model: 'order',\n  property: 'find',\n  accessType: 'EXECUTE'\n}\n```\n\n假设定义了以下ACL规则:\n\n```json\n[\n  // Rule #1\n  {\n    model: '*',\n    property: 'find',\n    accessType: 'EXECUTE',\n    principalType: 'ROLE',\n    principalId: '$authenticated',\n    permission: 'ALLOW'\n  },\n  // Rule #2\n  {\n    model: 'order',\n    property: '*',\n    accessType: '*',\n    principalType: 'ROLE',\n    principalId: '$authenticated',\n    permission: 'ALLOW'\n  },\n  // Rule #3\n  {\n    model: 'order',\n    property: 'find',\n    accessType: '*',\n    principalType: 'ROLE',\n    principalId: '$authenticated',\n    permission: 'DENY'\n  }\n]\n```\n\nACL规则的顺序将是＃3,＃2,＃1.因此,请求将被拒绝,因为规则＃3设置的权限是\"DENY\".\n\n---\n\n<h4 id=\"7.3\"> 7.3 进行身份验证请求 </h4>\n\n应用程序创建和验证用户的基本过程是:\n\n1.  使用User.create()方法注册一个新用户,继承自PersistedModel对象.\n2.  调用User.login()从客户端应用程序代表用户请求访问令牌.\n3.  使用访问令牌调用API.在HTTP标头中提供访问令牌,或作为REST API调用的查询参数,如下所示.\n\n##### 使用访问令牌进行身份验证请求\n\n一旦用户登录,LoopBack创建一个新的AccessToken引用用户.在为访问控制系统进行后续REST请求以验证用户可以调用给定模型上的方法时,需要此令牌.\n\n```bash\nACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK\n\n# Authorization Header\ncurl -X GET -H \"Authorization: $ACCESS_TOKEN\" \\\nhttp://localhost:3000/api/widgets\n\n# Query Parameter\ncurl -X GET http://localhost:3000/api/widgets?access_token=$ACCESS_TOKEN\n```\n\n要使用cookie进行身份验证,请将以下内容添加到server.js(引导前):\n\n**/server/server.js**\n\n```javascript\napp.use(loopback.token({\n    model: app.models.accessToken\n}));\n```\n\n##### 将当前用户标识用作REST的URL中的文字\n\n要允许REST API当前登录的用户标识,请使用currentUserLiteral选项配置标记中间件.\n\n**/server/server.js**\n\n```javascript\napp.use(loopback.token({\n    model: app.models.accessToken,\n    currentUserLiteral: 'me'\n}));\n```\n\ncurrentUserLiteral定义了可以在REST API的URL中使用的特殊标记，例如:\n\n```bash\ncurl -X GET http://localhost:3000/api/users/me/orders?access_token=$ACCESS_TOKEN\n```\n\n请注意,URL将被重写为如下:\n\n`http://localhost:3000/api/users/<currentLoggedInUserId>/orders?access_token=$ACCESS_TOKEN`\n\n##### 删除访问令牌\n\n通过删除在登录时发出的访问令牌,用户将被有效地注销.这仅影响指定的访问令牌,附加到用户的其他令牌仍将有效.\n\n**/server/boot/script.js**\n\n```javascript\nvar USER_ID = 1;\nvar ACCESS_TOKEN = '6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK';\n// remove just the token\nvar token = new AccessToken({\n  id: ACCESS_TOKEN\n});\ntoken.destroy();\n// remove all user tokens\nAccessToken.destroyAll({\n  where: {\n    userId: USER_ID\n  }\n});\n```\n\n---\n\n<h4 id=\"7.4\"> 7.4 定义和使用角色 </h4>\n\nLoopBack允许您定义静态和动态角色.静态角色存储在数据源中,并映射到用户.相反,动态角色不分配给用户,而是在访问期间确定.\n\n##### 静态角色\n\n**/server/boot/script.js**\n\n```javascript\nUser.create([\n    {username: 'John', email: 'john@doe.com', password: 'opensesame'},\n    {username: 'Jane', email: 'jane@doe.com', password: 'opensesame'},\n    {username: 'Bob', email: 'bob@projects.com', password: 'opensesame'}\n  ], function(err, users) {\n    if (err) return cb(err);\n\n    //create the admin role\n    Role.create({\n      name: 'admin'\n    }, function(err, role) {\n      if (err) cb(err);\n\n      //make bob an admin\n      role.principals.create({\n        principalType: RoleMapping.USER,\n        principalId: users[2].id\n      }, function(err, principal) {\n        cb(err);\n      });\n    });\n  });\n```\n\n现在你可以使用上面定义的角色在访问控制中.例如,将以下内容添加到common/models/project.json中,以使\"admin\"角色的用户能够调用所有REST API.\n\n**/common/models/model.json**\n\n```json\n{\n  \"accessType\": \"EXECUTE\",\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"admin\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"find\"\n}\n```\n\n##### 动态角色\n\n有时静态角色不够灵活.LoopBack还使您能够定义在运行时定义的动态角色.\n\nLoopBack提供以下内置动态角色.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Role object property</th>\n      <th>String value</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Role.OWNER</td>\n      <td>$owner</td>\n      <td>Owner of the object</td>\n    </tr>\n    <tr>\n      <td>Role.AUTHENTICATED</td>\n      <td>$authenticated</td>\n      <td>authenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.UNAUTHENTICATED</td>\n      <td>$unauthenticated</td>\n      <td>Unauthenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.EVERYONE</td>\n      <td>$everyone</td>\n      <td>Everyone</td>\n    </tr>\n  </tbody>\n</table>\n\n第一个示例使用`$owner`动态角色来允许访问所请求的项目模型的所有者.\n\n>  注意: 为了限定`$owner`,目标模型需要具有与User模型(或者从User扩展的模型)和属性匹配目标模型实例的外键的belongsTo关系.对`$owner`的检查仅对路径上有':id'的远程方法执行,例如GET /api/users/:id.\n\n使用Role.registerResolver()在引导脚本中设置自定义角色处理程序.此函数有两个参数:\n\n1.  角色的字符串名称。\n2.  确定主体是否处于指定角色的函数.函数签名必须是function(role, context, callback).\n\n**/server/boot/script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var Role = app.models.Role;\n\n  Role.registerResolver('teamMember', function(role, context, cb) {\n    // Q: Is the current request accessing a Project?\n    if (context.modelName !== 'project') {\n      // A: No. This role is only for projects: callback with FALSE\n      return process.nextTick(() => cb(null, false));\n    }\n\n    //Q: Is the user logged in? (there will be an accessToken with an ID if so)\n    var userId = context.accessToken.userId;\n    if (!userId) {\n      //A: No, user is NOT logged in: callback with FALSE\n      return process.nextTick(() => cb(null, false));\n    }\n\n    // Q: Is the current logged-in user associated with this Project?\n    // Step 1: lookup the requested project\n    context.model.findById(context.modelId, function(err, project) {\n      // A: The datastore produced an error! Pass error to callback\n      if(err) return cb(err);\n      // A: There's no project by this ID! Pass error to callback\n      if(!project) return cb(new Error(\"Project not found\"));\n\n      // Step 2: check if User is part of the Team associated with this Project\n      // (using count() because we only want to know if such a record exists)\n      var Team = app.models.Team;\n      Team.count({\n        ownerId: project.ownerId,\n        memberId: userId\n      }, function(err, count) {\n        // A: The datastore produced an error! Pass error to callback\n        if (err) return cb(err);\n\n        if(count > 0){\n          // A: YES. At least one Team associated with this User AND Project\n          // callback with TRUE, user is role:`teamMember`\n          return cb(null, true);\n        }\n\n\t\telse{\n          // A: NO, User is not in this Project's Team\n          // callback with FALSE, user is NOT role:`teamMember`\n          return cb(null, false);\n        }\n      });\n    });\n  });\n};\n```\n\n>  注意:关于process.nextTick()的注释.在上面的代码中,我们将一些回调调用包装在process.nextTick( () => cb(...) ),但不是其他.为什么?在这样的异步函数中,它需要一个回调并在稍后的时间将结果传递给它,重要的是要确保我们总是调用稍后回调,而不是立即调用它(同步).我们从传递给process.nextTick的函数调用回调函数,否则会被同步调用.来自findById或count回调的调用已经保证在稍后访问数据库时发生,这是异步操作,因此我们不需要在process.nextTick中包装这些调用.\n\n使用上面定义的动态角色,我们可以限制项目信息访问作为项目团队成员的用户.\n\n**/common/models/model.json**\n\n```json\n{\n  \"accessType\": \"READ\",\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"teamMember\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"findById\"\n}\n```\n\n---\n\n<h4 id=\"7.5\"> 7.5 访问相关模型 </h4>\n\n>  重要:在访问相关模型时,活动ACL仍然是您调用的模型的ACL.因此,即使您的模型设置了DENY ALL权限,如果与其相关的模型没有ACL,则所有关系端点都将打开.这可能是一个安全风险,因为例如GET /OpenModel/{id}/ ACLSecuredModel将允许通过OpenModel关系对ACLSecuredModel的完全访问.\n\n##### 限制对相关模型的访问\n\n当两个模型之间存在关系(参见创建模型关系)时,LoopBack会自动创建一组相关的模型方法,这些方法与为关系定义的API路由相对应.\n\n在下面的列表中,modelName是相关模型的名称,而modelNamePlural是相关模型名称的复数形式.\n\n>  注意:在下面的方法名称中,分隔符是双下划线__.\n\n**belongsTo**:\n\n* \\_\\_get\\_\\__relatedModelName_\n\n**hasOne**:\n\n* \\_\\_create\\_\\__relatedModelName_\n* \\_\\_get\\_\\__relatedModelName_\n* \\_\\_update\\_\\__relatedModelName_\n* \\_\\_destroy\\_\\__relatedModelName_\n\n**hasMany**:\n\n* \\_\\_count\\_\\__relatedModelNamePlural_\n* \\_\\_create\\_\\__relatedModelNamePlural_\n* \\_\\_delete\\_\\__relatedModelNamePlural_\n* \\_\\_destroyById\\_\\__relatedModelNamePlural_\n* \\_\\_findById\\_\\__relatedModelNamePlural_\n* \\_\\_get\\_\\__relatedModelNamePlural_\n* \\_\\_updateById\\_\\__relatedModelNamePlural_\n\n**hasManyThrough**:\n\n* \\_\\_count\\_\\__relatedModelNamePlural_\n* \\_\\_create\\_\\__relatedModelNamePlural_\n* \\_\\_delete\\_\\__relatedModelNamePlural_\n* \\_\\_destroyById\\_\\__relatedModelNamePlural_\n* \\_\\_exists\\_\\__relatedModelNamePlural_ (through only)\n* \\_\\_findById\\_\\__relatedModelNamePlural_\n* \\_\\_get\\_\\__relatedModelNamePlural_\n* \\_\\_link\\_\\__relatedModelNamePlural_ (through only)\n* \\_\\_updateById\\_\\__relatedModelNamePlural_\n* \\_\\_unlink\\_\\__relatedModelNamePlural_ (through only)\n\n**hasAndBelongsToMany**:\n\n* \\_\\_link\\_\\__relatedModelNamePlural_\n* \\_\\_unlink\\_\\__relatedModelNamePlural_\n\n您可以使用这些相关的模型方法来控制对相关路由的访问.\n\n例如,如果用户有多个项目,LoopBack创建这些路由(以及其他)和相应的相关模型方法:\n\n* `/api/users/count` - standard method is `count`\n* ``/api/users/:id/projects`` - related model method is `__get__projects`\n* `/api/users/:id/projects/count` - related model method is `__count__projects`\n\n>  重要: 如果模型具有DENY ALL权限(例如,内置模型,如用户模型),但相关模型没有ACL,则仍然无法通过User模型访问相关模型.因此,例如,即使图书模型的默认ACL是GET /books的ALLOW $ authenticated,路由GET /user/{id}/books default仍将是DENY ALL.\n\n要配置对这些路由的访问控制,请在模型定义JSON文件中设置相关模型方法的权限.例如,这些路由的用户模型定义JSON文件(user.json)的ACL可能如下所示,例如:\n\n**/common/models/user.json**\n\n```json\n\"acls\": [{\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"$authenticated\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"count\"\n}, {\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"$owner\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"__get__projects\"\n}, {\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"$authenticated\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"__count__projects\"\n}]\n```\n\n##### 查询相关模型\n\n查询模型时,您可能还需要从其相关模型返回数据.\n\n例如,假设您有三个模型: User,Report和LineItem,其中:\n\n- 用户可以有多个报告.也就是说,在User和Report(User hasMany Report)之间有一个HasMany关系.\n- 报表可以有多个订单项.也就是说,在Report和Lineitem之间有一个HasMany关系(Report hasMany LineItem).\n\n此外,ReportModel还配置了以下ACL,以便经过身份验证的用户可以创建新记录,并且用户可以更新自己的记录:\n\n```json\n[{\n    \"principalType\": \"ROLE\",\n    \"principalId\": \"$everyone\",\n    \"permission\": \"DENY\"\n  }, {\n    \"principalType\": \"ROLE\",\n    \"principalId\": \"$owner\",\n    \"permission\": \"ALLOW\",\n    \"property\": \"findById\"\n  },\n  ...\n]\n```\n\n假设LineItem模型具有定义的相同ACL.\n\n现在,假设您要获取您的用户拥有的模型,并获取其相关模型.下面是如何使用findById()使用Node API:\n\n```javascript\nReport.findById({\n  id: 1,\n  filter: {\n    include: 'lineitems'\n  }\n});\n```\n\nUsing the REST API:\n\n`GET /api/Reports/110?filter={\"include\":[\"lineItems\"]}`\n\nExample results:\n\n```json\n{\n  \"name\": \"january report - bob\",\n  \"id\": 110,\n  \"userId\": 100,\n  \"lineItemModels\": [{\n    \"name\": \"lunch\",\n    \"id\": 111,\n    \"reportModelId\": 110\n  }, {\n    \"name\": \"dinner\",\n    \"id\": 112,\n    \"reportModelId\": 110\n  }]\n}\n```\n\n---\n\n<h4 id=\"7.6\"> 7.6 创建默认管理员账号 </h4>\n\nLoopBack没有定义默认管理员用户,但是您可以在应用程序启动时定义一个,如loopback-example-access-control示例中所示.具体来说,该示例包括server/boot/sample-models.js中的代码:\n\n- 创建多个用户,以及其他模型的实例.\n- 定义模型之间的关系.\n- 定义管理角色.\n- 添加角色映射以将其中一个用户分配给管理角色.\n\n因为此脚本在`server/boot`,它是在应用程序启动时执行的,所以管理员用户将始终存在一次应用程序初始化.\n\n以下代码创建了名为\"John\",\"Jane\"和\"Bob\"的三个用户,然后(跳过创建项目,项目所有者和项目团队成员的代码)定义了\"管理\"角色,并且制定Bob为管理员.\n\n**/server/boot/script.js**\n\n```javascript\nUser.create([\n    {username: 'John', email: 'john@doe.com', password: 'opensesame'},\n    {username: 'Jane', email: 'jane@doe.com', password: 'opensesame'},\n    {username: 'Bob', email: 'bob@projects.com', password: 'opensesame'}\n], function(err, users) {\n    if (err) return debug('%j', err);\n    //...\n    // Create projects, assign project owners and project team members\n    //...\n    // Create the admin role\n    Role.create({\n      name: 'admin'\n    }, function(err, role) {\n      if (err) return debug(err);\n      debug(role);\n\n      // Make Bob an admin\n      role.principals.create({\n        principalType: RoleMapping.USER,\n        principalId: users[2].id\n      }, function(err, principal) {\n        if (err) return debug(err);\n        debug(principal);\n      });\n    });\n  });\n};\n```\n\n模型JSON(由ACL生成器创建)文件指定管理角色具有查看项目(GET /api/projects)的不受限制的访问权限:\n\n**/common/models/model.json**\n\n```json\n...\n{\n  \"accessType\": \"READ\",\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"admin\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"find\"\n},\n...\n```\n\n---\n\n<h4 id=\"7.7\"> 7.7 安全注意事项 </h4>\n\n##### Model REST APIs\n\n默认情况下,您创建的LoopBack模型会为CRUD操作公开一组标准的HTTP端点.model-config.json中的public属性指定是否公开模型的REST API,例如:\n\n**/server/model-config.json**\n\n```json\n...\n  \"MyModel\": {\n    \"public\": true,\n    \"dataSource\": \"db\"\n  },\n...\n```\n\n要隐藏模型的REST API,只需将public更改为false即可.\n\n##### CORS\n\nLoopBack应用程序使用cors中间件软件包进行跨源资源共享(CORS),但对于使用应用程序生成器创建的应用程序,它默认禁用.\n\n要启用CORS,请编辑server/config.json中的远程部分并将cors设置为true:\n\n```json\n{\n  ...\n  \"remoting\": {\n    ...\n    \"cors\": true,  // false by default\n    \"handleErrors\": false\n  }\n}\n```\n\n要配置CORS设置,请编辑server/middleware.json文件中的`initial`部分:\n\n```json\n{\n  // ...\n  \"initial\": {\n    // ...\n    \"cors\": {\n      \"params\": {\n        \"origin\": true,\n        \"credentials\": true,\n        \"maxAge\": 86400\n      }\n    }\n  },\n  // ...\n}\n```\n\n在客户端上启用CORS\n\n如果您使用的是JavaScript客户端,则还必须在客户端启用CORS.例如,使用AngularJS启用它的一种方法是:\n\n**/client/app.js**\n\n```javascript\nvar myApp = angular.module('myApp', [\n    'myAppApiService']);\n\nmyApp.config(['$httpProvider', function($httpProvider) {\n        $httpProvider.defaults.useXDomain = true;\n        delete $httpProvider.defaults.headers.common['X-Requested-With'];\n    }\n]);\n```\n\n---\n\n剧终!","source":"_posts/LoopBack3-0官方文档中文增强版.md","raw":"---\ntitle: LoopBack3.0官方文档中文增强版\ndate: 2019-08-14 06:27:41\ntags: \n- loopback\n- nodejs\n- express\n- RESTful\ncategory: 转载\n---\n\n**翻译者:** Yingshf\nhttps://github.com/yingsf\n\n\n**翻译官方文档中基础的7部分:**\n\n* **Defining models**\n* **Using built-in models**\n* **Connecting models to data sources**\n* **Working with data**\n* **Adding application logic**\n* **Managing users**\n* **Authentication, authorization, and permissions**\n\n增强版是指: 对官文中描述不清的地方(或者错误的地方)添加了自己的理解和试验代码.所有带___\"译注\"___的地方都是.\n\n[官方文档在此处](http://loopback.io/doc/en/lb3/index.html),有需要的时候可以对比着看.\n\n<!--more-->\n\n---\n\n#### 目录:\n\n* [1. 定义Models - 对应官方文档中Defining models一章](#1)\n  * [1.1 创建Models](#1.1)\n      * [1.1.1 使用model generator创建model](#1.1.1)\n      * [1.1.2 从关系型数据库中发现model](#1.1.2)\n      * [1.1.3 从非结构化数据中创建model](#1.1.3)\n  * [1.2 定制Models](#1.2)\n  * [1.3 将Model附加到数据源](#1.3)\n  * [1.4 通过REST公开Model](#1.4)\n  * [1.5 验证Model的数据](#1.5)\n  * [1.6 创建Model关系](#1.6)\n      * [1.6.1 开启Model关系之旅](#1.6.1)\n      * [1.6.2 BelongsTo关系(多对一,一对一)](#1.6.2)\n      * [1.6.3 HasOne关系(一对一)](#1.6.3)\n      * [1.6.4 HasMany关系(一对多)](#1.6.4)\n      * [1.6.5 HasManyThrough关系(多对多)](#1.6.5)\n      * [1.6.6 HasAndBelongsToMany关系(多对多)](#1.6.6)\n      * [1.6.7 Polymorphic关系(多态)](#1.6.7)\n      * [1.6.8 查询相关model](#1.6.8)\n      * [1.6.9 嵌入式model和关系](#1.6.9)\n      * [1.6.10 嵌套查询](#1.6.10)\n* [2. 使用内置Models - 对应官方文档Using built-in models一章](#2)\n  * [2.1 扩展内置Models](#2.1)\n  * [2.2 为内置Models添加remote methods](#2.2)\n  * [2.3 为内置Models创建数据库表](#2.3)\n  * [2.4 Model属性引用](#2.4)\n  * [2.5 内置Model的REST API](#2.5)\n      * [2.5.1 PersistedModel REST API](#2.5.1)\n      * [2.5.2 Access token REST API](#2.5.2)\n      * [2.5.3 ACL REST API](#2.5.3)\n      * [2.5.4 Application REST API](#2.5.4)\n      * [2.5.5 Relation REST API](#2.5.5)\n      * [2.5.6 Role REST API](#2.5.6)\n      * [2.5.7 User REST API](#2.5.7)\n* [3. 将Model连接到数据源 - 对应官方文档Connecting models to data sources一章](#3)\n  * [3.1 从Model创建数据库schema](#3.1)\n  * [3.2 理解数据源](#3.2)\n  * [3.3 使用数据库事务](#3.3)\n  * [3.4 执行本地SQL](#3.4)\n  * [3.5 构建连接器(暂未翻译)](#3.5)\n* [4. 使用数据 - 对应官方文档Working with data一章](#4)\n  * [4.1 创建,更新和删除数据](#4.1)\n  * [4.2 查询数据](#4.2)\n      * [4.2.1 Fields filter](#4.2.1)\n      * [4.2.2 Include filter](#4.2.2)\n      * [4.2.3 Limit filter](#4.2.3)\n      * [4.2.4 Order filter](#4.2.4)\n      * [4.2.5 Skip filter](#4.2.5)\n      * [4.2.6 Where filter](#4.2.6)\n  * [4.3 高级主题:数据](#4.3)\n      * [4.3.1 Realtime server-sent events](#4.3.1)\n* [5. 添加应用程序逻辑 - 对应官方文档Adding application logic一章](#5)\n  * [5.1 使用LoopBack对象](#5.1)\n  * [5.2 向model中添加业务逻辑](#5.2)\n      * [5.2.1 Remote methods(远程方法)](#5.2.1)\n      * [5.2.2 Remote hooks(远程钩子)](#5.2.2)\n      * [5.2.3 Operation hooks(操作钩子)](#5.2.3)\n      * [5.2.4 Connector hooks(连接器钩子)](#5.2.4)\n  * [5.3 定义引导脚本](#5.3)\n  * [5.4 定义中间件](#5.4)\n  * [5.5 使用当前上下文](#5.5)\n  * [5.6 事件](#5.6)\n  * [5.7 使用promises](#5.7)\n* [6. 管理用户 - 对应官方文档Managing users一章](#6)\n  * [6.1 注册用户](#6.1)\n  * [6.2 用户登录](#6.2)\n  * [6.3 使用领域来分区用户](#6.3)\n* [7. 身份验证,授权和权限 - 对应官方文档Authentication, authorization, and permissions一章](#7)\n  * [7.1 用户模型认证简介](#7.1)\n  * [7.2 控制数据访问](#7.2)\n  * [7.3 进行身份验证请求](#7.3)\n  * [7.4 定义和使用角色](#7.4)\n  * [7.5 访问相关模型](#7.5)\n  * [7.6 创建默认管理员账号](#7.6)\n\n---\n\n<h4 id=\"1\"> 1. 定义Models </h4>\n\n>  **概要:** Models是LoopBack的核心,它代表了后端的数据源,例如: 数据库、或其他各种后端服务(REST、SOAP等).\n\nLoopBack的Model代表了后端系统(如数据库)中的数据,并且默认情况下具有Node API和REST API.此外，您还可以向Model添加验证规则和业务逻辑等功能。\n\n每个LoopBack应用程序都有一组预定义的内置Model,例如User(用户),Role(角色)和Application(应用程序).您可以扩展这些内置Model以满足应用程序的需要。\n\n此外,您还可以使用应用程序定义自己的Model：\n\n使用`model generator`(模型生成器)创建自定义model.这将创建一个model的定义JSON文件(_译注:还有个同名的js文件_),在这个JSON文件中您可以定义model的具体细节.\n\n使用`Datasource.buildModelFromInstance()`为数据源(如SOAP和REST服务)创建动态无模式的model.有关详细信息，请参阅Creating models from unstructured data.\n\n对于由关系型数据库支持的数据源,model通常对应于数据库中的表,使用`model discovery`为基于数据库的数据源创建静态的、模式驱动的模型.有关详细信息，请参阅Discovering models from relational databases.\n\n---\n\n<h4 id=\"1.1\"> 1.1 创建Models </h4>\n\n>  **概要:** 您可以通过`model generator`这种方式来创建model,还可以通过从现有数据库模式进行`discovery`来创建model,还可以通过`实例内省(instance introspection)`的方式对非关系型数据源创建model.\n\n##### 概述\n\n您可以通过各种方式来创建model,这取决于model基于何种数据源(_译注:这并不意味着关系型数据库只能采用discovery的方式来创建model,使用model generator也可以,但表字段过多的话,这是种折磨_).\n\n您可以通过以下3种方式来创建model:\n\n* **使用model generator**.(_译注:_ 建议model name使用首字母大写的格式(非大驼峰格式,就是第一个字母大写).经测试,如果名字是小写,生成器会把你的model name转换成首字母大写格式的(但文件名还是小写),如果名字是大驼峰的,生成器会把你的名字加个\"-\"例如,我输入的名字是coffeeshop,但实际被转成了Coffeeshop(所以我建议直接命名的时候就首字母大写),如果你还在js文件中使用coffeeshop这个名字,StrongLoop会抛出coffeeshop未定义的错误.在例如我输入的名字是CoffeeShop,那么model name虽然还是CoffeeShop,但文件名则被转成coffee-shop.json,看着不美.大家可以自己尝试一下.)\n\n* **使用model discovery创建现有关系型数据的model**: 使用_model discovery_,然后您可以使用LoopBack's schema/model synchronization API来使您的model和数据库保持同步.\n\n* **使用instance introspection**为非关系型数据库或REST APIS创建model.\n\n使用上述3个方法创建的model,都会创建一个`Model definition JSON`文件,这个JSON文件位于`common/models`目录(_译注: 其实还有别的目录_,如果你想让model只供server使用,它会在server/models/下,同理,还可以出现在client下.在common里,代表server和client都可以使用),名字是创建时您设置的名字,例如: `common/models/account.json`.\n\n您还可以使用`LoopBack API`以编程的方式来创建和自定义model,您还可以人工编辑那个JSON文件来创建和自定义model,多数情况下,在创建model的时候,不建议采用人工编辑的方式,但是在修改和自定义的model的时候,可以采用人工编辑的形式.\n\n##### 在JavaScript代码中获取对model的引用.\n\n在JavaScript代码中获取对模型的引用(或\"句柄\")的方式取决于您JavaScript代码所在的位置.\n\n##### 在model的js文件中,如何编写代码获取对model的引用?\n\n>  **警告:** 例如有一个名为\"foo\"的model,它的js文件是`common/models/foo.js`,在这个js文件中,您不能访问model的关系(_译注: 访问别的model_),因为model还没有被加载,如果您想执行对关系的操作,请在boot scripts中实现它.\n\n_译注:_ 上述警告是在告诉你,在某个model对应的js文件中(例如一个名为account的model,它的js文件是account.js),只能把自己的model name传进去.把其他的model name传进去是无效的,不信你可以多传入一个model,然后console.log它,你会发现是undefined.即使你把感觉上是全局对象的`app`传进来,仍然是undefined.\n\n在model的js文件中,model的名字作为参数传入进顶层函数(top-level function),于是在代码里就可以直接使用这个model对象了,例如有一个model叫\"customer\",它的js文件里的代码如下:\n\n```javascript\n// Customer作为参数传进来,如果你使用生成器生成model的话,生成器自动把model名传进来了\n// 你可以试试在Customer后面在多加一个别的已经存在的model,然后console.log它.一定是undefined\nmodule.exports = function(Customer) {\n  // Customer object is available \n  //...\n}\n```\n\nLoopBack还支持Promises以及model和其相关model的CRUD方法的回调.\n\n##### 当启动脚本中,如何以代码的形式获取对model的引用?\n\n在启动脚本中使用`app.models`,你就能获得对所有model的引用.假设你的启动脚本名叫script.js,它位于`/server/boot/script.js`,代码如下:\n\n```javascript\nmodule.exports = function(app) { // 把app传进来\n  var User = app.models.user;\n  var Role = app.models.Role;\n  var RoleMapping = app.models.RoleMapping;\n  var Team = app.models.Team;\n  // 现在可以对上面4个model为所欲为了\n}\n```\n\n---\n\n<h4 id=\"1.1.1\"> 1.1.1 使用model generator创建model </h4>\n\n##### 概述\n\n使用`model generator`是创建新model最简单的方式,你可以使用IBM API Connect:\n\n```bash\n$ apic create --type model\n```\n\n或者使用:\n\n```bash\n$ slc loopback:model\n```\n当执行上述命令创建新model的时候,生成器会提示你若干问题(_译注: 7个_),这些问题用来确定model的相关**属性**,随后,您还可以使用`property generator`来增加新的**属性**.(_译注:这句话中出现了2遍属性这个词,但意义却不同,回答7个问题生成的属性是top-level属性,它是属于model的,这种属性有13个.最后一个属性你可以理解成表字段.现在先不用纠结这些,继续往下看就可以了.)\n\n当您创建model的时候,(例如你创建了一个名为\"myModel\"的model),生成器会默默的为您:\n\n* 创建/common/models/myModel.json,这是model的定义JSON文件.(_译注: 7个问题中有一个问题是model位置的,如果你选择的\"公共\",则放在common下_)\n\n* 创建/common/models/myModel.js,在这个文件里,您可以用编程的方式来扩展model.例如添加个` remote methods`.\n\n* 把你创建的这个model登记(注册)到`/server/model-config.json`中,登记内容包括名字,数据源等.\n\n##### 基本的操作步骤(举例)\n\n在你的application根目录下输入下面的命令,创建一个名为book的新model.\n\n```bash\n$ slc loopback:model book\n```\n或者使用:\n\n```bash\n$ apic create --type model book\n```\n\n回车后,生成器会提示您这么几个问题:\n\n* 选择model要连接哪种数据源,默认情况下,只有一个名为db的内存数据源.如果你创建过别的数据源,这里就会以列表的形式列出来供你选择..\n\n* 选择model的基类,生成器会列出一堆内置的model和你曾经定义过的自定义model.\n\n**注意:**\n\n通常情况下,如果您想将您的数据保存到数据库中的话(例如mysql,mongodb),基类请选择`PersistedModel `,如果您选择了`Model`作为您的基类的话,你这个model就没有CRUD方法\n\n* 选择是否把你的model公开在REST上,默认值是yes.\n\n* 输入自定义复数后缀,默认是英文的复数规则,例如books,cites等.这个复数是用于API的URL的.\n\n* 为model增加一个属性.生成器会提示您(___译注: 这个属性你可以理解为数据库表的字段___):\n\n  * 属性名.\n  \n  * 属性类型.\n  \n  * 是否为必须属性.\n\n##### 在创建完model后又想添加新属性怎么办\n\n使用`property generator`即可,如下:\n\n```bash\n$ [ slc | apic ] loopback:property\n```\n\n回答生成器提出的问题即可完成相关操作.\n\n__译者注:注意标题是添加新属性,所以,修改旧属性是不能用这个的__\n\n##### 给属性添加默认值\n\n编辑model的JSON文件,给属性添加`default`关键字,更多内容后续会讲.\n\n---\n\n<h4 id=\"1.1.2\"> 1.1.2 从关系型数据库中发现model </h4>\n\n##### 译者概述\n\n原文标题叫做*Discovering models from relational databases*.\n\n你可以这样理解它的含义,假设关系型数据库mysql中有个表叫orders,它有200多个字段(可能是设计失误,或者必须要有这么多字段).如果用[1.1.1](#1.1.1)中的生成器来创建model并添加这200多个属性话,不仅特累,而且将来数据库中表结构变化的话,又要手工来维护这个model.\n\n如果解决这个问题?本节介绍的内容就是解决这个问题的.\n\n##### 原文概述\n\n基于已经存在的关系型数据库,LoopBack创建起model来那是轻松加愉快.它支持以下几种连接器(数据库):\n\n* **MySQL connector**\n\n* **PostgreSQL connector**\n\n* **Oracle connector**\n\n* **SQL Server connector**\n\n对于NoSQL数据库(如MongoDB),请改用instance introspection.\n\n连接到关系型数据库的数据源自动获取异步` Database discovery API`(_译注: 这句话显得很突兀,不明白是啥意思.我的理解是一旦model的数据源是关系型数据库,那model就自动获取了一组discovery API_)\n\n##### 基本的操作步骤(举例)\n\n* **第一步:** 使用脚本(例如下面的代码)来发现模型(原文:discover the schema).\n\n* **第二步:** 使用fs.writeFile()将输出保存为`common/models/你的名字.json`.\n\n* **第三步:** 别忘了在`server/model-config.json`登记这个model.\n\n* **第四步:** 启动app(执行: node .)\n\n* **第五步:** 使用`LoopBack Explorer`来验证你的模型是否已经正确定义.\n\n_译注:_ 上面的步骤不要严格效仿,它的核心理念是提醒你要保存json文件,要登记model.在后面的代码中,你会看到该怎么做.\n\n##### discovery样例代码\n\n例如,假设有一个Oracle数据库.首先,我们的代码要设置Oracle数据源.然后调用discoverAndBuildModels()从数据库表中把表结构搂回来并创建模型.别忘了使用`associations: true`选项来保证能把主/外键关系也搂回来.以下为代码,它位于`/server/bin/script.js`文件中:\n\n```javascript\nvar loopback = require('loopback');\n// 设置oracle数据源\nvar ds = loopback.createDataSource('oracle', {\n  \"host\": \"oracle-demo.strongloop.com\",\n  \"port\": 1521,\n  \"database\": \"XE\",\n  \"username\": \"demo\",\n  \"password\": \"L00pBack\"\n});\n\n// 从INVENTORY这个表把表结构搂回来并创建models\n// dataSource.discoverAndBuildModels有三个参数(modelName, [options], [cb])\nds.discoverAndBuildModels('INVENTORY', {visited: {}, associations: true},\nfunction (err, models) {\n  // Now we have a list of models keyed by the model name\n  // Find the first record from the inventory\n  models.Inventory.findOne({}, function (err, inv) {\n    if(err) {\n      console.error(err);\n      return;\n    }\n    console.log(\"\\nInventory: \", inv);\n    // Navigate to the product model\n    // Assumes inventory table has a foreign key relationship to product table\n    inv.product(function (err, prod) {\n      console.log(\"\\nProduct: \", prod);\n      console.log(\"\\n ------------- \");\n    });\n  });\n});\n```\n\n___译注:___ 如果按照上述的文字顺读下来,你就会以为上述代码可以直接把oracle数据库中的表INVENTORY的表结构给取回来然后在建立model,但实际是错误的,官文的这段代码有误导性.在查阅了API以后可以发现,上述代码中的discoverAndBuildModels()能根据表名创建一个如下的json,它确实是一个model,但与你的表没有关系(假设我的表叫coffeeshop).\n\n```json\n{ Coffeeshop: \n   { [Function: ModelConstructor]\n     setMaxListeners: [Function: bound setMaxListeners],\n     getMaxListeners: [Function: bound getMaxListeners],\n     emit: [Function: bound emit],\n     addListener: [Function: bound addListener],\n     on: [Function: bound addListener],\n     prependListener: [Function: bound prependListener],\n     once: [Function: bound once],\n     prependOnceListener: [Function: bound prependOnceListener],\n     removeListener: [Function: bound removeListener],\n     removeAllListeners: [Function: bound removeAllListeners],\n     listeners: [Function: bound listeners],\n     listenerCount: [Function: bound listenerCount],\n     eventNames: [Function: bound eventNames],\n     super_: \n      { [Function: ModelConstructor]\n        setMaxListeners: [Function: bound setMaxListeners],\n        getMaxListeners: [Function: bound getMaxListeners],\n        emit: [Function: bound emit],\n        addListener: [Function: bound addListener],\n        on: [Function: bound addListener],\n        prependListener: [Function: bound prependListener],\n        once: [Function: bound once],\n        prependOnceListener: [Function: bound prependOnceListener],\n        removeListener: [Function: bound removeListener],\n        removeAllListeners: [Function: bound removeAllListeners],\n        listeners: [Function: bound listeners],\n        listenerCount: [Function: bound listenerCount],\n        eventNames: [Function: bound eventNames],\n        super_: [Object],\n        defineProperty: [Function],\n        getPropertyType: [Function],\n        isProtectedProperty: [Function],\n        isHiddenProperty: [Function],\n        mixin: [Function],\n        getDataSource: [Function],\n        observe: [Function],\n        removeObserver: [Function],\n        clearObservers: [Function],\n        notifyObserversOf: [Function],\n        _notifyBaseObservers: [Function],\n        notifyObserversAround: [Function],\n        afterInitialize: null,\n        beforeValidate: null,\n        afterValidate: null,\n        beforeSave: null,\n        afterSave: null,\n        beforeCreate: null,\n        afterCreate: null,\n        beforeUpdate: null,\n        afterUpdate: null,\n        beforeDestroy: null,\n        afterDestroy: null,\n        validatesPresenceOf: [Function],\n        validatesAbsenceOf: [Function],\n        validatesLengthOf: [Function],\n        validatesNumericalityOf: [Function],\n        validatesInclusionOf: [Function],\n        validatesExclusionOf: [Function],\n        validatesFormatOf: [Function],\n        validate: [Function],\n        validateAsync: [Function],\n        validatesUniquenessOf: [Function],\n        getter: {},\n        setter: {},\n        definition: [Object],\n        settings: [Object],\n        forEachProperty: [Function],\n        attachTo: [Function],\n        extend: [Function],\n        registerProperty: [Function],\n        registry: [Object],\n        setup: [Function: setupPersistedModel],\n        _ACL: [Function: getACL],\n        checkAccess: [Function],\n        _getAccessTypeForMethod: [Function],\n        getApp: [Function],\n        remoteMethod: [Function],\n        disableRemoteMethod: [Function],\n        disableRemoteMethodByName: [Function],\n        belongsToRemoting: [Function],\n        hasOneRemoting: [Function],\n        hasManyRemoting: [Function],\n        scopeRemoting: [Function],\n        nestRemoting: [Function],\n        ValidationError: [Object],\n        sharedClass: [Object],\n        sharedCtor: [Object],\n        beforeRemote: [Function],\n        afterRemote: [Function],\n        afterRemoteError: [Function],\n        _runWhenAttachedToApp: [Function],\n        create: [Object],\n        patchOrCreate: [Object],\n        updateOrCreate: [Object],\n        upsert: [Object],\n        patchOrCreateWithWhere: [Object],\n        upsertWithWhere: [Object],\n        replaceOrCreate: [Object],\n        findOrCreate: [Object],\n        exists: [Object],\n        findById: [Object],\n        find: [Object],\n        findOne: [Object],\n        destroyAll: [Object],\n        remove: [Object],\n        deleteAll: [Object],\n        updateAll: [Object],\n        update: [Object],\n        destroyById: [Object],\n        removeById: [Object],\n        deleteById: [Object],\n        count: [Object],\n        replaceById: [Object],\n        getIdName: [Function],\n        setupRemoting: [Function],\n        diff: [Function],\n        changes: [Function],\n        checkpoint: [Function],\n        currentCheckpoint: [Function],\n        replicate: [Function],\n        createUpdates: [Function],\n        bulkUpdate: [Function],\n        getChangeModel: [Function],\n        getSourceId: [Function],\n        enableChangeTracking: [Function],\n        _defineChangeModel: [Function],\n        rectifyAllChanges: [Function],\n        handleChangeError: [Function],\n        rectifyChange: [Function],\n        findLastChange: [Function],\n        updateLastChange: [Function],\n        createChangeStream: [Object] },\n     defineProperty: [Function],\n     getPropertyType: [Function],\n     isProtectedProperty: [Function],\n     isHiddenProperty: [Function],\n     mixin: [Function],\n     getDataSource: [Function],\n     observe: [Function],\n     removeObserver: [Function],\n     clearObservers: [Function],\n     notifyObserversOf: [Function],\n     _notifyBaseObservers: [Function],\n     notifyObserversAround: [Function],\n     afterInitialize: null,\n     beforeValidate: null,\n     afterValidate: null,\n     beforeSave: null,\n     afterSave: null,\n     beforeCreate: null,\n     afterCreate: null,\n     beforeUpdate: null,\n     afterUpdate: null,\n     beforeDestroy: null,\n     afterDestroy: null,\n     validatesPresenceOf: [Function],\n     validatesAbsenceOf: [Function],\n     validatesLengthOf: [Function],\n     validatesNumericalityOf: [Function],\n     validatesInclusionOf: [Function],\n     validatesExclusionOf: [Function],\n     validatesFormatOf: [Function],\n     validate: [Function],\n     validateAsync: [Function],\n     validatesUniquenessOf: [Function],\n     getter: {},\n     setter: {},\n     definition: \n      ModelDefinition {\n        modelBuilder: [Object],\n        name: 'Coffeeshop',\n        rawProperties: [Object],\n        settings: [Object],\n        relations: [],\n        properties: [Object],\n        _ids: [Object] },\n     settings: \n      { strict: false,\n        base: [Object],\n        replaceOnPUT: true,\n        idInjection: false,\n        mysql: [Object] },\n     forEachProperty: [Function],\n     attachTo: [Function],\n     extend: [Function],\n     registerProperty: [Function],\n     registry: Registry { defaultDataSources: {}, modelBuilder: [Object] },\n     setup: [Function: setupPersistedModel],\n     _ACL: [Function: getACL],\n     checkAccess: [Function],\n     _getAccessTypeForMethod: [Function],\n     getApp: [Function],\n     remoteMethod: [Function],\n     disableRemoteMethod: [Function],\n     disableRemoteMethodByName: [Function],\n     belongsToRemoting: [Function],\n     hasOneRemoting: [Function],\n     hasManyRemoting: [Function],\n     scopeRemoting: [Function],\n     nestRemoting: [Function],\n     ValidationError: { [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 },\n     sharedClass: \n      SharedClass {\n        name: 'Coffeeshop',\n        ctor: [Circular],\n        _methods: [Object],\n        _resolvers: [Object],\n        _disabledMethods: {},\n        http: [Object],\n        sharedCtor: [Object] },\n     sharedCtor: { [Function] accepts: [Object], http: [Object], returns: [Object] },\n     beforeRemote: [Function],\n     afterRemote: [Function],\n     afterRemoteError: [Function],\n     _runWhenAttachedToApp: [Function],\n     create: [Function],\n     patchOrCreate: [Function],\n     updateOrCreate: [Function],\n     upsert: [Function],\n     patchOrCreateWithWhere: [Function],\n     upsertWithWhere: [Function],\n     replaceOrCreate: [Function: replaceOrCreate],\n     findOrCreate: [Function: findOrCreate],\n     exists: [Function: exists],\n     findById: [Function: findById],\n     find: [Function: find],\n     findOne: [Function: findOne],\n     destroyAll: [Function: destroyAll],\n     remove: [Function: destroyAll],\n     deleteAll: [Function: destroyAll],\n     updateAll: [Function],\n     update: [Function],\n     destroyById: [Function: deleteById],\n     removeById: [Function: deleteById],\n     deleteById: [Function: deleteById],\n     count: [Function],\n     replaceById: [Function],\n     getIdName: [Function],\n     setupRemoting: [Function],\n     diff: [Function],\n     changes: [Function],\n     checkpoint: [Function],\n     currentCheckpoint: [Function],\n     replicate: [Function],\n     createUpdates: [Function],\n     bulkUpdate: [Function],\n     getChangeModel: [Function],\n     getSourceId: [Function],\n     enableChangeTracking: [Function],\n     _defineChangeModel: [Function],\n     rectifyAllChanges: [Function],\n     handleChangeError: [Function],\n     rectifyChange: [Function],\n     findLastChange: [Function],\n     updateLastChange: [Function],\n     createChangeStream: { [Function] _delegate: true },\n     _mixins: [ [Object], [Object], [Object], [Object] ],\n     _forDB: [Function],\n     defaultScope: [Function],\n     applyScope: [Function],\n     applyProperties: [Function],\n     lookupModel: [Function],\n     getConnector: [Function],\n     findByIds: [Function],\n     all: [Function],\n     _getSetting: [Function],\n     _normalize: [Function],\n     _coerce: [Function],\n     scope: [Function],\n     normalizeInclude: [Function: normalizeInclude],\n     include: [Function],\n     hasMany: [Function: hasMany],\n     belongsTo: [Function],\n     hasAndBelongsToMany: [Function: hasAndBelongsToMany],\n     hasOne: [Function: hasOne],\n     referencesMany: [Function: referencesMany],\n     embedsOne: [Function: embedsOne],\n     embedsMany: [Function: embedsMany],\n     beginTransaction: [Function],\n     Transaction: \n      { [Function: Transaction]\n        super_: [Object],\n        SERIALIZABLE: 'SERIALIZABLE',\n        REPEATABLE_READ: 'REPEATABLE READ',\n        READ_COMMITTED: 'READ COMMITTED',\n        READ_UNCOMMITTED: 'READ UNCOMMITTED',\n        hookTypes: [Object],\n        begin: [Function] } } }\n```\n\n另外一个坑就是mac下strongloop配置oracle连接器有点麻烦,我简单尝试了一下没有成功,于是就利用现成的mysql了.\n\n下面是查阅API文档后写的一段代码([API链接](http://apidocs.strongloop.com/loopback-datasource-juggler/)),可以实现指定表的discovery,然后在创建model的json文件,并登记model.内容如下(已测试):\n\n```javascript\n'use strict';\n\n/**\n * Discover And Build Model And Expose REST API From Mysql Database Table\n *\n * Create By: Yingshf\n * Put this file in the /server/bin/ directory for your application.\n * run: In Your root directory,Execute 'node ./server/bin/discoverAndBuildModel.js'\n */\n\nvar fs = require('fs');\nvar loopback = require('loopback');\n\n// Change to the correct path for your folder\nvar commonFolder = '../../common';\nvar modelsFolder = commonFolder + '/models';\nvar modelConfig = require('../model-config.json');\nvar dataSources = require('../datasources.json');\n\n// dataSourceName must be the name of your datasource in server/datasources.json\n// 'mysqlTables' is a array of table name\nvar dataSourceName = 'mysqlDb';\nvar mysqlTables = ['coffeeshop'];\nvar lowerModelConfigName = null;\nvar ds = loopback.createDataSource('mysql', dataSources[dataSourceName]);\n\nmain();\n\n// Below is function definitions\nfunction main() {\n  // Check if common/models exists\n  // If not, create them and build models from database\n  if (!fs.existsSync(commonFolder)) {\n    fs.mkdirSync(commonFolder);\n  }\n  if (!fs.existsSync(modelsFolder)) {\n    fs.mkdirSync(modelsFolder);\n  }\n\n  discoverAndCreate();\n}\n\nfunction discoverAndCreate(callback) {\n  mysqlTables.forEach(function(tableName, index, array) {\n    ds.discoverSchema(tableName, null, function(err, schema) {\n      lowerModelConfigName = schema.name.toLowerCase();\n      fs.writeFile('common/models/' + lowerModelConfigName + '.json', prettyJSON(schema), function(err) {\n        if (err) throw err;\n        console.log('It\\'s saved!');\n        //If last, then save\n        if (index === array.length - 1) {\n          saveAndExposeSchemas();\n        }\n      });\n      addSchema(schema.name);\n    });\n  });\n}\n\nfunction addSchema(schema) {\n  modelConfig[schema] = {\n    dataSource: dataSourceName,\n    public: true\n  };\n}\n\nfunction saveAndExposeSchemas() {\n  fs.writeFile('server/model-config.json', prettyJSON(modelConfig), function(err) {\n    if (err) throw err;\n    console.log('Schemas are exposed!');\n    console.log('All thing is OK,Bye Bye!');\n    process.exit(0);\n  });\n}\n\nfunction prettyJSON(str) {\n  // 2 means 'Indent with 2 spaces'\n  return JSON.stringify(str, null, 2);\n}\n```\n这段代码与官方文档中的差异在于使用的方法不同,这里使用的是discoverSchema().\n\n更多的与discovery相关的方法如下:\n\n```javascript\n// List database tables and/or views,把数据库里的表名/视图名都取出来\nds.discoverModelDefinitions({views: true, limit: 20}, cb);\n\n// List database columns for a given table/view,把表/视图字段取回来\nds.discoverModelProperties('PRODUCT', cb);\nds.discoverModelProperties('INVENTORY_VIEW', {owner: 'STRONGLOOP'}, cb);\n\n// List primary keys for a given table\nds.discoverPrimaryKeys('INVENTORY',  cb);\n\n// List foreign keys for a given table\nds.discoverForeignKeys('INVENTORY',  cb);\n\n// List foreign keys that reference the primary key of the given table\nds.discoverExportedForeignKeys('PRODUCT',  cb);\n\n// Create a model definition by discovering the given table\nds.discoverSchema(table, {owner: 'STRONGLOOP'}, cb);\n```\n\n---\n\n<h4 id=\"1.1.3\"> 1.1.3 从非结构化数据中创建model </h4>\n\n___译注:___ 如果你是从1.1.2顺读下来的话,也许会以为这节内容跟上节差不多,只不过discovery的对象从关系型数据库变成了mongodb等nosql数据源.但事实不是这样的,LoopBack MongoDB connector不支持discovery.你只能从一个写好的json对象中创建model,所以不要误解了.\n\n对于非结构化数据(如NoSQL数据库和REST服务中的数据),您可以使用实例内省创建模型.实例内省使用buildModelFromInstance()从单个模型**实例**创建模型(_译注:我理解的实例就是一个json,看下面的代码,user就是一个实例,所以, buildModelFromInstance只能从一个json对象去创建model_)。\n\n以下数据源支持实例内省()：\n\n* **MongoDB data sources**\n\n* **REST data sources**\n\n* **SOAP data sources**\n\n举例如下(/server/boot/script.js):\n\n```javascript\nmodule.exports = function(app) {\n  var db = app.dataSources.db;\n\n  // Instance JSON document\n  var user = {\n    name: 'Joe',\n    age: 30,\n    birthday: new Date(),\n    vip: true,\n    address: {\n      street: '1 Main St',\n      city: 'San Jose',\n      state: 'CA',\n      zipcode: '95131',\n      country: 'US'\n    },\n    friends: ['John', 'Mary'],\n    emails: [\n      {label: 'work', id: 'x@sample.com'},\n      {label: 'home', id: 'x@home.com'}\n    ],\n    tags: []\n  };\n\n  // Create a model from the user instance\n  var User = db.buildModelFromInstance('User', user, {idInjection: true});\n\n  // Use the model for create, retrieve, update, and delete\n  var obj = new User(user);\n\n  console.log(obj.toObject());\n\n  User.create(user, function (err, u1) {\n    console.log('Created: ', u1.toObject());\n    User.findById(u1.id, function (err, u2) {\n      console.log('Found: ', u2.toObject());\n    });\n  });\n});\n```\n\n_译注:_ 上述代码还是不能实现创建model的json文件,登记注册model,感兴趣的可以自己查查API来实现这一需求,这里就不写了.\n\n---\n\n<h4 id=\"1.2\"> 1.2 定制Models </h4>\n\n使用`model generator`创建一个model后,你就可以开始定制它了.定制的方式有多种,你可以使用`command-line tool`,或者直接编辑json文件,也可以编写JavaScript代码来实现定制.\n\n##### 使用command-line tool定制model\n\n>   注意: 你不能对一个已经存在的model使用model generator来进行修改和定制.但是,您可以使用命令行工具手动和在一定程度上自定义模型,详见下文.\n\n能使用的命令行工具包括:\n\n* **property generator**.\n\n* **relation generator**.\n\n* **ACL generator**.\n\n##### 通过编辑JSON文件来定制model\n\n下面是一个model的默认属性(用model generator创建model后自动添加的几个属性),例如这个model的json文件是common/models/model.json,它的内容如下:\n\n```json\n{\n  \"name\": \"myModel\",\n  \"base\": \"PersistedModel\",\n  \"properties\": {\n     // Properties listed here depend on your responses to the CLI\n  },\n  \"validations\": [],\n  \"relations\": {},\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\nLoopBack为model添加了如上这些基本设置,对大多数model来说,这是比较直接的.但是对ACL设置来说,可能会有更复杂的交互,想了解更多关于acl的设置,请看**ACL rule precedence**\n\n**从另一个model进行扩展**\n\n你可以让一个model扩展或继承自一个已经存在的model.比如内置的User或者你自定义的model.在model generator中,选择“Select model’s base class”中的model name即可.或者,你可以编辑json文件中的“base”属性来指定你的model是扩展自哪个model.\n\n>  注意:如果你的model需要保存数据到mysql或者mongodb等数据库,那么基类需要选择PersistedModel. 如果选择Model作为model的基类,那你的model就不具备CRUD方法.\n\n例如,下面是customer.json的一段摘抄.它的基类是内置的User:\n\n/common/models/model.json\n\n```josn\n{\n  \"name\": \"Customer\",\n  \"base\": \"User\",\n  \"idInjection\": false,\n...\n}\n```\n\n> 强烈注意:千万不要修改内置model的属性,如果你确实想这么做.你需要创建有一个自定义的model,它继承自你想要修改的那个内置model,然后修改你自定义的这个model来代替直接修改内置model.\n\n你可以创建一个自定义model,它扩展自一个单个的、自定义的model.例如,先定义一个model叫做\"mMyBaseModel\",然后你就可以定义一个名为\"MyModel\"的model,他的基类是\"mMyBaseModel\",他的json文件的内容如下:\n\ncommon/models/MyModel.json\n\n```json\n{\n  \"name\": \"Example\",\n  \"base\": \"MyBaseModel\",\n}\n```\n然后,你可以为这个model增加一些新的属性,例如:\n\n```json\n{\n   \"name\": \"Customer\",\n   \"base\": \"User\",\n   \"properties\": {\n      \"favoriteMovie\": {\n        \"type\": \"string\"\n      }\n   }\n}\n```\n\n了解更多的数据类型信息,请查看**LoopBack types**\n\n**定制model的其他设置**\n\n下面是4个你通常要定制的重要设置(_译注:_ 只翻译了原文内容最多的strict,其余自己理解):\n\n* **plural** - 如果不指定,那默认就是英文规则的复数形式,比如book的复数是books,city的复数是cities.\n\n* **strict** - 这个属性的默认值是false,如果你把它设置为true.那就代表该model仅仅保存具有预定义属性的实例,save或update操作中的任何其他属性都不会保留到数据源.(_译注:_ 我的理解是,假设你的model的json文件中,\"properties\"属性下面预定义了6个字段,这时你开启这个属性为true,那么在save或update操作时,loopback就只认这6个字段,多余的一概抛弃).\n\n* **idInjection** - Whether to automatically add an id property to the model. True by default.\n\n* **http.path** - customized HTTP path of REST endpoints.\n\n访问**Model definition JSON file**可以了解更多信息.\n\n##### 通过JavaScript代码定制model\n\n以编程方式扩展model的基本方法是编辑model对应的js文件,例如，“customer”模型有一个common/ models/customer.js文件（如果使用模型生成器创建模型）.该js脚本在定义模型之后立即执行.**请将脚本视为模型定义的一部分**(使用它进行模型配置和注册).在js文件里,您可以为特定属性添加model关系,复杂验证或默认函数.基本上,您不能在JSON中执行的任何操作都可以在js文件中实现.**但是请注意,此时脚本无权访问app实例**(___译注:这点非常重要,切记,切记.要访问的话需要在boot目录下的脚本中实现___)\n\n在这个js文件中,你还可以通过添加remote method或operation hook来扩展model.\n\n如果不想通过REST公开你的方法,则只需要省略remoteMethod()的调用即可.\n\n**更改内置model的实现**\n\n**通过server boot script**\n\n当将model附加到持久数据源时,它将成为扩展PersistedModel的持久化model.还记得前面介绍过的PersistedModel的特性么,那就是LoopBack会自动为你的model添加一组内置的CRUD操作方法.内置的CRUD不一定能完全符合你的要求,在某些情况下,您可能想要更改实现,这时候请使用/server/boot目录中的JavaScript文件执行此操作.例如,以下代码显示了如何重新实现Note.find()以覆盖内置的find()方法.\n\n/server/boot/script.js\n\n```javascript\nmodule.exports = function(app) {\n  var Note = app.models.Note;\n  var find = Note.find;\n  var cache = {};\n\n  Note.find = function(filter, cb) {\n    var key = '';\n    if(filter) {\n      key = JSON.stringify(filter);\n    }\n    var cachedResults = cache[key];\n    if(cachedResults) {\n      console.log('serving from cache');\n      process.nextTick(function() {\n        cb(null, cachedResults);\n      });\n    } else {\n      console.log('serving from db');\n      find.call(Note, function(err, results) {\n        if(!err) {\n          cache[key] = results;\n        }\n        cb(err, results);\n      });;\n    }\n  }\n}\n```\n\n**通过你的model’s script**\n\n所谓你的model’s script.就是创建model时配套生成的那个js文件.\n\ncommon/models/MyModel.js\n\n```javascript\nmodule.exports = function(MyModel) {\n  MyModel.on('dataSourceAttached', function(obj){\n    var find = MyModel.find;\n    MyModel.find = function(filter, cb) {\n      return find.apply(this, arguments);\n    };\n  });\n};\n```\n\n---\n\n<h4 id=\"1.3\"> 1.3 将Model附加到数据源 </h4>\n\n##### 概要:\n\n数据源使model能够访问和修改后端系统(如关系数据库)中的数据.数据源封装业务逻辑,以在model和各种后端系统(如关系数据库、REST API、SOAP Web服务、存储服务等)之间交换数据.数据源通常提供创建、检索、更新和删除(CRUD)功能.\n\nmodel通过可扩展和可定制的`connectors`访问数据源.一般来说,应用程序代码不直接使用连接器.相反,DataSource类提供了一个API来配置底层连接器,你可以使用这些API。\n\n内置的内存connectors适合开发环境,要使用其他数据源：\n\n* 使用data source generator生成器创建新的数据源，并将其添加到应用程序的datasources.json中.\n\n* 编辑datasources.json以为数据源添加适当的凭据.\n\n* 创建model以连接到数据源或修改现有model定义以使用你刚才添加的那个connectors.\n\n##### 添加一个数据源\n\n使用`data source generator`添加一个新的数据源:\n\n```bash\n$ slc loopback:datasource\n```\n或者\n\n```bash\n$ apic create --type datasource\n```\n\n你还可以使用`API Designer tool`添加数据源.\n\ntool会提示你输入新数据源的名字以及要使用哪种connectors,例如:MySQL, Oracle, REST等等. 下面是一个datasources.json的例子:\n\n/server/datasources.json\n\n```json\n  ...\n  \"corp1\": {\n    \"name\": \"corp1\",\n    \"connector\": \"mysql\"\n  }\n  ...\n```\n\n这个例子创建了一个使用mysql连接器的,名字叫做corp1的数据源.\n\n##### 添加数据源的访问凭证\n\n编辑datasources.json来为数据源添加必要的访问权限信息.例如hostname, username,password, database name.\n\n例如:\n\n/server/datasources.json\n\n```json\n\"corp1\": {\n    \"name\": \"corp1\",\n    \"connector\": \"mysql\",\n    \"host\": \"your-mysql-server.foo.com\",\n    \"user\": \"db-username\",\n    \"password\": \"db-password\",\n    \"database\": \"your-db-name\"\n  }\n```\n\n##### 配置model使用数据源\n\n当你使用model generator创建了新的model时.你可以从列表中选择已经添加好的数据源.如果你没添加过数据源,那么列表中只有一个默认的db数据源,这是个内存数据源.\n\n编辑应用程序的server/model-config.json文件来指定数据源.例如,让myModel使用corp1数据源.\n\nserver/model-config.json\n\n```json\n\"myModel\": {\n    \"dataSource\": \"corp1\",\n    \"public\": true\n  }\n```\n\n默认情况下,model generator创建model时使用db数据源.\n\n---\n\n<h4 id=\"1.4\"> 1.4 通过REST公开Model </h4>\n\n##### 概要\n\nLoopBack的model自动具有一组标准的`HTTP endpoints`,它们为model数据上的创建,读取,更新和删除(CRUD)操作提供REST API.要实现这个,只需要设置model-config.json中的public属性来指定是否公开model的REST API,例如:\n\n/server/model-config.json\n\n```json\n...\n\"MyModel\": {\n  \"public\": true,\n  \"dataSource\": \"db\"\n},\n...\n```\n\n不想公开REST API,把public属性改为false就妥之.\n\n**REST paths**\n\n默认情况下,你的model的REST API访问路径是你的model名字加复数:\n\n_译注:这段我没看明白,因为官文的原文是By default, the REST APIs are mounted to the plural of the model name; specifically:,这个specifically不好翻译.我个人对这段的理解是,下面这3个是个优先级,REST API的访问路径会按照如下的优先级去查找,例如,我的model叫cust,我设置了Model.settings.http.path=/custone,那路径就会变成这个,如果我没设置,那就默认用复数的名字作为路径_\n\n* Model.settings.http.path\n\n* plural, 自定义的复数形式(在Model definition JSON文件中)\n\n* 默认情况下,自动在model名字后面加复数.例如你有个model叫location,默认情况下它被加载为/locations(后面加个复数s).\n\n**使用REST Router** \n\n如果你使用application generator创建你的应用程序, LoopBack会自动添加REST中间件并且把public属性设为true(公开REST).你不需要做任何其他事情.\n\n人工公开model的REST方法请使用loopback.rest,例如下面的代码:\n\n/server/server.js\n\n```javascript\nvar app = loopback();\napp.use(loopback.rest());\n\n// Expose the `Product` model\napp.model(Product);\n```\n\n添加完上述代码后,名为Product的model将会自动具备了从远程mobile访问的create, read, update, delete方法. 此时,model是无模式的并且数据是未被检查的.\n\n你可以在http://localhost:3000/explorer查看生成的REST文档. \n\nLoopBack提供了一组具有REST API的内置model.有关详细信息,请查看**Built-in models REST API**.\n\n**Request format**\n\n对于POST和PUT请求,请求主体可以是JSON,XML或urlencoded格式,这取决于Content-Type头设置为application/json,application/xml或application/x-www-form-urlencoded.\n\n>  提示:将请求的Accept头设置为application/vnd.api-json将导致响应的Content-Type头被自动设置为application/vnd.api-json.\n\n**使用HTTP查询字符串传递JSON对象或数组**\n\n某些REST API从查询字符串中获取json对象或数组.LoopBack支持2种风格来将json对象/数组编码为查询参数.\n\n* Syntax from node-querystring (qs)\n\n* Stringified JSON\n\n例如:\n\n```\nhttp://localhost:3000/api/users?filter[where][username]=john&filter[where][email]=callback@strongloop.com\n\nhttp://localhost:3000/api/users?filter={\"where\":{\"username\":\"john\",\"email\":\"callback@strongloop.com\"}}\n```\n\n下面这个表格描述了2种风格的编码格式:\n\n<table>\n  <tbody>\n    <tr>\n      <th>JSON object/array for the filter object</th>\n      <th>qs style</th>\n      <th>Stringified JSON</th>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\nwhere: {\n  username: 'john',\n  email: 'callback@strongloop.com'\n  }\n}</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter[where][username]=john<br>&amp;</code>filter[where][email]=callback@strongloop.com</pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"where\":\n{\"username\":\"john\",\n \"email\":\"callback@strongloop.com\"}\n}</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\nwhere: {\n    username: {inq: ['john', 'mary']}\n  }\n}</code></pre>\n      </td>\n      <td>\n        <pre>?filter[where][username][inq][0]=john<br>&amp;filter[where][username][inq][1]=mary</pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"where\":\n  {\"username\":{\"inq\":[\"john\",\"mary\"]}}\n}</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\n  include: ['a', 'b']\n}</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter[include]=a&amp;filter[include]=b</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"include\":[\"a\",\"b\"]}</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n_译注:我个人比较喜欢第二种,即Stringified JSON这种filter格式,尤其在strongloop自带的API Explorer中测试API的时候特别方便,请看下图:_\n\n在filter那里填`{\"where\":{\"username\":\"john\",\"email\":\"callback@strongloop.com\"}}`,然后点击try it out,就可以根据指定的用户名和email查询数据了.\n\n![filter](img/filter.jpg)\n\n\n**Response format**\n\n所有请求的响应格式通常是一个位于body或headers中的JSON对象/数组.有些响应的body是空的,例如:\n\n```HTTP/1.1 200 OK\nAccess-Control-Allow-Origin: http://localhost:3000\nAccess-Control-Allow-Credentials: true\nContent-Type: application/json; charset=utf-8\nContent-Length: 59\nVary: Accept-Encoding\nDate: Fri, 24 Oct 2014 18:02:34 GMT\nConnection: keep-alive\n\n{\"title\":\"MyNote\",\"content\":\"This is my first note\",\"id\":1}\n```\n\nHTTP status code表示一个请求是否成功:\n\n* Status code 2xx indicates success\n* Status code 4xx indicates request related issues.\n* Status code 5xx indicates server-side problems\n\n对错误的响应采用以下JSON格式:\n\n* message: String error message.\n\n* stack: String stack trace.\n\n* statusCode: Integer HTTP status code.\n\n例如:\n\n```json\n{\n  \"error\": {\n    \"message\": \"could not find a model with id 1\",\n    \"stack\": \"Error: could not find a model with id 1\\n ...\",\n    \"statusCode\": 404\n  }\n}\n```\n\n**禁用API Explorer**\n\nLoopBack API Explorer在开发应用程序时非常有用,但为了安全起见,您可能不想在生产环境中公开它.\n\n对于使用loopback-component-explorer的应用程序，在生产环境中中禁它可以这么做：\n\n* 将NODE_ENV环境变量设置为“production”.\n\n* 然后在server/component-config.production.json中:\n\nserver/component-config.production.json\n\n```json\n{\n  \"loopback-component-explorer\": null\n}\n```\n\n##### 预定义remote methods\n\n默认情况下,对于那种后面是数据源支持的model(_译注:有点莫名,有不是数据源支持的model么_),LoopBack为他们默认公开了创建,读取,更新和删除(CRUD)操作的REST API.\n\n例如,有一个model名叫Location,LoopBack会自动创建多个具有相应REST端点的Node方法,如下表所示:\n\n| Model (Node) API | HTTP Method | Example Path |\n|---|---|---|\n| [create()](https://apidocs.strongloop.com/loopback/#persistedmodel-create)                                        | POST   | /locations                 |\n| [replaceOrCreate()](https://apidocs.strongloop.com/loopback/#persistedmodel-replaceorcreate)                      | PUT    | /locations                 |\n| [patchOrCreate()](https://apidocs.strongloop.com/loopback/#persistedmodel-upsert)                                 | PATCH  | /locations                 |\n| [exists()](https://apidocs.strongloop.com/loopback/#persistedmodel-exists)                                        | GET    | /locations/:id/exists      |\n| [findById()](https://apidocs.strongloop.com/loopback/#persistedmodel-findbyid)                                    | GET    | /locations/:id             |\n| [find()](https://apidocs.strongloop.com/loopback/#persistedmodel-find)                                            | GET    | /locations                 |\n| [findOne()](https://apidocs.strongloop.com/loopback/#persistedmodel-findone)                                      | GET    | /locations/findOne         |\n| [destroyById() or deleteById()](https://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid)              | DELETE | /locations/:id             |\n| [count()](https://apidocs.strongloop.com/loopback/#persistedmodel-count)                                          | GET    | /locations/count           |\n| [replaceById()](https://apidocs.strongloop.com/loopback/#persistedmodel-replacebyid)                              | PUT    | /locations/:id             |\n| [prototype.patchAttributes()](https://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattributes) | PATCH  | /locations/:id             |\n| [createChangeStream()](https://apidocs.strongloop.com/loopback/#persistedmodel-createchangestream)                | POST   | /locations/change-stream   |\n| [updateAll()](https://apidocs.strongloop.com/loopback/#persistedmodel-updateall)                                  | POST   | /locations/update          |\n| [replaceOrCreate()](https://apidocs.strongloop.com/loopback/#persistedmodel-replaceorcreate)                      | POST   | /locations/replaceOrCreate |\n| [replaceById()](https://apidocs.strongloop.com/loopback/#persistedmodel-replacebyid)                              | POST   | /locations/:id/replace     |\n\nLoopBack 2.0和3.0在默认公开的这些API中唯一不同的是HTTP PUT(both PUT /api/my-models and PUT /api/my-models/:id),在2.x中,默认情况下patch,部分更新.在3.0中,是完全替换更新.\n\n___译注:官方文档中这一节就这些内容,如果仅看篇幅很容易忽略这节的重要性!请回想一下,截至目前,我们掌握了创建model,还知道了从REST API上查询数据(HTTP),但在js代码中怎么获取model的数据?这就是remote methods发挥作用的时候.现在可以不必深入了解,心中有数就可以了.___\n\n**replaceOnPUT flag**\n\n使用model.json中的replaceOnPUT属性来更改mapping replace和update methods的行为.如果replaceOnPUT为true,replaceOrCreate和replaceById使用HTTP PUT方法.如果为false,updateOrCreate和updateAttributes/patchAttributes使用HTTP PUT方法。\n\n以下示例说明如何在location.json中设置replaceOnPUT：\n\n```json\n...\n{\n  name: \"location\",\n  plural: \"locations\",\n  relations: {…},\n  acls: […],\n  properties: { … },\n  replaceOnPUT: true\n}...\n```\n\n##### 公开和隐藏models, methods, and endpoints\n\n公开model到REST上,只需设置public属性为true(/server/model-config.json):\n\n```json\n...\n\"Role\": {\n  \"dataSource\": \"db\",\n  \"public\": false\n},\n...\n```\n**隐藏methods and REST endpoints**\n\n如果不想公开某些创建,检索,更新和删除操作,可以通过在模型上调用disableRemoteMethod()来轻松隐藏它们.例如在model的js文件中,您将添加以下行以隐藏某个预定义的远程方法:\n\ncommon/models/location.js\n\n```javascript\nvar isStatic = true;\nMyModel.disableRemoteMethod('deleteById', isStatic);\n```\n\n现在deleteById()操作以及它对应的REST endpoint就被隐藏了.\n\n>  重要提醒:确定你是在你自己的model上调用disableRemoteMethod(),而不是在内置model进行调用.\n\n下面这个例子隐藏除了login和logout的其余所有方法:\n\nIn server/model-config.json:\n\n```json\n\"MyUser\": {\n  \"dataSource\": \"db\",\n  \"public\": true,\n  \"options\": {\n    \"remoting\": {\n      \"sharedMethods\": {\n        \"*\": false,\n        \"login\": true,\n        \"logout\": true\n      }\n    }\n  }\n}\n```\n\n除了上面那种方法,还可以在`config.json`的remoting对象是隐藏他们:\n\n```json\n\"remoting\": {\n  \"context\": false,\n  ...\n  \"sharedMethods\": {\n    \"*\": false,\n    \"login\": true,\n    \"logout\": true\n  }\n}\n```\n或者你可以通过你的model的js文件来禁用remoteMethods:\n\n```javascript\nMyUser.disableRemoteMethod(\"create\", true);\nMyUser.disableRemoteMethod(\"upsert\", true);\nMyUser.disableRemoteMethod(\"updateAll\", true);\nMyUser.disableRemoteMethod(\"updateAttributes\", false);\n\nMyUser.disableRemoteMethod(\"find\", true);\nMyUser.disableRemoteMethod(\"findById\", true);\nMyUser.disableRemoteMethod(\"findOne\", true);\n\nMyUser.disableRemoteMethod(\"deleteById\", true);\n\nMyUser.disableRemoteMethod(\"confirm\", true);\nMyUser.disableRemoteMethod(\"count\", true);\nMyUser.disableRemoteMethod(\"exists\", true);\nMyUser.disableRemoteMethod(\"resetPassword\", true);\n\nMyUser.disableRemoteMethod('__count__accessTokens', false);\nMyUser.disableRemoteMethod('__create__accessTokens', false);\nMyUser.disableRemoteMethod('__delete__accessTokens', false);\nMyUser.disableRemoteMethod('__destroyById__accessTokens', false);\nMyUser.disableRemoteMethod('__findById__accessTokens', false);\nMyUser.disableRemoteMethod('__get__accessTokens', false);\nMyUser.disableRemoteMethod('__updateById__accessTokens', false);\n\n```\n**Read-Only endpoints的例子**\n\n你可能想让你的model只公开read-only操作,隐藏其余所有的POST, PUT, DELETE.请看下面的例子:\n\ncommon/models/model.js\n\n```javascript\nProduct.disableRemoteMethod('create', true);\t\t\t\t// Removes (POST) /products\nProduct.disableRemoteMethod('upsert', true);\t\t\t\t// Removes (PUT) /products\nProduct.disableRemoteMethod('deleteById', true);\t\t\t// Removes (DELETE) /products/:id\nProduct.disableRemoteMethod(\"updateAll\", true);\t\t\t\t// Removes (POST) /products/update\nProduct.disableRemoteMethod(\"updateAttributes\", false);\t\t// Removes (PUT) /products/:id\nProduct.disableRemoteMethod('createChangeStream', true);\t// removes (GET|POST) /products/change-stream\n```\n\n**隐藏相关model的endpoints**\n\n使用disableRemoteMethod()来禁用相关model的REST endpoints.\n\n例如,有2个model,分别叫post和tag,他们的关系是post hasMany tags.添加如下代码到/common/models/post.js去禁用相关model(tag)的remote methods和对应的REST endpoints: \n\ncommon/models/post.js\n\n```javascript\nmodule.exports = function(Post) {\n  Post.disableRemoteMethod('__get__tags', false);\n  Post.disableRemoteMethod('__create__tags', false);\n  Post.disableRemoteMethod('__destroyById__accessTokens', false); // DELETE\n  Post.disableRemoteMethod('__updateById__accessTokens', false); // PUT\n};\n```\n\n**隐藏属性**\n\n上面说的都是隐藏REST或方法,如果想隐藏属性(可以理解为表字段)T,那就使用hidden属性就可以了.例如:\n\ncommon/models/user.json\n\n```json\n...\n  \"properties\": {\n    ...\n    \"password\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n...\n   \"hidden\": [\"password\"],\n...\n```\n\n更多细节参看 [Model definition JSON file (Hidden properties)](Model-definition-JSON-file.html#hidden-properties).\n\n---\n\n<h4 id=\"1.5\"> 1.5 验证Model的数据 </h4>\n\n模式(schema)对model施加了限制,以确保model将保存与对应的数据库表匹配的数据.\n\nmodel可以在将数据传递到数据存储(例如数据库)之前验证数据,以确保其符合后端模式(schema).\n\n##### 为model添加schema(模式)\n\n验证数据的一种方法是创建model schema,LoopBack将确保数据符合该模式定义.\n\n例如,假设您的应用程序有一个名为product的model.以下代码定义了一个模式并将其分配给model.模式定义了两个属性:name,必需的字符串属性和price,可选的数字属性.\n\ncommon/models/product.js\n\n```javascript\nvar productSchema = {\n  \"name\": { \"type\": \"string\", \"required\": true },\n  \"price\": \"number\"\n};\n// 实际上下面这行代码会报错,因为找不到Model,把Model换成Product就可以了.\nvar Product = Model.extend('product', productSchema);\n```\n\n如果客户端尝试使用额外属性(例如一个名为description的属性)保存产品,那么在应用将数据保存在模型中之前,会删除这些属性.此外,由于name是必需的值,因此只有在产品包含name属性的值时,才会保存模型.\n\n___译注: 以下为实际测试,请仔细阅读___\n\n**基础准备:**\n\n首先,我在mysql数据库里建了一个表,名为city,有2个字段,分别是city_id(int类型),city_name(字符串类型),其中city_id为主键.\n\n然后,我在strongloop中建立了一个model,名为City,注意下面的model定义json中的细节.\n\n```json\n{\n  \"name\": \"City\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,  //  先看一下这个参数,记住它是true,后面会说.\n  \"options\": {\n    \"validateUpsert\": true\n  },\n  \"properties\": {\n    \"city_id\": {\n      \"type\": \"number\",\n      \"required\": true,\n      \"id\": true // 请思考为什么要有这个属性?\n      // 答案:如果我不设置这个参数,并且上面的\"idInjection\"参数还是true\n      // 那么strongloop这个傻x就会默认的认为你的表主键叫\"id\",而事实上是city_id.\n      // 所以在post的时候会报错.\n    },\n    \"city_name\": {\n      \"type\": \"string\",\n      \"required\": true\n    }\n  },\n  \"validations\": [],\n  \"relations\": {},\n  \"acls\": [],\n  \"methods\": {}\n}\n```\n\n接下来启动服务,到API Explorer中看一下city这个model,并进入到post一节,准备开始测试.如下图所示:\n\n![model](img/validaTest.jpg)\n\n看一下上图我画红框地方,你会发现我并没有像上面文档要求的,在js文件里定义schema,但是model schema已经存在了,并且就是你json中定义的样子.\n\n**测试一:多加个schema中没有的字段,然后post,看看是什么效果**\n\n我在上图的data区域内输入如下内容:\n\n```json\n{\n  \"city_id\": 3,\n  \"city_name\": \"Haerbin\",\n  \"rem\":\"我是个多加的字段\"\n}\n```\n\n然后点击try it out!\n\n奇迹出现了!!!请看下图,strongloop居然告诉我成功了:\n\n![ok](img/postField.jpg)\n\n赶紧到数据库里查一眼,确实插入进去了,新增的字段被忽略了.如下图所示:\n\n![dataok](img/dataOK.jpg)\n\n如此智能和灵活,也不知道是好是坏!并且和我想象中的schema会约束数据有点不符!\n\n**测试二:在js中添加schema,然后多加个schema中没有的字段去post,看看是什么效果**\n\n首先,我在city的js文件中添加如下代码:\n\n```javascript\n'use strict';\n\nmodule.exports = function(City) {\n  var citySchema = {\n    \"city_id\": { \"type\": \"number\", \"required\": true, \"id\": true },\n    \"city_name\": { \"type\": \"string\", \"required\": true },\n    \"rem\": { \"type\": \"string\", \"required\": true }\n  };\n  var City = City.extend('City', citySchema);\n};\n```\n请注意,上面代码中的\"rem\"在model的json定义中是不存在的.\n\n然后我重复上面的操作,到API Explorer中进行测试,看下图所示:\n\n![vaTest2](img/vaTest2.jpg)\n\n请注意:上图中model schema红框那里的内容变成了我在js中定义的内容.作为知识要点回顾,这说明js和json定义model都是一样的.\n\n同样的,上面的操作又成功了,数据库里新增了一条记录.这和我想象的还不一样,我以为官方文档中的代码一旦添加到js文件中,就会约束数据,但实际还是没限制(不能说没限制,多余数据被抛弃了).\n\n**测试三:增加strict参数**\n\n如果我想实现\"model定义了几个属性,post的时候如果有多余属性就让strongloop报错\",应该怎么操作.\n\n回想一下,上面其实提到过,在mode的json文件中,增加一条参数.\"strict\": true,就可以了.\n\n测试一下,添加完这个参数,在用多余的字段去post就会报错,如下图所示:\n\n![vaPostErr](img/vaPostErr.jpg)\n\n我还做了个测试,就不贴图了.我测了一下,把city_id输入个字符串(不是数字),然后去post,strongloop会报错(但是报错信息的内容比较恶心,居然提示我city_id不能为空,其实应该提示类型不符).这和下文中要讲的一点一致.那就是model会自动加载后面表格中所列的那些验证方法.\n\n**测试结论:**\n\n其实我主要是想吐槽一下strongloop的官方文档,可能是我智商低,我读到这里的时候,以为按照它要求的,在js文件中添加了schema就可以验证数据了.但实际测试真不是那么回事.所以,不要太相信官文,还是要自己多做测试.\n\n___译注: 以上为实际测试,请仔细阅读___\n\n##### 使用验证方法\n\n附加到持久数据源的每个model都具有Validatable中混合的验证方法,如下表所示:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesabsenceof\" class=\"external-link\" rel=\"nofollow\">validatesAbsenceOf</a></td>\n      <td>验证一个或多个指定属性是否缺失.model不应包括被视为有效的属性,验证字段不为空时失败.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesexclusionof\" class=\"external-link\" rel=\"nofollow\">validatesExclusionOf</a></td>\n      <td>验证排除.要求属性值不在指定的数组中.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesformatof\" class=\"external-link\" rel=\"nofollow\">validatesFormatOf</a></td>\n      <td>\n        <p>验证格式.要求模型包含与给定格式匹配的属性.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesinclusionof\" class=\"external-link\" rel=\"nofollow\">validatesInclusionOf</a></td>\n      <td>验证是否包含在集合中.要求属性的值在指定的数组中.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validateslengthof\" class=\"external-link\" rel=\"nofollow\">validatesLengthOf</a></td>\n      <td>\n        <p>V验证长度.要求属性长度在指定范围内.三种验证：“min”，“max”和“is”.默认错误消息是：</p>\n        <ul>\n          <li>min: too short</li>\n          <li>max: too long</li>\n          <li>is: length is wrong</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesnumericalityof\" class=\"external-link\" rel=\"nofollow\">validatesNumericalityOf</a></td>\n      <td>验证数字.需要属性的值为整数或数字.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatespresenceof\" class=\"external-link\" rel=\"nofollow\">validatesPresenceOf</a></td>\n      <td>验证一个或多个指定属性的存在.需要包含一个被认为有效的属性的模型,验证字段为空时失败.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesuniquenessof\" class=\"external-link\" rel=\"nofollow\">validatesUniquenessOf</a></td>\n      <td>\n        <p>验证唯一性.确保属性的值对模型是唯一的.不适用于所有连接器.目前支持这些连接器.:</p>\n        <ul>\n          <li>In Memory</li>\n          <li>Oracle</li>\n          <li>MongoDB</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n下面是上述那些方法的使用实例:\n\n**Options object**\n\n大多数验证方法接受一个选项参数,其属性取决于所使用的特定方法.不过,有两个共同的适用于所有方法的属性：\n\n* message - Error message to use instead of the default message, if validation fails.\n\n* allowNull - Whether null values are allowed.\n\n请看下面的例子:\n\ncommon/models/user.js\n\n```javascript\nmodule.exports = function(user) {\n  user.validatesPresenceOf('name', 'email');\n  user.validatesLengthOf('password', {min: 5, message: {min: 'Password is too short'}});\n  user.validatesInclusionOf('gender', {in: ['male', 'female']});\n  user.validatesExclusionOf('domain', {in: ['www', 'billing', 'admin']});\n  user.validatesNumericalityOf('age', {int: true});\n  user.validatesUniquenessOf('email', {message: 'email is not unique'});\n};\n```\n___译注:测试一下,不测不放心___\n\n在model的js文件中加一个验证city_id是否为数字并且返回指定错误信息的代码,如下:\n\n```javascript\n'use strict';\n\nmodule.exports = function(City) {\n  // 自定义一个名为customValidator的验证方法\n  City.validate('city_id', customValidator, { message: 'stop瞎整!' });\n  // 判断city_id是否为数字\n  function customValidator(err) {\n    if (isNaN(this.city_id)) err();\n  };\n};\n```\n\n然后在API Explorer中测试一下,效果如下:\n\n![vaDefErr](img/vaDefErr.jpg)\n\n效果还可以,虽然错误信息那块有点多,将来在收拾它.\n\n>  提示: 当您在模型实例上调用isValid()时,将调用验证方法,并在每次创建或更新模型实例时自动调用验证方法.您不必自己去调用isValid()来验证数据.要在调用upsert()时强制执行验证约束,请确保在模型定义JSON文件中将validateUpsert选项设置为true.默认情况下,模型生成器将此属性设置为true.\n\n要显式调用验证约束,请调用isValid(),例如:\n\n___译注:实际测试下面代码还是不好使,并且代码后面少了个\")\"___\n\n```javascript\nuser.isValid(function (valid) {\n  if (!valid) {\n    user.errors // hash of errors {attr: [errmessage, errmessage, ...], attr: ...}\n  }\n```\n另一个定义验证约束的示例,这次使用正则表达式:\n\n```javascript\nvar re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]-(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]-)*)|(\\\".-\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]-\\.)-[a-zA-Z]{2,}))$/;\n\nUserModel.validatesFormatOf('email', {with: re, message: 'Must provide a valid email'});\nif (!(UserModel.settings.realmRequired || UserModel.settings.realmDelimiter)) {\n  UserModel.validatesUniquenessOf('email', {message: 'Email already exists'});\n  UserModel.validatesUniquenessOf('username', {message: 'User already exists'});\n}\n```\n\n要为创建新模型实例的模型添加验证,您不需要调用isValid().您可以通过添加验证器调用添加验证:\n\ncommon/models/MyModel.js\n\n```javascript\nmodule.exports = function(MyModel) {\n  MyModel.validatesLengthOf('name', { min: 5, message: { min: 'Name should be 5- characters' } });\n  //...\n};\n```\n\n##### 本地化验证信息\n\n可以在客户端上本地化验证错误消息,而不是修改服务器返回的错误响应.验证错误响应会包含error.details.codes中的错误代码,使客户端能够将错误映射到本地化消息.这里是一个示例错误响应:\n\nerror.details.codes\n\n___译注:这段说的比较空,在哪?怎么设置都没说?我在model的js中试了重定义error对象,res对象都不好使,可能是我的问题.___\n\n```json\n{\n  \"name\": \"ValidationError\",\n  \"status\": 422,\n  \"message\": \"The Model instance is not valid. See error object `details` property for more info.\",\n  \"statusCode\": 422,\n  \"details\": {\n    \"context\": \"user\",\n    \"codes\": {\n      \"password\": [\n        \"presence\"\n      ],\n      \"email\": [\n        \"uniqueness\"\n      ]\n   },\n    \"messages\": {\n      \"password\": [\n       \"can't be blank\"\n     ],\n      \"email\": [\n        \"Email already exists\"\n      ]\n    }\n  }\n}\n```\n\n---\n\n<h4 id=\"1.6\"> 1.6 创建Model关系 </h4>\n\n##### 概述\n\n单个模型虽然易于理解和使用.但在现实中,模型通常是有联系(connected)或相关的.当您使用多个模型构建真实的应用程序时,通常需要定义模型之间的关系。 例如：\n\n* 客户有很多订单,每个订单都属于一个客户.\n\n* 用户可以被分配一个或多个角色,角色可以有零个或多个用户.\n\n* 医生伺候许多患者,患者也可以看许多医生.\n\n对于有联系的模型,LoopBack为每个有联系的model公开了一组API以实现每个**模型实例**之间的交互,而且还可以根据客户端的需要在这些有联系的model上查询和过滤信息.\n\n您可以在模型之间定义以下关系：\n\n* BelongsTo relations\n\n* HasOne relations\n\n* HasMany relations\n\n* HasManyThrough relations\n\n* HasAndBelongsToMany relations\n\n* Polymorphic relations(多态关系)\n\n* Embedded relations(嵌入关系) (embedsOne and embedsMany)\n\n您可以在模型定义JSON文件或JavaScript代码中定义模型关系,最终结果是一样的(_译注:但是后面不建议使用js代码_).\n\n当为model定义关系时,LoopBack会向model中添加一组方法,详见每种关系类型的章节.\n\n##### 使用关系生成器relation generator\n\n对于已经存在的model创建新的关系是非常简单的.使用`slc loopback:relation`, 或者`apic loopback:relation`这2个命令即可.\n\n生成器会提示你输入关系类型(belongsTo, hasMany等)和与之相关联的model name.\n\n##### Relation options(关系选项)\n\n大多数关系类型有3个选项:\n\n* Scope (_译注:scope可以理解为查询条件或过滤器或者model的实例,可能不太准确_)\n\n* Properties(属性)\n\n* Custom scope methods(自定义scope方法)\n\n**Scope**\n\nscope可以是object或函数,它接受**所有关联scope**上的过滤器/查询条件.\n\n当scope是object时,它有常见的过滤器选项,例如:where, order, include, limit, offset等\n\n这些选项会被合并到默认过滤器中,这意味着where部分将进行AND运算(_译注:我理解,大概意思就是你定义的where会和原来默认过滤器的where进行AND,而其他的则会覆盖默认过滤器的选项_).其他选项通常会覆盖默认值(标准mergeQuery行为).\n\n当scope是函数时,它将接收当前实例,以及默认过滤器对象(_译注:函数入参_).\n\n例如:\n\n```javascript\n// only allow products of type: 'shoe', always include products\nCategory.hasMany(Product, {\n    as: 'shoes', \n    // scope是object\n    scope: { \n        where: { type: 'shoe' }, \n        include: 'products'\n    }\n});\nProduct.hasMany(Image, {\n    // scope是函数,inst是当前实例,filter是默认过滤器对象.\n    // 但inst到底是谁,官文的注释说这里的inst是category,不太理解.\n    scope: function(inst, filter) { \n        return { type: inst.type }; \n    }\n});  // inst is a category - match category type with product type.\n```\n\n**Properties**\n\n与scope类似,Properties也可以是object或者函数.\n\n___译注,下面两句我保留了原文,因为我翻译的不太好___\n\n当Properties是object时,the keys refer to the instance, the value will be the attribute key on the related model (mapping).这个意思大概是说Properties对象的key是**当前实例**的属性引用,而Properties对象的value是它**相关model**的属性映射.\n\n当Properties是函数时,the resulting object (key/values) are merged into the related model directly.意思大概是说生成的对象直接被合并进它的**关系model**中.\n\n例如,以下关系将`type`转换到product这个model,并且在创建时将`category name`取消规范化为categoryName\n\n```javascript\nCategory.hasMany(Product, {\n    as: 'shoes', \n    properties: {\n        type: 'type',\n        category: 'categoryName'\n    }\n});\n```\n\n上述是Properties为object时的例子,如果要以函数的形式完成同样的操作,例子如下:\n\n```javascript\nProduct.hasMany(Image, {\n    properties: function(inst) { // inst is a category\n        return {type: inst.type, categoryName: inst.name};\n  }\n});\n```\n\n___译注:截至到目前,\"// inst is a category\"这个注释已经出现了好几次,我没太看懂inst为什么会代表category这个model,按字面理解,它好像更应该代表Product这个model.先这样吧,以后再说.___\n\n**invertProperties(反转属性)**\n\n通常情况下,属性从父对象传递到子对象,但是有时可以做相反的操作.要启用此选项,请使用invertProperties选项.可以参见**Embedded models (embed with belongsTo)**里面的例子.\n\n**Custom scope methods**\n\n最后,您可以使用scopeMethods属性添加自定义scope method.同样,该选项可以是对象或函数.\n\n>  重要提示: 默认情况下,自定义的scope method不会作为remote methods公开,你必须手工设置functionName.shared = true才可以.\n\n例子:\n\n```javascript\nvar reorderFn = function(ids, cb) {\n  console.log(this.name); // `this` refers to the RelationDefinition  - `images` (relation name) \n  // Do some reordering here & save cb(null, [3, 2, 1]); }; \n  // Manually declare remoting params \n  reorderFn.shared = true; \n  reorderFn.accepts = { arg: 'ids', type: 'array', http: { source: 'body' } }; \n  reorderFn.returns = { arg: 'ids', type: 'array', root: true }; \n  reorderFn.http = { verb: 'put', path: '/images/reorder' }; \n  Product.hasMany(Image, { scopeMethods: { reorder: reorderFn } });\n}\n```\n\n**Exposing REST APIs for related models**\n\n以下示例演示如何通过REST API访问连接的模型:\n\n/server/script.js\n\n```javascript\nvar db = loopback.createDataSource({connector: 'memory'});\n  Customer = db.createModel('customer', {\n    name: String,\n    age: Number\n  });\n  Review = db.createModel('review', {\n    product: String,\n    star: Number\n  });\n  Order = db.createModel('order', {\n    description: String,\n    total: Number\n  });\n\n  Customer.scope(\"youngFolks\", {where: {age: {lte: 22}}});\n  Review.belongsTo(Customer, {foreignKey: 'authorId', as: 'author'});\n  Customer.hasMany(Review, {foreignKey: 'authorId', as: 'reviews'});\n  Customer.hasMany(Order, {foreignKey: 'customerId', as: 'orders'});\n  Order.belongsTo(Customer, {foreignKey: 'customerId'});\n```\n\n---\n\n<h4 id=\"1.6.1\"> 1.6.1 开启Model关系之旅 </h4>\n\n>  一个简要的教程,说明如何设置model关系\n\n```bash\n$ git clone https://github.com/strongloop/loopback-example-relations.git\n$ cd loopback-example-relations\n$ npm install\n$ node .\n```\n\n___译注:原文接下来一堆内容,都是介绍这个git的详细结构和内容的,我省略了大部分内容,只保留了model定义这几个与后续文档紧密相关的内容___ \n\n**创建models**\n\n* Name: `Customer`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: Yes\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n    * age\n      * number\n      * Not Required\n\n* Name: `Order`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: Yes\n  * Custom plural form: Leave blank\n  * Properties:\n    * \tdescription\n      * String\n      * Not Required\n    * date\n      * date\n      * Not Required\n\n* Name: `Account`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n    * date\n      * date\n      * Not Required\n\n* Name: `Address`\n  * Data source: transient\n  * Base class: Model\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * street\n      * String\n      * Not Required\n    * city\n      * String\n      * Not Required\n    * state\n      * String\n      * Not Required\n    * zipCode\n      * String\n      * Not Required\n\n* Name: `Author`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n\n* Name: `Book`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: Yes\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n\n* Name: `EmailAddress`\n  * Data source: transient\n  * Base class: PersistedModel\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * label\n      * String\n      * Not Required\n    * address\n      * String\n      * Not Required\n\n* Name: `Link`\n  * Data source: transient\n  * Base class: Model\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * id\n      * number\n      * Required > Please set \"id\": true manually for this property, like link.json\n    * name\n      * String\n      * Not Required\n    * notes\n      * String\n      * Not Required\n\n* Name: `Reader`\n  * Data source: db (memory)\n  * Base class: PersistedModel\n  * Expose over REST: No\n  * Custom plural form: Leave blank\n  * Properties:\n    * name\n      * String\n      * Not Required\n\n**定义model关系**\n\n* `Customer`\n  * has many\n    * `Order`\n      * Property name for the relation: `orders`\n      * Custom foreign key: `customerId`\n      * Require a through model: No\n    * `Other Relations:` (please add them manually)\n\n```json\n\"address\": {\n  \"type\": \"embedsOne\",\n  \"model\": \"Address\",\n  \"property\": \"billingAddress\",\n  \"options\": {\n    \"validate\": true,\n    \"forceId\": false\n  }\n},\n\"emails\": {\n  \"type\": \"embedsMany\",\n  \"model\": \"EmailAddress\",\n  \"property\": \"emailList\",\n  \"options\": {\n    \"validate\": true,\n    \"forceId\": false\n  }\n},\n\"accounts\": {\n  \"type\": \"referencesMany\",\n  \"model\": \"Account\",\n  \"property\": \"accountIds\",\n  \"options\": {\n    \"validate\": true,\n    \"forceId\": false\n  }\n},\n```\n* `Book`(please add them manually)\n\n```json\n\"people\": {\n    \"type\": \"embedsMany\",\n    \"model\": \"Link\",\n    \"scope\": {\n      \"include\": \"linked\"\n    }\n}\n```\n\t\n* `Link`(please add them manually)\n\n```json\n\"linked\": {\n  \"type\": \"belongsTo\",\n  \"polymorphic\": {\n    \"idType\": \"number\"\n  },\n  \"properties\": {\n    \"name\": \"name\"\n  },\n  \"options\": {\n    \"invertProperties\": true\n  }\n}\n```\n\n* `Order`\n  * belongs to\n    * `Customer`\n      * Property name for the relation: Leave blank - defaults to customer\n      * Custom foreign key: Leave blank\n\n---\n\n<h4 id=\"1.6.2\"> 1.6.2 BelongsTo关系(多对一,或一对一) </h4>\n\n##### 概述\n\nbelongsTo关系是指一个model与另一个model建立多对一(many-to-one)或一对一(one-to-one)的连接.在多对一关系中,声明model的每个实例\"属于\"另一个model的至多一个实例,而目标model可以具有许多声明model.\n\n例如,假设应用程序有customers和orders两个model:\n\n* 每个订单只能由一个客户设置: ”Order belongsTo (one) Customer”.\n\n* 一个客户可以有多个订单: ”Customer hasMany Orders”.\n\n这种belongsTo关系是hasMany关系的逻辑反射.\n\n声明模型(Order)具有引用目标模型(Customer)的主键属性的外键属性.如果主键不存在,LoopBack将自动添加一个(_译注:这句话是说order有个外键,内容是customer的主键_).\n\n另一种belongsTo关系是一对一的关系,它类似于many-to-one,但不同的是,一对一关系要求拥有模型的每个实例只能有一个声明模型的实例.\n\n例如,假设应用程序有customers和adress两个model：\n\n* 每个地址只能与一个客户相关联：“地址belongsTo一个客户”。\n\n* 客户只能有一个地址：“客户hasOne一个地址”。\n\n这种belongsTo关系是hasOne关系的逻辑反射.\n\n##### 定义belongsTo关系\n\n使用关系生成器`relation generator`创建两个model之间的关系.该工具将提示您输入model的名称,相关model的名称和其他必需的信息.该工具将相应地修改model定义JSON文件(例如,common/models/customer.json).\n\n例如，下面是loopback-example-relation中的订单模型的JSON文件：\n\n**common/models/order.json**\n\n```json\n{\n  \"name\": \"Order\",          // 这个就是前面说的\"声明模型(model)\"\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"customer\": {           // 关系名\n      \"type\": \"belongsTo\",  // 关系类型\n      \"model\": \"Customer\",  // 关联的model,也就是前面说的\"目标模型(model)\"\n      \"foreignKey\": \"\"      // 为空,所以loopback自动指定customer的customerId为外键\n    }\n  },\n  ...\n```\n\n或者,你还可以通过js代码来定义“belongsTo”关系, **虽然一般不推荐这么做**:\n\n**common/models/order.js**\n\n```javascript\nOrder.belongsTo(Customer, {foreignKey: 'customerId'});\n```\n\n如果声明model没有外键属性,LoopBack将添加一个具有相同名称的属性.属性的类型将与目标模型的`id`属性的类型相同(_译注:id属性是永远存在的,如果你没指定,loopback默认也指定_).\n\n如果不指定它们,那么LoopBack指定关系名称和外键如下：\n\n* 关系名称：驼峰式的模型名称,例如,对于“Customer”模型,关系是“customer”.\n* 外键：附加了`Id`的关系名称,例如,对于关系名称“customer”,默认外键是“customerId”.\n\n##### 添加method到model\n\n一旦定义belongsTo关系,LoopBack会自动添加一个带有关系名称的方法到声明模型类的原型,例如:`Order.prototype.customer(...)`\n\n根据参数,该方法可用于get或set所属模型实例.方法调用的结果在内部缓存,并通过对方法的后续同步调用提供.\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>order.customer(function(err, customer) {<br>  ...<br>});</pre>\n      </td>\n      <td>Get the customer for the order asynchronously(异步获取定单的客户)</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var customer = order.customer();</pre>\n      </td>\n      <td>\n        <p>Synchronously get the results of a previous get call to <span>customer(...)(同步获取之前的get调用结果给客户)</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre>order.customer(customer);</pre>\n      </td>\n      <td>Set the customer for the order(设置定单的客户)</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"1.6.3\"> 1.6.3 HasOne关系(一对一) </h4>\n\n##### 概述\n\nhasOne关系与另一个model建立了一对一的连接,这使得声明模型的每个实例具有另一个模型的\"has one\"实例.hasOne关系是hasMany关系的退化.\n\n##### 定义hasOne关系\n\n使用关系生成器`relation generator`创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).\n\n例如,假设有两个model:supplier和account\n\n**common/models/supplier.json**\n\n```json\n{\n  \"name\": \"supplier\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"supplier_acct\": {\n      \"type\": \"hasOne\",\n      \"model\": \"account\",\n      \"foreignKey\": \"supplierId\"\n    }\n  },\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\nsupplier(供应商)有一个account(帐号), 在声明模型上有个外键:account.supplierId -> supplier.id.\n\n_译注: 观察上面supplier的json,你会发现,它自身的model定义中只有一个名为name的字段.这时,在它的关系中定义的foreignKey会不会合并到supplier的model中,大家可以试一下._\n\n**common/models/account.json**\n\n```json\n{\n  \"name\": \"account\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\",\n      \"required\": true\n    },\n    \"acctmgr\": {\n      \"type\": \"string\"\n    },\n    \"supplierId\": {\n      \"type\": \"number\",\n      \"required\": true\n    }\n  },\n  \"validations\": [],\n  \"relations\": {},\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\n或者,你可以通过模型的js代码来定义“hasOne”关系, **虽然通常情况下不建议在和么做**:\n\n**common/models/supplier.js**\n\n```javascript\nSupplier.hasOne(Account, {foreignKey: 'supplierId', as: 'account'});\n```\n\n如果目标模型没有外键属性,LoopBack将添加一个具有相同名称的属性.属性的类型将与目标模型的id属性的类型相同.**请注意,外键属性是在目标模型上定义的(例如,Account)**.\n\n如果不指定它们,那么LoopBack生成关系名称和外键如下:\n\n* 关系名称:驼峰式模型名称,例如,对于\"supplier\"模型，关系是\"supplier\".(_译注:你看出驼峰了么,我是没看出来_)\n* 外键:附有Id的关系名称,例如,对于关系名称\"supplier\",默认外键是\"supplierId\".\n\n##### 添加method到model\n\n一旦定义了hasOne关系,LoopBack会自动添加一个带有关系名称的方法到声明模型类的原型.例如:supplier.prototype.account(...).\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account(function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>\n        <p>Find the supplier's account model.</p>\n        <div class=\"sl-hidden\"><strong>REVIEW COMMENT from Rand</strong><br>You cannot supply a filter, as you can for hasMany right?</div>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var supplier = supplier.account.build(data);</pre>\n        <p>Or equivalently:</p>\n        <pre>var account = new account({supplierId: supplier.id, ...});</pre>\n      </td>\n      <td>Build a new account for the supplier with the supplierId to be set to the id of the supplier. No persistence is involved.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.create(data, function(err, account) {<br>  ...<br>});</pre>\n        <p>Or, equivalently:</p>\n        <pre>account.create({supplierId: supplier.id, ...}, function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new account for the supplier. If there is already an account, an error will be reported.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.destroy(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove the account for the supplier.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.update({balance: 100}, function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>Update the associated account.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"1.6.4\"> 1.6.4 HasMany关系(一对多) </h4>\n\n##### 概述\n\nhasMany关系与另一个模型建立一对多连接.你经常在belongsTo关系的“另一边”找到这个关系.此关系指示模型的每个实例具有另一个模型的零个或多个实例.例如,在具有客户和订单两个模型的应用程序中,客户可以有许多订单.\n\n##### 定义hasMany关系\n\n使用关系生成器`relation generator`创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).\n\n例如,下面是一个model的json定义文件:\n\n**common/models/customer.json**\n\n```json\n{\n  \"name\": \"Customer\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"reviews\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Review\",\n      \"foreignKey\": \"authorId\"\n    },\n  ...\n```\n\n或者,你可以通过模型的js代码来定义“hasOne”关系, **虽然通常情况下不建议在和么做**:\n\n**common/models/customer.js**\n\n```javascript\nCustomer.hasMany(Review, {as: 'reviews', foreignKey: 'authorId'});\n```\n\n如果不指定它们,那么LoopBack生成关系名称和外键如下:\n\n* 关系名称:驼峰式的模型复数名称,例如,对于\"Order\"模型，关系是\"orders\".\n* 外键:附有Id的关系名称,例如,对于关系名称\"Customer\",默认外键是\"customerId\".\n\n##### 添加method到model\n\n一旦你定义了一个“hasMany”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:Customer.prototype.orders(...).\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders([filter],\n  function(err, orders) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find orders for the customer, optionally using provided [filter](Querying-data.html)</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var order = customer.orders.build(data);</pre>\n        <p>Or equivalently:</p>\n        <pre>var order = new Order({customerId: customer.id, ...});</pre>\n      </td>\n      <td>Build a new order for the customer with the customerId to be set to the id of the customer. No persistence is involved.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.create(data,\n  function(err, order) {<br>  ...<br>});</pre>\n        <p>Or, equivalently:</p>\n        <pre>Order.create({customerId: customer.id, ...},\n  function(err, order) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new order for the customer.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.destroyAll(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove all orders for the customer.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.findById(orderId,\n  function(err, order) {<br>   ...<br>});</pre>\n      </td>\n      <td>Find an order by ID.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.destroy(orderId,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Delete an order by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"1.6.5\"> 1.6.5 HasManyThrough关系(多对多) </h4>\n\n##### 概述\n\nhasManyThrough关系设置了与另一个模型的多对多连接.此关系表示`通过第三(中介)模型，声明模型可以与另一模型的零个或多个实例匹配`(_译注:这句不太好理解,但是看下面的图就能理解了).例如,在医生的申请中,如果病人预约见医生,有关的关系声明可能是:\n\n![hasManyThrough](img/hasManyThrough.jpg)\n\n第三(中介)模型(Appointment),有2个外键属性(physicianId和patientId),这2个外键分别引用声明模型(Physician)的主键,以及目标模型(Patient)的主键.\n\n##### 定义hasManyThrough关系\n\n使用关系生成器`relation generator`创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).\n\n创建hasManyThrough关系时,对\"Require a through model\"这个问题回答**Yes**,然后指定model即可,如下所示:\n\n```bash\n[?] Require a through model? Yes\n[?] Choose a through model: Appointment\n```\n\n例如:\n\n**common/models/physician.json**\n\n```json\n{  \n  \"name\": \"Physician\",\n  \"base\": \"PersistedModel\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"patients\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Patient\",\n      \"foreignKey\": \"physicianId\",\n      \"through\": \"Appointment\"\n    },\n  ...\n```\n\n**common/models/patient.json**\n\n```json\n{  \n  \"name\": \"Patient\",\n  \"base\": \"PersistedModel\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"physicans\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Physician\",\n      \"foreignKey\": \"patientId\",\n      \"through\": \"Appointment\"\n    },\n  ...\n```\n\n**common/models/appointment.json**\n\n```json\n{  \n  \"name\": \"Appointment\",\n  \"base\": \"PersistedModel\",\n  \"properties\": {\n    \"appointmentDate\": {\n      \"type\": \"date\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"physician\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Physician\",\n      \"foreignKey\": \"physicianId\"\n    },\n    \"patient\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Patient\",\n      \"foreignKey\": \"patientId\"\n    },\n  ...\n```\n\n你还可以通过js代码来设置hasManyThrough关系,**虽然通常情况下不建议在和么做**:\n\n**common/models/physician.js**\n\n```javascript\n//...\nAppointment.belongsTo(Patient);\nAppointment.belongsTo(Physician);\n\nPhysician.hasMany(Patient, {through: Appointment});\nPatient.hasMany(Physician, {through: Appointment});\n                                                   // Now the Physician model has a virtual property called patients:\nPhysician.patients(filter, callback);              // Find patients for the physician\nPhysician.patients.build(data);                    // Build a new patient\nPhysician.patients.create(data, callback);         // Create a new patient for the physician\nPhysician.patients.destroyAll(callback);           // Remove all patients for the physician\nPhysician.patients.add(patient, callback);         // Add an patient to the physician\nPhysician.patients.remove(patient, callback);      // Remove an patient from the physician\nPhysician.patients.findById(patientId, callback);  // Find an patient by id\n```\n\n**定义外键属性**\n\nhasManyThrough关系具有指示外键属性(字段)名称的keyThrough属性.如果未指定,它将默认为带有附加ID的toModelName.例如:\n\n* Physician.hasMany(Patient, {through: Appointment}) - keyThrough defaults to patientId.\n* Patient.hasMany(Physician, {through: Appointment})- keyThrough defaults to physicianId.\n\n上面的keyThrough属性将用于匹配这些foreignKeys：\n\n```javascript\nAppointment.belongsTo(Physician, {as: 'foo', foreignKey: 'physicianId'});\nAppointment.belongsTo(Patient, {as: 'bar', foreignKey: 'patientId'});\n```\n\n你可以显式指定keyThrough属性:\n\n```javascript\nPhysician.hasMany(Patient, {through: Appointment, foreignKey: 'fooId', keyThrough: 'barId'});\nPatient.hasMany(Physician, {through: Appointment, foreignKey: 'barId', keyThrough: 'fooId'});\n// keyThroughs above will be used to match foreignKeys below\nAppointment.belongsTo(Physician, {as: 'foo'}); // foreignKey defaults to 'fooId'\nAppointment.belongsTo(Patient, {as: 'bar'});   // foreignKey defaults to 'barId'\n```\n\n**在JSON中定义keyThrough**\n\n下面是使用外键定义hasManyThrough关系的示例.考虑下面的表:\n\n* STUDENTS(ID,STUNAME): student information\n* COURSES(ID,COURNAME): course information\n* COURSTU(COURID,STUID): table with foreign keys that handle the many-to-many mapping\n\n你可以按照如下所示在JSON文件中定义关系:\n\n**common/models/courses.json**\n\n```json\n...\n  \"relations\": {\n    \"students\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Students\",\n      \"foreignKey\": \"courid\",\n      \"through\": \"Courstu\",\n      \"keyThrough\": \"stuid\"\n    }\n...\n```\n\n**common/models/students.json**\n\n```json\n\"relations\": {\n    \"courses\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Courses\",\n      \"foreignKey\": \"stuid\",\n      \"through\": \"Courstu\",\n      \"keyThrough\": \"courid\"\n    }\n```\n\n**Self throug)**\n\n在某些情况下,您可能想要定义从模型到其自身的关系.例如,考虑一个社交媒体应用程序,用户可以follow其他用户.在这种情况下,用户可以follow许多其他用户并且可以被其他用户follow.下面的代码显示了如何定义,以及相应的keyThrough属性:\n\n**common/models/user.js**\n\n```javascript\nUser.hasMany(User, {as: 'followers', foreignKey: 'followeeId', keyThrough: 'followerId', through: Follow});\nUser.hasMany(User, {as: 'following', foreignKey: 'followerId', keyThrough: 'followeeId', through: Follow});\nFollow.belongsTo(User, {as: 'follower'});\nFollow.belongsTo(User, {as: 'followee'});\n```\n\n##### 添加method到model\n\n一旦你定义了一个“hasManyThrough”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:physician.patients.create(...).\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients(filter,\n  function(err, patients) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find patients for the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var patient = physician.patients.build(data);</pre>\n      </td>\n      <td>Create a new patient.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.create(data,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new patient for the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.destroyAll(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove all patients for the physician</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.add(patient,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Add a patient to the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.remove(patient,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove a patient from the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.findById(patientId,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find an patient by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n这些关系方法提供了用于与相关对象(上述示例中的患者)一起工作的API.但是,它们不允许您在单个调用中访问相关对象(Patient)和“through”记录(Appointment).\n\n例如,如果要添加新患者并在特定日期创建预约,则必须进行两次调用(REST请求):\n\n1.通过Patient.create创建\n\n`POST /patients`\n\n```json\n{\n  \"name\": \"Jane Smith\"\n}\n```\n\n2.通过Appointment.create创建appointment,将patientId属性设置为Patient.create返回的id.\n\n`POST /appointments`\n\n```json\n{\n  \"patientId\": 1,\n  \"physicianId\": 1,\n  \"appointmentDate\": \"2014-06-01\"\n}\n```\n\n以下查询可用于列出给定医生的所有患者,包括其约会日期:\n\n```\nGET /appointments?filter={\"include\":[\"patient\"],\"where\":{\"physicianId\":2}}\n```\n\n响应返回:\n\n```json\n[\n  {\n    \"appointmentDate\": \"2014-06-01\",\n    \"id\": 1,\n    \"patientId\": 1,\n    \"physicianId\": 1,\n    \"patient\": {\n      \"name\": \"Jane Smith\",\n      \"id\": 1\n    }\n  }\n]\n```\n\n---\n\n<h4 id=\"1.6.6\"> 1.6.6 HasAndBelongsToMany关系(多对多) </h4>\n\n##### 概述\n\nhasAndBelongsToMany关系创建了与另一个模型的**直接**多对多连接,没有中间模型.例如,某个应用程序具有名为组件(assembly)和部件(part)的2个model,其中每个组件具有许多部件,并且每个部件出现在许多组件中,您可以这样声明模型:\n\n##### 定义hasAndBelongsToMany关系\n\n使用关系生成器`relation generator`创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).\n\n![assembly](img/assembly.jpg)\n\n例如,下面是assembly模型的JSON文件的摘录,表示了assembly(组件)和part(部件)模型之间的hasAndBelongsToMany关系:\n\n**/common/models/assembly.json**\n\n```json\n{\n  \"name\": \"Assembly\",\n  \"plural\": \"Assemblies\",\n  \"relations\": {\n    \"parts\": {\n      \"type\": \"hasAndBelongsToMany\",\n      \"model\": \"Part\"\n    },\n...\n```\n\n你还可以通过js代码定义hasAndBelongsToMany关系,虽然通常情况下不建议这么做:\n\n**/common/models/assembly.js**\n\n```javascript\nPart.hasAndBelongsToMany(Assembly);\nAssembly.hasAndBelongsToMany(Part);\n```\n\n**通过REST API添加关系**\n\n通过REST API添加关系时,连接模型必须存在才能添加关系.例如,在上面的“Assembly”和“Part”模型示例中,要通过REST API接口将“Part”的实例添加到“Assembly”中,必须存在一个“AssemblyPart”模型才能工作.\n\n**大多数时候,你应该使用method(方法)添加“hasAndBelongToMany”关系**到服务器端的模型:\n\n**Example method**\n\n```javascript\nassembly.parts.add(part, function(err) {\n  //...\n});\n```\n\n如果您需要使用REST添加关系,首先检查是否首先存在“AssemblyPart”模型.然后使用此代码添加关系:\n\n**Rest Example Method**\n\n```javascript\nAssembly.Parts.link({id:assemblyId, fk: partId}, partInstance,  function(value, header) {\n  //success\n});\n```\n\n##### 为model添加method\n\n一旦你定义了一个“hasAndBelongsToMany”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:assembly.parts.create(...).\n\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts(filter,\n  function(err, parts) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find parts for the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var part = assembly.parts.build(data);</pre>\n      </td>\n      <td>Build a new part.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.create(data,\n  function(err, part) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new part for the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.add(part,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Add a part to the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.remove(part,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove a part from the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.findById(partId,\n  function(err, part) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find a part by ID.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.destroy(partId,\nfunction(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Delete a part by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"1.6.7\"> 1.6.7 Polymorphic关系(多态) </h4>\n\n##### 概述\n\nLoopBack支持多态关系(polymorphic relations),其中模型可以属于多个其他模型,在单个关联上。 例如,您可能具有属于作者模型或读者模型的图片模型.\n\n_译注: 上面翻译的不好,原文在这里,自己理解LoopBack supports polymorphic relations in which a model can belong to more than one other model, on a single association. For example, you might have a Picture model that belongs to either an Author model or a Reader model_\n\n下面的示例使用三个示例模型:Picture,Author,和Reader,其中Picture可以属于Author或Reader.\n\n##### HasMany的polymorphic关系实现\n\n常用的选项都被支持,例如:'photos'指定一个不同的relation name/accessor(关系名称/访问器).\n\n**common/models/author.json**\n\n```json\n{\n  \"name\": \"Author\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"pictures\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Picture\",\n      { \"polymorphic\": \"imageable\" }\n    }\n  }\n...\n```\n\n和:\n\n**common/models/reader.json**\n\n```json\n{\n  \"name\": \"Reader\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"pictures\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Picture\",\n      \"polymorphic\": {\n        \"as\": \"imageable\",\n        \"foreignKey\": \"imageableId\",\n        \"discriminator\": \"imageableType\"\n       } \n    }\n  }\n...\n```\n\n或者,你可以在js代码中定义关系:\n\n**common/models/author.js**\n\n```javascript\nAuthor.hasMany(Picture, { polymorphic: 'imageable' });\n```\n\n和:\n\n**common/models/reader.js**\n\n```javascript\nReader.hasMany(Picture, { polymorphic: { // alternative syntax  \n  as: 'imageable', // if not set, default to: reference\n  foreignKey: 'imageableId', // defaults to 'as - Id'\n  discriminator: 'imageableType' // defaults to 'as - Type'\n  } \n});\n```\n\n##### HasManyThrough的polymorphic关系实现\n\n要定义hasMany多态关系,必须有一个“through”模型,类似于标准的HasManyThrough关系.\n\n例如,\"ImageLink\":\n\n**/common/models/ImageLink.json**\n\n```json\n{\n  \"name\": \"ImageLink\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"author\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Author\",\n      \"foreignKey\": \"authorId\"\n    },\n    \"pictures\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Picture\",\n      \"polymorphic\": {\n        \"foreignKey\": \"imageableId\",\n        \"discriminator\": \"imageableType\"\n      }\n    }\n  },\n...\n}\n```\n\n下面这个例子就是polymorphic hasManyThrough关系:\n\n**/common/models/Author.json**\n\n```json\n{\n  \"name\": \"Author\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"pictures\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Picture\",\n      \"polymorphic\": {\n        \"foreignKey\": \"imageableId\",\n        \"discriminator\": \"imageableType\"\n      },\n      \"through\": \"ImageLink\",\n      \"keyThrough\": \"authorId\"\n    }\n  },\n...\n}\n```\n\n同样的,用js实现也可以,例子是下面这个:\n\n**/common/models/Author.js**\n\n```javascript\nAuthor.hasMany(Picture, {\n  as: 'pictures',\n  polymorphic: {\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  },\n  through: ImageLink,\n  keyThrough: 'authorId'\n});\n```\n\n##### BelongsTo的polymorphic关系实现\n\n因为你动态地定义了相关的模型,所以你不能在前面声明它(_译注:原文是you cannot declare it up front,我翻译的好像不准_). 因此,不是传入相关模型(名称),而是指定多态关系的名称.\n\n**common/models/picture.json**\n\n```json\n{\n  \"name\": \"Picture\",\n  \"base\": \"PersistedModel\",\n  ...\n  \"relations\": {\n    \"author\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Author\",\n      \"polymorphic\": {\n        \"foreignKey\": \"imageableId\",\n        \"discriminator\": \"imageableType\"\n      }\n    }\n  },\n...\n```\n\n或者,使用js代码:\n\n**common/models/picture.js**\n\n```javascript\nPicture.belongsTo('imageable', {\n  polymorphic: true\n}); \n// Alternatively, use an object for setup\nPicture.belongsTo('imageable', {\n  polymorphic: {\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  }\n});\n```\n\n##### HasAndBelongsToMany的polymorphic关系实现\n\n这需要一个明确的“through”模型,例如:PictureLink.\n\n关系`Picture.belongsTo(PictureLink)`和`Picture.belongsTo('imageable',{polymorphic：true})`将自动设置.\n\n对于PictureLink所需的属性也是如此(true).\n\n**/common/models/model.js**\n\n```javascript\nAuthor.hasAndBelongsToMany(Picture, {\n  through: PictureLink,\n  polymorphic: 'imageable'\n});\nReader.hasAndBelongsToMany(Picture, {\n  through: PictureLink,\n  polymorphic: 'imageable'\n});\n// Optionally, define inverse hasMany relations with '(invert: true)'\nPicture.hasMany(Author, {\n  through: PictureLink,\n  polymorphic: 'imageable',\n  invert: true\n});\nPicture.hasMany(Reader, {\n  through: PictureLink,\n  polymorphic: 'imageable',\n  invert: true\n});\n```\n\n##### HasOne的polymorphic关系实现\n\n如下所示,您可以指定'avatar'来显式设置关系的名称.如果未设置,它将默认为多态名称.\n\n**/common/models/model.js**\n\n```javascript\nPicture.belongsTo('imageable', {polymorphic: true});\nAuthor.hasOne(Picture, {as: 'avatar', polymorphic: 'imageable'});\nReader.hasOne(Picture, {polymorphic: {as: 'imageable'}});\n```\n\n##### 处理polymorphic.idType\n\n因为modelTo在前面是未知的(它是多态的),你不能依靠`modelTo`来获得`foreignKey`类型.您可以显式声明`idType`,如下所示.\n\n```json\n[{\n  url: 'john.jpg',\n  imageableType: 'Author',\n  imageableId: '1',\n  id: 1\n}, {\n  url: 'joe.jpg',\n  imageableType: 'Reader',\n  imageableId: '1',\n  id: 2\n}]\n\nAuthors: [{\n  username: 'John',\n  id: 1\n}]\n\nReaders: [{\n  name: 'Joe',\n  id: 1\n}]\n```\n\n```javascript\nvar Author = app.models.Author;\nvar Reader = app.models.Reader;\nvar Picture = app.models.Picture;\n\nAuthor.hasOne(Picture, {\n  as: 'avatar',\n  polymorphic: {\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  }\n});\n\nReader.hasOne(Picture, {\n  as: 'imageable',\n  polymorphic: {\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  }\n});\n\nPicture.belongsTo('owner', {\n  idName: 'username',\n  polymorphic: {\n    idType: Author.definition.properties.username.type,\n    foreignKey: 'imageableId',\n    discriminator: 'imageableType'\n  }\n});\n\n//Creating demo author, reader pictures then listing them\nfunction createAuthor(cb) {\n  Author.create({\n    username: \"John\"\n  }).then(function(author) {\n    author.avatar.create({\n      url: \"john.jpg\"\n    }, function() {\n      cb();\n    });\n  });\n}\n\nfunction createReader(cb) {\n  Reader.create({\n    name: \"Joe\"\n  }).then(function(reader) {\n    reader.imageable.create({\n      url: \"joe.jpg\"\n    }, function() {\n      cb();\n    });\n  });\n}\n\nfunction listPictures() {\n  Picture.find(function(err, res) {\n    console.log(\"\\nPictures:\\n\", res);\n  })\n}\n\nfunction listReaders() {\n  Reader.find(function(err, res) {\n    console.log(\"\\nReaders:\\n\", res);\n  })\n}\n\nfunction listAuthors() {\n  Author.find(function(err, res) {\n    console.log(\"\\nAuthors:\\n\", res);\n  })\n}\n\n//executing the demo\ncreateAuthor(function() {\n  createReader(function() {\n    listPictures();\n    listAuthors();\n    listReaders();\n  });\n});\n```\n\n---\n\n<h4 id=\"1.6.8\"> 1.6.8 查询相关model </h4>\n\n##### 概述\n\n关系通过将外键属性连接到主键属性来定义两个模型之间的连接.对于每种关系类型,LoopBack自动将辅助方法混合到模型类中,以帮助导航和关联模型实例以加载或构建数据图.\n\n通常,客户端应用程序想要从图中选择相关数据,例如获得用户信息和最近放置的订单.LoopBack提供了几种方法来在查询中表达这些要求.\n\n##### Inclusion\n\n要在查询的响应中包括相关模型,请使用查询对象的`include`属性或在模型类上使用include()方法. `include`可以是字符串,数组或对象.有关详细信息,请参阅`Include filter`.\n\n以下示例说明有效的格式.\n\nLoad all user posts with only one additional request:\n\n**/server/script.js**\n\n```javascript\nUser.find({include: 'posts'}, function() {\n  //...\n});\n```\n\n或者用js代码:\n\n**/server/script.js**\n\n```javascript\nUser.find({include: ['posts']}, function() {\n  //...\n});\n```\n\nLoad all user posts and orders with two additional requests:\n\n**/server/script.js**\n\n```javascript\nUser.find({include: ['posts', 'orders']}, function() {\n  //...\n});\n```\n\nLoad all post owners (users), and all orders of each owner:\n\n**/server/script.js**\n\n```javascript\nPost.find({include: {owner: 'orders'}}, function() {\n  //...\n});\n```\n\nLoad all post owners (users), and all friends and orders of each owner:\n\n**/server/script.js**\n\n```javascript\nPost.find({include: {owner: ['friends', 'orders']}}, function() {\n  //...\n});\n```\n\nLoad all post owners (users), all posts (including images), and orders of each owner:\n\n**/server/script.js**\n\n```javascript\nPost.find({include: {owner: [{posts: 'images'} , 'orders']}}, function() {\n  //...\n});\n```\n\nThe model class also has an include() method. For example, the code snippet below will populate the list of user instances with posts:\n\n**/server/script.js**\n\n```javascript\nUser.include(users, 'posts', function() {\n  //...\n});\n```\n\n##### Scope\n\n使用Scoping可以将查询定义为目标模型类或原型的方法.例如:\n\n**/server/boot/script.js**\n\n```javascript\nUser.scope('top10Vips', {where: {vip: true}, limit: 10});\n\nUser.top10Vips(function(err, vips) {\n});\n```\n\nYou can create the same function using a custom method too:\n\n**/server/boot/script.js**\n\n```javascript\nUser.top10Vips = function(cb) {\n  User.find({where: {vip: true}, limit: 10}, cb);\n};\n```\n\n##### 使用包含关系的过滤器参数\n\n在查询相关模型以从相关模型返回数据时,可以在过滤器(例如,where,order,fields,include过滤器)上使用参数.\n\n例如:考虑Student,Class和Teacher模型，其中Student有多个Class,并且Teacher有多个Class.\n\n查找所有学生,并返回所有他们的课程与教这些课的教师,以及所有的学生注册的这些课,诸如此类,等等.\n\n```javascript\nStudent.find({\n  \"filter\": {\n    \"include\": {\n      \"relation\": \"classes\",\n      \"scope\": {\n        \"include\": [\"teachers\", \"students\"]\n      }\n    }\n  }\n});\n```\n\n另一个例子:找到一个特定的老师,也返回所有他们的课程,以及所有学生注册的这些课.\n\n```javascript\nTeacher.find({\n  \"filter\": {\n    \"where\": {\n      \"id\": $state.params.id\n    },\n    \"include\": {\n      \"relation\": \"classes\",\n      \"scope\": {\n        \"include\": [\"students\"]\n      }\n    }\n  }\n});\n```\n\n---\n\n<h4 id=\"1.6.9\"> 1.6.9 嵌入式model和关系 </h4>\n\n>  LoopBack支持如下这几种(5种)嵌入关系：embedsOne，embedsMany，embedsMany with belongsTo和referencesMany。\n\n##### 概述\n\nLoopBack的relations使您能够在模型之间创建连接,并提供导航/聚合API来处理模型实例的图形(graph).除了传统的以外,LoopBack还支持以下嵌入关系:\n\n* **EmbedsOne** - 一个model嵌入了另一个model.例如:Customer里面迁入了billingAddress.\n\n* **EmbedsMany** - 一个model嵌入许多其他model的实例.例如:Customer可以有很多个email地址,并且每一个email都是一个复合对象,它包括标签和地址等.\n\n* **EmbedsMany** with belongsTo - a model that embeds many links to related people, such as an author or a reader. \n\n* **ReferencesMany**\n\n> Important: 您可以使用关系数据库的嵌入关系,但数据将始终以字符化JSON格式存储.\n\n##### EmbedsOne\n\nEmbedsOne用于表示嵌入其他模型的模型,例如,Customer嵌入一个billingAddress.\n\n**Sample embedded model**\n\n```json\n{\n  id: 1,\n  name: 'John Smith',\n  billingAddress: {\n    street: '123 Main St',\n    city: 'San Jose',\n    state: 'CA',\n    zipCode: '95124'\n  }\n}\n```\n\n在js代码中定义关系\n\n**common/models/customer.js**\n\n```javascript\nCustomer.embedsOne(Address, {\n  as: 'address', // default to the relation name - address\n  property: 'billingAddress' // default to addressItem\n});\n```\n\nParameters for the definition\n\n* **methods** - Scoped methods for the given relation\n* **properties** - Properties taken from the parent object\n* **scope** - Default scope\n* **options** - Options\n* **default** - Default value\n* **property** - Name of the property for the embedded item\n* **as** - Name of the relation\n\nOptions\n\n* **forceId** - force generation of ida for embedded items, default to false(强制生成嵌入项的ida,默认为false)\n* **validate** - denote if the embedded items should be validated, default to true(表示是否应该验证嵌入的项目,默认为true)\n* **persistent** - denote if the embedded items should be persisted, default to false(表示嵌入的项目是否应该持久化,默认为false)\n\n在json中定义关系\n\n**common/models/customer.json**\n\n```json\n{\n  \"name\": \"Customer\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"relations\": {\n    \"address\": {\n      \"type\": \"embedsOne\",\n      \"model\": \"Address\",\n      \"property\": \"billingAddress\",\n      \"options\": {\n        \"validate\": true,\n        \"forceId\": false\n      }\n    }\n    ...\n  }\n```\n\nHelper methods(辅助方法)\n\n* customer.address()\n* customer.address.build()\n* customer.address.create()\n* customer.address.update()\n* customer.address.destroy()\n* customer.address.value()\n\nOperation hooks\n\n您可以在embedsOne关系中,为嵌入模型定义`before save`和`after save`的`operation hooks`. 然后,更新或创建容器模型的实例将触发嵌入式模型上的operation hook.发生这种情况时,ctx.isNewInstance为false,因为只创建容器模型的新实例.\n\n例如,如果`Customer embedsOne Address`,并且您在地址模型上定义了一个'before save'hook,则创建新的Customer实例将触发操作挂钩.\n\n##### EmbedsMany\n\n使用embedsMany关系来指示模型可以嵌入另一个模型的许多实例.例如,客户可以有多个电子邮件地址,每个电子邮件地址是一个包含标签和地址的复合对象.\n\n**Sample model instance with many embedded models**\n\n```json\n{\n  id: 1,\n  name: 'John Smith',\n  emails: [{\n    label: 'work',\n    address: 'john@xyz.com'\n  }, {\n    label: 'home',\n    address: 'john@gmail.com'\n  }]\n}\n```\n\n>  Important:把embedsMany作为一个实际的关系,和hasMany关系相比,没有任何不同.例如:这意味着,您不能只是通过嵌入/嵌套数据来POST完整对象,从而一次创建所有内容.因此,使用上面的示例添加一个客户和多个电子邮件地址将需要两个POST操作,一个用于客户记录,一个用于多个电子邮件地址数据.\n\n在js代码中定义关系\n\n**common/models/customer.js**\n\n```javascript\nCustomer.embedsOne(EmailAddress, {\n  as: 'emails', // default to the relation name - emailAddresses\n  property: 'emailList' // default to emailAddressItems\n});\n```\n\nParameters for the definition\n\n* methods\n* properties\n* scope\n* options\n* default\n* property\n* as\n\nOptions\n\n* forceId\n* validate\n* persistent\n\n在json中定义关系\n\n**common/models/customer.json**\n\n```json\n{\n  \"name\": \"Customer\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"relations\": {\n    \"emails\": {\n      \"type\": \"embedsMany\",\n      \"model\": \"EmailAddress\",\n      \"property\": \"emailList\",\n      \"options\": {\n        \"validate\": true,\n        \"forceId\": false\n      }\n    }\n    ...\n  }\n```\n\nHelper methods(辅助方法)\n\n* customer.emails()\n* customer.emails.create()\n* customer.emails.build()\n* customer.emails.findById()\n* customer.emails.destroyById()\n* customer.emails.updateById()\n* customer.emails.exists()\n* customer.emails.add()\n* customer.emails.remove()\n* customer.emails.get() - alias to findById\n* customer.emails.set() - alias to updateById\n* customer.emails.unset() - alias to destroyById\n* customer.emails.at()\n* customer.emails.value()\n\nOperation hooks\n\n您可以在embedsMany关系中为嵌入模型定义`before save`和`after save`的operation hooks.然后m更新或创建容器模型的实例将触发嵌入式模型上的operation hook.发生这种情况时,ctx.isNewInstance为false,因为只创建容器模型的新实例.\n\n例如,如果`Customer embedsOne Address`,并且您在地址模型上定义了一个`before save`hook,则创建一个新的Customer实例将触发operation hook.\n\n##### EmbedsMany with belongsTo\n\n使用embedsMany with belongsTo关系来表示可以嵌入许多链接到其他模型的模型.例如一个book模型嵌入许多相关人物的链接(例如作者或读者).每个链接属于一个人,它是多态的,因为一个人可以是一个作者或一个读者.\n\n**Exampel embedsMany with belongsTo model instance**\n\n```json\n{ \n  id: 1\n  name: 'Book 1',\n  links: [{\n    notes: 'Note 1',\n    id: 1,\n    linkedId: 1,\n    linkedType: 'Author',\n    name: 'Author 1'\n  }, {\n  notes: 'Note 2',\n    id: 2,\n    linkedId: 1,\n    linkedType: 'Reader',\n    name: 'Reader 1'\n  }]\n}\n```\n\nDefine the embedsMany relation for Book\n\n**common/models/book.json**\n\n```json\n{\n  \"name\": \"Book\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"people\": {\n      \"type\": \"embedsMany\",\n      \"model\": \"Link\",\n      \"scope\": {\n        \"include\": \"linked\"\n      }\n    }\n  },\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\nDefine the polymorphic belongsTo relation for Link\n\n**common/models/link.json**\n\n```json\n{\n  \"name\": \"Link\",\n  \"base\": \"Model\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\",\n      \"id\": true\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"notes\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"linked\": {\n      \"type\": \"belongsTo\",\n      \"polymorphic\": {\n        \"idType\": \"number\"\n      },\n      \"properties\": {\n        \"name\": \"name\"\n      },\n      \"options\": {\n        \"invertProperties\": true\n      }\n    }\n  },\n  \"acls\": [],\n  \"methods\": []\n}\n```\n\n##### ReferencesMany\n\nSample referencesMany model instance\n\n```json\n{\n  id: 1,\n  name: 'John Smith',\n  accounts: [\n    \"saving-01\", \"checking-01\",\n  ]\n}\n```\n\nParameters for the definition\n\n* methods\n* properties\n* foreignKey\n* scope\n* options\n* default\n* as\n\nOptions\n\n* forceId\n* validate\n* persistent\n\nDefine the relation in code\n\n**common/models/customer.json**\n\n```json\n{\n  \"name\": \"Customer\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"relations\": {\n    \"accounts\": {\n      \"type\": \"referencesMany\",\n      \"model\": \"Account\",\n      \"foreignKey\": \"accountIds\",\n      \"options\": {\n        \"validate\": true,\n        \"forceId\": false\n      }\n    }\n...\n}\n```\n\nHelper methods\n\n* customer.accounts()\n* customer.accounts.create()\n* customer.accounts.build()\n* customer.accounts.findById()\n* customer.accounts.destroy()\n* customer.accounts.updateById()\n* customer.accounts.exists()\n* customer.accounts.add()\n* customer.accounts.remove()\n* customer.accounts.at()\n\n##### Transient versus persistent for the embedded model(嵌入模型的瞬态与永久)\n\nDefine a transient data source\n\n**server/datasources.json**\n\n```json\n{\n  ...\n  \"transient\": {\n    \"name\": \"transient\",\n    \"connector\": \"transient\"\n  }\n}\n```\n\nUse the transient data source for embedded models\n\n**server/model-config.json**\n\n```json\n{\n  ...\n  \"Customer\": {\n    \"dataSource\": \"db\",\n    \"public\": true\n  },\n  \"Address\": {\n    \"dataSource\": \"transient\",\n    \"public\": false\n  },\n  \"EmailAddress\": {\n    \"dataSource\": \"transient\",\n    \"public\": false\n  },\n  \"Account\": {\n    \"dataSource\": \"db\",\n    \"public\": false\n  }\n}\n```\n\n---\n\n<h4 id=\"1.6.10\"> 1.6.10 嵌套查询 </h4>\n\n除了使用LoopBack API直接查询数据,嵌套模型可以是API endpoints(端点).为此,必须使用nestRemoting函数.\n\n>  Important:通常,最好在引导脚本(boot script)中执行嵌套查询,以确保所有模型都已加载.虽然可以在模型定义JSON文件中执行嵌套查询,但必须使用事件来确保已加载相关模型.\n\n了解嵌套查询的最简单的方法是通过一个例子.\n\n假设应用程序有 book, chapter, page, and image models模型,和:\n\n* Each book can have many pages and chapters.\n* Each chapter and page can have many notes.\n* Each book has an image.\n\n以下JSON块显示了和page和chapter模型有关系的的Book模型.\n\n**common/models/book.json**\n\n```json\n{\n  \"name\": \"Book\",\n  \"base\": \"PersistedModel\",\n  \"idInjection\": true,\n  \"options\": {\n    \"validateUpsert\": true\n  },\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"validations\": [],\n  \"relations\": {\n    \"pages\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Page\",\n      \"foreignKey\": \"\",\n      \"through\": \"\"\n    },\n    \"chapters\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Chapter\",\n      \"foreignKey\": \"\",\n      \"through\": \"\"\n    }\n  },\n  \"acls\": [],\n  \"methods\": {}\n}\n```\n\n**common/models/chapter.json**\n\n```json\n{\n  \"name\": \"Chapter\",\n  ...\n  \"relations\": {\n    \"notes\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Note\",\n      \"foreignKey\": \"\",\n      \"through\": \"\"\n    }\n  },\n  ...\n}\n```\n\n**common/models/page.json**\n\n```json\n{\n  \"name\": \"Page\",\n  ...\n  \"relations\": {\n    \"notes\": {\n      \"type\": \"hasMany\",\n      \"model\": \"Note\",\n      \"foreignKey\": \"\",\n      \"through\": \"\"\n    }\n  },\n  ...\n}\n```\n\n**common/models/image.json**\n\n```json\n{\n  \"name\": \"Image\",\n  ...\n  \"relations\": {\n    \"book\": {\n      \"type\": \"belongsTo\",\n      \"model\": \"Book\",\n      \"foreignKey\": \"\",\n      \"required\": true\n    }\n  },\n  ...\n}\n```\n\n您可以通过常规关系查询特定图书的页面,如以下API端点所示:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages</td>\n      <td>An array of pages data</td>\n      <td>Queries pages of a specific book</td>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456</td>\n      <td>An object of a page data</td>\n      <td>Queries a page data of a specific page under a specific book</td>\n    </tr>\n  </tbody>\n</table>\n\n但是,要更深入地查询嵌套模型并将它们作为API端点,您需要使用模型nestRemoting()函数:\n\n```javascript\nBook.nestRemoting('pages');\nBook.nestRemoting('chapters');\nImage.nestRemoting('book');\n```\n\n上述代码启用以下嵌套查询:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456/notes</td>\n      <td>An array of notes objects</td>\n      <td>Queries all of the notes associated with a specific page under a specific book</td>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456/notes/567</td>\n      <td>An object of a note data</td>\n      <td>Queries a specific note associated with a specific page under a specific book</td>\n    </tr>\n  </tbody>\n</table>\n\n或者,由于图像属于书实例,所以,您可以通过他们的图像查询他们的网页:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/images/345/book/pages</td>\n      <td>An array of pages of a book</td>\n      <td>Queries all of the pages of the book, whose associated image id is 345</td>\n    </tr>\n    <tr>\n      <td>/api/images/345/book/pages/456</td>\n      <td>An object of a page data</td>\n      <td>Queries page with the id of 456 under the book, whose associated image id is 345</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2\"> 2. 使用内置Models </h4>\n\n##### 概述\n\nLoopBack为常见使用场景提供了有用的内置models:\n\n* **Application model** - 包含具有自己的标识和与LoopBack服务关联配置的客户端应用程序的元数据.\n\n* **User model** - 注册和验证本地或第三方服务的用户.\n\n* **Access control models** - 包括ACL,AccessToken,Scope,Role和RoleMapping模型,用于控制对应用程序,资源和方法的访问.\n\n* **Email model** - 使用SMTP或第三方服务向您的应用用户发送电子邮件.\n\n内置模型（电子邮件除外）扩展自PersistedModel,因此它们自动具有完整的创建,更新和删除(CRUD)操作.\n\n>  注意:默认情况下,只有User model通过REST公开.要暴露其他内置模型,请在server/model-config.json中将模型的public属性更改为true.使用警告:将某些模型暴露于公共API可能是一种安全风险.\n\n##### Access control models\n\n使用访问控制模型来控制对应用程序,资源和方法的访问.这些模型包括:\n\n* ACL\n* AccessToken\n* Scope\n* Role\n* RoleMapping\n\n___ACL model___\n\nACL模型将主体连接到受保护的资源.系统向主体(用户或应用程序,以及那些可以被分组为角色的主体)授予权限.\n\n* 保护资源：模型数据和操作(模型/属性/方法/关系)\n* 是否允许给定的客户端应用程序或用户访问(读取,写入或执行)受保护的资源.\n\n创建新的ACL实例.\n\n**server/boot/script.js**\n\n```javascript\nACL.create({\n    principalType: ACL.USER, \n    principalId: 'u001', \n    model: 'User', \n    property: ACL.ALL,\n    accessType: ACL.ALL, \n    permission: ACL.ALLOW}, function (err, acl) {\n        ACL.create({\n            principalType: ACL.USER, \n            principalId: 'u001', \n            model: 'User', \n            property: ACL.ALL,\n            accessType: ACL.READ, \n            permission: ACL.DENY}, function (err, acl) {\n            }\n        );\n    }\n);\n```\n\n---\n\n<h4 id=\"2.1\"> 2.1 扩展内置Models </h4>\n\n##### 使用JSON来扩展内置model\n\n当使用模型生成器创建模型时,选择基本模型,即模型将“扩展”的模型,并从中继承方法和属性.该工具将相应地在模型定义JSON文件中设置基本属性.例如,对于扩展PersistedModel的模型:\n\n**/common/models/model.json**\n\n```json\n{\n  \"name\": \"Order\",\n  \"base\": \"PersistedModel\",\n  ...\n```\n\n要更改基本模型,只需编辑JSON文件并更改基本属性.\n\n一般来说,当您想要使用连接器(如MySQL或MongoDB)将数据存储在数据库中时,请使用`PersistedModel`作为基本模型.使用`Model`作为不具有CRUD语义的模型的基础,例如,使用诸如SOAP和REST之类的连接器.\n\n>  提示:扩展内置的User模型以创建表示用户或客户的自己的模型.此模型提供注册,登录和恢复密码的功能.扩展内置User模型时,请使用除\"User\"以外的模型名称,例如\"customer\"或\"client\".不要将其命名为\"User\",因为这将与内置User模型冲突.为了避免混淆,最好避免使用小写字母\"u\"的\"user\".\n\n##### 使用js代码来扩展内置model\n\n您还可以使用模型JavaScript文件/common/models/_modelName_.js中的JavaScript文件扩展模型(其中,modelName是模型的名称),例如:\n\n**/common/models/user.js**\n\n```javascript\nvar properties = {\n  firstName: {\n    type: String,\n    required: true\n  }\n};\n\nvar options = {\n  relations: {\n    accessTokens: {\n      model: accessToken,\n      type: hasMany,\n      foreignKey: userId\n    },\n    account: {\n      model: account,\n      type: belongsTo\n    },\n    transactions: {\n      model: transaction,\n      type: hasMany\n    }\n  },\n  acls: [{\n    permission: ALLOW,\n    principalType: ROLE,\n    principalId: $everyone,\n    property: myMethod\n  }]\n};\n\nvar user = loopback.Model.extend('user', properties, options);\n```\n\n___Mixing in model definitions___\n\n您可能需要创建共享一组公共属性和逻辑的模型.LoopBack使您能够将一个或多个其他模型“混合(mix-in)”到单个模型中.例如:\n\n**common/models/myModel.js**\n\n```javascript\nvar TimeStamp = modelBuilder.define('TimeStamp', {\n  created: Date,\n  modified: Date\n});\nvar Group = modelBuilder.define('Group', {\n  groups: [String]\n});\nUser.mixin(Group, TimeStamp);\n```\n\n_设置自定义model_\n\n您可能需要为自定义模型执行其他设置,例如添加另一个模型的远程方法.要实现这些,请在新模型上实施setup()方法.loopback.Model.extend()函数调用setup(),因此在setup()中输入的代码将在创建模型时自动执行.\n\n例如:\n\n**common/models/myModel.js**\n\n```javascript\nMyModel = Model.extend('MyModel');\n\nMyModel.on('myEvent', function() {\n  console.log('meep meep!');\n});\n\nMyExtendedModel = MyModel.extend('MyExtendedModel');\n\nMyModel.emit('myEvent'); // nothing happens (no event listener)\n\n// this is where `setup()` becomes handy\n\nMyModel.setup = function() {\n  var MyModel = this;\n  // since setup is called for every extended model\n  // the extended model will also have the event listener\n  MyModel.on('myEvent', function() {\n    MyModel.printModelName();\n  });\n}\n```\n\n---\n\n<h4 id=\"2.2\"> 2.2 为内置Models添加remote methods </h4>\n\n要向内置模型添加远程方法.您可以扩展模型,然后将远程方法添加到新模型,或将其添加到引导脚本中.如此处示例所述:\n\n此示例将为内置的User模型添加\"greet\"方法.\n\n##### Boot script\n\n通常,要向User模型添加远程方法,您需要将其添加到/common/models/user.js中.然而,对于内置模型,这个文件将覆盖内置的模型定义,所以你必须在启动脚本中创建和附加我们的远程方法,例如:\n\n**server/boot/userRemoteMethods.js**\n\n```javascript\nmodule.exports = function(app) {\n  const User = app.models.User;\n\n  User.greet = function(msg, cb) {\n    cb(null, 'Greetings... ' - msg);\n  };\n\n  User.remoteMethod(\n    'greet', {\n      accepts: {\n        arg: 'msg',\n        type: 'string'\n      },\n      returns: {\n        arg: 'greeting',\n        type: 'string'\n      }\n    }\n  );\n};\n```\n\n##### ACLs\n\n默认情况下,User模型的ACL拒绝除了明确列入白名单的所有请求,因此您必须为远程方法添加ACL记录. 最常见的做法是编辑/common/models/user.json这样的文件,但是这个文件会覆盖内置的版本,所以这是不可能的.相反,您可以在model-config.json中定义ACL.\n\n例如:\n\n**server/model-config.json**\n\n```json\n{\n  \"User\": {\n    \"dataSource\": \"db\",\n    \"acls\": [{\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"greet\"\n    }]\n  },\n  ...\n}\n```\n\n现在,所有用户都可以向/Users/greet发送POST请求,并访问此内置模型上的新自定义方法.\n\n##### 其他注意事项\n\n* 以这种方式添加远程方法**不会将它们添加到Swagger JSON**.这意味着您不会在API Explorer中看到“Users/greet”方法.\n* 通过设计,您可以通过`environment specific configurations`覆盖model-config.json中的设置.记住在定义ACL时,如上所示.\n\n---\n\n<h4 id=\"2.3\"> 2.3 为内置Models创建数据库表 </h4>\n\nLoopBack应用程序附带一小组内置模型.要为这些内置模型创建数据库表,请使用`auto-migration`.\n\n>  重要:如果数据库具有现有表,则运行automigrate()将删除并重新创建表,从而可能导致数据丢失.要避免此问题,请使用autoupdate().\n\n为LoopBack内置model创建数据库表情遵循以下步骤:\n\n1. 按照[1.3 将Model附加到数据源](#1.3)的操作来指定数据源.\n2. 创建`server/create-lb-tables.js`,代码如下:\n\n```javascript\nvar server = require('./server');\nvar ds = server.dataSources.db;\nvar lbTables = ['User', 'AccessToken', 'ACL', 'RoleMapping', 'Role'];\nds.automigrate(lbTables, function(er) {\n  if (er) throw er;\n  console.log('Loopback tables [' - lbTables - '] created in ', ds.adapter.name);\n  ds.disconnect();\n});\n```\n\n最后,人工执行这个脚本:\n\n```bash\n$ cd server\n$ node create-lb-tables.js\n```\n\n---\n\n<h4 id=\"2.4\"> 2.4 Model属性引用 </h4>\n\n>  重要:此参考信息正在移至API文档.直到完成才在这里提供.\n\n\n原文比较少,所以就不翻译了.可以自己去看一下.[链接在这](#http://loopback.io/doc/en/lb3/Model-property-reference.html)\n\n---\n\n<h4 id=\"2.5\"> 2.5 内置Model的REST API </h4>\n\nLoopBack提供了一些具有REST API的内置模型.其中许多都从通用PersistedModel REST API继承端点.\n\n默认情况下,LoopBack使用`/api`作为应用程序REST API的URI根.要更改它,请在应用程序app.js文件中设置`apiPath`变量.\n\n内置model有:\n\n* PersistedModel REST API\n* Access token REST API\n* ACL REST API\n* Application REST API\n* Email (See the email connector page)\n* Relation REST API\n* Role REST API\n* User REST API\n\n---\n\n<h4 id=\"2.5.1\"> 2.5.1 PersistedModel REST API </h4>\n\n>  概要:PersistedModel是连接到持久数据源(如数据库)的模型的基类,也是所有内置模型(电子邮件除外)的基类.\n\n##### 概述\n\nPersistedModel是连接到持久数据源(如数据库)的模型的基类,也是所有内置模型(电子邮件除外)的基类.它提供所有标准的创建,读取,更新和删除(CRUD)操作,并为它们公开REST端点.\n\n默认情况下,LoopBack使用`/api`作为REST API的URI根.您可以通过更改应用程序`/server/config.json`文件中的restApiRoot属性来更改此属性.有关详细信息,请参阅config.json.\n\nModel REST API的端点通常是模型名称的复数形式.默认情况下,这只是带有\"s\"的名称.例如,如果模型是\"car\",则\"cars\"是复数形式.您可以在模型定义JSON文件中自定义复数形式.\n\n>  注意:您不能自定义到PersistedModel REST API端点的路由.但是,您可以使用server/ config.json中的rest.normalizeHttpPath属性来控制如何从自定义模型构造REST API端点.有关更多信息,请参阅config.json (Remoting properties).\n\n##### 创建model实例\n\n创建模型的新实例并将其持久保存到数据源.\n\n`POST /_modelName_`\n\n参数:\n\n* 表单数据 - 模型实例数据.可以是表示单个模型实例或模型实例数组的JSON.\n\n例子:\n\n**Request URL**: POST  http://localhost:3000/api/locations\n\n**Request body**: {\"name\": \"L1\", \"street\": \"107 S B St\", \"city\": \"San Mateo\", \"zipcode\": \"94401\"}\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n  \"id\": \"96\",\n  \"street\": \"107 S B St\",\n  \"city\": \"San Mateo\",\n  \"zipcode\": 94401,\n  \"name\": \"L1\"\n}\n```\n\n##### Update / insert实例\n\n更新现有模型实例或将新实例插入数据源.更新将覆盖请求数据对象中的任何指定的属性.它不会删除现有的,除非该值设置为null.\n\n执行upsertto检测是否有匹配的实例.如果没有,则插入(创建)一个新实例.如果有匹配的实例,则更新它.\n\n`PUT /_modelName_`\n\n参数:\n\n* 表单数据 - JSON格式的model实例数据\n\n例子:\n\n_Insert_\n\n**Request URL**: PUT  http://localhost:3000/api/locations\n\n**Request body**: {\"name\": \"L1\", \"street\": \"107 S B St\", \"city\": \"San Mateo\", \"zipcode\": \"94401\"}\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n  \"id\": 98,\n  \"street\": \"107 S B St\",\n  \"city\": \"San Mateo\",\n  \"zipcode\": 94401,\n  \"name\": \"L1\"\n}\n```\n\n_Update_\n\n**Request URL**: PUT  http://localhost:3000/api/locations\n\n**Request body**: \n\n```json\n{\n  \"id\": \"98\",\n  \"name\": \"L4\",\n  \"street\": \"107 S B St\",\n  \"city\": \"San Mateo\",\n  \"zipcode\": \"94401\"\n}\n```\n\n**Response status code**: 200\n\n**Response body**: \n\n```json\n{ \n  \"id\": 98,\n  \"street\": \"107 S B St\",\n  \"city\": \"San Mateo\",\n  \"zipcode\": 94401,\n  \"name\": \"L4\"\n}\n```\n\n##### 检查实例存在\n\n在数据源中根据ID检查实例是否存在\n\n`GET /_modelName_/_modelID_/exists`\n\n参数:\n\n* modelID - model instance ID\n\n例子:\n\n**Request URL**: GET http://localhost:3000/api/locations/88/exists\n\n**Response status code**: 200\n\n**Response body**: javascript {\"exists\": true}\n\n##### 根据ID查找实例\n\n从数据源中根据ID查找一个model实例\n\n`GET /modelName/modelID?filter=[filterType1]=<val1>&filter[filterType2]=<val2>...`\n\n参数:\n\n* **modelID** - Model instance ID\n\n* _filterType1, filterType2_, and so on, are the filter types. This operation supports only include and fields filters. See Include filter and Fields filter for more information.\n\n* _val1, val2_ are the corresponding values.\n\n例子:\n\n**Request URL**: GET  http://localhost:3000/api/locations/88\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n    \"id\": 88,\n    \"street\": \"390 Lang Road\",\n    \"city\": \"Burlingame\",\n    \"zipcode\": 94010,\n    \"name\": \"Bay Area Firearms\"\n}\n```\n\n##### 查找匹配实例\n\n从数据源中,根据过滤器,查找所有匹配的实例.\n\n`GET /modelName?filter=[filterType1]=<val1>&filter[filterType2]=<val2>...`\n\n参数:\n\n将参数作为过滤器的HTTP查询参数的值传递,其中:\n\n* _filterType1, filterType2_, and so on, are the filter types.\n\n* _val1, val2_ are the corresponding values.\n\n例子:\n\nRequest without filter:\n\n**Request URL**: GET  http://localhost:3000/api/locations\n\nRequest with a filter to limit response to two records:\n\n**Request URL**: GET  http://localhost:3000/api/locations?filter[limit]=2\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n[\n  { \n  \"id\": \"87\",\n  \"street\": \"7153 East Thomas Road\",\n  \"city\": \"Scottsdale\",\n  \"zipcode\": 85251,\n  \"name\": \"Phoenix Equipment Rentals\"\n  },\n  { \n    \"id\": \"88\",\n    \"street\": \"390 Lang Road\",\n    \"city\": \"Burlingame\",\n    \"zipcode\": 94010,\n    \"name\": \"Bay Area Firearms\"\n  }\n]\n```\n\n##### 查找第一个实例\n\n从数据源中,根据过滤器,查找第一个匹配的实例.\n\n`GET /modelName/findOne?filter=[filterType1]=<val1>&filter[filterType2]=<val2>...`\n\n参数:\n\n查询参数:\n\n* filter - 定义位置,顺序,字段,跳过和限制的过滤器.它和find的filter参数一样.\n\n例子:\n\n**Request URL**: GET  http://localhost:3000/api/locations/findOne?filter[where][city]=Scottsdale\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n  \"id\": \"87\",\n  \"street\": \"7153 East Thomas Road\",\n  \"city\": \"Scottsdale\",\n  \"zipcode\": 85251,\n  \"name\": \"Phoenix Equipment Rentals\"\n}\n```\n\n##### 删除model实例\n\n从数据源根据ID删除model实例.\n\n`DELETE /modelName/modelID`\n\n参数:\n\n* modelID  - model instance ID\n\n例子:\n\n**Request URL**: DELETE  http://localhost:3000/api/locations/88\n\n**Response status code**: 204\n\n##### 删除所有匹配的实例\n\n>  警告:默认情况下,此操作不会通过REST公开,以防止无意中删除数据.\n\n从与指定的where子句匹配的数据源中删除model的实例.\n\n`DELETE /modelName?filter=[filterType1]=<val1>&filter[filterType2]=<val2>...`\n\n参数:\n\n* filter - 用于定义位置,顺序,字段,跳过和限制的过滤器.它和find的filter参数一样.\n\n例子:\n\n**Request URL**: DELETE  http://localhost:3000/api/locations?[where][city]=Dallas\n\n**Response status code**: 200\n\n##### 获取匹配的实例数量(_译注:可以理解为count(*)_)\n\n从与指定的where子句匹配的数据源中count model的实例.\n\n`GET /modelName/count?where[property]=value`\n\n参数:\n\n* where - 匹配模型实例的条件.\n\n例子:\n\nCount without “where” filter\n\n**Request URL**: GET  http://localhost:3000/api/locations/count\n\nCount with a “where” filter\n\n**Request URL**: GET  http://localhost:3000/api/locations/count?where[city]=Burlingame\n\n**Response status code**: 200\n\n**Response body**:\n\n{count: 6}\n\n##### 更新model实例属性\n\n更新model实例属性并持久化进数据源.\n\n`PUT /model/modelID`\n\n参数:\n\n* data - An object containing property name/value pairs\n* modelID - The model instance ID\n\n例子:\n\n**Request URL**: PUT  http://localhost:3000/api/locations/88\n\n**Request body**:\n\n```json\n{\"name\": \"L2\"}\n```\n\n**Response status code**: 200\n\n**Response body**:\n\n```json\n{\n  \"id\": \"88\",\n  \"street\": \"390 Lang Road\",\n  \"city\": \"Burlingame\",\n  \"zipcode\": 94010,\n  \"name\": \"L2\"\n}\n```\n\n##### 更新匹配的model实例\n\n更新匹配model实例的属性,并持久化到数据源.\n\n`POST /modelName/update?where[property]=value`\n\n参数:\n\n* data - An object containing property name/value pairs.\n* where - The where object to select matching instances. See Where filter for more information.\n\n例子:\n\n**Request URL**: POST  http://localhost:3000/api/locations/update?where[city]=Burlingame\n\n**Request body**: {\"city\": \"San Jose\"}\n\n**Response status code**: 200\n\n##### 创建更改流(Create Change Stream)\n\n创建一个新的更改流:\n\n`POST /modelName/change-stream?format=event-stream`\n\n参数:\n\n* 表单数据 - 模型实例数据.表示单个模型实例的JSON或模型实例的数组.\n\n例子:\n\n**Request URL**: POST  http://localhost:3000/api/locations/\n\n**Request body**: {\"city\": \"San Jose\"}\n\n##### 获取更改流\n\n`GET /modelName/change-stream?format=event-stream`\n\n---\n\n<h4 id=\"2.5.2\"> 2.5.2 Access token REST API </h4>\n\n访问令牌REST API中的所有端点都是从通用PersistedModel REST API继承.为方便起见,此处提供了参考.\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>URI Pattern</th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th width=\"200\">Description</th>\n      <th width=\"300\">Arguments</th>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#create-model-instance\">Add access token instance</a> and persist to data source.\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of accessTokens that match specified filter.</td>\n      <td>\n        One or more filters in query parameters:\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert access token instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find access token by ID</a>: Return data for the specified access token instance ID.</td>\n      <td><em>id</em>, the access token instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified access token ID and persist.</td>\n      <td>\n        Query parameters:\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete access token</a> with specified instance ID.</td>\n      <td><em>id</em>, access token ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified access token ID exists.\n      </td>\n      <td>\n        URI path:\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of access token instances</a>&nbsp;that matches specified where clause.\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first access token instance</a> that matches specified filter.\n      </td>\n      <td>Same as <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2.5.3\"> 2.5.3 ACL REST API </h4>\n\nACL REST API中的所有端点都继承自PersistedModel REST API.为方便起见,此处提供了参考.\n\n默认情况下,不显示ACL REST API.要公开它,请将以下内容添加到models.json中:\n\n```json\n\"acl\": {\n  \"public\": true,\n  \"options\": {\n    \"base\": \"ACL\"\n  },\n  \"dataSource\": \"db\"\n}\n```\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/acls</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add ACL instance</a><span> and persist to data source.</span></p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/acls</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a><span> of ACLs that match specified filter.</span></td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert ACL instance</a><span> and persist to data source.</span></td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find ACL by ID</a><span>: Return data for the specified ACL instance ID.</span></td>\n      <td><em>id</em>, the ACL instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a><span> for specified ACL ID and persist.</span></td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete ACL</a><span> with specified instance ID.</span></td>\n      <td><em>id</em>, acls ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a><span>: Return true if specified ACL ID exists.</span></p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of ACL instances</a><span>&nbsp;that matches specified where clause.</span></p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/acls/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first ACL instance</a><span> that matches specified filter.</span></p>\n      </td>\n      <td>Same as <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2.5.4\"> 2.5.4 Application REST API </h4>\n\nApplication  REST API中的所有端点都继承自PersistedModel REST API.为方便起见.此处提供了参考.\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/applications</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add application instance</a> and persist to data source.</p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/applications</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of applications that match specified filter.</td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert application instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find application by ID</a>: Return data for the specified application instance ID.</td>\n      <td><em>id</em>, the application instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified application ID and persist.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete application</a> with specified instance ID.</td>\n      <td><em>id</em>, application ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified application ID exists.</p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of application instances</a>&nbsp;that matches specified where clause.</p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/applications/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first application instance</a> that matches specified filter.</p>\n      </td>\n      <td>Same as&nbsp;<a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2.5.5\"> 2.5.5 Relation REST API </h4>\n\n这些端点是PersistedModel REST API的一部分,但是为了方便参考,这里提供.\n\n##### 获取相关model实例\n\n`GET /<model1-name>/<instanceID>/<model2-name>`\n\n参数:\n\n* `<instanceID>` - ID of instance in model1.\n* `<model1-name>` - name of first model. \n* `<model2-name>` - name of second related model.\n\n例子:\n\nRequest:\n\n`GET http://localhost:3000/locations/88/inventory`\n\nResponse:\n\n```json\n[\n  {\n    \"productId\": \"2\",\n    \"locationId\": \"88\",\n    \"available\": 10,\n    \"total\": 10\n  },\n  {\n    \"productId\": \"3\",\n    \"locationId\": \"88\",\n    \"available\": 1,\n    \"total\": 1\n  }\n]\n```\n\n##### Get hasMany related model instances\n\n列出由instance-ID标识指定的`<model-name>`的hasMany关系的相关模型实例.\n\n`GET /<model-name>/<instance-ID>/<hasManyRelationName>`\n\n##### Create hasMany related model instance\n\n为hasMany关系的`<instance-ID>`标识的指定`<model-name>`创建相关模型实例.(_译注:原文在这里,以下不翻译了,容易造成误解,Create a related model instance for specified <model-name> identified by <instance-ID>, for hasMany relationship._)\n\n`POST /<model1-name>/<instance-ID>/<hasMany-Relation-Name>`\n\n##### Delete hasMany related model instances\n\nDelete related model instances for specified `<model-name>` identified by `<instance-ID>`, for hasMany relationship.\n\n`DELETE /<model1-name>/<instance-ID>/<hasMany-relation-name>`\n\n##### List belongsTo related model instances\n\nList the related model instances for the given model identified by `<instance-ID>`, for hasMany relationship.\n\n`GET /model-name/<instance-ID>/<belongsTo-relation-name>`\n\n##### Aggregate models following relations\n\n通常期望在对查询的响应中包含相关模型的实例,以使得客户端不必进行多个调用.\n\n`GET /<model1-name>?filter[include]=...`\n\n参数:\n\n* include - The object that describes a hierarchy of relations to be included(描述要包含的关系的层次结构的对象)\n\n例子:\n\n`GET /api/members?filter[include]=posts`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1\n      }\n    ]\n  },\n  {\n    \"name\": \"Member B\",\n    \"age\": 22,\n    \"id\": 2,\n    \"posts\": [\n      {\n        \"title\": \"Post D\",\n        \"id\": 4,\n        \"memberId\": 2\n      }\n    ]\n  },\n...\n]\n```\n\nThe following request retrieves all members, including the posts, which further includes the author:\n\n`GET /api/members?filter[include][posts]=author`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      }\n    ]\n  },\n  {\n    \"name\": \"Member B\",\n    \"age\": 22,\n    \"id\": 2,\n    \"posts\": [\n      {\n        \"title\": \"Post D\",\n        \"id\": 4,\n        \"memberId\": 2,\n        \"author\": {\n          \"name\": \"Member B\",\n          \"age\": 22,\n          \"id\": 2\n        }\n      }\n    ]\n  },\n  ...\n]\n```\n\nThe following request retrieves all members who are 21 years old, including the posts, which further includes the author:\n\n`GET /api/members?filter[include][posts]=author&filter[where][age]=21`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      }\n    ]\n  }\n]\n```\n\nThe following request retrieves two members, including the posts, which further includes the author: \n\n`GET /api/members?filter[include][posts]=author&filter[limit]=2`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1,\n        \"author\": {\n          \"name\": \"Member A\",\n          \"age\": 21,\n          \"id\": 1\n        }\n      }\n    ]\n  },\n  {\n    \"name\": \"Member B\",\n    \"age\": 22,\n    \"id\": 2,\n    \"posts\": [\n      {\n        \"title\": \"Post D\",\n        \"id\": 4,\n        \"memberId\": 2,\n        \"author\": {\n          \"name\": \"Member B\",\n          \"age\": 22,\n          \"id\": 2\n        }\n      }\n    ]\n  }\n]\n```\n\nThe following request retrieves all members, including the posts and passports.\n\n`GET /api/members?filter[include]=posts&filter[include]=passports`\n\nThe API returns the following JSON:\n\n```json\n[\n  {\n    \"name\": \"Member A\",\n    \"age\": 21,\n    \"id\": 1,\n    \"posts\": [\n      {\n        \"title\": \"Post A\",\n        \"id\": 1,\n        \"memberId\": 1\n      },\n      {\n        \"title\": \"Post B\",\n        \"id\": 2,\n        \"memberId\": 1\n      },\n      {\n        \"title\": \"Post C\",\n        \"id\": 3,\n        \"memberId\": 1\n      }\n    ],\n    \"passports\": [\n      {\n        \"number\": \"1\",\n        \"id\": 1,\n        \"ownerId\": 1\n      }\n    ]\n  },\n  {\n    \"name\": \"Member B\",\n    \"age\": 22,\n    \"id\": 2,\n    \"posts\": [\n      {\n        \"title\": \"Post D\",\n        \"id\": 4,\n        \"memberId\": 2\n      }\n    ],\n    \"passports\": [\n      {\n        \"number\": \"2\",\n        \"id\": 2,\n        \"ownerId\": 2\n      }\n    ]\n  }, ... ]\n```\n\n---\n\n<h4 id=\"2.5.6\"> 2.5.6 Role REST API </h4>\n\nRole REST API中的所有端点都从通用PersistedModel REST API继承.为方便起见,此处提供了参考.\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/roles</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add role instance</a> and persist to data source.</p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/roles</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of roles that match specified filter.</td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert role instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find role by ID</a>: Return data for the specified role instance ID.</td>\n      <td><em>id</em>, the role instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified role ID and persist.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete role</a> with specified instance ID.</td>\n      <td><em>id</em>, role ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified role ID exists.</p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of role instances</a>&nbsp;that matches specified where clause.</p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/roles/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first role instance</a> that matches specified filter.</p>\n      </td>\n      <td>Same as&nbsp;<a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"2.5.7\"> 2.5.7 User REST API </h4>\n\n下面表格中的所有端点都继承自PersistedModel REST API,但以下情况除外：\n\n* Log in user - `POST /users/login`\n* Log out user - `POST /users/logout`\n* Confirm email address - `GET /users/confirm`\n* Reset password - `POST /users/reset`\n\n**Quick reference**\n\n<table>\n  <tbody>\n    <tr>\n      <th>URI Pattern</th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th style=\"width:300px;\">Arguments</th>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add user instance</a> and persist to data source. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.</p>\n      </td>\n      <td>\n        <p>JSON object (in request body) providing <a href=\"http://apidocs.strongloop.com/loopback/#user\" class=\"external-link\" rel=\"nofollow\">User object properties</a>: <code>username</code>, <code>password</code>, <code>email</code>. LoopBack sets values for <code>emailVerified</code> and <code>verificationToken</code>.</p>\n        <p>NOTE: A value for <code>username</code> is not required, but a value for <code>email</code> is. LoopBack validates a unique value for <code>password</code> is provided. LoopBack does not automatically maintain values of the <code>created</code> and <code>lastUpdated</code> properties; you can set them manually if you wish.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a> of users that match specified filter. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert user instance</a> and persist to data source. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>JSON object (in request body)</p>\n        <p>Same as for <code>POST /users</code></p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find user by ID</a>: Return data for the specified user ID. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td><em>id</em>, the user ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update user attributes</a> for specified user ID and persist. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete user</a> with specified instance ID. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td><em>id</em>, user ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>Returns access token for specified user ID.</td>\n      <td>\n        <ul>\n          <li><em>id</em>, user ID, in URI path</li>\n          <li>where in query parameters</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>POST</td>\n      <td>Deny</td>\n      <td>Create access token for specified user ID.</td>\n      <td>\n        <p><em>id</em>, user ID, in URI path</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td>Delete access token for specified user ID.</td>\n      <td>\n        <p><em>id</em>, user ID, in URI path</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/confirm</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"#confirm-email-address\">Confirm email address</a> for specified user.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>uid</li>\n          <li>token</li>\n          <li>redirect</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-count\" class=\"external-link\" rel=\"nofollow\">Return number of user instances</a>&nbsp;that match specified where clause. Inherited from <a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\"Where\" filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p>Check instance existence: Return true if specified user ID exists. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>users</em> - Model name</li>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p>Find first user instance that matches specified filter. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\n      <p>One or more filters in query parameters:</p>\n      <ul>\n        <li>where</li>\n        <li>include</li>\n        <li>order</li>\n        <li>limit</li>\n        <li>skip / offset</li>\n        <li>fields</li>\n      </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/login[?include=user]</code></td>\n      <td>\n        <p>POST</p>\n      </td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"#log-in-user\">Log in</a> the specified user.</p>\n      </td>\n      <td>\n        <p>Username and password in POST body.</p>\n        <p>If query parameter is <code>include=user</code>, then returns the user object.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>/users/logout</code>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td><a href=\"#log-out-user\">Log out</a> the specified user.</td>\n      <td>Access token in POST body.</td>\n    </tr>\n    <tr>\n      <td><code>/users/reset</code></td>\n      <td>POST</td>\n      <td>&nbsp;</td>\n      <td><a href=\"#reset-password\">Reset password</a> for the specified user.</td>\n      <td>In POST body</td>\n    </tr>\n  </tbody>\n</table>\n\n##### Log in user\n\n`POST /users/login`\n\n您必须在请求正文中提供用户名或电子邮件以及密码.为了确保这些值被加密,请将它们作为正文的一部分,并确保通过HTTPS提供应用程序.\n\n您还可以通过提供具有秒值的ttl(存活时间)属性来指定访问令牌有效的有效期.\n\n例子:\n\n**Request URL**: POST  http://localhost:3000/users/login\n\n**Request body**: \n\n```json\n{ \"email\": \"foo@bar.com\", \"password\": \"bar\", \"ttl\": 86400 }\n```\n\n**Response status code**: 200\n\n**Response body**: \n\n```json\n{ \n  \"id\": \"PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE\", \n  \"ttl\": 86400,\n  \"created\": \"2014-12-23T08:31:33.464Z\",\n  \"userId\": 1\n}\n```\n\n用户会话的访问令牌存储在在响应的id键中.它必须在查询参数`access_token`中为需要用户登录的所有API指定,例如:\n\n`http://localhost:3000/api/Users/logout?access_token=PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE`\n\n##### Log out user\n\n`POST /users/logout`\n\n例子:\n\n**Request URL**: `POST  http://localhost:3000/api/Users/logout?access_token=PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE`\n\n**Response status code**: 204\n\n##### 确认邮件地址\n\n要求用户在登录前验证其电子邮件地址,这将向用户发送一封电子邮件,其中包含用于验证其地址的链接.一旦用户点击链接,他们将被重定向到web根(\"/\"),并将能够正常登录.\n\n`GET /users/confirm`\n\n参数:\n\nQuery parameters:\n\n* uid\n* token\n* redirect\n\n返回值:\n\nIf token invalid: HTTP 400\n\nIf user not found: HTTP 404\n\nIf successful: HTTP 204\n\n##### 重置密码\n\n`POST /users/reset`\n\n参数:\n\nPOST payload:\n\n```json\n{\n  \"email\": \"foo@bar.com\"\n  ...\n}\n```\n\nReturn value\n\n`200 OK`\n\n您必须处理\"resetPasswordRequest\"事件才能向正确的用户发送包含访问令牌的重置电子邮件.\n\n下面的示例显示了如何获取用户可以用来重置密码的访问令牌:\n\n**common/models/user.js**\n\n```javascript\nUser.on('resetPasswordRequest', function (info) {\n  console.log(info.email); // the email of the requested user\n  console.log(info.accessToken.id); // the temp access token to allow password reset\n\n  // requires AccessToken.belongsTo(User)\n  info.accessToken.user(function (err, user) {\n    console.log(user); // the actual user\n  });\n});\n```\n\n---\n\n<h4 id=\"3\"> 3. 将Model连接到数据源 </h4>\n\n##### 概要\n\n![dsModel](img/dsModel.jpg)\n\nLoopBack模型通过提供创建,检索,更新和删除(CRUD)功能的数据源连接到后端系统,如数据库.LoopBack还将其他后端服务(例如REST API,SOAP Web服务和存储服务等)概括为数据源.\n\n数据源由使用数据库驱动程序或其他客户端API实现数据交换逻辑的连接器支持.一般来说,应用程序不直接使用连接器,而是使用DataSource和PersistedModel API访问数据源.\n\n##### 基础步骤\n\n1. 使用`data source generator`创建新数据源.\n   \n   例如:\n   \n   ```bash\n   $ slc loopback:datasource\n   ? Enter the data-source name: mysql-corp\n   ? Select the connector for mysql: MySQL (supported by StrongLoop)\n   ```\n   按照提示命名数据源并选择要使用的连接器.这将新数据源添加到datasources.json中.\n2. 编辑`server/datasources.json`以添加必要的身份验证凭据:通常为主机名,用户名,密码和数据库名称.\n\n   例如:\n   \n   **server/datasources.json**\n   \n   ```json\n   \"mysql-corp\": {\n   \"name\": \"mysql-corp\",\n   \"connector\": \"mysql\",\n   \"host\": \"your-mysql-server.foo.com\",\n   \"user\": \"db-username\",\n   \"password\": \"db-password\",\n   \"database\": \"your-db-name\"\n  }\n  ```\n3. 使用npm安装连接器\n  \n  例如:\n  \n  ```bash\n  $ cd <your-app>\n  $ npm install --save loopback-connector-mysql\n  ```\n4. 使用model generator创建model\n  \n   ```bash\n   $ slc loopback:model\n   ? Enter the model name: myModel\n   ? Select the data-source to attach myModel to: mysql (mysql)\n   ? Select model's base class: PersistedModel\n   ? Expose myModel via the REST API? Yes\n   ? Custom plural form (used to build REST URL):\n   Let's add some test2 properties now.\n   ```\n\n##### 连接器\n\n下表列出了商业支持的LoopBack连接器.\n\n<table>\n  <thead>\n    <tr>\n      <td colspan=\"3\" data-highlight-colour=\"red\" style=\"text-align: center;\"><strong>Database connectors</strong></td>\n    </tr>\n    <tr>\n      <th style=\"text-align: center;\">Connector</th>\n      <th>Module</th>\n      <th>Installation</th>\n    </tr>\n    <tr>\n      <td><a href=\"https://cloudant.com/\" class=\"external-link\" rel=\"nofollow\">IBM Cloudant</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-cloudant\" class=\"external-link\" rel=\"nofollow\">loopback-connector-cloudant</a></td>\n      <td><code>npm install --save loopback-connector-cloudant</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"http://www.ibm.com/analytics/us/en/technology/cloud-data-services/dashdb/\" class=\"external-link\" rel=\"nofollow\">IBM DashDB</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-dashdb\" class=\"external-link\" rel=\"nofollow\">loopback-connector-dashdb</a></td>\n      <td><code>npm install --save loopback-connector-dashdb</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"http://www.ibm.com/analytics/us/en/technology/db2/\" class=\"external-link\" rel=\"nofollow\">IBM DB2</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-db2z\" class=\"external-link\" rel=\"nofollow\">loopback-connector-db2</a></td>\n      <td><code>npm install --save loopback-connector-db2</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www-01.ibm.com/software/data/db2/zos/family/\" class=\"external-link\" rel=\"nofollow\">IBM DB2 for z/OS</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-db2z\" class=\"external-link\" rel=\"nofollow\">loopback-connector-db2z</a></td>\n      <td><code>npm install --save loopback-connector-db2z</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www-01.ibm.com/software/data/informix/\" class=\"external-link\" rel=\"nofollow\">IBM Informix</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-informix\" class=\"external-link\" rel=\"nofollow\">loopback-connector-informix</a></td>\n      <td><code>npm&nbsp;install&nbsp;loopback-connector-informix&nbsp;--save</code></td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"Memory-connector.html\">Memory connector</a></td>\n      <td>Built in to LoopBack</td>\n      <td>Not required; suitable for development and debugging only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"MongoDB-connector.html\">MongoDB</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mongodb\" class=\"external-link\" rel=\"nofollow\">loopback-connector-mongodb</a></td>\n      <td><code>npm install --save loopback-connector-mongodb</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"MySQL-connector.html\">MySQL</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mysql\" class=\"external-link\" rel=\"nofollow\">loopback-connector-mysql</a></td>\n      <td><code>npm install --save loopback-connector-mysql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Oracle-connector.html\">Oracle</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-oracle\" class=\"external-link\" rel=\"nofollow\">loopback-connector-oracle</a></td>\n      <td><code>npm install --save loopback-connector-oracle</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"PostgreSQL-connector.html\">PostgreSQL</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mysql\" class=\"external-link\" rel=\"nofollow\">loopback-connector-postgresql</a></td>\n      <td><code>npm install --save loopback-connector-postgresql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"SQL-Server-connector.html\">SQL Server</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mssql\" class=\"external-link\" rel=\"nofollow\">loopback-connector-mssql</a></td>\n      <td><code>npm install --save loopback-connector-mssql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.sqlite.org/\" class=\"external-link\" rel=\"nofollow\">SQLite 3.x</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-sqlite3\" class=\"external-link\" rel=\"nofollow\">loopback-connector-sqlite3</a></td>\n      <td><code>npm install --save loopback-connector-sqlite3</code></td>\n    </tr>\n    <tr>\n      <td colspan=\"3\"><strong>Other connectors</strong></td>\n    </tr>\n    <tr>\n      <td><a href=\"Email-connector.html\">Email connector</a></td>\n      <td>Built in to LoopBack</td>\n      <td>\n        <p>Not required</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"Push-connector.html\">Push connector</a>  </td>\n      <td><a href=\"https://github.com/strongloop/loopback-component-push\" class=\"external-link\" rel=\"nofollow\">loopback-component-push</a></td>\n      <td><code>npm install --save loopback-component-push</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Remote-connector.html\">Remote connector</a></td>\n      <td><a href=\"https://github.com/strongloop/loopback-connector-remote\" class=\"external-link\" rel=\"nofollow\">loopback-connector-remote</a></td>\n      <td><code>npm install --save loopback-connector-remote</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"REST-connector.html\">REST</a></td>\n      <td><a href=\"http://github.com/strongloop/loopback-connector-rest\" class=\"external-link\" rel=\"nofollow\">loopback-connector-rest</a></td>\n      <td><code>npm install --save loopback-connector-rest</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"SOAP-connector.html\">SOAP</a></td>\n      <td><a href=\"http://github.com/strongloop/loopback-connector-soap\" class=\"external-link\" rel=\"nofollow\">loopback-connector-soap</a></td>\n      <td><code>npm install --save loopback-connector-soap</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Storage-connector.html\">Storage connector</a></td>\n      <td><a href=\"https://github.com/strongloop/loopback-component-storage\" class=\"external-link\" rel=\"nofollow\">loopback-component-storage</a>    </td>\n      <td><code>npm install --save loopback-component-storage</code></td>\n    </tr>\n  </tbody>\n</table>\n\n##### 安装连接器\n\n在你的应用程序根目录运行`npm install --save <_connector-module_>` ,然后它会把相关依赖保存到`package.json`文件中,例如安装Oracle database connector:\n\n```bash\n$ cd <your-app>\n$ npm install --save loopback-connector-oracle\n```\n\n**package.json**\n\n```json\n...\n\"dependencies\": {\n  \"loopback-connector-oracle\": \"latest\"\n}\n...\n```\n\n##### 创建数据源\n\n使用`data source generator`创建数据源.\n\n数据源属性:\n\n数据源属性取决于所使用的特定数据源.但是,数据库连接器(Oracle,MySQL,PostgreSQL,MongoDB等)的数据源共享一组公用属性,如下表所述:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>connector</td>\n      <td>String</td>\n      <td>\n        <p>Connector name; for example:</p>\n        <ul>\n          <li>\"memory\"</li>\n          <li>\"loopback-connector-mongodb\" or \"mongodb\"</li>\n          <li>\"loopback-connector-mysql\" or \"mysql\"</li>\n          <li>\"loopback-connector-oracle\" or \"oracle\"</li>\n          <li>\"loopback-connector-postgresql\" or \"postgresql\"</li>\n          <li>\"loopback-connector-rest\" or \"rest\"</li>\n          <li>\"loopback-connector-mssql\" or \"mssql\"</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>database</td>\n      <td>String</td>\n      <td>Database name</td>\n    </tr>\n    <tr>\n      <td>debug</td>\n      <td>Boolean</td>\n      <td>If true, turn on verbose mode to debug database queries and lifecycle.</td>\n    </tr>\n    <tr>\n      <td>host</td>\n      <td>String</td>\n      <td>Database host name</td>\n    </tr>\n    <tr>\n      <td>password</td>\n      <td>String</td>\n      <td>Password to connect to database</td>\n    </tr>\n    <tr>\n      <td>port</td>\n      <td>Number</td>\n      <td>Database TCP port</td>\n    </tr>\n    <tr>\n      <td>url</td>\n      <td>String</td>\n      <td>\n        <p>Combines and overrides <code>host</code>,&nbsp;<code>port</code>,&nbsp;<code>user</code>,&nbsp;<code>password</code>, and&nbsp;<code>database</code>&nbsp;properties.</p>\n        <p>Only valid with <a href=\"MongoDB-connector.html\">MongoDB connector</a>, <a href=\"PostgreSQL-connector.html\">PostgreSQL connector</a>, and <a href=\"SQL-Server-connector.html\">SQL Server connector</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>username</td>\n      <td>String</td>\n      <td>Username to connect to database</td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\n<h4 id=\"3.1\"> 3.1 从Model创建数据库schema </h4>\n\nLoopBack _auto-migration_根据应用程序的模型创建数据库模式.在关系数据库中,auto-migration为每个模型创建一个表,并为模型中的每个属性在表中创建一个列.auto-migration为附加到数据源的所有模型创建表,包括内置模型.\n\n一旦定义了模型,如果需要调整数据库以匹配模型,LoopBack可以相应地创建或更新(同步0数据库模式. LoopBack提供了两种方法来将模型定义与表模式同步:\n\n* **Auto-migrate**: 基于模型定义自动创建或重新创建表模式. \n\n* **Auto-update**: 根据模型定义自动更改表模式.\n\n>  警告:如果现有表的名称与模型名称匹配,Auto-migration将删除现有表.当表里有数据时,请使用自动更新以避免数据丢失.\n\n##### Auto-migrate\n\n下面的数据源支持auto-migration:\n\n* Oracle\n* PostgreSQL\n* MySQL\n* SQL Server\n* MongoDB\n\n下面是个auto-migration的例子.\n\n**/common/models/model.js**\n\n```javascript\nvar schema_v1 = {\n  \"name\": \"CustomerTest\",\n  \"options\": {\n    \"idInjection\": false,\n    \"oracle\": {\n      \"schema\": \"LOOPBACK\",\n      \"table\": \"CUSTOMER_TEST\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"type\": \"String\",\n      \"length\": 20,\n      \"id\": 1\n    },\n    \"name\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 40\n    },\n    \"email\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 40\n    },\n    \"age\": {\n      \"type\": \"Number\",\n      \"required\": false\n    }\n  }\n};\n```\n\n假设模型在Oracle数据库中没有相应的表,您可以使用autoMigrate()创建相应的模式对象以反映模型定义.\n\n**/common/models/model.js**\n\n```javascript\nvar ds = Model.app.dataSources.oracle;\n\nds.createModel(schema_v1.name, schema_v1.properties, schema_v1.options);\n\nds.automigrate(function () {\n  ds.discoverModelProperties('CUSTOMER_TEST', function (err, props) {\n    console.log(props);\n  });\n});\n```\n\n上面的代码将在oracle数据库中创建如下对象:\n\n* A table CUSTOMER_TEST.\n* A sequence CUSTOMER_TEST_ID_SEQUENCE for keeping sequential IDs.\n* A trigger CUSTOMER_ID_TRIGGER that sets values for the primary key.\n\n现在假设你打算对你的model做一些改变.下面是它的代码:\n\n**/common/models/model.js**\n\n```javascript\nvar schema_v2 = {\n  \"name\": \"CustomerTest\",\n  \"options\": {\n    \"idInjection\": false,\n    \"oracle\": {\n      \"schema\": \"LOOPBACK\",\n      \"table\": \"CUSTOMER_TEST\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"type\": \"String\",\n      \"length\": 20,\n      \"id\": 1\n    },\n    \"email\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 60,\n      \"oracle\": {\n        \"columnName\": \"EMAIL\",\n        \"dataType\": \"VARCHAR\",\n        \"dataLength\": 60,\n        \"nullable\": \"Y\"\n      }\n    },\n    \"firstName\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 40\n    },\n    \"lastName\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 40\n    }\n  }\n}\n```\n\n##### MongoDB indexes\n\n运行autoMigrate()创建缺少的索引,但是如果它们的定义更改,则autoMigrate()不会修改它们.如果模型的索引定义更改,您必须通过MongoDB shell修改它们,或删除它们并重新创建它们.有关详细信息请参阅MongoDB文档.\n\n##### Auto-update\n\n如果数据库中存在现有表,则运行autoMigrate()将删除并重新创建表.这意味着数据将丢失.要避免此问题,请使用auto-update(). autoupdate()计算LoopBack模型和数据库表定义之间的差异,并相应地更改表,而不是删除表并重新创建它们.这样,只要属性未从模型中删除.列数据就会保留.\n\n例如:\n\n**/server/script.js**\n\n```javascript\nds.createModel(schema_v2.name, schema_v2.properties, schema_v2.options);\nds.autoupdate(schema_v2.name, function (err, result) {\n  ds.discoverModelProperties('CUSTOMER_TEST', function (err, props) {\n    console.log(props);\n  });\n});\n```\n\n要检查是否需要数据库更改,请使用isActual()方法.它接受一个回调参数,该参数根据数据库状态接收一个布尔值:\n\n* 如果数据库结构过时则为False\n* 数据源和数据库同步时为True\n\n**/server/script.js**\n\n```javascript\ndataSource.isActual(models, function(err, actual) {\n  if (!actual) {\n    dataSource.autoupdate(models, function(err, result) {\n      // ...\n    });\n  }\n});\n```\n\n---\n\n<h4 id=\"3.2\"> 3.2 理解数据源 </h4>\n\n![dsIntr](img/dsIntr.jpg)\n\n##### 概述\n\n上图说明了LoopBack模型,DataSource和连接器之间的关系.\n\n1. 定义模型.\n\n2. 创建ModelBuilder或DataSource的实例.DataSource从ModelBuilder扩展.ModelBuilder负责将模型定义编译为表示模型类的JavaScript构造函数.DataSource从ModelBuilder继承该函数.\n\n3. 使用ModelBuilder或DataSource从模型定义构建一个JavaScript构造函数(即模型类).从ModelBuilder构建的模型类可以稍后附加到DataSource,以接收混合的数据访问函数.\n\n4. 作为步骤2的一部分,DataSource使用设置对象初始化底层连接器,该对象为连接器实例提供配置.连接器与DataSource协作将函数定义为要混合到模型类中的DataAccessObject.DataAccessObject包括静态和原型方法的列表.它可以根据连接器的功能实现创建,检索,更新和删除操作或其他特定功能.\n\nDataSource对象是LoopBack应用程序与后端系统集成的统一接口.它是围绕模型类的数据访问逻辑的工厂.通过各种连接器的能力,DataSource提供了与数据库或服务交互的必要抽象,以将业务逻辑与管道技术分离.\n\n##### 以编程方式创建DataSource\n\n`DataSource constructor`接受下面的参数:\n\n* **name**: Optional name of the data source instance being created. \n\n* **settings**: An object of properties to configure the connector. Must include a connector property, specifying the connector to use. See Connecting models to data sources (Connectors).\n\n例如:\n\n```javascript\nvar DataSource = require('loopback-datasource-juggler').DataSource;\n\nvar dataSource = new DataSource({\n    connector: require('loopback-connector-mongodb'),\n    host: 'localhost',\n    port: 27017,\n    database: 'mydb'\n});\n```\n\n传递给DataSource构造函数的连接器参数可以是以下之一:\n\n* The connector module from require(connectorName)\n* The full name of the connector module, such as ‘loopback-connector-oracle’\n* The short name of the connector module, such as ‘oracle’, which will be converted to ‘loopback-connector-‘\n* A local module under ./connectors/ folder\n\n```javascript\nvar ds1 = new DataSource('memory');\nvar ds2 = new DataSource('loopback-connector-mongodb'));\nvar ds3 = new DataSource(require('loopback-connector-oracle'));\n```\n\nLoopBack提供了内置内存连接器,它使用内存存储来进行创建,检索,更新和删除操作.\n\n`Settings`参数用来配置连接器.`Settings`对象的格式和默认值取决于特定连接器,但常用字段包括:\n\n* host: Database host\n* port: Database port\n* username: Username to connect to database\n* password: Password to connect to database\n* database: Database name\n* debug: Turn on verbose mode to debug db queries and lifecycle\n\n##### 从数据源创建model\n\nDataSource从ModelBuilder扩展,ModelBuilder是一个只有属性的纯模型类的工厂.DataSource使用Connector连接到数据库和其他后端系统.\n\n```javascript\nvar DataSource = require('loopback-datasource-juggler').DataSource;\nvar ds = new DataSource('memory');\n\nvar User = ds.define('User', {\n  name: String,\n  bio: String,\n  approved: Boolean,\n  joinedAt: Date,\n  age: Number\n});\n```\n\n单个数据源中的所有模型类共享相同的连接器类型和一个数据库连接或连接池.但是可以使用多个数据源连接到不同的数据库.\n\n或者，您可以将从ModelBuilder创建的plain model构造函数附加到DataSource.\n\n```javascript\nvar ModelBuilder = require('loopback-datasource-juggler').ModelBuilder;\nvar builder = new ModelBuilder();\n\nvar User = builder.define('User', {\n  name: String,\n  bio: String,\n  approved: Boolean,\n  joinedAt: Date,\n  age: Number\n});\n\nvar DataSource = require('loopback-datasource-juggler').DataSource;\nvar ds = new DataSource('memory');\n\nUser.attachTo(ds); // The create, retrieve, update, and delete\n                   // methods will be mixed into the User constructor\n```\n\n##### 为连接器创建数据源\n\n应用程序代码不直接使用连接器.相反,您可以创建一个DataSource来与连接器交互.\n\n下面是个使用内存连接器的例子:\n\n```javascript\nvar memory = loopback.createDataSource({\n  connector: loopback.Memory\n});\n```\n\n下面是使用oracle连接器的例子:\n\n```javascript\nvar DataSource = require('loopback-datasource-juggler').DataSource;\nvar oracleConnector = require('loopback-connector-oracle');\n\nvar ds = new DataSource(oracleConnector, {\n  host: 'localhost',\n  database: 'XE',\n  username: 'username',\n  password: 'password',\n  debug: true\n});\n```\n\n传递给DataSource构造函数的连接器参数可以是以下之一:\n\n* The connector module from require('connectorName')\n* The full name of the connector module, such as 'loopback-connector-oracle'.\n* The short name of the connector module, such as 'oracle', that LoopBack converts to 'loopback-connector-oracle' (for example).\n* A local module in the /connectors folder\n\n##### 初始化连接器\n\n连接器模块可以导出为初始化函数,这个初始化函数可供拥有DataSource的实例调用.\n\n```javascript\nexports.initialize = function (dataSource, postInit) {\n\n  var settings = dataSource.settings || {};   // The settings is passed in from the dataSource\n\n  var connector = new MyConnector(settings);  // Construct the connector instance\n  dataSource.connector = connector;           // Attach connector to dataSource\n  connector.dataSource = dataSource;          // Hold a reference to dataSource\n  // ...\n};\n```\n\nDataSource使用自身和一个可选的`postInit`回调函数作为参数来调用`initialize`方法.连接器从`dataSource(自身)`参数接收设置,并使用它配置与后端系统的连接.\n\n请注意connector和dataSource设置了对方的引用(_译注:相互引用_).\n\n初始化时,连接器可能会自动连接到数据库.一旦连接建立,dataSource对象发出'connected'事件,并设置`connected`标志为true，但没有必要等待'connected'事件,因为所有的查询缓存和执行时会在收到dataSource的'connected'事件后自动执行.\n\n要断开与数据库服务器的连接,请调用dataSource.disconnect方法.如果连接器具有连接/断开连接的能力，则此调用将转发到连接器.\n\n---\n\n<h4 id=\"3.3\"> 3.3 使用数据库事务 </h4>\n\n##### 概要\n\n事务是单个逻辑工作单元执行的数据操作序列.许多关系数据库支持事务以帮助实现数据一致性和业务逻辑需求.\n\n当模型连接到以下连接器之一时,LoopBack模型可以在事务中执行操作.\n\n* MySQL connector (IMPORTANT: Only with InnoDB as the storage engine).\n* PostgreSQL connector\n* SQL Server connector\n* Oracle connector\n\n##### 事务API\n\n在事务中执行操作通常包括以下步骤:\n\n* Start a new transaction.\n* Perform create, read, update, and delete operations in the transaction.\n* Commit or rollback the transaction.\n\n##### Start transaction\n\n使用`beginTransaction`方法来开始一个事务.\n\n例如, for a Post model:\n\n```javascript\nPost.beginTransaction({isolationLevel: Post.Transaction.READ_COMMITTED}, function(err, tx) {\n  // Now we have a transaction (tx)\n});\n```\n\n_Isolation levels_\n\n调用beginTransaction()时可以选择指定事务隔离级别.LoopBack事务支持以下隔离级别:\n\n* Transaction.READ_UNCOMMITTED\n* Transaction.READ_COMMITTED (default)\n* Transaction.REPEATABLE_READ\n* Transaction.SERIALIZABLE\n\n如果你没指定,则默认的事务隔离级别是`READ_COMMITTED`.\n\n>  提示: Oracle only supports READ_COMMITTED and SERIALIZABLE\n\n##### Perform operations in a transaction\n\n在事务中执行创建,检索,更新和删除操作.将由事务对象组成的第二个参数添加到标准的create(),upsert(),destroyAll()等方法.\n\n例如,again assuming a Post model:\n\n```javascript\nPost.create({title: 't1', content: 'c1'}, {transaction: tx}, function(err, post) {\n  post.updateAttributes({content: 'c2', {transaction: tx}, function(err, newPost) {\n    //\n    newPost.reviews.create({content: 'r1'}, {transaction: tx}, function(err, newPost) {\n    });\n  }\n});\n```\n\n##### Commit or rollback\n\nCommit the transaction:\n\n```javascript\ntransaction.commit(function(err) {\n});\n```\n\nOr to rollback the transaction:\n\n```javascript\ntransaction.rollback(function(err) {\n});\n```\n\nPlease note all three APIs support the Promise flavor. See an example at [https://github.com/strongloop/loopback-connector-mysql/blob/master/test/transaction.promise.test.js](https://github.com/strongloop/loopback-connector-mysql/blob/master/test/transaction.promise.test.js).\n\n##### Set up timeout\n\n您可以指定事务的超时时间(以毫秒为单位).如果事务在超时之前未完成(提交或回滚),则默认情况下会在超时后自动回滚.可以使用timeout hook捕获超时事件.\n\nFor example, again assuming a Post model:\n\n```javascript\nPost.beginTransaction({\n    isolationLevel: Transaction.READ_COMMITTED,\n    timeout: 30000 // 30000ms = 30s\n  }, function(err, tx) {\n    tx.observe('timeout', function(context, next) {\n      // handle timeout\n      next();\n    });\n});\n```\n\n##### 传播事务\n\n传播事务是指显示的为CRUD和relation methods的options参数传递一个transaction对象.\n\nFor example, again assuming a Post model:\n\n```javascript\nvar options = {transaction: tx};\nPost.create({title: 't1', content: 'c1'}, options, function(err, post) {\n  post.updateAttributes({content: 'c2', options, function(err, newPost) {\n    //\n    newPost.reviews.create({content: 'r1'}, options, function(err, newPost) {\n    });\n  }\n});\n```\n\n##### Set up transaction hooks\n\n事务有四种(_译注:眼瞅着是5种_)类型的可观察事件:\n\n* before commit\n* after commit\n* before rollback\n* after rollback\n* timeout\n\n```javascript\ntx.observe('before commit', function(context, next) {\n  // ...\n  next();\n});\n\ntx.observe('after commit', function(context, next) {\n  // ...\n  next();\n});\n\ntx.observe('before rollback', function(context, next) {\n  // ...\n  next();\n});\n\ntx.observe('after rollback', function(context, next) {\n  // ...\n  next();\n});\n```\n\n##### 避免长时间等待或死锁\n\n请注意,具有特定隔离级别的事务将锁定数据库对象.在事务内异步执行多个方法具有阻止其他事务(显式或隐式)的巨大可能性.为了避免长时间等待甚至死锁，您应该:\n\n* 让事务尽可能短暂.\n* 不要在多个事务中序列化方法的执行.\n\n---\n\n<h4 id=\"3.4\"> 3.4 执行本地SQL </h4>\n\n>  警告:此功能尚未完全测试,并且未正式支持,API可能会在将来的版本中更改.\n\nTo execute SQL directly against your data-connected model, use the following:\n\n```javascript\ndataSource.connector.execute(_sql_, _params_, _cb_);\n```\n\nor\n\n```javascript\ndataSource.connector.query(_sql_, _params_, _cb_); // For 1.x connectors\n```\n\nWhere:\n\n* sql - The SQL string.\n* params - parameters to the SQL statement.\n* cb - callback function\n\n---\n\n<h4 id=\"3.5\"> 3.5 构建连接器 </h4>\n\n##### 概述\n\n本文适用于想要创建新连接器类型以连接到当前不支持的数据源的开发人员.它将引导您完成MySQL连接器的实施,以教您如何为关系数据库开发连接器.但是,许多概念也适用于创建到其他类型的数据源的连接器\n\n___译注:iworks暂时用不到这里,暂时先不翻译了___\n\n---\n\n<h4 id=\"4\"> 4. 使用数据 </h4>\n\n一旦定义了模型,就可以使用创建,读取,更新和删除(CRUD)操作向模型添加数据,处理数据并进行查询. 所有连接到持久性数据存储(如数据库)的LoopBack模型都会自动拥有PersistedModel类的创建,检索,更新和删除操作.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>REST</th>\n      <th>LoopBack model method<br>(Node API)*</th>\n      <th>Corresponding SQL<br>Operation</th>\n    </tr>\n    <tr>\n      <td>Create</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">PUT /<em>modelName</em></a></p>\n        <p><a href=\"PersistedModel-REST-API.html#update--insert-instance\">POST /<em>modelName</em></a></p>\n      </td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-create\" class=\"external-link\" rel=\"nofollow\">create()</a><sup>*</sup></code></td>\n      <td>INSERT</td>\n    </tr>\n    <tr>\n      <td>Read (Retrieve)</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">GET /modelName?filter=...</a></td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-find\" class=\"external-link\" rel=\"nofollow\">find()</a><sup>*</sup></code></td>\n      <td>SELECT</td>\n    </tr>\n    <tr>\n      <td>Update (Modify)</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#update--insert-instance\">POST /<em>modelName</em></a>&nbsp;</p>\n        <p><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">PUT /modelName</a></p>\n      </td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-updateall\" class=\"external-link\" rel=\"nofollow\">updateAll()</a><sup>*</sup></code></td>\n      <td>UPDATE</td>\n    </tr>\n    <tr>\n      <td>Delete (Destroy)</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">DELETE /<em>modelName</em>/<em>modelID</em></a></td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid\" class=\"external-link\" rel=\"nofollow\">destroyById()</a><sup>*</sup></code></td>\n      <td>DELETE</td>\n    </tr>\n  </tbody>\n</table>\n\n(*)列出的方法只是比较常用的例子,其他方法也可以提供类似的功能.例如:findById(),findOne()和findOrCreate().有关更多信息,请参阅PersistedModel API文档.\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API.\n\n---\n\n<h4 id=\"4.1\"> 4.1 创建,更新和删除数据 </h4>\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\nPersistedModel有一套方法用于创建,更新和删除数据.\n\n模型数据也称为模型实例.在数据库术语中,从概念上理解,模型对应于表,并且模型实例对应于表中的行或记录.\n\n##### Creating data (model instances)\n\n使用以下PersistedModel方法添加数据,即插入或创建实例:\n\n* [create](http://apidocs.strongloop.com/loopback/#persistedmodel-create) - 创建一个新的模型实例(记录).\n\n* [upsert](http://apidocs.strongloop.com/loopback/#persistedmodel-upsert) - 根据指定的[ID property](http://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#id-properties)属性检查实例(记录)是否存在,该属性必须具有唯一值.如果实例已存在,则方法将更新该实例.否则,它插入一个新实例.\n\n* [findOrCreate](http://apidocs.strongloop.com/loopback/#persistedmodel-findorcreate) - 查找与第一个参数提供的过滤器对象匹配的一个实例.如果找到,则返回对象.如果未找到,则创建一个新实例(记录).\n\n    >  重要: 请确保在过滤器对象中包含where子句.没有where,findOrCreate会查找并返回集合中的第一条记录,这可能导致意外的行为.\n\n* [save](http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-save) - 保存模型实例.如果实例没有ID,则调用[create](http://apidocs.strongloop.com/loopback/#persistedmodel-create).触发器:验证,保存,更新或创建.\n\n##### Updating data (model instances)\n\n静态方法(在Model对象上调用):\n\n* [updateAll](http://apidocs.strongloop.com/loopback/#persistedmodel-updateall) - 更新与指定的where子句匹配的多个实例(记录)[where clause](http://loopback.io/doc/en/lb3/Where-filter.html). \n\n>  要点: 与updateAll()一起使用的where子句与查询的where子句略有不同.从where子句中省略{where：...},只需提供条件作为第一个参数.有关详细信息，请参阅[where clause](http://loopback.io/doc/en/lb3/Where-filter.html)\n\n实例方法(在单个模型实例上调用):\n\n* [updateAttribute](http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattribute) - 更新单个属性(property).\n\n* [updateAttributes](http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattributes) - 更新属性集(properties).在更新前执行验证.\n\n##### Performing bulk updates(执行批量更新)\n\n* [createUpdates](http://apidocs.strongloop.com/loopback/#persistedmodel-createupdates)\n\n* [bulkUpdate](http://apidocs.strongloop.com/loopback/#persistedmodel-bulkupdate)\n\n##### Deleting data\n\n静态方法(在Model对象上调用):\n\n* [destroyAll](http://apidocs.strongloop.com/loopback/#persistedmodel-destroyall) - 删除与可选Where过滤器匹配的所有模型实例[Where filter](http://loopback.io/doc/en/lb3/Where-filter.html).\n\n* [destroyById](http://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid) - 删除指定ID的模型实例.\n\n>  重要:destroyAll()的where子句与查询的where子句略有不同.从where子句中省略{where：...}.只需提供条件作为第一个参数\n\n浏览更多信息,请访问[Where filter](http://loopback.io/doc/en/lb3/Where-filter.html).\n\n---\n\n<h4 id=\"4.2\"> 4.2 查询数据 </h4>\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n##### 概述\n\n查询是对返回一组数据或结果的模型的读取操作.您可以使用过滤器,使用Node API和REST API查询LoopBack模型,如下表所示.过滤器指定返回的数据集的条件,两个API的功能和选项是相同的,唯一的区别是在HTTP请求中使用的语法与Node 函数调用.在这两种情况下,LoopBack模型都返回JSON.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Query</th>\n      <th>Model API (Node)</th>\n      <th>REST API</th>\n    </tr>\n    <tr>\n      <td>\n        <p>Find all model instances using specified filters.&nbsp;</p>\n        <p>&nbsp;</p>\n      </td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-find\" class=\"external-link\" rel=\"nofollow\">find(filter, callback)</a></code></p>\n        <p>Where filter is a JSON object containing the query filters.</p>\n        <p>See <a href=\"Querying-data.html\">Filters</a> below.</p>\n      </td>\n      <td>\n        <p> <code>GET /<em>modelName</em>?filter...</code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Model REST API - Find matching instances</a>.</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>Find first model instance using specified filters.</td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findone\" class=\"external-link\" rel=\"nofollow\">findOne(filter, callback)</a></code></p>\n        <p>Where filter is a JSON object containing the query filters.</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n      <td>\n        <p><code><span>GET /<em>modelName</em>/findOne?filter...</span></code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-first-instance\">Model REST API - Find first instance</a>.&nbsp;</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>Find instance by ID.</td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findbyid\" class=\"external-link\" rel=\"nofollow\">findById(id, [filter,] callback)</a></code></p>\n        <p>Where optional filter is a JSON object <span>containing the query filters.</span></p>\n        <p><span><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></span>\n        </p>\n      </td>\n      <td>\n        <p><code><span>GET /</span><em>modelName</em><span>/</span><em>modelID</em></code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Model REST API - Find instance by ID</a>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n>  重要:REST查询必须在URL查询字符串中包含字符串\"filter\".而Node API调用则在JSON中不包括字符串\"filter\".LoopBack API Explorer将\"过滤器\"添加到查询字符串,但必须在filter字段中输入[Stringified JSON](http://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries).还要确保您使用的引号是正确的直引号(“)(_译注:半角引号_),而不是弯曲或印刷引号(”或“).这些通常很难在视觉上区分.\n\nLoopBack支持以下几种过滤器:\n\n* Fields filter\n* Include filter\n* Limit filter\n* Order filter\n* Skip filter\n* Where filter\n\n使用带有where和limit限制过滤器的find()方法的示例:\n\n```javascript\nAccount.find({where: {name: 'John'}, limit: 3}, function(err, accounts) { /* ... */ });\n```\n\n用REST实现则是:\n\n`/accounts?filter[where][name]=John&filter[limit]=3`\n\n##### 过滤器(Filters)\n\n在REST和Node API中,您可以使用任意数量的过滤器来定义查询.\n\nLoopBack支持特定的过滤器语法:它很像SQL,但是专门用于安全地序列化,无需注入和本地JavaScript.以前，只有PersistedModel.find()方法(和相关方法)支持此语法.\n\n下表描述了LoopBack的过滤器类型:\n\n<table>\n  <thead>\n    <tr>\n      <th>Filter type</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>fields</td>\n      <td>Object, Array, or String</td>\n      <td>\n        <p>Specify fields to include in or exclude from the response.</p>\n        <p>See <a href=\"Fields-filter.html\">Fields filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>include</td>\n      <td>String, Object, or Array</td>\n      <td>\n        <p>Include results from related models, for relations such as&nbsp;<em>belongsTo</em>&nbsp;and&nbsp;<em>hasMany</em>.</p>\n        <p>See <a href=\"Include-filter.html\">Include filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>Number</td>\n      <td>\n        <p>Limit the number of instances to return.</p>\n        <p>See <a href=\"Limit-filter.html\">Limit filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>order</td>\n      <td>String</td>\n      <td>\n        <p>Specify sort order: ascending or descending.</p>\n        <p>See <a href=\"Order-filter.html\">Order filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>skip (offset)</td>\n      <td>Number</td>\n      <td>\n        <p>Skip the specified number of instances.</p>\n        <p>See <a href=\"Skip-filter.html\">Skip filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>where</td>\n      <td>Object</td>\n      <td>\n        <p>Specify search criteria; similar to a WHERE clause in SQL.</p>\n        <p>See <a href=\"Where-filter.html\">Where filter</a>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\nREST语法:\n\n`?filter_filterType_=_spec_&_filterType_=_spec_....`\n\n您可以应用于单个请求的过滤器数量仅受最大网址长度限制,后者通常取决于所使用的客户端.\n\n>  重要: 在查询字符串中?filter后没有等号.例如:http://localhost:3000/api/books?filter[where][id]=1\n\nNode语法:\n\n指定filters作为find()和findOne()的第一个参数: \n\n`{ filterType: spec, filterType: spec, ... }`\n\n您可以应用的过滤器数量理论上没有限制.\n\n* filterType是:where,include,order,limit,skip或fields.\n\n* spec是过滤器的规范:例如对于where过滤器,这是结果必须匹配的逻辑条件.对于include过滤器,它指定要包括的相关字段.\n\n##### 在REST查询中使用\"stringified\"JSON\n\n除了上述标准REST语法之外,您还可以在REST查询中使用\"stringified JSON\".为此,只需使用为Node语法指定的JSON,如下所示:\n\n`?filter={ Stringified-JSON }`\n\n其中Stringified-JSON是来自Node语法的字符串化JSON.但是在JSON中,所有keys/strings必须用引号(\")括起来.\n\n>  重要:当使用带字符的JSON时,必须在查询字符串中的?filter后使用等号.例如:http：// localhost：3000 / api / books？filter = {％22where％22：{％22id％22：2}}\n\n例如: `GET /api/activities/findOne?filter={\"where\":{\"id\":1234}}`\n\n#### 过滤对象数组\n\n[Loopback-filters](https://github.com/strongloop/loopback-filters)模块实现了LoopBack的过滤器语法.使用此模块,可以使用MyModel.find(filter)支持的相同语法过滤对象数组.\n\n>  提示:我们计划将所有模块转换为使用loopback-filter,所以它将成为LoopBack常见的内置过滤机制.\n\n下面是几个例子:\n\n```javascript\nvar data = [{n: 1}, {n: 2}, {n: 3, id: 123}];\nvar filter = {where: {n: {gt: 1}}, skip: 1, fields: ['n']};\nvar filtered = require('loopback-filters')(data, filter);\nconsole.log(filtered); // => [{n: 3}]\n```\n\n有关更多细节,假设您正在解析逗号分隔值的(CSV)文件,并且您需要输出价格在10到100之间的所有值.要使用LoopBack过滤器语法,您需要创建您自己的CSV连接器或使用内存连接器,这两者都需要一些额外的与您的实际目标无关的工作.\n\n解析CSV(使用像node-csv这样的模块)后,您将拥有一个类似这样的对象数组(例如,带有10,000个唯一项):\n\n```\n[\n  {price: 85, id: 79},\n  {price: 10, id: 380},\n  //...\n]\n```\n\n要过滤行,你可以使用类似这样的通用JavaScript:\n\n```javascript\ndata.filter(function(item) {\n  return item.price < 100 && item.price >= 10\n});\n```\n\n这对于过滤来说非常简单,但是排序,字段选择和更高级的操作则变得有点困难.除此之外,你通常还要接受参数作为输入.例如:\n\n```javascript\nvar userInput = {min: 10, max: 100}\n\ndata.filter(function(item) {\n  return item.price < userInput.min && item.price >= userInput.max\n});\n```\n\n上述代码用LoopBack filter重写是very easy的:\n\n`filter(data, {where: {input: {gt: userInput.min, lt: userInput.max}}})`\n\n或者,如果你只是采用过滤器对象语法作为用户输入:\n\n`filter(data, userInput)`\n\n但是`loopback-filters`支持的不仅仅是排除和包括.它还支持字段选择(包括/排除字段),排序,地理/距离排序,限制和跳过(_译注:原文如下(including / excluding fields), sorting, geo/distance sorting, limiting and skipping._).所有这些都是通过用户输入轻松创建的声明性语法.\n\n作为LoopBack用户,这是一个非常强大的东西.通常,您将学习如何使用find()过滤器语法编写一些复杂的查询.在这之前你需要弄清楚,如何在JavaScript中做同样的事情（可能使用一个库,如underscore）.现在使用`loopback-filters`模块,在您的客户端应用程序中,您可以重复使用您发送到服务器的,相同的过滤器对象来过滤数据库,而不必与LoopBack服务器进行任何交互.\n\n---\n\n<h4 id=\"4.2.1\"> 4.2.1 Fields filter </h4>\n\n_fields filter_指定要在结果中包括或排除的属性(字段).\n\n##### REST API\n\n`filter[fields][_propertyName_]=<true|false>&filter[fields][propertyName]=<true|false>...`\n\n请注意,要在REST中包含多个字段,请使用多个过滤器.\n\n您还可以在REST查询中使用stringified JSON format(_译注:看上一节_).\n\n##### Node API\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n`{ fields: {_propertyName_: <true|false>, _propertyName_: <true|false>, ... } }`\n\n其中:\n\n* _propertyName_ is the name of the property (field) to include or exclude.\n\n* Use _true_ to include the property or _false_ to exclude it from results.\n\n默认情况下,查询返回结果中的所有模型属性.但是,如果您指定至少一个值为true的字段过滤器,则默认情况下查询将只包括您特别指定要包含的过滤器字段.\n\n例子:\n\n只返回id, make, and model properties:\n\nREST\n\n`?filter[fields][id]=true&filter[fields][make]=true&filter[fields][model]=true`\n\nNode API\n\n`{ fields: {id: true, make: true, model: true} }`\n\n返回:\n\n```json\n[{\n    \"id\": \"1\",\n    \"make\": \"Nissan\",\n    \"model\": \"Titan\"\n  }, {\n    \"id\": \"2\",\n    \"make\": \"Nissan\",\n    \"model\": \"Avalon\"\n  },\n  ...\n]\n```\n\n排除vin属性的例子:\n\nREST\n\n`?filter[fields][vin]=false`\n\nNode API\n\n`{ fields: {vin: false} }`\n\n---\n\n<h4 id=\"4.2.2\"> 4.2.2 Include filter </h4>\n\n_ include filter_使您能够在查询中包括相关模型的结果,例如具有belongsTo或hasMany关系的模型.\n\ninclude filter的值可以是字符串,数组或对象.\n\n>  重要:You can use an include filter with find(), findOne() and findById().\n\n##### REST API\n\n`filter[include][relatedModel]=propertyName`\n\n您还可以在REST查询中使用stringified JSON format.\n\n##### Node API\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n```\n{include: 'relatedModel'}\n{include: ['relatedModel1', 'relatedModel2', ...]}\n{include: {relatedModel1: [{relatedModel2: 'relationName'} , 'relatedModel']}}\n```\n\n其中:\n\n* _relatedModel, relatedModel1, and relatedModel2_ are the names (pluralized) of related models.\n\n* _relationName_ is the name of a relation in the related model. \n\n例子:\n\nInclude relations without filtering:\n\n```javascript\nUser.find({include: 'posts'}, function() { /* ... */ });\n```\n\nReturn all user posts and orders with two additional requests:\n\n```javascript\nUser.find({include: ['posts', 'orders']}, function() { /* ... */ });\n```\n\nReturn all post owners (users), and all orders of each owner:\n\n```javascript\nPost.find({include: {owner: 'orders'}}, function() { /* ... */ });\n```\n\nReturn all post owners (users), and all friends and orders of each owner:\n\n```javascript\nPost.find({include: {owner: ['friends', 'orders']}}, function() { /* ... */ });\n```\n\nReturn all post owners (users), and all posts and orders of each owner. The posts also include images.\n\n```javascript\nPost.find({include: {owner: [{posts: 'images'} , 'orders']}}, function() { /* ... */ });\n```\n\nInclude with filters\n\n在某些情况下,您可能要对包含的相关模型应用过滤器.\n\n>  注意:将过滤器应用于相关模型时,查询将返回第一个模型的结果以及包含过滤器查询的相关模型的任何结果,类似于SQL中的\"左连接\"\n\nLoopBack支持使用以下语法(例如):\n\n```javascript\nPost.find({\n  include: {\n    relation: 'owner', // include the owner object\n    scope: { // further filter the owner object\n      fields: ['username', 'email'], // only show two fields\n      include: { // include orders for the owner\n        relation: 'orders', \n        scope: {\n          where: {orderId: 5} // only select order with id 5\n        }\n      }\n    }\n  }\n}, function() { /* ... */ });\n```\n\n对于只有`$authenticated`或`$owner`角色的用户,在访问权限的真实场景里,请使用findById().例如,以下示例使用过滤器执行分页.(_译注:翻译的不准,原文如下For real-world scenarios where only users in $authenticated or $owner roles should have access, use findById(). For example, the following example uses filters to perform pagination:_)\n\n```javascript\nPost.findById('123', {\n  include: {\n    relation: 'orders',\n    scope: { // fetch 1st \"page\" with 5 entries in it\n      skip:0,\n      limit:5\n    }\n  }\n}, function() { /* ... */ });\n```\n\nAccess included objects\n\n在Node.js API中,调用toJSON()将带有相关项的返回模型实例转换为纯JSON对象.例如:\n\n```javascript\nPost.find({include: {owner: [{posts: 'images'} , 'orders']}}, function(err, posts) {\n posts.forEach(function(post) {\n   // post.owner points to the relation method instead of the owner instance\n   var p = post.toJSON();\n   console.log(p.owner.posts, p.owner.orders);\n });\n //... \n});\n```\n\n请注意关系属性,例如`post.owner`引用关系方法的JavaScript函数.\n\nREST examples\n\n这些示例假定customer模型与reviews模型具有hasMany关系. \n\nReturn all customers including their reviews:\n\n`/customers?filter[include]=reviews`\n\nReturn all customers including their reviews which also includes the author:\n\n`/customers?filter[include][reviews]=author`\n\nReturn all customers whose age is 21, including their reviews which also includes the author:\n\n`/customers?filter[include][reviews]=author&filter[where][age]=21`\n\nReturn first two customers including their reviews which also includes the author\n\n`/customers?filter[include][reviews]=author&filter[limit]=2`\n\nReturn all customers including their reviews and orders\n\n`/customers?filter[include]=reviews&filter[include]=orders`\n\n---\n\n<h4 id=\"4.2.3\"> 4.2.3 Limit filter </h4>\n\n_limit filter_限制返回的记录数.\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n##### REST API\n\n`filter[limit]=_n_`\n\nYou can also use stringified JSON format in a REST query.\n\n##### Node API\n\n`{limit: _n_}`\n\n其中n是要返回的结果(记录)的最大数目.\n\n例子:\n\n仅返回前五个查询结果:\n\nREST\n\n`/cars?filter[limit]=5`\n\nNode API\n\n```javascript\nCars.find({limit: 5},  function() {\n    //...\n})\n```\n\n---\n\n<h4 id=\"4.2.4\"> 4.2.4 Order filter </h4>\n\n_order filter_指定如何对结果进行排序:根据指定的属性升序(ASC)或降序(DESC).\n\n##### REST API\n\n根据一个属性排序: \n\n`filter[order]=propertyName <ASC|DESC>`\n\n根据2个或更多属性排序:\n\n`filter[order][0]=propertyName <ASC|DESC>&filter[order][1]propertyName]=<ASC|DESC>...`\n\nYou can also use stringified JSON format in a REST query.\n\n>  注意:默认排序可以在[default scope.](http://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#default-scope)配置\n\n##### Node API\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n根据一个属性排序: \n\n`{ order: 'propertyName <ASC|DESC>' }`\n\n根据2个或更多属性排序:\n\n`{ order: ['propertyName <ASC|DESC>', 'propertyName <ASC|DESC>',...] }`\n\n其中:\n\n* _propertyName_ is the name of the property (field) to sort by. \n\n* `<ASC|DESC>` signifies either ASC for ascending order or DESC for descending order.\n\n例子:\n\n返回三个最响的武器,按audibleRange属性排序\n\nREST\n\n`/weapons?filter[order]=audibleRange%20DESC&filter[limit]=3`\n\nNode API\n\n```javascript\nweapons.find({\n  order: 'price DESC',\n  limit: 3\n});\n```\n\n---\n\n<h4 id=\"4.2.5\"> 4.2.5 Skip filter </h4>\n\n_skip filter_省略指定的返回记录数.这是有用的,例如,分页响应.\n\n使用`offset`作为`skip`的别名.\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n##### REST API\n\n`?filter=[skip]=n`\n\nYou can also use stringified JSON format in a REST query.\n\n##### Node API\n\n`{skip: n}`\n\nn是被跳过的最大记录数.\n\n例子:\n\n此REST请求将跳过返回的前50条记录:\n\n`/cars?filter[skip]=50`\n\n等价的Node API是:\n\n```javascript\nCars.find( {skip: 50},  function() { /* ... */ } )\n```\n分页例子:\n\n以下REST请求说明如何对查询结果进行分页.每个request请求返回十条记录,第一个返回前十个,第二个返回第11个到第20个,依此类推...\n\n```\n/cars?filter[limit]=10&filter[skip]=0\n/cars?filter[limit]=10&filter[skip]=10\n/cars?filter[limit]=10&filter[skip]=20\n...\n```\n\n使用Node API实现上述效果:\n\n```javascript\nCars.find({limit: 10, skip: 0},  function() { /* ... */ });\nCars.find({limit: 10, skip: 10}, function() { /* ... */ });\nCars.find({limit: 10, skip: 20}, function() { /* ... */ });\n```\n\n---\n\n<h4 id=\"4.2.6\"> 4.2.6 Where filter </h4>\n\nwhere过滤器指定要匹配的一组逻辑条件,类似于SQL查询中的WHERE子句.\n\n##### REST API\n\n在下面的第一种形式中,条件是等价的,也就是说,它测试属性是否等于value.下面的第二种形式适用于所有其他条件.\n\n`filter[where][property]=value`\n\n`filter[where][property][op]=value`\n\n例如,如果存在具有odo属性的cars模型,则以下查询将查找odo大于5000的实例:\n\n`/cars?filter[where][odo][gt]=5000`\n\n找到cars与odo小于30,000的实例:\n\n`/cars?filter[where][odo][lt]=30000`\n\n##### 过滤器限制\n\n>  重要：_译注:不好翻,直接上原文.There is a limit of twenty filters (combined with AND or OR) using this format, due to the use of qs. When there are more than twenty, the filter is converted into an Object where it is expecting an Array. See LoopBack issue #2824 for more details._\n\n有两种方法可以解决过滤器限制：\n\n* 将大过滤器对象编码为\"stringified JSON\".\n* 在调用引导之前(before boot is called),在server/server.js中手动覆盖限制.\n\n**Encode filter object as JSON**\n\n```\nhttp://localhost:3000/api/Books\n?filter={\"where\":{\"or\":[{\"id\":1},{\"id\":2},...,{\"id\":20\"},{\"id\":21}]}}\n```\n\n**Override limit in server.js**\n\n```javascript\n// In `server/server.js`, before boot is called\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\nvar qs = require('qs');\n\nvar app = module.exports = loopback();\napp.set('query parser', function(value, option) {\n  return qs.parse(value, {arrayLimit: 500});\n});\n\napp.start = function() {\n  ...\n```\n\n##### Node API\n\n>  警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API\n\n**where子句**\n\n对于查询方法,如find(),findOrCreate()或findOne(),使用下面的第一个表单来测试等价性,也就是说property是否等于value.对于所有其他条件,请使用下面的第二个表单.\n\n`{where: {property: value}} `\n\n`{where: {property: {op: value}}}`\n\n其中:\n\n* _property_ is the name of a property (field) in the model being queried.\n\n* _value_ is a literal value. \n\n* _op_ is one of the operators listed below.\n\n`Cars.find({where: {carClass:'fullsize'}});`\n\n等价的REST查询是:\n\n`/api/cars?filter[where][carClass]=fullsize`\n\n>  提示:上面的where子句语法是查询,而不是count().对于所有其他方法,包括count(),省略{where : ... }包装器.请参阅下面的`Where clause for other methods`\n\n**Where clause for other methods**\n\n>  重要:当为查询以外的方法调用Node API时,即对于更新和删除(和`count()`)的方法,不要在{where：...}对象中包装where子句,只需使用条件作为参数.参见下面的例子\n\n在下面的第一种形式中,条件是等价的,也就是说它测试属性是否等于value.第二种形式适用于所有其他条件.\n\n`{property: value}`\n\n`{property: {op: value}}`\n\n其中:\n\n* _property_ is the name of a property (field) in the model being queried.\n\n* _value_ is a literal value. \n\n* _op_ is one of the operators listed below.\n\n例如,下面显示了对模型的updateAll()方法的一个where子句.注意在参数中缺少{where：...}.\n\n```javascript\nvar myModel = req.app.models.Thing;\nvar theId = 12;\nmyModel.updateAll( {id: theId}, {regionId: null}, function(err, results) {\n\treturn callback(err, results);\n});\n```\n\n更多的例子,例如调用destroyAll():\n\n```javascript\nvar RoleMapping = app.models.RoleMapping;\nRoleMapping.destroyAll( { principalId: userId }, function(err, obj) { ... } );\n```\n\n要删除cost属性大于100的所有记录:\n\n```javascript\nproductModel.destroyAll({cost: {gt: 100}}, function(err, obj) { ... });\n```\n\n**带过滤器的默认scopes**\n\n将`scope`添加到模型定义(在model.json文件中)会自动向名为defaultScope()的模型添加一个方法.当创建,更新或查询模型时,LoopBack将调用此方法.\n\n>  提示:带有where过滤器的默认scopes可能无法正常工作！\n\n每次创建或更新模型实例时,生成的defaultScope()方法将修改与where过滤器匹配的模型属性,以强制执行指定的值.\n\n如果不希望以此方式应用默认scope,请尽可能使用命名的scope.\n\n如果必须使用默认scope,但不希望它影响upsert(),那么,在调用upsert()之前,可以覆盖模型的defaultScope()方法.\n\n例如：\n\n```javascript\nvar defaultScope = Report.defaultScope;\n  Report.defaultScope = function(){};\n  Report.upsert({id: reportId, 'deleted': true}, function(...) {\n    Report.defaultScope = defaultScope;\n    ...\n  });\n```\n\n##### 操作(运算)符\n\n此表描述\"where\"过滤器中可用的操作符,参见下面的示例.\n\n| Operator  | Description|\n| ------------- | ------------- |\n| = | Equivalence. See [examples](#equivalence) below.|\n| and | Logical AND operator. See [AND and OR operators](#and-and-or-operators) and [examples](#and--or) below.|\n| or | Logical OR operator. See [AND and OR operators](#and-and-or-operators) and [examples](#and--or) below.|\n| gt, gte | Numerical greater than (&gt;); greater than or equal (&gt;=). Valid only for numerical and date values. See [examples](#gt-and-lt) below. <br/><br/>  For Geopoint values, the units are in miles by default. See [Geopoint](http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint) for more information.|\n| lt, lte | Numerical less than (&lt;); less than or equal (&lt;=). Valid only for numerical and date values. <br/><br/>For geolocation values, the units are in miles by default. See [Geopoint](http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint) for more information. |\n| between | True if the value is between the two specified values: greater than or equal to first value and less than or equal to second value. See [examples](#gt-and-lt) below. <br/><br/> For geolocation values, the units are in miles by default. See [Geopoint](http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint) for more information.|\n| inq, nin | In / not in an array of values. See [examples](#inq) below.|\n| near | For geolocations, return the closest points, sorted in order of distance. Use with `limit` to return the _n_ closest points. See [examples](#near) below.|\n| neq | Not equal (!=) |\n| like, nlike | LIKE / NOT LIKE operators for use with regular expressions. The regular expression format depends on the backend data source.  See [examples](#like-and-nlike) below. |\n| ilike, nilike | ILIKE / NOT ILIKE operators for use with regular expressions. The regular expression format depends on the backend data source. See [examples](#ilike-and-nilike) below. |\n| regexp | Regular expression. See [examples](#regular-expressions) below. |\n\n**AND和OR操作符**\n\n使用AND和OR运算符可以基于简单的过滤条件(使用以下语法)创建复合逻辑过滤器.\n\nNode API\n\n`{where: {<and|or>: [condition1, condition2, ...]}}`\n\nREST API\n\n`[where][<and|or>][0]condition1&[where][<and|or>]condition2...`\n\n其中_condition1_和_condition2_是过滤器条件.\n\n**正则表达式**\n\n您可以在where过滤器中使用正则表达式,并使用以下语法.您可以在where子句中使用正则表达式进行更新和删除,以及查询.\n\n基本上,regexp就像一个运算符,其中提供正则表达式值作为比较值.\n\n>  提示：正则表达式值还可以包括一个或多个标志.例如,将/i附加到正则表达式以执行不区分大小写的匹配.\n\nNode API\n\n`{where: {property: {regexp: <expression>}}}`\n\n其中_<expression>_:\n\n* String defining a regular expression (for example, '^foo' ).\n* Regular expression literal (for example, /^foo/ ).\n* Regular expression object (for example, new RegExp(/John/)).\n\n简写格式:\n\n`{where: {property: <expression>}}}`\n\n其中_<expression>_:\n\n* Regular expression literal (for example, /^foo/ ).\n* Regular expression object (for example, new RegExp(/John/)).\n\n>  提示:上述where子句语法用于查询.对于更新和删除,请忽略{where：...}包装器.\n\n例如,此查询返回模型以大写字母\"T\"开头的所有汽车:\n\n```javascript\nCars.find( {\"where\": {\"model\": {\"regexp\": \"^T\"}}} );\n```\n\n或者使用简写格式:\n\n```javascript\nCars.find( {\"where\": {\"model\": /^T/} } );\n```\n\nREST\n\n`filter[where][property][regexp]=expression`\n\n其中:\n\n* property is the name of a property (field) in the model being queried.\n* expression is the JavaScript regular expression string. \n\n正则表达式值还可以包括一个或多个标志.例如,将/i附加到正则表达式以执行不区分大小写的匹配.\n\n>  提示:在REST API中使用正则表达式标志时，必须在正则表达式前面使用斜杠字符(/).\n\n以下REST查询返回模型以大写\"T\"开头的所有汽车:\n\n```\n/api/cars?filter[where][model][regexp]=^T\n```\n\n以下REST查询返回以大写\"T\"或小写\"t\"开头的所有模型:\n\n```\n/api/cars?filter[where][model][regexp]=/^t/i\n```\n\n注意,由于正则表达式包括一个标志,所以它前面是一个斜杠(/).\n\n##### 例子\n\n**Equivalence(等于)**\n\n查询名为M1911的武器:\n\n**REST**\n\n```\n/weapons?filter[where][name]=M1911\n```\n\ncarClass是\"fullsize\"的汽车:\n\n**REST**\n\n```\n/api/cars?filter[where][carClass]=fullsize\n```\n\n**Node实现**:\n\n```javascript\nCars.find({ where: {carClass:'fullsize'} });\n```\n\n**gt and lt**\n\n```javascript\nONE_MONTH = 30 * 24 * 60 * 60 * 1000;  // Month in milliseconds\ntransaction.find({\n      where: {\n        userId: user.id,\n        time: {gt: Date.now() - ONE_MONTH}\n      }\n    }\n```\n\n例如,以下查询使用_where_过滤器返回雇员模型的所有实例,该过滤器指定要大于某个日期(大于): \n\n```\n/employees?filter[where][date][gt]=2014-04-01T18:30:00.000Z\n```\n\nNode实现:\n\n```javascript\nEmployees.find({\n  where: { \n    date: {gt: new Date('2014-04-01T18:30:00.000Z')}\n  }\n});\n```\n\n射程超过900米的前三个武器:\n\n```\n/weapons?filter[where][effectiveRange][gt]=900&filter[limit]=3\n```\n\nWeapons的audibleRange属性小于10:\n\n```\n/weapons?filter[where][audibleRange][lt]=10\n```\n\n**and / or**\n\n以下代码是使用\"and\"运算符查找标题为\"我的帖子\"且内容为\"Hello\"的帖子的示例.\n\n```javascript\nPost.find({where: {and: [{title: 'My Post'}, {content: 'Hello'}]}}, \n          function (err, posts) {\n            ...\n});\n```\n\nREST实现:\n\n```\n?filter[where][and][0][title]=My%20Post&filter[where][and][1][content]=Hello\n```\n\n使用\"or\"运算符查找标题为\"我的帖子\"或内容为\"Hello\"的帖子的示例.\n\n```javascript\nPost.find({where: {or: [{title: 'My Post'}, {content: 'Hello'}]}}, \n          function (err, posts) {\n            ...\n});\n```\n\n更复杂的例子. 请看这个表达式`(field1= foo and field2=bar) OR field1=morefoo`:\n\n```javascript\n{\n   or: [\n     { and: [{ field1: 'foo' }, { field2: 'bar' }] },\n     { field1: 'morefoo' }\n   ]\n }\n```\n\n**between**\n\n例子:\n\n```\nfilter[where][price][between][0]=0&filter[where][price][between][1]=7\n```\n\nNode实现:\n\n```javascript\nShirts.find({where: {size: {between: [0,7]}}}, function (err, posts) { ... } )\n```\n\n**near**\n\nThe `where.<field>.near` 不同于其他过滤器:大多数where过滤器限制返回的记录数,而`near`则是对返回结果进行排序.这很像SQL order by子句.通过将其与limit组合,可以创建诸如这样的查询,这个查询根据跟定经纬度获取最接近的三个记录.\n\n例如:\n\n```\n/locations?filter[where][geo][near]=153.536,-28.1&filter[limit]=3\n```\n\nGeoPoints可以是以下任意一种形式:\n\n```javascript\nlocation = new GeoPoint({lat: 42.266271, lng: -72.6700016}); // GeoPoint\nlocation = '42.266271,-72.6700016';                          // String\nlocation = [42.266271, -72.6700016];                         // Array\nlocation = {lat: 42.266271, lng: -72.6700016};               // Object Literal\n\nRestaurants.find({where: {geo: {near: location }}}, function callback(...\n```\n\n**near (ordering _and limiting by distance_)**\n\nnear过滤器可以接受2个额外属性:\n\n*   `maxDistance`\n*   `unit`\n\n当`maxDistance`包含在过滤器中时,near表现得更像典型的where过滤器,将结果限制在到某个位置的给定距离内的结果.默认情况下,maxDistance以英里为单位测量距离.\n\n例如,查找给定地理位置两英里内的所有餐馆:\n\n```javascript\nvar userLocation = new GeoPoint({\n  lat: 42.266271,\n  lng: -72.6700016\n});\nvar resultsPromise = Restaurants.find({\n  where: {\n    location: {\n      near: userLocation,\n      maxDistance: 2\n    }\n  }\n});\n```\n\n要更改距离(测量)单位,请指定`unit`的值为以下一种:\n\n* `kilometers`\n* `meters`\n* `miles`\n* `feet`\n* `radians`\n* `degrees`\n\n例如,要使用公里而不是英里:\n\n```javascript\nvar resultsPromise = Restaurants.find({\n  where: {\n    location: {\n      near: userLocation,\n      maxDistance: 2,\n      unit: 'kilometers'\n    }\n  }\n});\n```\n\n>  注意:如果单位值错误,例如\"mile\"而不是\"miles\",LoopBack将默认忽略过滤器！\n\n**like and nlike**\n\nlike和nlike(not like)运算符使您能够匹配SQL正则表达式.正则表达式格式取决于后端数据源.\n\nlike的例子:\n\n```javascript\nPost.find({where: {title: {like: 'M.-st'}}}, function (err, posts) { ... });\n```\n\nnlike的例子:\n\n```javascript\nPost.find({where: {title: {nlike: 'M.-XY'}}}, function (err, posts) {\n```\n\n使用memory connector时:\n\n```javascript\nUser.find({where: {name: {like: '%St%'}}}, function (err, posts) { ... });\nUser.find({where: {name: {nlike: 'M%XY'}}}, function (err, posts) { ... });\n```\n\n**ilike and nilike**\n\nilike和nilike(不是ilike)运算符使您能够匹配不区分大小写的SQL正则表达式.正则表达式格式取决于后端数据源.\n\nilike例子:\n\n```javascript\nPost.find({where: {title: {ilike: 'm.-st'}}}, function (err, posts) { ... });\n```\n\nnilike例子:\n\n```javascript\nPost.find({where: {title: {nilike: 'm.-xy'}}}, function (err, posts) {\n```\n\n使用memory connector时:\n\n```javascript\nUser.find({where: {name: {ilike: '%st%'}}}, function (err, posts) { ... });\nUser.find({where: {name: {nilike: 's%xy'}}}, function (err, posts) { ... });\n```\n\n**inq**\n\ninq运算符检查指定的属性值是否与数组中提供的任何值匹配.一般的语法是:\n\n```javascript\n{where: { property: { inq: [val1, val2, ...]}}}\n```\n\n其中:\n\n* _property_ is the name of a property (field) in the model being queried.\n* _val1, val2_, and so on, are literal values in an array.\n\ninq例子:\n\n```javascript\nPosts.find({where: {id: {inq: [123, 234]}}}, \n  function (err, p){... });\n```\n\nREST:\n\n```\n/medias?filter[where][keywords][inq]=foo&filter[where][keywords][inq]=bar\n```\n\nOr \n\n```\n?filter={\"where\": {\"keywords\": {\"inq\": [\"foo\", \"bar\"]}}}\n```\n\n---\n\n<h4 id=\"4.3\"> 4.3 高级主题:数据 </h4>\n\n_译注:这里只翻译一处,因为其他的3个主题与angularjs有关,目前不涉及_\n\n---\n\n<h4 id=\"4.3.1\"> 4.3.1 Realtime server-sent events </h4>\n\n##### 概述\n\nPersistedModel API支持使用CRUD方法和createChangeStream()方法的组合,实现从服务器到客户端的流式更改.\n\nChangeStream使服务器能够向客户端发送模型更改.客户端向初始请求通知更改,然后服务器将这些更改推送到客户端.\n\n##### Creating ChangeStreams on the server\n\n**设置**\n\n首先,添加event-stream到你的Node app:\n\n```bash\n$ npm install -save event-stream\n```\n\n**禁用压缩**\n\n事件流不适用于Node compression.要禁用npm compression,请从server/middleware.json中删除条目,如下所示:\n\n```json\n...\n\"compression\": {\n  \"enabled\":false\n},\n...\n```\n\n**脚本**\n\n下面是一个在LoopBack应用程序中使用createChangeStream()方法的基本示例:\n\n**server/boot/realtime.js**\n\n```javascript\nvar es = require('event-stream');\nmodule.exports = function(app) {\n  var MyModel = app.models.MyModel;\n  MyModel.createChangeStream(function(err, changes) {\n    changes.pipe(es.stringify()).pipe(process.stdout);\n  });\n  MyModel.create({\n    foo: 'bar'\n  });\n}\n```\n\n此示例将打印以下内容到控制台:\n\n```json\n{\"target\":1,\"data\":{\"foo\":\"bar\",\"id\":1},\"type\":\"create\"}\n```\n\n##### Pushing data to clients\n\n此示例显示如何使用EventSource API从浏览器使用ChangeStream,该API是内置于大多数浏览器中的.下面的示例代码假设一个名为MyModel的模型,并将响应记录到浏览器JavaScript控制台.\n\n**Browser script**\n\n```javascript\nvar urlToChangeStream = '/api/MyModels/change-stream?_format=event-stream';\nvar src = new EventSource(urlToChangeStream);\nsrc.addEventListener('data', function(msg) {\n  var data = JSON.parse(msg.data);\n  console.log(data); // the change object\n});\n```\n\n要推送数据,服务器上的模型必须更改.例如,如果添加新记录(模型实例).\n\n发生这种情况时,在浏览器JavaScript控制台中,您将看到:\n\n```json\nObject {target: 2, data: Object, type: \"create\"}\n```\n\n---\n\n<h4 id=\"5\"> 5. 添加应用程序逻辑 </h4>\n\n在构建应用程序时,通常需要实现自定义逻辑以处理数据并在响应客户端请求之前执行其他操作.在LoopBack中,有三种方法：\n\n* 向模型添加逻辑 - 添加远程方法,远程钩子和操作钩子(adding `remote methods`, `remote hooks` and `operation hooks`).\n* 定义引导脚本 - 编写在应用程序启动时运行的脚本(在/server/boot目录中).\n* 定义中间件 - 向应用程序添加自定义中间件.\n\n---\n\n<h4 id=\"5.1\"> 5.1 使用LoopBack对象 </h4>\n\n##### 概述\n\nLoopBack中主要的javascript对象包括:\n\n* [App](http://apidocs.strongloop.com/loopback/#var-app-loopback)\n* [Models](http://apidocs.strongloop.com/loopback/#model)\n* [Data sources](http://apidocs.strongloop.com/loopback-datasource-juggler/#define-new-datasource)\n\n如何获取对这些对象的引用取决于代码的位置以及要引用的对象(_译注:代码位置例如boot script,model的js文件等位置_).\n\n##### 获取App对象的引用\n\n获取对App对象的引用是至关重要的,因为从App中可以获得对其他对象(如model和data source)的引用.通常你可以在以下几种方式中获取app对象的句柄：\n\n* Model scripts: /common/models/_modelName_.js(其中modelName是模型的名称).\n\n* /server/boot中的引导脚本.\n\n* Middleware(在boot scripts中和/server/server.js中注册的中间件）\n\n* 您自己的自定义脚本\n\nApp对象为典型的LoopBack应用程序的各个部分提供上下文.\n\n**在boot script中获取对App对象的引用**\n\n要在引导脚本中获取对`app`对象的引用,请将其作为导出函数的第一个参数传递进去.\n\n下面是个带有回调函数的异步启动脚本的例子:\n\n**Asynchronous boot script - /server/boot/your-script.js**\n\n```javascript\nmodule.exports = function(app, cb) { //app is injected by LoopBack\n  //...\n};\n```\n\n下面是个不带回调函数的异步脚本的例子:\n\n**Synchronous boot script - /server/boot/your-script.js**\n\n```javascript\nmodule.exports = function(app) { //app is injected by loopback\n  //...\n};\n```\n\n**在middleware中获取对App对象的引用**\n\nLoopBack在中间件的`request `对象中自动设置app了对象(实际上,在底层是Express在做它).您可以在server/server.js中访问,如下所示:\n\n**Middleware - /server/server.js**\n\n```javascript\n...\napp.use(function(req, res, next) {\n  var app = req.app;\n  //...\n});\n...\n```\n\n**在自定义脚本中获取对App对象的引用**\n\n如果您需要在自己的自定义脚本中引用应用程序,只需要`require`它(如示例中所示):\n\n**A custom script - /server/your-script.js**\n\n```javascript\nvar app = require('/server/server');\n...\n```\n\n你只需要require`/server/server.js`,就像任何Node模块一样.\n\n**在model的js文件中获取对App对象的引用**\n\n要在模型生成器(Model generator)支持的模型中获取`app`对象的句柄,仍然是使用\"require\",就像任何Node模块一样:\n\n**Model - /common/models/book.js**\n\n```javascript\nvar app = require('../../server/server'); //require `server.js` as in any node.js app\n\nmodule.exports = function(Book) {\n  //...\n};\n```\n\n对于model,有一个特殊情况.从除了/common/models/model.js之外的任何地方,你实际上可以通过使用`model.app`的模型获得对`app`的引用.\n\n例如:\n\n```javascript\n...\nBook.app\n...\n```\n\n但是,需要注意的是,您不能在/common/model/model.js中引用model.app,因为此文件在引导完成之前不会添加`app`属性.这意味着您不能在/common/models/model.js中执行以下操作:\n\n**CANNOT do this in a model script**\n\n```javascript\nmodule.exports = function(Book) {\n  Book.app... //won't work because `.app` has not been added to the Book object yet\n});\n```\n\n但是,您可以获得对app INSIDE remote methods, remote hooks和model hooks的引用,因为这些是在应用程序完成加载后触发的(即在loopback.boot运行之后|/在server/server.js调用boot(...)之后）.\n\n这意味着你可以:\n\n```javascript\nmodule.exports = function(Book) {\n  Book.read(cb) {\n    var app = Book.app;\n    console.log(app.models...)\n    cb();\n  };\n  Book.remoteMethod(\n    'read', // read里有对app的引用\n    ...\n  });\n};\n```\n\n当然,你可以在remote hooks和remote methods中做同样的事情,但要注意加载时序.简单地说,`model.app`将不可用,直到应用程序完成引导,即在/server/server.js中运行boot().这里的想法是,在我们的模型被添加到应用程序之前定义它们.应用程序完成引导后,您就可以访问模型的`app`属性.\n\n访问应用程序对象的最简单的方法是通过Model.on('attached')事件.\n\n```javascript\nmodule.exports = function(MyModel) {\n  var app;\n  MyModel.on('attached', function(a) {\n    app = a;\n    // perform any setup that requires the app object\n  });\n};\n```\n\n##### 使用app对象\n\nLoopBack的app对象在主脚本中定义,如下:\n\n**/server/server.js**\n\n```javascript\nvar loopback = require('loopback');\nvar app = loopback();\n```\n\napp对象扩展自`Express app obejct`,继承了它的所有属性和方法,以及LoopBack app obejct的所有其他属性和方法.\n\n>  重要:在某些地方,如启动脚本中,app可能不叫app,而叫做server.\n\n##### 使用model对象\n\n**获取对model对象的引用**\n\n一旦你获得了`app`对象的句柄,你就可以通过app对象上的models属性来获得对特定model的引用.\n\n**Boot script - /server/boot/your-script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var app = app.models.Book;\n  //...\n};\n```\n\n在你自己的脚本中:\n\n**A custom script - /server/your-script.js**\n\n```javascript\nvar app = require('/server/server');\n```\n\n**获取对不相关模型的引用**\n\n您可以使用诸如`MyModel.app.models.MyRelatedModel`这样的表达式轻松的引用相关模型(_译注:相关模型是指建立了关系的model_).但是如果与其他模型没有关系,这将不起作用.在这种情况下,您需要像下面这样获取对应用程序对象的引用.\n\n```javascript\nrequire('../../server/server')\n```\n\n例如,假设您想要在observer (hook)中引用User模型,如下:\n\n**common/models/my-model.js**\n\n```javascript\nmodule.exports = function(MyModel) {\n  var app = require('../../server/server');\n\n  MyModel.observe('loaded', function( ctx, next) {\n   var User = app.models.User;\n   ...\n   User.create(...);\n   ...\n});\n```\n\n##### 使用data source对象\n\n**获取对data sources的引用**\n\n类似于在模型上获取句柄,您需要首先获取`app`对象的句柄,然后访问`app.datasources`属性即可:\n\n**Boot script - /server/boot/your-script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var dataSource = app.datasources.db; //db can be any registered datasource in `/server/datasources.json`\n  ...\n};\n```\n\n或者在你自己的脚本中:\n\n**A custom script - /server/your-script.js**\n\n```javascript\nvar app = require('./server/server');\n...\nvar datasource = app.datasources.db;\n...\n```\n\n或者在中间件中:\n\n**Middleware - /server/server.js**\n\n```javascript\n...\napp.use(function(req, res, next) {\n  var dataSource = app.datasources.db;\n  ...\n});\n...\n```\n\n或者在model的js文件中:\n\n**Model - /common/models/model.js**\n\n```javascript\nmodule.exports = function(Book) {\n  Book.read = function() {\n    var dataSource = Book.app.datasources.db;\n  };\n  Book.remoteMethod(\n    'read',\n     ...\n  );\n};\n```\n\n在model的js文件中要注意,因为诸如下面这样的代码是不会起作用的:\n\n```javascript\nModel - /common/models/model.js\n\nmodule.exports = function(Book) {\n  Book.app... //`Book` is not registered yet! This WON'T WORK.\n};\n```\n\n---\n\n<h4 id=\"5.2\"> 5.2 向model中添加业务逻辑 </h4>\n\n有三种方法可以向模型添加自定义逻辑:\n\n___译注:下面三个极其重要,要记住他们的作用场景___\n\n* **Remote methods**(远程方法) - REST端点映射到Node函数.\n* **Remote hooks**(远程钩子) - 在执行`remote method`时触发的逻辑(之前或之后).\n* **Operation hooks**(操作钩子) - 当模型对数据源执行创建,读取,更新和删除操作时触发的逻辑.\n\n您可以通过配置如何调用每个方法来进一步优化自定义逻辑的时序.在任何情况下,你都需要编写自己的逻辑,因为LoopBack只提供了触发逻辑的机制.\n\n---\n\n<h4 id=\"5.2.1\"> 5.2.1 Remote methods(远程方法) </h4>\n\n>  概要:远程方法是模型的静态方法,它通过自定义REST端点来公开.\n\n##### 概述\n\n远程方法是模型的静态方法,它通过自定义的REST端点公开.使用远程方法可以实现:LoopBack标准模型REST API不提供的操作.\n\n>  注意:定义远程方法的最简单的方法是使用远程方法生成器(remote method generator)\n\n##### 如何定义远程方法\n\n要定义远程方法:\n\n1. 在/common/models目录中编辑模型定义JSON文件,例如,要将远程方法附加到Person模型,请编辑/common/models/person.js.\n\n2. 定义处理request请求的方法(_译注:函数定义_).请注意,方法的名称将确定远程方法是静态的还是实例的方法.如果方法名称从`prototype.`开始,说明它是实例方法,否则,它是一个静态方法.\n\n3. 调用`remoteMethod()`注册该方法,使用两个参数调用它:\n\n  * 第一个参数是一个字符串,它是您在步骤2中定义的方法的名称.\n  * 第二个参数(可选)为REST端点提供了额外的配置.\n\n>  重要：LoopBack模型生成器会自动将驼峰形式的模型名称(例如MyModel)转换为小写横线名称(my-model).例如,如果您使用模型生成器创建名为\"FooBar\"的模型,它将在common/models中创建文件foo-bar.json和foo-bar.js.但是,模型名称FooBar将通过模型的name属性保留.\n\n**例子**\n\n假设您有一个Person模型,并且您要在REST端点中添加一个`/greet`端点,该端点返回一个带有请求中提供的名称的问候语(greeting).请您将此代码添加到/common/models/person.js来实现它:\n\n**/common/models/person.js**\n\n```javascript\nmodule.exports = function(Person){\n\n    Person.greet = function(msg, cb) {\n      cb(null, 'Greetings... ' - msg);\n    }\n\n    Person.remoteMethod('greet', {\n          accepts: {arg: 'msg', type: 'string'},\n          returns: {arg: 'greeting', type: 'string'}\n    });\n};\n```\n\n现在,您发起一个post请求到`/api/people/greet`端点,携带的数据是`{\"msg\": \"John\"}`.您将会在shell中收到如下结果:`Greetings... John!`.\n\n>  注意:上面的REST API请求使用复数形式\"people\"而不是“person”.\n\n##### 注册远程方法\n\n所有的LoopBack模型都有一个`remoteMethod()`静态方法,使用这个方法来注册一个`remote method(远程方法)`:\n\n```javascript\nmodel.remoteMethod(requestHandlerFunctionName, [options])\n```\n\n其中:\n\n* model是要添加远程方法的模型对象,在我们的示例中是Person.\n* requestHandlerFunctionName是一个字符串,指定远程方法的名称,例如\"greet\".\n* options是指定配置REST端点的参数对象,见下文.\n\n**Options**\n\noptions参数是一个包含用于配置远程方法REST端点的键/值对的Javascript对象.\n\n>  重要:所有的options属性都是可选的.但是,如果远程方法需要参数,则必须指定accept.如果remote方法返回一个值,则必须指定returns.\n\n<table>\n  <thead>\n    <tr>\n      <th width=\"50\">Option</th>\n      <th>Description</th>\n      <th width=\"260\">Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>accepts</td>\n      <td>\n        Defines arguments that the remote method accepts that map to the static method you define. For the example above, the function signature is <pre>Person.greet(name, age, callback)...</pre> so\n        <code>name</code> is the first argument, <code>age</code> is the second argument and callback is automatically provided by LoopBack (do not specify it in your <code>accepts</code> array). For more information, see <a href=\"Remote-methods.html#argument-descriptions\">Argument descriptions</a>.<br/><br/>\n        The default value is the empty array, <code>[ ]</code>.\n      </td>\n      <td>\n        <pre style=\"font-size: 80%;\">{  ...\n  accepts: [\n   {arg: 'name',\n    type: 'string'},\n   {arg: 'age',\n    type: 'number'}, ...],\n  ... }</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>\n        Text description of the method, used by API documentation generators such as Swagger.\n        You can put long strings in an array if needed (see note below).\n      </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>http.path</td>\n      <td>\n        HTTP path (relative to the model) at which the method is exposed.\n      </td>\n      <td>\n        <pre>http: {path: '/sayhi'}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.verb</td>\n      <td>\n        HTTP method (verb) at which the method is available. One of:\n        <ul>\n          <li>get</li>\n          <li>post (default)</li>\n          <li>patch</li>\n          <li>put</li>\n          <li>del</li>\n          <li>all</li>\n        </ul>\n      </td>\n      <td>\n     <pre>http: {path: '/sayhi',\nverb: 'get'}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.status</td>\n      <td>Default HTTP status set when the callback is called without an error.</td>\n      <td>\n      <pre>http: {status: 201}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.errorStatus</td>\n      <td>Default HTTP status set when the callback is called with an error.</td>\n      <td>\n        <pre>http: {errorStatus: 400}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>notes</td>\n      <td>\n        Additional notes, used by API documentation generators like Swagger.\n        You can put long strings in an array if needed (see note below).\n      </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>returns</td>\n      <td>\n        Describes the remote method's callback arguments; See <a href=\"Remote-methods.html#argument-descriptions\">Argument descriptions</a>. The <code>err </code>argument is assumed; do not specify.\n        Default if not provided is the empty array,  <code>[]</code>.\n      </td>\n      <td>\n        <pre>returns: {arg: 'greeting',\ntype: 'string'}</pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n**参数描述**\n\n`accept`和`returns`这2个可选属性,可以是单个参数的对象,或者是个数组,数组的内容是有序的参数集.下表描述了每个单独参数的属性.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Property (key)</th>\n      <th width=\"100\">Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>arg</td>\n      <td>String</td>\n      <td>Argument name</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>String or Array</td>\n      <td>\n        A text description of the argument. This is used by API documentation generators like Swagger.\n        You can put long strings in an array if needed (see note above).\n      </td>\n    </tr>\n    <tr>\n      <td>http</td>\n      <td>Object or Function</td>\n      <td>For input arguments: a function or an object describing mapping from HTTP request to the argument value. See <a href=\"Remote-methods.html\">HTTP mapping of input arguments</a> below.</td>\n    </tr>\n    <tr>\n      <td>http.target</td>\n      <td>String</td>\n      <td>\n        Map the callback argument value to the HTTP response object. The following values are supported.\n        <ul>\n          <li><code>status</code> sets the <code>res.statusCode</code> to the provided value</li>\n          <li><code>header</code> sets the <code>http.header</code> or <code>arg</code> named header to the value</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>required</td>\n      <td>Boolean</td>\n      <td>True if argument is required; false otherwise.</td>\n    </tr>\n    <tr>\n      <td>root</td>\n      <td>Boolean</td>\n      <td>For callback arguments: set this property to <code>true</code>\n         if your function has a single callback argument to use as the root object returned to remote caller.\n        Otherwise the root object returned is a map (argument-name to argument-value).\n      </td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>String</td>\n      <td>Argument datatype; must be a <a href=\"LoopBack-types.html\">Loopback type</a>. Additionally, callback arguments allow a special type \"file\"; see below.</td>\n    </tr>\n    <tr>\n      <td>default</td>\n      <td>String</td>\n      <td>Default value that will be used to populate loopback-explorer input fields and swagger documentation.\n        <strong>Note</strong>: This value will not be passed into remote methods function if argument is not present.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n例如,单个参数,指定其为对象:\n\n```json\n{arg: 'myArg', type: 'number'}\n```\n\n多个参数,则需要数组来存放:\n\n```json\n[\n  {arg: 'arg1', type: 'number', required: true},\n  {arg: 'arg2', type: 'array'}\n]\n```\n\n**返回文件(流)响应**\n\n您可以为回调参数指定{type：'file'，root：true},它会被直接发送给response body.file参数可以设置为以下值之一:\n\n* String\n* Buffer\n* ReadableStream (anything that exposes .pipe() method)\n\n例如:\n\n```javascript\nmodule.exports = function(MyModel) {\n  MyModel.download = function(cb) {\n    // getTheStreamBody() can be implemented by calling http.request() or fs.readFile() for example\n    getTheStreamBody(function(err, stream) {\n      if (err) return cb(err);\n      // stream can be any of: string, buffer, ReadableStream (e.g. http.IncomingMessage)\n      cb(null, stream, 'application/octet-stream');\n    });\n  };\n\n  MyModel.remoteMethod('download', {\n    returns: [\n      {arg: 'body', type: 'file', root: true},\n      {arg: 'Content-Type', type: 'string', http: { target: 'header' }}\n    ]\n  });\n};\n```\n\n**输入参数的HTTP映射**\n\n有两种方法可以为输入参数指定HTTP映射:\n\n* 提供一个具有`source`属性的对象.\n* 指定一个自定义映射函数\n\n**使用具有source属性的对象**\n\n要使用第一种方法为输入参数指定HTTP映射,请提供具有`source`属性的对象,该属性具有下表中所示的值之一.\n\n<table>\n  <thead>\n    <tr>\n      <th>Value of source property</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>body</td>\n      <td>The whole request body is used as the value.</td>\n    </tr>\n    <tr>\n      <td>form<br>query<br>path </td>\n      <td>\n        The value is looked up using <code>req.param</code>, which searches route arguments, the request body and the query string.\n        Note that <code>query</code> and <code>path</code> are aliases for <code>form</code>.\n      </td>\n    </tr>\n    <tr>\n      <td>req</td>\n      <td>The <a href=\"http://expressjs.com/4x/api.html#req\" class=\"external-link\" rel=\"nofollow\">Express HTTP request object</a>.</td>\n    </tr>\n    <tr>\n      <td>res</td>\n      <td>The <a href=\"http://expressjs.com/4x/api.html#res\" class=\"external-link\" rel=\"nofollow\">Express HTTP response object</a>.</td>\n    </tr>\n    <tr>\n      <td>context</td>\n      <td>The whole context object, which holds request and response objects.</td>\n    </tr>\n  </tbody>\n</table>\n\n例如,将整个请求正文作为值的参数:\n\n```json\n{ arg: 'data', type: 'object', http: { source: 'body' } }\n```\n\n另一个显示Express HTTP请求和响应对象的示例:\n\n```json\n[\n {arg: 'req', type: 'object', 'http': {source: 'req'}},\n {arg: 'res', type: 'object', 'http': {source: 'res'}}\n]\n```\n\n**使用自定义映射函数**\n\n指定输入参数的HTTP映射的第二种方法是指定自定义映射函数,例如:\n\n```javascript\n{\n  arg: 'custom',\n  type: 'number',\n  http: function(ctx) {\n    // ctx is LoopBack Context object\n\n    // 1\\. Get the HTTP request object as provided by Express\n    var req = ctx.req;\n\n    // 2\\. Get 'a' and 'b' from query string or form data and return their sum.\n    return -req.param('a') - req.param('b');\n  }\n}\n```\n\n如果不指定映射,LoopBack将像下面这样确定值(假设`name`为要解析的输入参数的名称):\n\n1. 如果有JSON格式的请求参数args,则它使用`args['name']`的值.\n2. 否则,它使用req.param('name').\n\n**将返回指定为非JSON格式(_译注:原文Returning data outside of a JSON field_)**\n\n使用arg属性指定返回参数将自动返回一个JSON对象,您的数据存储在同名的字段中.\n\n如果要将数据作为主响应返回,例如数组,可以通过在returns对象中设置root属性并省略arg来实现.\n\n```json\nreturns: {type: 'array', root: true}\n```\n\n##### 设置远程方法的路由\n\n默认情况下,远程方法公开在：\n\n`POST http://apiRoot/modelName/methodName`\n\n其中:\n\n* apiRoot是应用程序的API根路径.\n* modelName是模型的复数名称.\n* methodName是函数名.\n\n回想之前的greet例子,远程方法公开在：\n\n`POST /api/people/greet`\n\n要更改路由,请使用remoteMethod()方法的options参数的http.path和http.verb属性,例如:\n\n**/common/models/model.js**\n\n```javascript\nPerson.remoteMethod('greet',{\n  accepts: {arg: 'msg', type: 'string'},\n  returns: {arg: 'greeting', type: 'string'},\n  http: {path: '/sayhi', verb: 'get'}\n});\n```\n\n上述代码将默认路由改变到:\n\n`GET /api/people/sayhi`\n\n于是,一个到`http://localhost:3000/api/people/sayhi?msg=LoopBack%20developer`的GET请求将返回:\n\n```json\n{\"greeting\": \"Greetings... LoopBack developer\"}\n```\n\n##### 向远程方法添加ACLs\n\n要限制对自定义远程方法的访问,请以控制对任何模型API的访问的相同方式使用ACL生成器(ACL generator).自定义远程方法的访问类型为Execute.\n\n**基础应用**\n\n例如,要拒绝调用上面示例中使用的greet方法:\n\nshell\n\n```bash\n$ slc loopback:acl\n[?] Select the model to apply the ACL entry to: Person\n[?] Select the ACL scope: A single method\n[?] Enter the method name: greet\n[?] Select the access type: Execute\n[?] Select the role: All users\n[?] Select the permission to apply: Explicitly deny access\n```\n\nshell\n\n```bash\n$ slc loopback:acl\n[?] Select the model to apply the ACL entry to: Person\n[?] Select the ACL scope: A single method\n[?] Enter the method name: greet\n[?] Select the access type: Execute\n[?] Select the role: All users\n[?] Select the permission to apply: Explicitly deny access\n```\n\n然后,该工具创建以下访问控制规范:\n\n**/common/models/person.json**\n\n```json\n...\n\"acls\": [{\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"$everyone\",  // apply the ACL to everyone\n  \"permission\": \"DENY\",        // DENY attempts to invoke this method\n  \"property\": \"greet\"          // applies the access control to the greet() method\n}],\n...\n```\n\n**高级应用**\n\n另一个例子,允许只为该模型对象的`$owner`调用一个远程方法:\n\n**/common/models/YourModel.js**\n\n```javascript\nmodule.exports = function(YourModel) {\n  //...\n  YourModel.remoteMethod(\n    'someRemoteMethod',\n    {\n      accepts: [\n        {arg: 'id', type: 'number', required: true}\n      ],\n      // mixing ':id' into the rest url allows $owner to be determined and used for access control\n      http: {path: '/:id/some-remote-method', verb: 'get'}\n    }\n  );\n};\n```\n\n##### 格式化远程方法的响应\n\n您可以通过添加引导脚本来重新格式化所有远程方法返回的响应,该引导脚本修改app.remotes()返回的对象,如下所示:\n\n**/server/boot/hook.js**\n\n```javascript\nmodule.exports = function(app) {\n  var remotes = app.remotes();\n  // modify all returned values\n  remotes.after('**', function (ctx, next) {\n    ctx.result = {\n      data: ctx.result\n    };\n\n    next();\n  });\n};\n```\n\n##### 禁用远程方法\n\n使用`Model.disableRemoteMethod(name, isStatic)`和`Model.disableRemoteMethodByName(name)`来禁用远程方法.更多的信息请访问:\n\n* [Model.disableRemoteMethod](http://apidocs.strongloop.com/loopback/#model-disableremotemethod)\n* [Model.disableRemoteMethodByName](http://apidocs.strongloop.com/loopback/#model-disableremotemethodbyname)\n\n---\n\n<h4 id=\"5.2.2\"> 5.2.2 Remote hooks(远程钩子) </h4>\n\n##### 概述\n\nLoopBack提供了两种钩子:\n\n* 远程钩子(Remote hooks),在调用远程方法之前或之后执行.它可以是自定义的远程方法或继承自PersistedModel的标准创建,检索,更新和删除方法.\n* 当模型执行创建,检索,更新和删除操作时执行的操作钩子(Operation hooks).\n\n远程钩子(remote hook)使您能够在客户端调用远程方法之前或之后执行函数:\n\n* **beforeRemote()**,在远程方法之前运行.\n* **afterRemote()**,在远程方法成功完成后运行.\n* **afterRemoteError()**,在远程方法发生error后运行.\n\n\n>  提示: 使用beforeRemote钩子可以验证和清除远程方法的输入.因为beforeRemote钩子在执行远程方法之前运行,所以它可以访问远程方法的输入,但不能访问结果.在将远程方法的结果发送到远程客户端之前,可以使用afterRemote钩子来进行修改,记录或其他操作.因为afterRemote钩子在执行远程方法之后运行,它可以访问远程方法的结果,但是不能修改输入参数.\n\n**Signature**\n\nbeforeRemote()和afterRemote()具有相同的Signature,下面的语法使用beforeRemote,但是afterRemote是相同的.\n\n对于静态自定义远程方法：\n\n```javascript\n_modelName_.beforeRemote( _methodName_, function( ctx, next) {\n    //...\n    next();\n});\n```\n\n实例方法和静态内置方法(如upsert()或create())需要回调中的第三个参数：\n\n```javascript\n_modelName_.beforeRemote( _methodName_, function( ctx, _modelInstance_, next) {\n    //...\n    next();\n});\n```\n\nafterRemoteError()的signature有一点点不同:它只有2个参数\n\n```javascript\n_modelName_.afterRemoteError( _methodName_, function( ctx, next) {\n    //...\n    next();\n});\n```\n\n其中:\n\n* `_modelName_`是远程钩子附加到的模型的名称.\n* `_methodName_`是触发远程钩子的方法的名称.可以是自定义远程方法或从PersistedModel继承的标准创建,检索,更新和删除方法.它可以包括匹配多个方法的通配符(见下文).\n* `ctx`是上下文对象.\n* `_modelInstance_`是受影响的模型实例.\n\n上面的语法包括对next()的调用,要提醒您,您必须在远程钩子的回调函数中的某一点调用next().它不一定必须在函数结束时出现,但必须在函数完成之前的某个点调用.\n\n**通配符**\n\n您可以在`_methodName_`中使用以下通配符：\n\n* 星号'\\*'匹配任何字符,直到第一次出现分隔符字符'.'\n* 双星号匹配任何字符,包括分隔符字符'.'\n\n例如，使用\"*.*\"匹配任何静态方法,使用'prototype.*'来匹配任何实例方法.\n\n##### 例子\n\n以下示例为revEngine()远程方法定义beforeRemote和afterRemote钩子:\n\n**common/models/car.js**\n\n```javascript\nmodule.exports = function(Car) {\n  // remote method\n  Car.revEngine = function(sound, cb) {\n    cb(null, sound - ' ' - sound - ' ' - sound);\n  };\n  Car.remoteMethod(\n    'revEngine',\n    {\n      accepts: [{arg: 'sound', type: 'string'}],\n      returns: {arg: 'engineSound', type: 'string'},\n      http: {path:'/rev-engine', verb: 'post'}\n    }\n  );\n  // remote method before hook\n  Car.beforeRemote('revEngine', function(context, unused, next) {\n    console.log('Putting in the car key, starting the engine.');\n    next();\n  });\n  // remote method after hook\n  Car.afterRemote('revEngine', function(context, remoteMethodOutput, next) {\n    console.log('Turning off the engine, removing the key.');\n    next();\n  });\n...\n}\n```\n\n以下示例在远程方法名称中使用通配符.当执行名称以\"save\"结尾的任何远程方法时,将调用此远程钩子:\n\n**common/models/customer.js**\n\n```javascript\nCustomer.beforeRemote('*.save', function(ctx, unused, next) {\n  if(ctx.req.accessToken) {\n    next();\n  } else {\n    next(new Error('must be logged in to update'))\n  }\n});\n\nCustomer.afterRemote('*.save', function(ctx, user, next) {\n  console.log('user has been saved', user);\n  next();\n});\n```\n\n>  重要: 钩子的第二个参数(上例中的user)是ctx.result,它不总是可用\n\n下面是更多使用通配符的远程钩子的示例,以便在调用任何远程方法之前运行函数.\n\n**common/models/customer.js**\n\n```javascript\n// ** will match both prototype.* and *.*\nCustomer.beforeRemote('**', function(ctx, user, next) {\n  console.log(ctx.methodString, 'was invoked remotely'); // customers.prototype.save was invoked remotely\n  next();\n});\n\nOther wildcard examples\n// run before any static method eg. User.find\nCustomer.beforeRemote('*', ...);\n\n// run before any instance method eg. User.prototype.save\nCustomer.beforeRemote('prototype.*', ...);\n\n// prevent password hashes from being sent to clients\nCustomer.afterRemote('**', function (ctx, user, next) {\n  if(ctx.result) {\n    if(Array.isArray(ctx.result)) {\n      ctx.result.forEach(function (result) {\n        delete result.password;\n      });\n    } else {\n      delete ctx.result.password;\n    }\n  }\n\n  next();\n});\n```\n\nA safer means of effectively white-listing the fields to be returned by copying the values into new objects(_译注:这句翻译不好,保留原文_):\n\n**common/models/account.js**\n\n```javascript\nvar WHITE_LIST_FIELDS = ['account_id', 'account_name'];\n\nAccount.afterRemote('**', function(ctx, modelInstance, next) {\n  if (ctx.result) {\n    if (Array.isArray(modelInstance)) {\n      var answer = [];\n      ctx.result.forEach(function (result) {\n        var replacement ={};\n        WHITE_LIST_FIELDS.forEach(function(field) {\n          replacement[field] = result[field];\n        });\n        answer.push(replacement);\n      });\n    } else {\n      var answer ={};\n      WHITE_LIST_FIELDS.forEach(function(field) {\n        answer[field] = ctx.result[field];\n      });\n    }\n    ctx.result = answer;\n  }\n  next();\n});\n```\n\n**afterRemoteError的例子**\n\n当实例方法speak()失败时执行附加操作:\n\n**common/models/dog.js**\n\n```javascript\nDog.afterRemoteError('prototype.speak', function(ctx, next) {\n  console.log('Cannot speak!', ctx.error);\n  next();\n});\n```\n\n将额外的元数据附加到error对象:\n\n**common/models/dog.js**\n\n```javascript\nDog.afterRemoteError('**', function(ctx, next) {\n  if (!ctx.error.details) ctx.result.details = {};\n  ctx.error.details.info = 'intercepted by a hook';\n  next();\n})\n```\n\n向调用者报告不同的error:\n\n**common/models/dog.js**\n\n```javascript\nDog.afterRemoteError('prototype.speak', function(ctx, next) {\n  console.error(ctx.error);\n  next(new Error('See server console log for details.'));\n});\n```\n\n##### 上下文对象(Context object)\n\n远程钩子提供了一个包含传输特定数据(例如HTTP的req和res)的Context`ctx`对象.`ctx`对象还具有跨传输的一组一致的API.\n\n应用程序使用loopback.rest()中间件来提供以下额外的ctx属性:\n\n* `ctx.req`:Express Request对象.\n\n* `ctx.result`:Express Response对象.\n\n传递给afterRemoteError()钩子的上下文对象具有一个附加属性`ctx.error`,设置为由远程方法报告的错误.\n\n其他属性：\n\n* `ctx.args` - 是指包含HTTP请求参数定义的对象,可以使用arg定义从请求中查找值.这些是远程方法的输入值.\n\n* `ctx.result` - An object keyed by the argument names. Exception: If the root property is true, then it’s the value of the argument that has root set to true(_译注:这句暂时保留原文,等做完实验再说_).\n\n**ctx.req.accessToken**\n\n调用远程方法的用户的`accessToken`.\n\n>  重要: 如果远程方法未由登录用户(或其他主体)调用,则ctx.req.accessToken未定义.\n\n**ctx.result**\n\n在`afterRemote`钩子期间,`ctx.result`将包含要发送到客户端的数据.所以,可以修改此对象以在发送数据之前对其进行转换.\n\n>  重要: ctx.result的值可能不会始终可用\n\n如果远程方法显式的指定了返回值,那么只有`ctx.result`才会被设置.因此,您的远程方法必须执行以下操作:\n\n```javascript\nMyModel.remoteMethod('doSomething', {\n  // ...\n  returns: {arg: 'redirectUrl', type: 'string'}\n});\n```\n\n---\n\n<h4 id=\"5.2.3\"> 5.2.3 Operation hooks(操作钩子) </h4>\n\n>  概要:操作钩子由执行特定高级创建,读取,更新或删除操作的所有方法触发.在LoopBack版本3.0中对操作钩子进行了大量更改.\n\n##### 概述\n\nOperation hooks不与特定方法绑定,而是被执行特定高级创建,读取,更新或删除操作的所有方法触发. 使用操作钩子使您能够拦截修改数据的操作,而与调用它们的特定方法无关(例如,`create`,`save`或`updateOrCreate`).\n\nAPI很简单：使用`Model.observe(_name_，_observer_)`,其中name是操作钩子的字符串名称,例如\"before save\",observer是`function observer(context, callback)`.子模型继承observers(观察者),您可以为一个钩子注册多个observers(观察者).\n\n下表总结了PersistedModel创建,检索,更新和删除方法调用的操作钩子.\n\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>Method&nbsp;→<br>&nbsp;</p>\n        <p>Operation hook ↓</p>\n      </th>\n      <th>find<br>findOne<br>findById</th>\n      <th>exists</th>\n      <th>count</th>\n      <th>create</th>\n      <th>upsert</th>\n      <th>findOrCreate</th>\n      <th>deleteAll<br>deleteById </th>\n      <th>updateAll</th>\n      <th>prototype<br>.save</th>\n      <th>prototype<br>.delete</th>\n      <th>prototype<br>.updateAttributes</th>\n      <th>\n        prototype<br>.replaceAttributes\n      </th>\n      <th>replaceById</th>\n      <th>replaceOrCreate</th>\n      <th>upsertWithWhere</th>\n    </tr>\n    <tr>\n      <th>access</th>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>before save</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>after save</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>before delete</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <th>after delete</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <th>loaded</th>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>persist</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n  </tbody>\n</table>\n\n**Operation hook上下文对象**\n\n上下文对象特定于操作钩子,并且与传递到通过Model.beforeRemote和Model.afterRemote注册的远程钩子的上下文对象没有任何关系.请注意，上下文对象与loopback.getCurrentContext()提供的\"当前上下文\"无关.\n\n**所有钩子和操作的公共属性**\n\n目标模型\n\n属性`context.Model`设置为作为操作目标的模型的构造函数.例如`Product.find()`设置`context.Model = Product`.\n\n操作选项\n\n上下文对象有一个options属性,它允许钩子访问由特定模型方法(操作)的调用者提供的任何选项.\n\n例如:\n\n```javascript\nvar FILTERED_PROPERTIES = ['immutable', 'birthday'];\nMyModel.observe('before save', function filterProperties(ctx, next) {\n  if (ctx.options && ctx.options.skipPropertyFilter) return next();\n  if (ctx.instance) {\n    FILTERED_PROPERTIES.forEach(function(p) {\n      ctx.instance.unsetAttribute(p);\n    });\n  } else {\n    FILTERED_PROPERTIES.forEach(function(p) {\n      delete ctx.data[p];\n    });\n  }\n  next();\n});\n\n// immutable is not updated\nMyModel.updateOrCreate({\n  id: 1,\n  immutable: 'new value'\n}, cb);\n\n// immutable is changed\nMyModel.updateOrCreate({\n  id: 2,\n  immutable: 'new value'\n}, {\n  skipPropertyFilter: true\n}, cb);\n```\n\n**共享hookState属性**\n\n单个操作调用的所有钩子都保存`ctx.hookState`属性.\n\n例如,对于`Model.create()`调用的“access”, “before save”和“after save”都在`ctx.hookState`中传递的相同对象.\n\n这样钩子可以在\"before\"和\"after\"钩子之间传递状态日期.\n\n**钩子和操作的具体属性**\n\n除了上面列出的公共属性,每个钩子都提供了附加属性来标识受操作和变化影响的模型实例.一般规则是上下文提供`instance`属性或一对`data`和`where`属性.\n\n**instance**\n\n当操作影响单个实例并执行所有模型属性的完全update/create/delete(例如`PersistedModel.create()`)时,将提供此属性.\n\n**where + data**\n\n当操作影响多个实例(例如`PersistedModel.updateAll()`)或执行模型属性子集的部分更新(例如`PersistedModel.prototype.updateAttributes()`）时,上下文提供了一个where过滤器用于查找受影响的记录和包含要进行的更改的plain`data`对象.\n\n**isNewInstance**\n\n一些操作提供用于区分CREATE操作和UPDATE操作的标志.有关详细信息请参阅单个钩子的文档.\n\n>  重要: 只有某些连接器支持ctx.isNewInstance.其他连接器则是未定义的.请参阅检查ctx.isNewInstance的支持(_译注:官方文档上此处给的链接打不开_).\n\n**currentInstance**\n\n此属性由执行单个实例的部分更改的钩子提供.它包含受影响的模型实例,您应该将值视为只读(不可变).\n\n**检查ctx.isNewInstance的支持情况**\n\n`ctx.isNewInstance`的初始实现仅包括对内存,MongoDB和MySQL连接器的支持.您可以通过测试“after save”返回的值来检查连接器是否支持此功能.\n\n例如:\n\n```javascript\nMyModel.observe('after save', function(ctx, next) {\n  console.log('supports isNewInstance?', ctx.isNewInstance !== undefined);\n  next();\n});\n// It's important to provide a value for the id property\n// Include also values for any required properties\nMyModel.updateOrCreate({\n  id: 123\n}, console.log);\n```\n\n**访问受影响的实例**\n\n仅影响单个实例的操作(所有创建,检索,更新和删除操作,除了`PersistedModel.deleteAll`和`PersistedModel.updateAll`）通常在上下文对象中提供受影响的实例.但是,根据操作,此实例可以是可修改的`ctx.instance`或只读的`ctx.currentInstance`:\n\n<table>\n  <tbody>\n    <tr>\n      <th>&nbsp;</th>\n      <th>before save</th>\n      <th>persist</th>\n      <th>after save</th>\n      <th>before delete</th>\n      <th>after delete</th>\n    </tr>\n    <tr>\n      <td><code>create</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</span></td>\n    </tr>\n    <tr>\n      <td><code>findOrCreate</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>updateOrCreate</code></td>\n      <td><em>n/a*</em></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>upsertWithWhere</code></td>\n      <td><em>n/a*</em></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>updateAll</code></td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>prototype.save</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>prototype.updateAttributes</code></td>\n      <td><code><span>ctx.currentInstance</span></code></td>\n      <td><code><span>ctx.currentInstance</span></code></td>\n      <td><code><span>ctx.instance</span></code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td>\n        <p><code>prototype.delete</code></p>\n      </td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td><code><span>ctx.where.id</span></code></td>\n      <td><code><span>ctx.where.id</span></code></td>\n    </tr>\n    <tr>\n      <td><code>deleteAll</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n    </tr>\n    <tr>\n      <td><span>replaceOrCreate</span></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td>---</td>\n      <td>---</td>\n    </tr>\n    <tr>\n      <td>\n        <p><span>prototype.replaceAttributes/</span></p>\n        <p><span>replaceById</span></p>\n      </td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td>---</td>\n      <td>---</td>\n    </tr>\n  </tbody>\n</table>\n\n(*)操作`updateOrCreate`和`upsertWithWhered`在“before save”钩子中不提供任何实例.因为我们不能预先告诉操作是否会导致UPDATE或CREATE,我们不能确定是否有任何存在的\"currentInstance\"受操作影响.\n\n有关详细信息,请参阅以下部分.\n\n##### Hooks(钩子)\n\nLoopBack提供如下这些操作钩子:\n\n* access\n* before save\n* after save\n* before delete\n* after delete\n* loaded\n* persist\n\n下表列出了PersistedModel方法调用的钩子:\n\n<table>\n  <tbody>\n    <tr>\n      <th width=\"160\">Method name</th>\n      <th>Hooks invoked</th>\n    </tr>\n    <tr>\n      <td>\n        <p>all<br>find<br>findOne <br>findById  <br>exists<br>count </p>\n      </td>\n      <td>access, loaded</td>\n    </tr>\n    <tr>\n      <td>create</td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>upsert (aka updateOrCreate)</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>upsertWithWhere</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>findOrCreate</td>\n      <td>access, before save*, after save*, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>deleteAll (destroyAll)<br>deleteById (destroyById)</td>\n      <td>access, before delete, after delete</td>\n    </tr>\n    <tr>\n      <td>updateAll</td>\n      <td>access, before save, after save, persist</td>\n    </tr>\n    <tr>\n      <td>prototype.save</td>\n      <td>before save, after save, persist, loaded</td>\n    </tr>\n    <tr>\n      <td>prototype.delete</td>\n      <td>before delete, after delete</td>\n    </tr>\n    <tr>\n      <td>prototype.<br/>updateAttributes</td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>replaceOrCreate</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>prototype.<br/>replaceAttributes\n        <br/>replaceById<\n      </td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n  </tbody>\n</table>\n\n(*)当`findOrCreate`找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发`before save`钩子,即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.\n\n**access**\n\n每当为模型查询数据库时,即调用PersistedModel的任何create,retrieve,update和delete方法时,都会触发`access`钩子. Observers(观察者)可以修改查询,例如添加额外的限制.\n\n>  注意:原型方法不会触发access钩子,因为钩子已经被从数据库加载模型实例的方法触发了.例如,当您通过REST API调用原型方法时,会进行两个模型调用:static findById()(触发\"access\"钩子),然后根据请求创建原型方法.\n\n上下文属性\n\n* `model` - 将被查询的模型的构造函数\n* `query` - 包含字段的查询,`where`,`include`,`order`等等.\n\n例子:\n\n```javascript\nMyModel.observe('access', function logQuery(ctx, next) {\n  console.log('Accessing %s matching %s', ctx.Model.modelName, ctx.query.where);\n  next();\n});\n\nMyModel.observe('access', function limitToTenant(ctx, next) {\n  ctx.query.where.tenantId = loopback.getCurrentContext().tenantId;\n  next();\n});\n```\n\n**before save**\n\n在修改(创建,更新)模型实例之前触发`before save`钩子,特别是当调用PersistedModel的以下方法时:\n\n* create()\n* upsert()\n* upsertWithWhere()\n* findOrCreate()*\n* updateAll()\n* prototype.save()\n* prototype.updateAttributes()\n* replaceOrCreate()\n* prototype.replaceById() / replaceAttributes()\n\n(*)当`findOrCreate`找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发`before save`钩子,即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.\n\n钩子在调用模型验证函数之前触发.\n\n由于在调用验证器之前触发`before save`钩子,因此可以使用它来确保空值或使用缺省值填充缺少值.\n\n根据触发此钩子的方法,上下文将具有以下属性集之一:\n\n* 完全保存单个模型\n  * `Model` - 将被保存的模型的构造函数\n  * `instance` - 要保存的模型实例,该值是Model类的一个实例.\n\n* 多个模型的部分更新\n  * `Model` - 将被保存的模型的构造函数\n  * `where` - where过滤器描述将影响哪些实例\n  * `data` - 更新期间应用的（部分）数据\n  * `currentInstance` - 受影响的实例,请参见下面的prototype.updateAttributes触发.\n\n___ctx.isNewInstance___\n\n在设置ctx.instance时,`before save`钩子提供`ctx.isNewInstance`属性,并具有以下值:\n\n* 所有CREATE操作均为真\n* 所有UPDATE和REPLACE操作均为False\n* updateOrCreate,upsertWithWhere,replaceOrCreate,prototype.save,prototype.updateAttributes和updateAll操作的值都是Undefined(未定义).\n\n___嵌入关系(Embedded relations)___\n\n您可以为嵌入在另一个模型中的模型定义`before save`钩子.然后,更新或创建包含模型的实例将触发嵌入模型上的操作钩子.发生这种情况时,`ctx.isNewInstance`为false,因为只创建容器模型的新实例.\n\n例如,如果`Customer embedsOne Address`,并且您在地址模型上定义了一个`before save`钩子,则创建一个新的Customer实例将触发操作钩子.\n\n___在before save钩子中操作模型数据___\n\n如上所述,上下文提供`instance `属性或一对`data`以及`where`属性.在`ctx.instance`中公开一个完整的模型实例允许钩子调用自定义模型的实例方法(例如,当地址等订单数据改变时,钩子可以调用`order.recalculateShippingAndTaxes()`）.这就是为什么LoopBack创建,检索,更新和删除操作会提供实例(如果可能).\n\n当提供实例对象不可行时.有两个异常值得注意:\n\n1. `PersistedModel.updateAll`更新与提供的查询匹配的多个实例.LoopBack甚至不从数据库加载它们的数据,它是由数据库来查找这些实例并应用必要的更改.\n\n2. `PersistedModel.updateAttributes`执行部分更新，只修改模型属性的子集.虽然LoopBack具有可用的模型实例,但它还需要知道应该在数据库中更改哪些模型属性.在`ctx.data`中传递操作有效内容 - 一个仅包含应该修改的属性的纯对象 - 使钩子实现可以轻松地添加/删除要修改的属性.您仍然可以通过`ctx.currentInstance`访问要修改的模型实例,只要将其视为不可变(只读)即可.\n\n例子:\n\n```javascript\nMyModel.observe('before save', function updateTimestamp(ctx, next) {\n  if (ctx.instance) {\n    ctx.instance.updated = new Date();\n  } else {\n    ctx.data.updated = new Date();\n  }\n  next();\n});\n\nMyModel.observe('before save', function computePercentage(ctx, next) {\n  if (ctx.instance) {\n    ctx.instance.percentage = 100 * ctx.instance.part / ctx.instance.total;\n  } else if (ctx.data.part && ctx.data.total) {\n    ctx.data.percentage = 100 * ctx.data.part / ctx.data.total;\n  } else if (ctx.data.part || ctx.data.total) {\n    // either report an error or fetch the missing properties from DB\n  }\n  next();\n});\n```\n\n___移除不需要的属性___\n\n要删除(取消设置)模型实例中的属性,将其值设置为undefined或删除属性是不够的.必须调用`unsetAttribute(name)`. 但是,不要忘记处理上下文具有数据属性的情况!由于数据对象是普通对象,因此可以通过delete操作符以常规方式删除属性.\n\n例子:\n\n```javascript\nMyModel.observe('before save', function removeUnwantedField(ctx, next) {\n  if (ctx.instance) {\n    ctx.instance.unsetAttribute('unwantedField');\n  } else {\n    delete ctx.data.unwantedField;\n  }\n  next();\n});\n```\n\n这将完全删除字段,并防止将伪数据插入数据库.\n\n**after save**\n\n在模型更改成功地保持到数据源之后调用`after save`钩子,特别是当调用PersistedModel的以下方法时:\n\n* create()\n* upsert()\n* upsertWithWhere()\n* findOrCreate()*\n* updateAll()\n* prototype.save()\n* prototype.updateAttributes()\n* prototye.replaceAttributes() / replaceById()\n* replaceOrCreate()\n\n(*)当`findOrCreate`找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发`before save`钩子(_译注:这里原文是不是有问题?应该是after save吧_),即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.\n\n根据触发此钩子的方法,上下文将具有以下属性集之一:\n\n* 单个模型被更新：\n  * `Model` - 将被保存的模型的构造函数.\n  * `instance` - 保存的模型实例.该值是Model类的实例,并包含由数据存储计算的更新值(例如,自动生成的ID).\n\n     > 注意： after save钩子将对ctx.instance的更改返回给调用者(REST客户端),但不会将它们持久保存到数据库!\n\n* 通过`Model.updateAll`对更多模型实例进行部分更新：\n  * `Model` - 将被保存的模型的构造函数.\n  * `where` - where过滤器描述查询哪些实例.请参阅下面的警告.\n  * 'data` - 在更新期间应用的(部分)数据.\n\n     >  注意：您不能可靠地使用\"after save\"的\"where\"查询来查找受影响的模型.考虑下面的调用:\n     \n     ```javascript\n     MyModel.updateAll({ color: 'yellow' }, { color: 'red' }, cb);\n     ```\n     \n     此时,\"after save\"钩子是运行的,但是没有记录会匹配这个查询条件{ color: 'yellow' }.\n     \n`after save`在设置`ctx.instance`时提供`ctx.isNewInstance`属性,并具有以下值:\n\n* 所有CREATE操作后为true.\n* 所有UPDATE/REPLACE操作后为False.\n* `updateOrCreate`,`prototype.save`和`prototype.updateAttributes`需要连接器来报告是创建了新实例还是更新了现有实例.当连接器提供此信息时,`ctx.isNewInstance`为True或False. 当连接器不支持此功能(见下文)时,该值为undefined.\n\n>  重要:只有某些连接器支持ctx.isNewInstace.其他连接器是未定义的.请参阅检查ctx.isNewInstance的支持.\n\n___Embedded relations(嵌入关系)___\n\n您可以为嵌入在另一个模型中的模型定义`after save`钩子.然后,更新或创建包含模型的实例将触发嵌入模型上的操作钩子.发生这种情况时,`ctx.isNewInstance为false`,因为只创建容器模型的新实例.\n\n例如,如果`Customer embedsOne Address`,并且您在地址模型上定义了一个`after save`钩子,则创建一个新的Customer实例将触发操作钩子.\n\n例子:\n\n```javascript\nMyModel.observe('after save', function(ctx, next) {\n  if (ctx.instance) {\n    console.log('Saved %s#%s', ctx.Model.modelName, ctx.instance.id);\n  } else {\n    console.log('Updated %s matching %j',\n      ctx.Model.pluralModelName,\n      ctx.where);\n  }\n  next();\n});\n```\n\n**before delete**\n\n在从数据源中删除模型之前触发`before delete`钩子,特别是当调用PersistedModel的以下方法时:\n\n* `destroyAll()` (same as `deleteAll()`)\n* `destroyById()`(same as `deleteById()`)\n* `prototype.destroy()` (same as `prototype.delete()`)\n\n>  重要: `before delete`钩子不接收删除的模型实例ID的列表,因为后端数据存储器(例如关系数据库或NoSQL数据库)不提供此信息.但是,当删除单个模型实例时,钩子接收包含要删除的实例的id的ctx.where.\n\n_Context properties(上下文属性)_\n\n* `Model ` - 将被查询的模型的构造函数\n* `where` - where过滤器描述将删除哪些实例\n\n例子:\n\n```javascript\nMyModel.observe('before delete', function(ctx, next) {\n  console.log('Going to delete %s matching %j',\n    ctx.Model.pluralModelName,\n    ctx.where);\n  next();\n});\n```\n\n要拒绝基于某些条件删除模型,请调用带有错误的next()以中止删除操作.\n\n例子:\n\n```javascript\nif (subscriptions.length > 0) {\n  //Stop the deletion of this Client\n  var err = new Error(\"Client has an active subscription, cannot delete\");\n  err.statusCode = 400;\n  console.log(err.toString());\n  next(err);\n} else {\n  next();\n}\n```\n\n**after delete**\n\n>  重要:`after delete`钩子不接收已删除模型实例ID的列表,因为后端数据存储(如关系数据库或NoSQL数据库)不提供此信息.但是,当删除单个模型实例时,钩子接收包含要删除的实例的id的ctx.where.\n\n在从数据源中删除一些模型之后触发`after delete`钩子,特别是当调用PersistedModel的以下方法时:\n\n* `destroyAll()` (same as `deleteAll()`)\n* `destroyById()`(same as `deleteById()`)\n* `prototype.destroy()` (same as `prototype.delete()`)\n\n_Context properties(上下文属性)_\n\n* `Model ` - 将被查询的模型的构造函数\n* `where` - where过滤器描述哪些实例被删除\n\n例子:\n\n```javascript\nMyModel.observe('after delete', function(ctx, next) {\n  console.log('Deleted %s matching %j',\n    ctx.Model.pluralModelName,\n    ctx.where);\n  next();\n});\n```\n\n**loaded**\n\n这个钩子由PersistedModel的以下方法触发:\n\n* find()\n* findOne()\n* findById()\n* exists()\n* count()\n* create()\n* upsert() (same as updateOrCreate())\n* upsertWithWhere()\n* findOrCreate()*\n* prototype.save()\n* prototype.updateAttributes()\n* replaceOrCreate()\n* prototype.replaceAttributes() / replaceById()\n\n>  重要:默认情况下,create和updateAttributes不会将数据库更新应用于返回到回调的模型实例,因此\"loaded\"挂钩所做的任何更改都将被丢弃.要更改此行为,请设置每个模型选项updateOnLoad：true.\n\nLoopBack在连接器获取数据之后,在从该数据创建模型实例之前调用此钩子.这使钩子能够解密数据.注意:此钩子使用原始数据库数据调用,而不是完整的模型实例.\n\n_Context properties(上下文属性)_\n\n* `data` - 连接器返回的数据(从数据库加载)\n\n**persist**\n\n此钩子由将数据保存到数据源的操作触发,具体来说,是PersistedModel的以下方法:\n\n* create()\n* upsert() (same as updateOrCreate())\n* upsertWithWhere()\n* findOrCreate()*\n* prototype.save()\n* prototype.updateAttributes()\n* updateAll()\n* replaceOrCreate()\n* prototype.replaceAttributes() / replaceById()\n\n不要将此钩子与\"before save\"钩子混淆:\n\n* **before save** - 使用此钩子观察(并操作)将要保存的模型实例(例如,设置国家代码并且国家名称未填写时,填写国家/地区名称).\n\n* **persist** - 使用此钩子在数据被持久化到数据源(例如,加密数据库中的值)之前观察(和操作)数据.\n\n在`create`期间通过persist钩子将应用的更新反映到数据库中,但是相同的更新不会反映在create回调里获得的实例对象中.\n\n其次,对于实现原子`findOrCreate`的连接器,每次都会创建对象的新实例,即使稍后在数据库中找到现有记录也是如此.所以:\n\n* ctx.data.id和ctx.currentInstance.id都设置为新ID.\n* ctx.isNewInstance为true\n\n_上下文属性(Context properties)_\n\n* `data` - 将发送到连接器的数据保存到数据库\n* `currentInstance` - 受影响的模型实例\n* `isNewInstance` - 见下文\n\n对于这个钩子来说,`ctx.isNewInstance`是:\n\n* True for all CREATE operations\n* False for all UPDATE operations\n* Undefined for updateOrCreate, , upsertWithWhere, replaceOrCreate, prototype.save, prototype.updateAttributes, and updateAll operations.\n\n**afterInitialize hook**\n\n>  重要:afterInitialize不是严格的操作钩子,它实际上是唯一没有被弃用的模型钩子.\n它是一个同步方法,没有回调函数,在钩子中执行逻辑后,不需要调用next().\n\n在模型初始化后调用此钩子.例如:\n\n**/common/models/coffee-shop.js**\n\n```javascript\n...\nCoffeeShop.afterInitialize = function() {\n  //your logic goes here\n};\n...\n```\n\n大多数操作需要在实际执行操作之前初始化模型,但是有一些情况下不会触发initialize事件,例如对exists,count或批量更新REST端点的HTTP请求.\n\n---\n\n<h4 id=\"5.2.4\"> 5.2.4 Connector hooks(连接器钩子) </h4>\n\n>  概要:连接器钩子由连接器操作触发\n\n##### 概述\n\n连接器负责在模型方法上与后端系统交互,连接器钩子使应用程序能够拦截连接器执行.\n\n##### Hooks(钩子)\n\n**before execute**\n\n在连接器向后端发送请求之前,调用\"before execute\"钩子.\n\n```javascript\nvar connector = MyModel.getDataSource().connector;\nconnector.observe('before execute', function(ctx, next) {\n  // ...\n  next();\n});\n```\n\n要终止调用,请调用`ctx.end(err, result)`,例如:\n\n```javascript\nvar connector = MyModel.getDataSource().connector;\nconnector.observe('before execute', function(ctx, next) {\n  // ...\n  ctx.end(null, cachedResponse);\n});\n```\n\n**after execute**\n\n在连接器从后端接收到响应之后,调用\"after execute\"钩子.\n\n```javascript\nconnector.observe('after execute', function(ctx, next) {\n  // ...\n  next();\n});\n```\n\n##### Context(上下文)\n\n上下文对象包含要操作的钩子的信息.它根据连接器的类型而变化.\n\n_SQL based connectors (MySQL, PostgreSQL, SQL Server, Oracle)_\n\n```json\nbefore: {req: {sql: 'SELECT ...', params: [1, 2]}, end: ...}\n```\n\n```json\nafter: {req: {sql: 'SELECT ...', params: [1, 2]}, res: ..., end: ...}\n```\n\n_MongoDB connector_\n\n```json\nbefore: {req: {command: ..., params: ...}, end: ...}\n```\n\n```json\nafter: {req: {...}, res: {...}, end: ...}\n```\n\nreq.command is the command for the mongodb collection.\nreq.params is the parameters passing to the mongodb driver.\nres is the object received from the mongodb driver.\n\n_REST connector_\n\n```json\nbefore: {req: {...}, end: ...}\n```\n\n```json\nafter: {req: {...}, res: {...}, end: ...}\n```\n\nreq is the object passing to request module.\nres is the object received from request module.\n\n_SOAP connector_\n\n```json\nbefore: {req: {...}, end: ...}\n```\n\n```json\nafter: {req: {...}, res: {...}, end: ...}\n```\n\nreq is the object passing to request module.\nres is the object received from request module.\n\n---\n\n<h4 id=\"5.3\"> 5.3 定义引导脚本 </h4>\n\n##### 概述\n\nLoopBack引导程序,`loopback-boot`执行应用程序初始化(也称为引导).当应用程序启动时,引导程序:\n\n* 配置数据源.\n* 定义自定义模型.\n* 配置模型并将模型附加到数据源.\n* 配置应用程序设置.\n* 运行/server/boot目录中的引导脚本.\n\nloopback-boot模块导出一个初始化应用程序的`boot()`函数.例如,从标准的scaffolded server.js脚本:\n\n```javascript\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\nvar app = module.exports = loopback();\n// ...\nboot(app, __dirname, function(err) {\n  if (err) throw err;\n  // start the server if `$ node server.js`\n  if (require.main === module)\n    app.start();\n});\n```\n\n>  注意:如果您使用应用程序生成器创建应用程序,那么您不需要执行任何操作来引导应用程序 - 上述代码会自动为您架设脚本.\n\n**使用引导脚本**\n\n除了由LoopBack引导程序执行的操作之外,还可以使用引导脚本执行自定义初始化.当应用程序启动时,LoopBack加载`server/boot`目录中的所有脚本.默认情况下,LoopBack按字母顺序加载启动脚本. 您可以使用boot()的options参数自定义引导脚本加载顺序.有关详细信息,请参阅引导脚本加载顺序.\n\n##### 预定义的引导脚本\n\n应用程序生成器将创建以下引导脚本:\n\n* `/server/boot/root.js`在根端点(\"/\")绑定loopback.status()中间件以提供基本状态信息.\n* `/server/boot/authentication.js` - 通过调用app.enableAuth()为应用程序启用身份验证.\n\n**API连接**\n\nAPI Connect LoopBack生成器不会创建启用身份验证的authentication.js启动脚本.要启用用户模型身份验证,您必须自己添加此脚本.\n\n##### 使用boot script generator\n\n除了预定义的引导脚本之外,还可以自定义引导脚本,以在应用程序启动时执行自己的逻辑.\n\n使用引导脚本生成器快速生成引导脚本模板.根据对生成器提示的响应方式,它将为同步或异步引导脚本生成模板:\n\n**Synchronous boot script template**\n\n```javascript\nmodule.exports = function(app) {\n};\n```\n\n**Asynchronous boot script template**\n\n```javascript\nmodule.exports = function(app, cb) {\n  process.nextTick(cb); // Remove if you pass `cb` to an async function yourself\n};\n```\n\n##### 同步和异步引导脚本\n\nLoopBack支持同步和异步引导脚本.使用的类型取决于任务的性质.对于不想阻止程序执行的任务(如数据库请求或网络操作),请使用异步启动脚本.\n\n两种类型的引导脚本都必须导出包含脚本操作的函数.对于两种类型的引导脚本,此函数的签名是类似的,但是异步引导脚本函数需要一个额外的回调参数.\n\n**Bootstrap function arguments**\n\n```javascript\nmodule.exports = function(app, [callback]) {\n  ...\n}\n```\n\n<table>\n  <tbody>\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Required</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>app</td>\n      <td>Object</td>\n      <td>Yes</td>\n      <td>\n        <p>The application context object. Provides a handle the the application, so (for example) you can get model objects:</p>\n        <pre>var User = app.models.User;</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>callback</td>\n      <td>Function</td>\n      <td>Only for asynchronous boot scripts</td>\n      <td>Call the callback function when your application logic is done.</td>\n    </tr>\n  </tbody>\n</table>\n\n**异步引导脚本**\n\n异步引导脚本必须导出具有两个参数的函数:\n\n* 应用程序对象`app`.此对象使您能够访问系统定义的变量和配置.\n* 回调函数,使您能够根据应用程序逻辑来计算响应时间.\n\n>  重要:当脚本完成时,必须调用回调函数将控制权传回应用程序.\n\n例如,此引导脚本打印\"hello world\"并在三秒(3000毫秒)后触发回调函数.\n\n**/server/boot/script.js**\n\n```javascript\nmodule.exports = function(app, callback) {\n  setTimeout(function() {\n    console.log('Hello world');\n    callback();\n  }, 3000);\n};\n```\n\n**同步引导脚本**\n\n同步启动脚本必须导出一个函数,它接受一个参数,应用程序对象`app`.此对象使您能够访问系统定义的变量和配置.\n\n例如,此引导脚本检索在应用程序中注册的所有模型的名称,并将它们显示到控制台.\n\n**/server/boot/script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var modelNames = Object.keys(app.models);\n  var models = [];\n  modelNames.forEach(function(m) {\n    var modelName = app.models[m].modelName;\n    if (models.indexOf(modelName) === -1) {\n      models.push(modelName);\n    }\n  });\n  console.log('Models:', models);\n};\n```\n\n##### 引导脚本加载顺序\n\nLoopBack按文件名的字母顺序执行启动脚本,因此指定启动脚本加载顺序的最简单方法是按照文件名.例如,您可以命名引导脚本01-your-first-script.js,02-your-second-script.js等.这确保LoopBack按照您想要的顺序加载脚本.例如在/server/boot中的默认引导脚本之前.\n\n>  注意: LoopBack按字母顺序处理引导脚本,一次一个(不并行).这适用于同步和异步引导脚本\n\n您还可以在/server/server.js中为boot()函数调用指定加载顺序选项.替换默认的scaffolded函数调用:\n\n**/server/server.js**\n\n```javascript\n...\nboot(app, __dirname);\n...\n```\n\nWith something like this:\n\n```javascript\n...\nbootOptions = { \"appRootDir\": __dirname, \n                \"bootScripts\" : [ \"/full/path/to/boot/script/first.js\", \"//full/path/to/boot/script/second.js\", ... ]\n};\nboot(app, bootOptions);\n...\n```\n\n然后应用程序将按照bootScripts数组中指定的顺序执行脚本,指定每个脚本的完整目录路径.您还可以指定相对目录路径.\n\n>  重要: 使用上面的技术,在bootScripts中指定的自定义引导脚本运行完之后,应用程序将仍然按照字母顺序运行/server/boot中的所有引导脚本(除非您移动或删除它们).\n\n如果需要,您还可以在`bootDirs`属性中指定一个或多个目录,应用程序将在`bootScripts`中指定的那些字符之后,然后在`/server/boot`目录中指定的字母顺序之前,在该目录中运行脚本.\n\n---\n\n<h4 id=\"5.4\"> 5.4 定义中间件 </h4>\n\n##### 概述\n\n中间件是指向REST端点发出HTTP请求时执行的函数.由于LoopBack基于Express,所以LoopBack中间件与Express中间件相同.但是,LoopBack添加了中间件阶段的概念,以清楚地定义中间件被调用的顺序.使用阶段有助于避免标准Express中间件可能出现的顺序问题.\n\nLoopBack支持以下类型的中间件:\n\n* **Pre-processing middleware** - 自定义应用程序逻辑的预处理中间件.请参阅静态中间件的示例.\n* **Dynamic request handling middleware** - 动态请求处理中间件提供动态生成的响应,例如从模板呈现的HTML页面和对REST API请求的JSON响应.请参阅预处理中间件的示例.\n* **Static middleware** - 静态中间件用于提供静态客户端资源.请参阅静态中间件的示例.\n* **Error-handling middleware** - 错误处理中间件处理请求错误.请参见错误处理中间件的示例.\n\n**如何添加中间件**\n\n要向应用程序添加中间件:\n\n1. 指定中间件功能:\n  * 如果使用现有的函数或包,请将代码添加到应用程序或安装包.\n  * 如果要创建新的中间件函数,请编一个.请参阅定义新的中间件处理程序函数.\n\n2. 注册中间件:\n  * 编辑服务器/middleware.json.这是注册中间件的推荐方法.请参阅在middleware.json中注册中间件.\n  * 或者,在应用程序代码中注册中间件.请参阅在JavaScript中注册中间件.\n\n**中间件阶段**\n\nLoopBack定义了许多阶段,对应于应用程序执行的不同方面.注册中间件时,您可以指定应用程序调用它的阶段.请参阅在middleware.json中注册中间件和使用LoopBack API.如果您使用Express API注册中间件(或路由),则它会在路由阶段开始时执行.\n\n预定义的阶段是:\n\n1. `initial` - 中间件可以运行的第一个点.\n2. `session` - 准备会话对象.\n3. `auth` - 处理身份验证和授权.\n4. `parse` - 解析请求体.\n5. `routes` - 实现应用程序逻辑的HTTP路由.通过Express API `app.use`,`app.route`,`app.get`(和其他HTTP动词)注册的中间件在此阶段开始运行.对于子应用程序(如loopback/server/middleware/rest或loopback-explorer)也使用此阶段.\n6. `files` - 服务静态资源.\n7. `final` - 处理错误和未知网址的请求.\n\n每个阶段除了主阶段之外还具有\"before\"和\"after\"子阶段,在阶段名称后面编码,以冒号分隔.例如,对于\"initial\"阶段,中间件按此顺序执行:\n\n1. initial:before \n2. initial\n3. initial:after\n\n单个子阶段中的中间件按注册顺序执行.但是,你不应该依赖这样的顺序.当顺序重要时,始终使用适当的阶段显式地订购中间件.\n\n##### 指定中间件函数\n\n**使用Express中间件**\n\n您可以使用任何与Express兼容的中间件,请参阅Express文档以获取部分列表.\n\n只需安装:\n\n```bash\n$ npm install --save <module-name>\n```\n\n然后简单地注册它,使其根据需要被调用.请参阅在middleware.json中注册中间件和在JavaScript中注册中间件.\n\n**定义一个新的中间件处理函数**\n\n如果没有现有的中间件是你所需要的,你可以轻松地编写自己的中间件处理函数.要在middleware.json中注册中间件函数,需要创建一个返回中间件函数的构造函数(factory)函数.\n\n按照惯例,将中间件函数放在server/middleware目录中.\n\n中间件处理程序函数接受三个参数,或四个参数,如果它是错误处理中间件.一般形式是:\n\n```javascript\nfunction myMiddlewareFunc([err,] req, res, next) {\n    // ...\n}\n```\n\n<table>\n  <tbody>\n    <tr>\n      <th width=\"60\">Name</th>\n      <th width=\"100\">Type</th>\n      <th>Optional?</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>err</td>\n      <td>Object</td>\n      <td>Required for error-handling middleware.</td>\n      <td>\n        <p>Use <em>only</em> for error-handling middleware.</p>\n        <p>Error object, usually an instance or <code>Error</code>; for more information, see <a href=\"Error-object.html\">Error object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>req</td>\n      <td>Object</td>\n      <td>No</td>\n      <td>\n        <p>The Express <a href=\"http://expressjs.com/4x/api.html#request\" class=\"external-link\" rel=\"nofollow\">request object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>res</td>\n      <td>Object</td>\n      <td>No</td>\n      <td>\n        <p>The Express <a href=\"http://expressjs.com/4x/api.html#response\" class=\"external-link\" rel=\"nofollow\">response object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>Function</td>\n      <td>No</td>\n      <td>Call <code>next()</code> after your application logic runs to pass control to the next middleware handler.</td>\n    </tr>\n  </tbody>\n</table>\n\n具有三个参数的中间件函数的示例,调用以在先前处理程序未报告错误时处理请求:\n\n**Regular middleware**\n\n```javascript\nreturn function myMiddleware(req, res, next) {\n    // ...\n};\n```\n\n这里是这个函数的构造函数(工厂)在middleware.json中注册时使用此表单.\n\n**Regular middleware**\n\n```javascript\nmodule.exports = function() {\n  return function myMiddleware(req, res, next) {\n    // ...\n  }\n};\n```\n\n一个具有四个参数的中间件函数的示例,仅当遇到错误时调用.\n\n**Error handler middleware**\n\n```javascript\nfunction myErrorHandler(err, req, res, next) {\n  // ...\n}\n```\n\n**打包中间件函数**\n\n要跨多个项目共享中间件,请创建一个包,用于导出中间件构造函数(factory)函数,该函数接受配置选项并返回中间件处理函数,例如,如下所示.\n\n如果您使用应用程序生成器创建的现有项目,要实现可与其他项目共享的新中间件处理程序,请将中间件构造函数放在server/middleware目录中,例如server/middleware/myhandler.js.\n\n```javascript\nmodule.exports = function(options) {\n  return function customHandler(req, res, next) {\n    // use options to control handler's behavior\n  }\n};\n```\n\n##### 在middleware.json注册中间件\n\n注册中间件的最简单的方法是在server/middleware.json中.此文件指定所有应用程序的中间件函数及其调用阶段.\n\n当使用应用程序生成器创建应用程序时,它会创建一个默认的middleware.json文件,如下所示:\n\n**server/middleware.json**\n\n```json\n{\n  \"initial:before\": {\n    \"loopback#favicon\": {}\n  },\n  \"initial\": {\n    \"compression\": {}\n  },\n  \"session\": {},\n  \"auth\": {},\n  \"parse\": {},\n  \"routes\": {},\n  \"files\": {},\n  \"final\": {\n    \"loopback#urlNotFound\": {}\n  },\n  \"final:after\": {\n    \"errorhandler\": {}\n  }\n}\n```\n\nmiddleware.json中的每个顶级键定义了一个中间件阶段或子阶段,例如\"initial\",\"session:before\"或\"final\".阶段按照它们在文件中出现的顺序运行.\n\n每个阶段都是一个JSON对象,其中包含要在该阶段中调用的每个中间件函数的键.例如,\"loopback/server/middleware/favicon\"或\"compression\".\n\n一般来说,每个阶段都有以下语法:\n\n```javascript\nphase[:sub-phase] : {\n middlewarePath : {\n   [ enabled: [true | false] ]\n   [, name: nameString ]\n   [, params : paramSpec ]\n   [, methods: methodSpec ]\n   [ paths : routeSpec ]\n }\n};\n```\n\n其中:\n\n* _phase_:是上面列出的预定义阶段之一(初始,会话,auth等)或自定义阶段,请参阅添加自定义阶段.\n* _sub-phase_:(可选)可以在`before`或`after`.\n* _name_:可选中间件名称.请参阅下面的中间件配置属性.\n* _middlewarePath_:中间件函数的路径.请参阅下面的中间件功能路径.\n* _paramSpec_:中间件参数的值,通常为JSON对象.请参阅下面的中间件配置属性.\n* _methodSpec_:HTTP方法,例如'GET','POST'和'PUT'.如果不存在,则适用于所有方法.\n* _routeSpec_:触发中间件的REST端点.\n\n**中间件函数的路径**\n\n通过以下方式指定中间件函数(middlewarePath)的路径:\n\n* 对于安装在项目中的外部中间件模块,只需使用模块的名称,例如`compression`.\n* 对于安装在项目中的模块中的脚本,请使用模块的路径,例如loopback/server/middleware/rest.\n* 对于具有自定义中间件函数的脚本,请使用相对于middleware.json的路径,例如`./middleware/custom`.\n* 脚本文件的绝对路径(不推荐).\n\n此外,您可以使用速记格式`{_module _}＃{_ fragment_}`,其中fragment是:\n\n* 由模块导出的属性,例如`loopback＃favicon`解析为`require('loopback').favicon`.\n* 模块的`server/middleware`目录中的文件,例如`require('loopback/server/middleware/ favicon')`.\n* 模块中间件目录中的文件,例如`require('loopback/middleware/favicon')`.\n\n**中间件配置属性**\n\n您可以在每个中间件部分指定以下属性.它们都是可选的:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>String</td>\n      <td>An optional name for the entry. It can be used to identify an entry within the same phase/path for the purpose of merging</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>enabled</td>\n      <td>Boolean</td>\n      <td>\n        <p>Whether to register or enable the middleware. You can override this property in environment-specific files, for example to disable certain middleware when running in production. For more information, see <a href=\"Defining-middleware.html\">Environment-specific configuration</a></p>\n      </td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td>params</td>\n      <td>Object or Array</td>\n      <td>\n        <p>Parameters to pass to the middleware handler (constructor) function. Most middleware constructors take a single \"options\" object parameter; in that case the&nbsp;<code>params</code>&nbsp;value is that object.</p>\n        <p>To specify a project-relative path (for example, to a directory containing static assets), start the string with the prefix&nbsp;<code>$!</code>. Such values are interpreted as paths relative to the file&nbsp;<code>middleware.json</code>. &nbsp;</p>\n        <p>See examples below.</p>\n      </td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>methods</td>\n      <td>String[]</td>\n      <td>Specifies the HTTP methods, such as 'GET', 'POST', and 'PUT'. If not present, it will apply to all methods.</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>paths</td>\n      <td>String[]</td>\n      <td>Specifies the REST endpoint(s) that trigger the middleware. In addition to a literal string, route can be a path matching pattern, a regular expression, or an array including all these types. For more information, see the&nbsp;<a href=\"http://expressjs.com/4x/api.html#app.use\" class=\"external-link\" rel=\"nofollow\">app.use (Express documentation)</a>.&nbsp;</td>\n      <td>Triggers on all routes</td>\n    </tr>\n    <tr>\n      <td>optional</td>\n      <td>Boolean</td>\n      <td>Specify whether the middleware is optional. Optional middleware do not throw, even if they are not installed or cannot be resolved in the file system.</td>\n      <td>N/A</td>\n    </tr>\n  </tbody>\n</table>\n\n采用单个\"options\"对象参数的典型中间件函数示例:\n\n```json\n\"compression\": {\n   \"params\": {\n     \"threshold\": 512\n   }\n}\n```\n\n需要多个参数的中间件函数示例,其中使用参数数组:\n\n```json\n\"morgan\": {\n   \"params\": [\"dev\", {\n     \"buffer\": true\n   }]\n }\n```\n\n静态中间件的条目,用于从项目根目录中的客户端目录提供内容:\n\n```json\n//...\n\"files\": {\n  \"loopback#static\": {\n    \"params\": \"$!../client\"\n  }\n}\n//...\n```\n\n静态中间件的条目,用于从项目根目录中的多个目录提供内容:\n\n```json\n//...\n\"files\": {\n  \"loopback#static\": [{\n    \"name\": \"x\",\n    \"paths\": [\"/x\"],\n    \"params\": \"$!../client/x\"\n  },\n  {\n    \"name\": \"y\",\n    \"paths\": [\"/y\"],\n    \"params\": \"$!../client/y\"\n  }]\n}\n//...\n```\n\n**在值中使用变量**\n\n对于任何中间件配置属性,可以使用以下语法在值中指定变量:\n\n`${_ var_}`\n\n其中var是app对象的属性.这些属性包括:\n\n* 应用程序范围属性,如config.json中定义的属性.\n* Express应用程序对象属性.\n\nFor example, the following middleware.json configuration will load LoopBack’s built-in rest middleware (loopback.rest) during the routes phase at the path resolved by app.get('restApiRoot'), which defaults to /api.(_译注:暂时保留原文,翻译不好_)\n\n```json\n{\n  \"routes\": {\n    \"loopback#rest\": {\n      \"paths\": [\"${restApiRoot}\"]\n    }\n  }\n}\n```\n\nThe following example loads hypothetical middleware named environmental during the routes phase at the return value of app.get(env), typically either /development or /production.(_译注:暂时保留原文,翻译不好_)\n\n```json\n{\n  \"routes\": {\n    \"environmental\": {\n      \"paths\": \"${env}\"\n    }\n  }\n}\n```\n\n**添加自定义阶段**\n\n除了middleware.json中的预定义阶段之外,您还可以通过添加新的顶级键来添加自己的自定义阶段.\n\n例如,下面是一个middleware.json文件,定义了\"parse\"之后和\"routes\"之前的一个新阶段\"log\":\n\n**server/middleware.json**\n\n```json\n{\n  ...\n  \"parse\": {},\n  \"log\": { ... },\n  \"routes\": {}\n  ...\n}\n```\n\n**环境特定配置**\n\n您可以通过`middleware.local.js,middleware.local.json和middleware.env_.js或middleware.env_.json`进一步自定义配置,其中env是NODE_ENV环境变量(通常是开发或生产)的值.\n\n##### 用javascript注册中间件\n\n您可以在JavaScript代码中注册中间件:\n\n* LoopBack API,您可以指定希望中间件执行的阶段.\n* Express API,中间件在路由阶段的开始处执行.\n\n**使用LoopBack API**\n\n要使用LoopBack阶段API注册中间件,请使用以下应用程序方法:\n\n* middleware()\n* middlewareFromConfig()\n* defineMiddlewarePhases()\n\n例如:\n\n**server/server.js**\n\n```javascript\nvar loopback = require('loopback');\nvar morgan = require('morgan');\nvar errorhandler = require('error-handler');\n\nvar app = loopback();\n\napp.middleware('routes:before', morgan('dev'));\napp.middleware('final', errorhandler());\napp.middleware('routes', loopback.rest());\n```\n\n**使用Express API**\n\n>  重要: 当您使用Express API注册中间件时,它始终在路由阶段开始时执行.\n\n您可以通过调用app.use()为指定路由的所有HTTP请求指定中间件,在主应用程序脚本文件/server/server.js中使用Express定义中间件的\"常规方式\".您还可以使用app.get()仅指定GET请求中间件,使用app.post()指定仅针对POST请求的中间件,等等.有关更多信息,请参阅Express.ini文档中的app.METHOD.\n\n这里是app.use()的一般签名:\n\n```javascript\napp.use([route], function([err,] req, res, next) {\n  //...\n  next();\n});\n```\n\n像往常一样,app是LoopBack应用程序对象: app = loopback（）.\n\n参数为:\n\n* route,一个可选参数,指定中间件绑定到的URI路由或\"装载路径\".当应用程序在此路由接收到HTTP请求时,它调用(或触发)处理函数.\n* 中间件处理函数(或只是\"中间件函数\").请参阅定义新的中间件处理程序函数.\n\n例如：\n\n**server/server.js**\n\n```javascript\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\n\nvar app = module.exports = loopback();\n\n// Bootstrap the application, configure models, datasources and middleware.\n// Sub-apps like REST API are mounted via boot scripts.\nboot(app, __dirname);\n// this middleware is invoked in the \"routes\" phase\napp.use('/status', function(req, res, next) {\n  res.json({ running: true });\n});\n```\n\n**指定路由**\n\n`_route_`参数是一个字符串,指定将触发中间件的REST端点.如果不提供参数,那么中间件将在所有路由上触发.除了字符串,`_route_`可以是路径匹配模式,正则表达式或包含所有这些类型的数组.有关更多信息,请参阅app.use()的Express文档.\n\n例如，要为以\"/greet\"开头的所有端点注册中间件:\n\n**/server/server.js**\n\n```javascript\napp.use('/greet', function(req, res, next ) { \n  //...\n});\n```\n\n上述中间件由以\"/greet\"开头的所有路由触发,因此\"/greet/you\",\"greet/me/and/you\"将触发它.\n\n要为所有端点注册中间件:\n\n**server/server.js or server/boot/scripts.js**\n\n```javascript\napp.use(function(req, res, next ) {\n  //...\n});\n```\n\n**Caveats(警告)**\n\n使用中间件时有一些事情要注意,主要是中间件声明顺序.使用\"全部\"路由时,请注意中间件注册的顺序.\n\n例如:\n\n**server/server.js**\n\n```javascript\n//...\napp.get('/', function(req, res, next) {\n  res.send('hello from `get` route');\n});\napp.use(function(req, res, next) {\n  console.log('hello world from \"catch-all\" route');\n  next();\n});\napp.post('/', function(req, res, next) {\n  res.send('hello from `post` route')\n});\n//...\n```\n\n在这种情况下,由于GET /中间件结束响应链,所以在发出get请求时,不会触发\"catch-all\"中间件.但是,当向/发出POST请求时,\"catch-all\"路由会被触发,因为它在post路由之前被声明.执行POST将显示来自\"catch-all\"路由和POST /路由的控制台消息.\n\n##### 例子\n\n**静态中间件**\n\n静态中间件,用于从项目根目录中的client目录提供内容:\n\n```json\n//...\n\"files\": {\n  \"loopback#static\": {\n    \"params\": \"$!../client\"\n  }\n}\n//...\n```\n\n**预处理中间件**\n\n使用预处理中间件为应用程序中的各种端点应用自定义逻辑.通过注册处理程序函数以在对特定端点或多个端点发出HTTP请求时执行某些操作来执行此操作.\n\n>  重要：始终在路由之前的阶段注册预处理中间件,例如初始或解析.\n\n预处理中间件必须在处理程序函数的结尾调用next(),以将控制权传递给下一个中间件.如果你不这样做,你的应用程序将基本上\"冻结\".从技术上讲,next()不必发生在函数的结尾(例如,它可能发生在if / else块),但是处理函数必须最终调用它.\n\n例如:\n\n```javascript\nmodule.exports = function() {\n  return function tracker(req, res, next) {\n    console.log('Request tracking middleware triggered on %s', req.url);\n    var start = process.hrtime();\n    res.once('finish', function() {\n      var diff = process.hrtime(start);\n      var ms = diff[0] * 1e3 + diff[1] * 1e-6;\n      console.log('The request processing time is %d ms.', ms);\n    });\n    next();\n  };\n};\n```\n\n此中间件通知服务器显示在所有应用程序路由上处理传入HTTP请求所花费的时间.\n\n你可以看到这个中间件在使用LoopBack入门的基本LoopBack应用程序(或任何标准的LoopBack应用程序):\n\n1. 将上面的代码添加到server/middleware/tracker.js.\n2. 编辑(或创建)server/middleware.json并在\"初始\"阶段注册新的中间件.\n   \n   **server/middleware.json**\n   \n   ```json\n   {\n      \"initial\": {\n      \"./middleware/tracker\": {}\n      }\n   }\n   ```\n\n3. 启动应用程序:`node .`\n4. 访问`http://localhost:3000`.\n\nIn the console, you will see (for example):\n\n```\n...\nRequest tracking middleware triggered on /.\nThe request processing time is 4.281957 ms. //your results will vary\n```\n\n**路由中间件**\n\n对于提供JSON的路由,最佳实践是创建一个新模型并将路由实现为远程方法.对于提供非JSON响应的路由,最佳实践是在server.js或引导脚本中为它们定义标准的\"Express方式\".有关详细信息,请参阅路由和路由(Express文档).\n\n>  注意: 如果在路由或路由上添加中间件,在阶段之后,它将不会在路由匹配后执行.相反,它将被忽略,因为路由已经匹配.\n\n**错误处理中间件**\n\n使用错误处理中间件处理请求错误.虽然您可以自由注册任何数量的错误处理中间件,但请务必在\"final\"阶段注册它们.LoopBack默认注册两个错误处理中间件:\n\n* `urlNotFound`中间件将所有到达中间件的请求转换为状态为404的错误对象,以使404错误响应与\"通常\"错误响应一致.\n* `errorhandler`中间件来自errorhandler模块,以前在Express v.3中作为`express.errorHandler`可用.有关自定义此错误处理程序的信息.请参阅自定义REST错误处理.\n\n自定义错误处理中间件的示例:\n\n```javascript\nmodule.exports = function() { \n  return function logError(err, req, res, next) { \n    console.log('ERR', req.url, err); \n  };\n};\n```\n\n要注册这个中间件:\n\n1. Add the code above to /server/middleware/log-error.js.\n2. Edit /server/middleware.json and register the new middleware in the “final” phase: \n\n   ```json\n   {\n     \"final\": {\n     \"./middleware/log-error\": {}\n     }\n   }\n   ```\n\n3. Start the application.\n\n4. Load http://localhost:3000/url-does-not-exist in your browser.\n\n---\n\n<h4 id=\"5.5\"> 5.5 使用当前上下文 </h4>\n\n>  警告: 不推荐使用当前上下文功能!loopback-context的当前实现基于已知存在许多问题的模块continuation-local-storage(例如,参见issue＃59).因此,loopback-context在许多情况下不工作,从LoopBack的问题跟踪器中报告的问题可以看出.参见loopback issue＃1495更新和一个替代解决方案.\n\nLoopBack应用程序有时需要访问上下文信息来实现业务逻辑,例如:\n\n* 访问当前登录的用户.\n* 访问HTTP请求(如URL和标头).\n\n调用LoopBack模型方法的典型请求通过具有异步回调链的多个层传递.并不总是可以通过方法参数传递所有信息.\n\n##### Error messages\n\nLoopBack 3.0删除了当前上下文API.使用当前上下文的应用程序在收到其第一个HTTP请求时将打印以下错误消息:\n\n```\nUnhandled error for request GET /api/Users:\nError: remoting.context option was removed in version 3.0.\nFor more information, see https://loopback.io/doc/en/lb3/Using-current-context.html\nfor more details.\n    at restApiHandler (.../node_modules/loopback/server/middleware/rest.js:44:15)\n    at Layer.handle [as handle_request] (.../node_modules/express/lib/router/layer.js:95:5)\n    ...\n```\n\n要删除此警告,请禁用由内置REST处理程序添加的上下文中间件.将server/config.json中的remoting.context属性设置为false,例如:\n\n**server/config.json**\n\n```json\n{\n  \"remoting\": {\n    \"context\": false,\n    ...\n  },\n  ...\n}\n```\n\n如果您的应用程序依赖于loopback.getCurrentContext,请按照以下说明重新使用您的代码直接使用loopback-context.\n\n##### 安装loopback-context\n\n```bash\n$ npm install --save loopback-context\n```\n\n##### 配置上下文传播\n\n要设置LoopBack应用程序为每个传入的HTTP请求创建一个新的上下文,请在server/middleware.json中配置per-context中间件,如下所示:\n\n```json\n{\n  \"initial\": {\n    \"loopback-context#per-request\": {},\n  }\n  ...\n}\n```\n\n>  重要:默认情况下,HTTP req/res对象不会设置到当前上下文.您需要将enableHttpContext设置为true以启用req/res对象的自动填充.\n\n##### 使用当前上下文\n\n一旦启用上下文传播,就可以使用LoopBackContext.getCurrentContext()访问当前上下文对象.上下文将在中间件(如果它在上下文中间件之后加载),远程钩子,模型钩子和自定义方法中可用.\n\n```javascript\nvar LoopBackContext = require('loopback-context');\n\nMyModel.myMethod = function(cb) {\n  var ctx = LoopBackContext.getCurrentContext();\n  // Get the current access token\n  var accessToken = ctx && ctx.get('accessToken');\n  ...\n  // Set more information on current context\n  ctx.set('foo', { bar: 'val' } );\n\n  ...\n}\n```\n\n##### 在远程方法中使用当前授权用户\n\n在高级用例中,例如,当您想要添加自定义中间件时,必须在中间件链中的正确位置(在依赖于LoopBackContext.getCurrentContext的中间件之前)添加上下文中间件.\n\n>  重要: LoopBackContext.perRequest()检测在相同请求上多次调用时的情况,并在后续运行中立即返回.\n\n这里的示例代码使用中间件函数将当前认证的用户放入上下文中,以便远程方法可以使用它:\n\n**/server/server.js**\n\n```javascript\n...\n// -- Add your pre-processing middleware here --\napp.use(LoopBackContext.perRequest());\napp.use(loopback.token());\napp.use(function setCurrentUser(req, res, next) {\n  if (!req.accessToken) {\n    return next();\n  }\n  app.models.UserModel.findById(req.accessToken.userId, function(err, user) {\n    if (err) {\n      return next(err);\n    }\n    if (!user) {\n      return next(new Error('No user with this access token was found.'));\n    }\n    var loopbackContext = LoopBackContext.getCurrentContext();\n    if (loopbackContext) {\n      loopbackContext.set('currentUser', user);\n    }\n    next();\n  });\n});\n\n// boot scripts mount components like REST API\n...\n```\n\n**/common/models/YourModel.js**\n\n```javascript\nvar loopback = require('loopback');\nvar LoopBackContext = require('loopback-context');\nmodule.exports = function(YourModel) {\n  ...\n  //remote method\n  YourModel.someRemoteMethod = function(arg1, arg2, cb) {\n    var ctx = LoopBackContext.getCurrentContext();\n    var currentUser = ctx && ctx.get('currentUser');\n    console.log('currentUser.username: ', currentUser.username); // voila!\n    ...\n    cb(null);\n  };\n  ...\n};\n```\n\n---\n\n<h4 id=\"5.6\"> 5.6 事件 </h4>\n\nLoopBack app对象是一个Node EventEmitter,因此具有app.emit()和app.on()方法.\n\n除了标准的Node事件,LoopBack应用程序和模型还能发起其他事件.\n\n##### 应用程序事件\n\n默认情况下,使用应用程序生成器创建的应用程序在运行引导脚本后启动时会发出\"started\"事件.\n\n##### 模型事件\n\n所有模型发出以下事件:\n\n默认情况下,基本的LoopBack模型对象具有属性和方法\"mixed in\":\n\n* 包含对象 - 允许您加载多个对象的关系并优化请求数.\n* 可验证对象 - 提供验证方法.请参阅验证模型数据。\n\n当定义模型之间的关系时,RelationMixin对象对象也会混合到模型对象中.\n\n**附件**\n\n`Model`已附加到`app`后发出.\n\n**dataSourceAttached**\n\n在`Model `已附加到`DataSource`之后发出.\n\n**set(设置)**\n\n设置模型属性时发出,参数:inst,模型实例,对象.\n\n例如：\n\n```javascript\nMyModel.on('set', function(inst) {\n  console.log('model with id %s has been changed', inst.id);\n  // => model with id 1 has been changed\n});\n```\n\nArguments: data, an object.\n\n##### PersistedModel事件\n\nPersistedModels还有一个更改的事件,监听模型更改.\n\n例如:\n\n```javascript\nMyPersistedModel.on('changed', function(obj) {\n   console.log(obj) // => the changed model\n});\n```\n\n##### User模型事件\n\n`User `模型User.resetPassword()方法发出了\"resetPasswordRequest\"事件.\n\n---\n\n<h4 id=\"5.7\"> 5.7 使用promises </h4>\n\n暂不翻译......\n\n--\n\n<h4 id=\"6\"> 6 管理用户 </h4>\n\n>  概要: LoopBack的内置用户模型提供基本的用户管理功能.\n\n##### 概述\n\nLoopBack的内置用户模型提供基本的用户管理功能,如:\n\n* 通过电子邮件注册和确认.\n* 登录和注销.\n* 创建访问令牌.\n* 重设密码.\n\n>  重要: 您必须创建自己的自定义模型(命名为\"客户\"或\"客户端\"),它扩展了内置用户模型,而不是直接使用内置用户模型.内置的用户模型提供了大量常用的功能,您可以通过您的自定义模型使用.此外,LoopBack在单个应用程序中不支持基于用户模型的多个模型.也就是说,在单个应用程序中,不能有多个模型从内置User模型派生.\n\n##### 创建和验证(授权)用户\n\n创建和验证用户的基本过程是:\n\n1. 使用User.create()方法注册一个新用户,继承自通用的PersistedModel对象.有关详细信息,请参阅注册用户.\n2. 通过调用User.login()登录用户以获取访问令牌.有关详细信息,请参阅登录用户.\n3. 使用访问令牌进行后续的API调用.在HTTP头中提供访问令牌或作为REST API调用的查询参数,如使用访问令牌进行身份验证请求中所示.\n\n**性能提示**\n\n要在登录和创建用户期间提高性能,请尝试本地化安装bcrypt.\n\n```bash\n$ npm install --save bcrypt\n```\n\n##### 理解内置User模型\n\n默认情况下,LoopBack应用程序具有由user.json定义的内置用户模型(此文件是LoopBack框架的一部分,不要修改它,而是遵循扩展内置模型中的过程).\n\n>  提示:有关LoopBack用户模型如何执行身份验证的基本介绍，请参阅用户模型身份验证简介.\n\n**默认访问控制**\n\n内置的User模型有如下的ACL:\n\n```json\n{\n  \"name\": \"User\",\n  \"properties\": {\n    ...\n    \"acls\": [{\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"DENY\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"create\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$owner\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"deleteById\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"login\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"logout\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$owner\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"findById\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$owner\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"updateAttributes\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"confirm\"\n    }, {\n      \"principalType\": \"ROLE\",\n      \"principalId\": \"$everyone\",\n      \"permission\": \"ALLOW\",\n      \"property\": \"resetPassword\",\n      \"accessType\": \"EXECUTE\"\n    }],\n    //...\n  }\n}\n```\n\n上述ACL拒绝所有操作,然后选择性地允许:\n\n* 任何人都创建一个新用户(用户实例).\n* 任何人登录,注销,确认其身份,并重置自己的密码.\n* 用户对自己的用户记录(实例)执行deleteById,findById和updateAttributes.\n\n>  重要提示: 无法使用ACL生成器直接修改内置模型(例如User模型).但是,您可以创建扩展内置用户模型的自定义模型,然后使用ACL生成器定义添加到默认用户模型的访问控制.例如,您可以创建扩展内置用户模型的客户或客户端模型,然后使用该工具修改该模型的ACL.由于模型不从其基本模型继承ACL,因此必须为新的自定义模型定义ACL.\n\n**User领域**\n\nsee [Partitioning users with realms](http://loopback.io/doc/en/lb3/Partitioning-users-with-realms.html).\n\n---\n\n<h4 id=\"6.1\"> 6.1 注册用户 </h4>\n\n>  概要: 内置用户模型提供了注册新用户并确认其电子邮件地址的方法.\n\nLoopBack用户模型提供了注册新用户和确认其电子邮件地址的方法.您还可以使用loopback-component-passport模块将登录信息与Facebook,Google和其他第三方提供商集成.\n\n##### 使用LoopBack User模型注册用户\n\n**创建新用户**\n\n通过添加模型实例创建用户(注册用户),与任何其他模型相同,电子邮件和密码是唯一必需的属性.\n\n**/boot/server/my-boot-script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var User = app.models.User;\n  User.create({email: 'foo@bar.com', password: 'bar'}, function(err, userInstance) {\n    console.log(userInstance);\n  });\n  //...\n```\n\n通过REST,使用`POST / users`端点来创建新的用户实例,例如:\n\n**REST**\n\n```\ncurl -X POST -H \"Content-Type:application/json\"         \\\n-d '{\"email\": \"me@domain.com\", \"password\": \"secret\"}'   \\\nhttp://localhost:3000/api/users\n```\n\n**添加其他注册约束**\n\n通常,您可能希望在注册过程中添加方法,例如查看给定的用户名是否可用,或者电子邮件地址是否已注册.一个好的方法是在User对象上添加方法作为beforeRemote钩子.有关详细信息,请参阅远程钩子.\n\n**验证邮件地址**\n\n通常,应用程序将要求用户在能够登录之前验证其电子邮件地址.这将向用户发送一封电子邮件,其中包含用于验证其地址的链接.一旦用户跟随链接,他们将被重定向到web根(\"/\"),并将能够正常登录.\n\n要强制实施此约束,请将emailVerificationRequired用户模型属性设置为true,在server/model-config.json中.\n\n**server/model-config.json**\n\n```json\n...\n\"user\": {\n    \"dataSource\": \"db\",\n    \"public\": true,\n    \"options\": {\n      \"emailVerificationRequired\": true\n    }\n...\n```\n\n在REST上,使用GET /users/confirm端点来验证用户的电子邮件地址.有关详细信息,请参阅用户REST API.\n\n此示例在调用create()方法后执行的User模型上创建remote钩子.\n\n>  重要: 在使用下面的示例之前,您必须设置User模型以及Mail数据源.\n\n**/common/models/user.js**\n\n```javascript\nvar config = require('../../server/config.json');\nvar path = require('path');\n\nmodule.exports = function(user) {\n  //send verification email after registration\n  user.afterRemote('create', function(context, userInstance, next) {\n    console.log('> user.afterRemote triggered');\n\n    var options = {\n      type: 'email',\n      to: userInstance.email,\n      from: 'noreply@loopback.com',\n      subject: 'Thanks for registering.',\n      template: path.resolve(__dirname, '../../server/views/verify.ejs'),\n      redirect: '/verified',\n      user: user\n    };\n\n    userInstance.verify(options, function(err, response, next) {\n      if (err) return next(err);\n\n      console.log('> verification email sent:', response);\n\n      context.res.render('response', {\n        title: 'Signed up successfully',\n        content: 'Please check your email and click on the verification link ' -\n            'before logging in.',\n        redirectTo: '/',\n        redirectToLinkText: 'Log in'\n      });\n    });\n  });\n...\n```\n\n##### 通过第三方系统注册用户\n\n使用LoopBack Passport组件(loopback-component-passport)使用户能够使用以下来源的现有凭据注册和登录应用程序:\n\n* Facebook\n* Google\n* Twitter\n\n有关详细信息,请参阅[使用Passport进行第三方登录](http://loopback.io/doc/en/lb3/Third-party-login-using-Passport.html)\n\n---\n\n<h4 id=\"6.2\"> 6.2 用户登录 </h4>\n\n>  概要:内置用户模型提供登录用户,注销用户和重置用户密码的方法.\n\n##### 使用LoopBack User模型\n\n**登录**\n\n通过调用User.login()方法登录(验证)用户,并提供包含密码和电子邮件或用户名属性作为第一个参数的对象.该方法返回访问令牌.\n\n此示例在引导脚本中创建一个路由以处理登录请求:\n\n**/server/boot/routes.js**\n\n```javascript\n...\napp.post('/login', function(req, res) {\n  User.login({\n    email: req.body.email,\n    password: req.body.password\n  }, 'user', function(err, token) {\n    if (err) {\n      res.render('response', { //render view named 'response.ejs'\n        title: 'Login failed',\n        content: err,\n        redirectTo: '/',\n        redirectToLinkText: 'Try again'\n      });\n      return;\n    }\n\n    res.render('home', { //login user and render 'home' view\n      email: req.body.email,\n      accessToken: token.id\n    });\n  });\n});\n//...\n```\n\n>  重要: User.login()有一个可选的第二个参数,它是一个字符串或一个字符串数组.为此参数传入\"user\"以包括用户信息.对于REST apis,使用?include = user.\n\n有关完整的示例,请参阅loopback-example-user-management中的routes.js.\n\n您还可以通过提供具有以秒为单位的值的ttl属性来指定访问令牌的有效期.\n\n例如:\n\n**Boot script**\n\n```javascript\nvar TWO_WEEKS = 60 * 60 * 24 * 7 * 2;\nUser.login({\n  email: 'me@domain.com',           // must provide email or \"username\"\n  password: 'secret',               // required by default\n  ttl: TWO_WEEKS                    // keep the AccessToken alive for at least two weeks\n}, function (err, accessToken) {\n  console.log(accessToken.id);      // => GOkZRwg... the access token\n  console.log(accessToken.ttl);     // => 1209600 time to live\n  console.log(accessToken.created); // => 2013-12-20T21:10:20.377Z\n  console.log(accessToken.userId);  // => 1\n});\n```\n\n如果登录尝试不成功,将按以下格式返回错误.\n\n```json\n{\n  \"status\": 401,             // or 400 if the credentails object is invalid\n  \"message\": \"login failed\"  // could also be \"realm is required\" or \"username or email is required\"\n}\n```\n通过REST,使用POST /users/login端点.\n\n例如:\n\n```bash\ncurl -X POST -H \"Content-Type:application/json\" \\\n-d '{\"email\": \"me@domain.com\", \"password\": \"secret\", \"ttl\": 1209600000}' \\\nhttp://localhost:3000/api/users/login\n```\n返回值是具有id属性的JSON对象,该属性是在后续请求中使用的访问令牌.\n\n例如:\n\n```json\n{\n  \"id\": \"GOkZRwgZ61q0XXVxvxlB8TS1D6lrG7Vb9V8YwRDfy3YGAN7TM7EnxWHqdbIZfheZ\",\n  \"ttl\": 1209600,\n  \"created\": \"2013-12-20T21:10:20.377Z\",\n  \"userId\": 1\n}\n```\n\n**登出**\n\n使用User.logout()方法登出用户,提供用户的访问令牌作为参数.\n\n在下面的示例中,创建了处理登出请求的路由:\n\n**/server/boot/routes.js**\n\n```javascript\n//...\n//log a user out\napp.get('/logout', function(req, res, next) {\n  if (!req.accessToken) return res.sendStatus(401); //return 401:unauthorized if accessToken is not present\n  User.logout(req.accessToken.id, function(err) {\n    if (err) return next(err);\n    res.redirect('/'); //on successful logout, redirect\n  });\n});\n//...\n```\n\n通过REST,使用POST /users/logout端点,再次在POST有效内容的sid属性中提供用户的访问令牌.\n\n要通过REST API销毁访问令牌，请使用POST /users/logout端点.\n\n```bash\nACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK\nVERB=POST # any verb is allowed\n\n# Authorization Header\ncurl -X VERB -H \"Authorization: $ACCESS_TOKEN\" \\\nhttp://localhost:3000/api/users/logout\n\n# Query Parameter\ncurl -X VERB http://localhost:3000/api/users/logout?access_token=$ACCESS_TOKEN\n```\n\n##### 重置用户密码\n\n使用User.resetPassword()方法重置用户的密码.此方法为临时登录创建一个短期访问令牌,允许用户在忘记时更改密码.\n\n例如,在下面的routes.js(在loopback-example-user-management中),创建一个路由: /request-password-reset来处理密码重置请求:\n\n**/server/boot/routes.js**\n\n```javascript\n//send an email with instructions to reset an existing user's password\napp.post('/request-password-reset', function(req, res, next) {\n  User.resetPassword({\n    email: req.body.email\n  }, function(err) {\n    if (err) return res.status(401).send(err);\n    res.render('response', {\n      title: 'Password reset requested',\n      content: 'Check your email for further instructions',\n      redirectTo: '/',\n      redirectToLinkText: 'Log in'\n    });\n  });\n});\n//...\n```\n\n您必须处理\"resetPasswordRequest\"事件,才能将包含由resertPassword()方法生成的短期访问令牌的重置电子邮件发送给正确的用户(请参见下面的示例):\n\n>  重要: 下面的示例假设您已经设置了User模型和Mail数据源.\n\n**/common/models/user.js**\n\n```javascript\n//...\n//send password reset link when password reset requested\nuser.on('resetPasswordRequest', function(info) {\n  var url = 'http://' - config.host - ':' - config.port - '/reset-password';\n  var html = 'Click <a href=\"' - url - '?access_token=' -\n      info.accessToken.id - '\">here</a> to reset your password';\n  //'here' in above html is linked to : 'http://<host:port>/reset-password?access_token=<short-lived/temporary access token>'\n  user.app.models.Email.send({\n    to: info.email,\n    from: info.email,\n    subject: 'Password reset',\n    html: html\n  }, function(err) {\n    if (err) return console.log('> error sending password reset email');\n    console.log('> sending password reset email to:', info.email);\n  });\n});\n//...\n```\n\n并且当用户按照链接重置密码时,临时访问令牌用于使用updateAttribute()方法查找用户和更新密码,如下所示:\n\n**/server/boot/routes.js**\n\n```javascript\n//...\nUser.findById(req.accessToken.userId, function(err, user) {\n   if (err) return res.sendStatus(404);\n   user.updateAttribute('password', req.body.password, function(err, user) {\n   if (err) return res.sendStatus(404);\n     console.log('> password reset processed successfully');\n     res.render('response', {\n       title: 'Password reset success',\n       content: 'Your password has been reset successfully',\n       redirectTo: '/',\n       redirectToLinkText: 'Log in'\n     });\n   });\n});\n//...\n```\n\n了解详细的例子,请看loopback-example-user-management中的routes.js.\n\n##### 通过第三方系统账号登录\n\n您可以与支持OAuth的第三方系统(例如Google,Facebook或Twitter)集成,而不必使用LoopBack的用户系统.\n\n了解更多信息,请看 [Third-party login using Passport](http://loopback.io/doc/en/lb3/Third-party-login-using-Passport.html).\n\n---\n\n<h4 id=\"6.3\"> 6.3 使用领域来分区用户 </h4>\n\n默认情况下,LoopBack用户模型管理全局命名空间中的所有用户.它不隔离不同的应用程序.在某些情况下,您可能需要将用户划分到多个命名空间,以使不同的应用程序具有单独的用户.LoopBack使用领域来支持:\n\n* 属于单个全局域(或无域)的用户和应用程序.\n* 将用户和应用程序分布到多个领域.用户或应用程序只能属于一个领域.每个领域可以有很多用户和许多应用程序.\n* 每个应用程序是唯一的领域,每个用户属于应用程序(通过领域).\n\n每个应用程序或用户实例在领域中仍具有唯一的ID.当应用程序/用户注册时,它可以分配到一个领域.`User.login()`函数:\n\n* Honors the realm property from the user credential(_译注:保留原文_).\n* 允许从用户名/电子邮件的前缀中提取领域.\n\nUser模型中的两个设置控制领域：\n\n* realmRequired(Boolean): 默认值为false.\n* realmDelimiter(string): 如果配置,电子邮件或用户名可以前缀为<realm><realmDelimiter><username或email>,例如myRealm: john或myRealm:john@sample.com.如果不存在,将不检查用户名或电子邮件的前缀.\n\n例如:\n\n**server/model-config.json**\n\n```json\n\"User\": {\n  \"dataSource\": \"db\",\n  \"options\": {\n    \"realmRequired\": true,\n    \"realmDelimiter\": \":\"\n  }\n},\n```\n\n启用领域时,必须在调用User.create()时提供领域属性,例如:\n\n```javascript\nUser.create({\n  realm: 'myRealm',\n  username: 'john',\n  email: 'john@sample.com',\n  password: 'my-password'\n}, callback);\n```\n\n要登录领域内的用户,凭证还应包括领域属性.\n\n```javascript\nUser.login({\n  realm: 'myRealm',\n  username: 'john',\n  password: 'my-password'\n}, callback);\n```\n\n如果配置了realmDelimiter(例如,\":\"),则登录名允许将领域作为前缀传递给用户名或电子邮件.\n\n```javascript\nUser.login({\n  username: 'myRealm:john',\n  password: 'my-password'\n}, callback);\n```\n\n---\n\n<h4 id=\"7\"> 7. 身份验证,授权和权限 </h4>\n\n>  概要:LoopBack包括内置的基于令牌的身份验证.\n\n大多数应用程序需要控制谁可以访问数据或调用服务.通常,这涉及要求用户登录以访问受保护的数据,或者需要用于其他应用的授权令牌以访问受保护的数据.\n\nLoopBack应用程序通过模型访问数据,因此控制对数据的访问意味着对模型施加限制.也就是说,指定谁或什么可以读/写数据或在模型上执行方法.\n\n当您使用LoopBack应用程序生成器(application generator)创建应用程序时,将自动启用访问控制,除非您选择\"empty-server\"应用程序类型.要为\"empty-server\"应用程序启用访问控制,必须添加调用enableAuth()的引导脚本.例如,在server/boot/authentication.js中:\n\n```javascript\nmodule.exports = function enableAuthentication(server) {\n  server.enableAuth();\n};\n```\n\n##### 访问控制概念\n\nLoopBack的访问控制系统围绕几个核心概念构建,如下表所示.\n\n| Term | Description | Responsibility | Example |\n|---|---|---|---|\n| Principal | An entity that can be identified or authenticated. | Represents identities of a request to protected resources. | A user <br/> An application <br/> A role (please note a role is also a principal) |\n| Role | A group of principals with the same permissions. | Organizes principals into groups so they can be used. | **Dynamic role**: <br/>`$everyone` (for all users) <br/>`$unauthenticated` (unauthenticated users) <br/> `$owner` (the principal is owner of the model instance), which can be:<br/>&nbsp;&nbsp;&#9702; A simple property called `userId`<br/>&nbsp;&nbsp;&#9702; A simple property called `owner`<br/>&nbsp;&nbsp;&#9702; A relation to a model that extends User.  <br/><br/> **Static role**: admin (a defined role for administrators) |\n| RoleMapping | Assign principals to roles | Statically assigns principals to roles. | Assign user with id 1 to role 1 <br/> Assign role 'admin' to role 1 |\n| ACL | Access control list | Controls if a principal can perform a certain operation against a model. | Deny everyone to access the project model.<br/> Allow 'admin' role to execute `find()` method on the project model. |\n\n##### 一般过程\n\n实现应用程序访问控制的一般过程是:\n\n1. **Specify user roles**(指定用户角色):定义应用程序需要的用户角色.例如,您可以为匿名用户,授权用户和管理员创建角色.\n\n2. **Define access for each role and model method**(为每个角色和模型方法定义访问权限):例如,您可以允许匿名用户读取银行列表,但不允许他们执行其他操作.LoopBack模型具有一组内置方法,每个方法映射到READ或WRITE访问类型.实质上,此步骤等于指定是否允许每个角色和每个模型被访问,如下面的示例所示.\n\n3. **Implement authentication**(实现身份验证):在应用程序中,添加创建(注册)新用户,登录用户(获取和使用身份验证令牌)和注销用户的代码.\n\n##### 公开和隐藏模型,方法和端点\n\n要通过REST公开模型,请在/server/model-config.json中将public属性设置为true:\n\n```json\n...\n  \"Role\": {\n    \"dataSource\": \"db\",\n    \"public\": false\n  },\n...\n```\n\n**隐藏method和REST endpoints**\n\n如果不想公开某些创建,检索,更新和删除操作.则可以通过在模型上调用disableRemoteMethod()来轻松隐藏它们.例如,按照前面的例子,按照约定,自定义模型代码将放在文件common/models/location.js中.您将添加以下行以\"隐藏\"预定义的远程方法之一:\n\n**common/models/location.js**\n\n```javascript\nvar isStatic = true;\nMyModel.disableRemoteMethod('deleteById', isStatic);\n```\n\n现在,deleteById()操作和相应的REST端点将不会公开.\n\n对于原型对象的方法,如updateAttributes():\n\n**common/models/location.js**\n\n```javascript\nvar isStatic = false;\nMyModel.disableRemoteMethod('updateAttributes', isStatic);\n```\n\n>  重要:确保在您自己的自定义模型上调用disableRemoteMethod(),而不是一个内置模型.在下面的示例中,例如,调用是MyUser.disableRemoteMethod(),而不是User.disableRemoteMethod().\n\n这里有一个隐藏`MyUser`模型的所有方法的例子,除了`login`和`logout`：\n\n```javascript\nMyUser.disableRemoteMethod(\"create\", true);\nMyUser.disableRemoteMethod(\"upsert\", true);\nMyUser.disableRemoteMethod(\"updateAll\", true);\nMyUser.disableRemoteMethod(\"updateAttributes\", false);\n\nMyUser.disableRemoteMethod(\"find\", true);\nMyUser.disableRemoteMethod(\"findById\", true);\nMyUser.disableRemoteMethod(\"findOne\", true);\n\nMyUser.disableRemoteMethod(\"deleteById\", true);\n\nMyUser.disableRemoteMethod(\"confirm\", true);\nMyUser.disableRemoteMethod(\"count\", true);\nMyUser.disableRemoteMethod(\"exists\", true);\nMyUser.disableRemoteMethod(\"resetPassword\", true);\n\nMyUser.disableRemoteMethod('__count__accessTokens', false);\nMyUser.disableRemoteMethod('__create__accessTokens', false);\nMyUser.disableRemoteMethod('__delete__accessTokens', false);\nMyUser.disableRemoteMethod('__destroyById__accessTokens', false);\nMyUser.disableRemoteMethod('__findById__accessTokens', false);\nMyUser.disableRemoteMethod('__get__accessTokens', false);\nMyUser.disableRemoteMethod('__updateById__accessTokens', false);\n```\n\n**Read-Only endpoints例子**\n\n您可能希望仅在模型上公开只读操作,隐藏所有POST,PUT,DELETE动词.\n\n**common/models/model.js**\n\n```javascript\nProduct.disableRemoteMethod('create', true);\t\t// Removes (POST) /products\nProduct.disableRemoteMethod('upsert', true);\t\t// Removes (PUT) /products\nProduct.disableRemoteMethod('deleteById', true);\t// Removes (DELETE) /products/:id\nProduct.disableRemoteMethod(\"updateAll\", true);\t\t// Removes (POST) /products/update\nProduct.disableRemoteMethod(\"updateAttributes\", false); // Removes (PUT) /products/:id\nProduct.disableRemoteMethod('createChangeStream', true); // removes (GET|POST) /products/change-stream\n```\n\n**隐藏相关模型的endpoints**\n\n要为相关模型方法禁用REST端点,请使用disableRemoteMethod().\n\n例如,如果有post和tag模型,其中post有多个标签,请将以下代码添加到/common/models/post.js以禁用相关模型和相应REST端点的远程方法:\n\n**common/models/model.js**\n\n```javascript\nmodule.exports = function(Post) {\n  Post.disableRemoteMethod('__get__tags', false);\n  Post.disableRemoteMethod('__create__tags', false);\n  Post.disableRemoteMethod('__destroyById__accessTokens', false); // DELETE\n  Post.disableRemoteMethod('__updateById__accessTokens', false); // PUT\n};\n```\n\n---\n\n<h4 id=\"7.1\"> 7.1 用户模型认证简介 </h4>\n\n**相关文章:**\n\nLoopBack为认证和授权提供了一个全功能的解决方案.按照此处的步骤,使用StrongLoop API Explorer查看内置用户模型的工作原理概述.\n\n首先,如果你没有这样做,请按照LoopBack入门中的第一步,下载loopback-getting-started应用程序并运行它.\n\n打开http://localhost:3000/explorer,查看StrongLoop API Explorer.然后:\n\n##### 创建新用户\n\n点击`POST /Users`创建新用户\n\n![cuser](img/cuser.jpg)\n\n在`Parameters`下,单击`data`字段并输入具有电子邮件和密码属性的JSON对象,例如:\n\n```json\n{\n   \"email\": \"foo@bar.com\",\n   \"password\": \"xxx\"\n}\n```\n\n基本用户模型验证电子邮件是否具有电子邮件地址的标准格式,并且密码不为空.\n\n![cuserdata](img/cuserdata.jpg)\n\n点击`Try it Out!`提交. \n\n你会收到值为200的响应代码,并且在Response Body中会显示新建用户的邮件地址和主键id.\n\n![cuserres](img/cuserres.jpg)\n\n##### 使用新用户登录\n\n现在点击`POST /Users/login`登录.将包含您之前输入的电子邮件和密码的相同JSON复制并传递到凭据字段,然后点击`Try it Out!`\n\n![loginuser](img/loginuser.jpg)\n\n现在,响应将包含用户的授权令牌:\n\n![logintoken](img/logintoken.jpg)\n\n##### 设置access token\n\n选择并复制响应正文中id属性的值,并将其粘贴到API Explorer窗口右上角的accessToken字段中:\n\n![settoken](img/settoken.jpg)\n\n执行此操作后,消息将更改为令牌集.此时,您创建的用户现在已登录并向应用程序进行身份验证.\n\n现在可以执行某些REST操作,例如:单击GET /Users/{id},在id字段中输入1,然后单击Try It Out！ 以获取您自己的用户记录的用户模型实例数据:\n\n>  注意:某些操作受到限制,即使您已通过身份验证.例如,您无法查看其他用户的记录.\n\n---\n\n<h4 id=\"7.2\"> 7.2 控制数据访问 </h4>\n\n>  概要: LoopBack使用访问控制列表(ACL)来控制谁可以访问什么数据.\n\n##### 启用身份验证\n\n当您使用LoopBack应用程序生成器创建应用程序时,将自动启用访问控制,除非您选择\"empty-server\"应用程序类型.要为\"empty-server\"应用程序启用访问控制,必须添加调用enableAuth()的引导脚本.例如,在server/boot/authentication.js中:\n\n```javascript\nmodule.exports = function enableAuthentication(server) {\n  server.enableAuth();\n};\n```\n\n##### 指定用户角色\n\n指定用户角色的第一步是确定应用程序需要的角色.大多数应用程序将有未经身份验证或匿名的用户(未登录的用户)和经过身份验证的用户(已登录的用户).此外,许多应用程序将具有提供广泛访问权限的管理角色.并且应用可以具有任何数量的附加用户角色.\n\n例如,startkicker应用程序由四种类型的用户组成:来宾,所有者,团队成员和管理员.每个用户类型都可以根据其角色和我们定义的访问控制列表(ACL)访问应用程序的各个部分.\n\n**用户访问类型**\n\nLoopBack提供了一个内置的User模型,具有相应的REST API,继承了PersistedModel对象的所有\"CRUD\"方法.LoopBack用户模型的每个CRUD方法映射到READ或WRITE访问类型,如下所示:\n\nREAD:\n\n* exists - 确定用户是否存在的布尔方法.\n* findById - 按ID查找用户.\n* find - 查找符合指定条件的所有用户.\n* findOne - 查找与指定条件匹配的单个用户实例.\n* count - 返回与指定条件匹配的用户数.\n\nWRITE:\n\n* create - 创建新用户.\n* updateAttributes(update) - 更新用户记录.\n* upsert(更新或插入) - 更新或插入新的用户记录.\n* destroyById(相当于removeById或deleteById) - 删除具有指定ID的用户.\n\n对于其他方法,默认访问类型为EXECUTE.例如,自定义方法映射到EXECUTE访问类型.\n\n##### 定义访问控制\n\n使用ACL生成器为应用程序设置访问控制.在这之前,你必须清楚地知道如何为你的应用程序配置访问控制.\n\n例如,以下是loopback-example-access-control如何设置用户及其权限:\n\n- Guest - Guest\n  - Role = $ everyone，$ unauthenticated\n  - 有权访问\"List projects\"功能,但没有其他\n\n- John - 项目所有者\n  - Role = $ everyone，$ authenticated，teamMember，$ owner\n  - 可以访问除\"View all projects\"之外的所有功能\n\n- Jane - 项目团队成员\n  - Role = $ everyone，$ authenticated，teamMember\n  - 可以访问所有功能,除了“View all projects”和“Withdraw”\n\n- Bob - 管理员\n  - Role = $ everyone，$ authenticated，admin\n  - 可以访问除\"Withdraw\"之外的所有功能\n\n一旦你创建了这种规范,你可以很容易地构造命令来设置访问控制,如下所示.\n\n##### 使用ACL生成器定义访问控制\n\n为应用程序定义访问控制的最简单方法是使用ACL生成器.这使您能够在运行时之前创建静态定义.生成器会提示您输入所有必要的信息:\n\n```bash\n$ slc loopback:acl\n```\n\n**例子**\n\n例如,以下是为loopback-example-access-control示例定义ACL条目的提示的答案.\n\nDeny access to all project REST endpoints\n\n- Select the model to apply the ACL entry to: All existing models\n- Select the ACL scope: All methods and properties\n- Select the access type: All (match all types)\n- Select the role: All users\n- Select the permission to apply: Explicitly deny access\n\nAllow unrestricted access to GET `/api/projects/listProjects`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: listProjects\n- Select the access type: Execute\n- Select the role: All users\n- Select the permission to apply: Explicitly grant access\n\nOnly allow admin unrestricted access to GET `/api/projects`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: find\n- Select the access type: Read\n- Select the role: other\n- Enter the role name: admin\n- Select the permission to apply: Explicitly grant access\n\nOnly allow team members access to GET `/api/projects/:id`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: findById\n- Select the access type: Read\n- Select the role: other\n- Enter the role name: teamMember\n- Select the permission to apply: Explicitly grant access\n\nAllow authenticated users to access POST `/api/projects/donate`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: donate\n- Select the access type: Execute\n- Select the role: Any authenticated user\n- Select the permission to apply: Explicitly grant access\n\nAllow owners access to POST `/api/projects/withdraw`\n\n- Select the model to apply the ACL entry to: project\n- Select the ACL scope: A single method\n- Enter the method name: withdraw\n- Select the access type: Execute\n- Select the role: The user owning the object\n- Select the permission to apply: Explicitly grant access\n\n##### 应用访问控制规则\n\n每个传入请求都映射到具有三个属性的对象:\n\n- model - 目标模型名称,例如'order'\n- property - 目标方法名称,例如'find'.您还可以指定一个方法名称数组,以对所有方法应用相同的约束.\n- accessType - 访问类型,'EXECUTE','READ'和'WRITE'\n\nACL规则被描述为一个对象数组,每个对象由在Model definition JSON file - ACLs中列出的属性组成.\n\n1.  model\n2.  property\n3.  accessType\n4.  principalType\n    1.  USER\n    2.  APP\n    3.  ROLE\n        1.  custom roles\n        2.  $owner\n        3.  $authenticated\n        4.  $unauthenticated\n        5.  $everyone\n5.  permission\n    1.  DENY\n    2.  ALLOW\n\n**ACL规则优先级**\n\n单个模型可能应用了多个ACL:基本模型(或模型)的ACL和模型本身的ACL,在模型定义JSON文件中定义. LoopBack通过添加具有权限和访问类型的优先级规则的所有适用的ACL来解决任何冲突,从而确定最终ACL.\n\n权限优先级按此顺序应用:\n\n1.  DENY\n2.  ALLOW\n3.  DEFAULT\n\n因此,例如,某个操作和用户组的DENY规则优先于同一操作和组的ALLOW规则.\n\n按照以下顺序应用访问类型优先级(按特殊性顺序):\n\n1.  Type (read, write, replicate, update)\n2.  Method name\n3.  Wildcard(通配符)\n\n一般来说,更具体的规则将优先于更一般的规则.例如,拒绝访问经过身份验证的用户的操作的规则将优先于拒绝对所有用户的访问的规则.\n\nLoopBack通过将请求与每个规则匹配的细节来对多个规则进行排序.它通过按照属性的分级顺序对每个ACL规则检查访问请求来计算细节.\n\n在每个级别,匹配产生三点:\n\n1.  完全匹配\n2.  通配符匹配（'*'）\n3.  无匹配\n\n较高级别的匹配优先于较低级别的匹配.例如,在模型级别的完全匹配将超过通配符匹配.\n\n例如,考虑以下访问请求:\n\n```json\n{\n  model: 'order',\n  property: 'find',\n  accessType: 'EXECUTE'\n}\n```\n\n假设定义了以下ACL规则:\n\n```json\n[\n  // Rule #1\n  {\n    model: '*',\n    property: 'find',\n    accessType: 'EXECUTE',\n    principalType: 'ROLE',\n    principalId: '$authenticated',\n    permission: 'ALLOW'\n  },\n  // Rule #2\n  {\n    model: 'order',\n    property: '*',\n    accessType: '*',\n    principalType: 'ROLE',\n    principalId: '$authenticated',\n    permission: 'ALLOW'\n  },\n  // Rule #3\n  {\n    model: 'order',\n    property: 'find',\n    accessType: '*',\n    principalType: 'ROLE',\n    principalId: '$authenticated',\n    permission: 'DENY'\n  }\n]\n```\n\nACL规则的顺序将是＃3,＃2,＃1.因此,请求将被拒绝,因为规则＃3设置的权限是\"DENY\".\n\n---\n\n<h4 id=\"7.3\"> 7.3 进行身份验证请求 </h4>\n\n应用程序创建和验证用户的基本过程是:\n\n1.  使用User.create()方法注册一个新用户,继承自PersistedModel对象.\n2.  调用User.login()从客户端应用程序代表用户请求访问令牌.\n3.  使用访问令牌调用API.在HTTP标头中提供访问令牌,或作为REST API调用的查询参数,如下所示.\n\n##### 使用访问令牌进行身份验证请求\n\n一旦用户登录,LoopBack创建一个新的AccessToken引用用户.在为访问控制系统进行后续REST请求以验证用户可以调用给定模型上的方法时,需要此令牌.\n\n```bash\nACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK\n\n# Authorization Header\ncurl -X GET -H \"Authorization: $ACCESS_TOKEN\" \\\nhttp://localhost:3000/api/widgets\n\n# Query Parameter\ncurl -X GET http://localhost:3000/api/widgets?access_token=$ACCESS_TOKEN\n```\n\n要使用cookie进行身份验证,请将以下内容添加到server.js(引导前):\n\n**/server/server.js**\n\n```javascript\napp.use(loopback.token({\n    model: app.models.accessToken\n}));\n```\n\n##### 将当前用户标识用作REST的URL中的文字\n\n要允许REST API当前登录的用户标识,请使用currentUserLiteral选项配置标记中间件.\n\n**/server/server.js**\n\n```javascript\napp.use(loopback.token({\n    model: app.models.accessToken,\n    currentUserLiteral: 'me'\n}));\n```\n\ncurrentUserLiteral定义了可以在REST API的URL中使用的特殊标记，例如:\n\n```bash\ncurl -X GET http://localhost:3000/api/users/me/orders?access_token=$ACCESS_TOKEN\n```\n\n请注意,URL将被重写为如下:\n\n`http://localhost:3000/api/users/<currentLoggedInUserId>/orders?access_token=$ACCESS_TOKEN`\n\n##### 删除访问令牌\n\n通过删除在登录时发出的访问令牌,用户将被有效地注销.这仅影响指定的访问令牌,附加到用户的其他令牌仍将有效.\n\n**/server/boot/script.js**\n\n```javascript\nvar USER_ID = 1;\nvar ACCESS_TOKEN = '6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK';\n// remove just the token\nvar token = new AccessToken({\n  id: ACCESS_TOKEN\n});\ntoken.destroy();\n// remove all user tokens\nAccessToken.destroyAll({\n  where: {\n    userId: USER_ID\n  }\n});\n```\n\n---\n\n<h4 id=\"7.4\"> 7.4 定义和使用角色 </h4>\n\nLoopBack允许您定义静态和动态角色.静态角色存储在数据源中,并映射到用户.相反,动态角色不分配给用户,而是在访问期间确定.\n\n##### 静态角色\n\n**/server/boot/script.js**\n\n```javascript\nUser.create([\n    {username: 'John', email: 'john@doe.com', password: 'opensesame'},\n    {username: 'Jane', email: 'jane@doe.com', password: 'opensesame'},\n    {username: 'Bob', email: 'bob@projects.com', password: 'opensesame'}\n  ], function(err, users) {\n    if (err) return cb(err);\n\n    //create the admin role\n    Role.create({\n      name: 'admin'\n    }, function(err, role) {\n      if (err) cb(err);\n\n      //make bob an admin\n      role.principals.create({\n        principalType: RoleMapping.USER,\n        principalId: users[2].id\n      }, function(err, principal) {\n        cb(err);\n      });\n    });\n  });\n```\n\n现在你可以使用上面定义的角色在访问控制中.例如,将以下内容添加到common/models/project.json中,以使\"admin\"角色的用户能够调用所有REST API.\n\n**/common/models/model.json**\n\n```json\n{\n  \"accessType\": \"EXECUTE\",\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"admin\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"find\"\n}\n```\n\n##### 动态角色\n\n有时静态角色不够灵活.LoopBack还使您能够定义在运行时定义的动态角色.\n\nLoopBack提供以下内置动态角色.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Role object property</th>\n      <th>String value</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Role.OWNER</td>\n      <td>$owner</td>\n      <td>Owner of the object</td>\n    </tr>\n    <tr>\n      <td>Role.AUTHENTICATED</td>\n      <td>$authenticated</td>\n      <td>authenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.UNAUTHENTICATED</td>\n      <td>$unauthenticated</td>\n      <td>Unauthenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.EVERYONE</td>\n      <td>$everyone</td>\n      <td>Everyone</td>\n    </tr>\n  </tbody>\n</table>\n\n第一个示例使用`$owner`动态角色来允许访问所请求的项目模型的所有者.\n\n>  注意: 为了限定`$owner`,目标模型需要具有与User模型(或者从User扩展的模型)和属性匹配目标模型实例的外键的belongsTo关系.对`$owner`的检查仅对路径上有':id'的远程方法执行,例如GET /api/users/:id.\n\n使用Role.registerResolver()在引导脚本中设置自定义角色处理程序.此函数有两个参数:\n\n1.  角色的字符串名称。\n2.  确定主体是否处于指定角色的函数.函数签名必须是function(role, context, callback).\n\n**/server/boot/script.js**\n\n```javascript\nmodule.exports = function(app) {\n  var Role = app.models.Role;\n\n  Role.registerResolver('teamMember', function(role, context, cb) {\n    // Q: Is the current request accessing a Project?\n    if (context.modelName !== 'project') {\n      // A: No. This role is only for projects: callback with FALSE\n      return process.nextTick(() => cb(null, false));\n    }\n\n    //Q: Is the user logged in? (there will be an accessToken with an ID if so)\n    var userId = context.accessToken.userId;\n    if (!userId) {\n      //A: No, user is NOT logged in: callback with FALSE\n      return process.nextTick(() => cb(null, false));\n    }\n\n    // Q: Is the current logged-in user associated with this Project?\n    // Step 1: lookup the requested project\n    context.model.findById(context.modelId, function(err, project) {\n      // A: The datastore produced an error! Pass error to callback\n      if(err) return cb(err);\n      // A: There's no project by this ID! Pass error to callback\n      if(!project) return cb(new Error(\"Project not found\"));\n\n      // Step 2: check if User is part of the Team associated with this Project\n      // (using count() because we only want to know if such a record exists)\n      var Team = app.models.Team;\n      Team.count({\n        ownerId: project.ownerId,\n        memberId: userId\n      }, function(err, count) {\n        // A: The datastore produced an error! Pass error to callback\n        if (err) return cb(err);\n\n        if(count > 0){\n          // A: YES. At least one Team associated with this User AND Project\n          // callback with TRUE, user is role:`teamMember`\n          return cb(null, true);\n        }\n\n\t\telse{\n          // A: NO, User is not in this Project's Team\n          // callback with FALSE, user is NOT role:`teamMember`\n          return cb(null, false);\n        }\n      });\n    });\n  });\n};\n```\n\n>  注意:关于process.nextTick()的注释.在上面的代码中,我们将一些回调调用包装在process.nextTick( () => cb(...) ),但不是其他.为什么?在这样的异步函数中,它需要一个回调并在稍后的时间将结果传递给它,重要的是要确保我们总是调用稍后回调,而不是立即调用它(同步).我们从传递给process.nextTick的函数调用回调函数,否则会被同步调用.来自findById或count回调的调用已经保证在稍后访问数据库时发生,这是异步操作,因此我们不需要在process.nextTick中包装这些调用.\n\n使用上面定义的动态角色,我们可以限制项目信息访问作为项目团队成员的用户.\n\n**/common/models/model.json**\n\n```json\n{\n  \"accessType\": \"READ\",\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"teamMember\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"findById\"\n}\n```\n\n---\n\n<h4 id=\"7.5\"> 7.5 访问相关模型 </h4>\n\n>  重要:在访问相关模型时,活动ACL仍然是您调用的模型的ACL.因此,即使您的模型设置了DENY ALL权限,如果与其相关的模型没有ACL,则所有关系端点都将打开.这可能是一个安全风险,因为例如GET /OpenModel/{id}/ ACLSecuredModel将允许通过OpenModel关系对ACLSecuredModel的完全访问.\n\n##### 限制对相关模型的访问\n\n当两个模型之间存在关系(参见创建模型关系)时,LoopBack会自动创建一组相关的模型方法,这些方法与为关系定义的API路由相对应.\n\n在下面的列表中,modelName是相关模型的名称,而modelNamePlural是相关模型名称的复数形式.\n\n>  注意:在下面的方法名称中,分隔符是双下划线__.\n\n**belongsTo**:\n\n* \\_\\_get\\_\\__relatedModelName_\n\n**hasOne**:\n\n* \\_\\_create\\_\\__relatedModelName_\n* \\_\\_get\\_\\__relatedModelName_\n* \\_\\_update\\_\\__relatedModelName_\n* \\_\\_destroy\\_\\__relatedModelName_\n\n**hasMany**:\n\n* \\_\\_count\\_\\__relatedModelNamePlural_\n* \\_\\_create\\_\\__relatedModelNamePlural_\n* \\_\\_delete\\_\\__relatedModelNamePlural_\n* \\_\\_destroyById\\_\\__relatedModelNamePlural_\n* \\_\\_findById\\_\\__relatedModelNamePlural_\n* \\_\\_get\\_\\__relatedModelNamePlural_\n* \\_\\_updateById\\_\\__relatedModelNamePlural_\n\n**hasManyThrough**:\n\n* \\_\\_count\\_\\__relatedModelNamePlural_\n* \\_\\_create\\_\\__relatedModelNamePlural_\n* \\_\\_delete\\_\\__relatedModelNamePlural_\n* \\_\\_destroyById\\_\\__relatedModelNamePlural_\n* \\_\\_exists\\_\\__relatedModelNamePlural_ (through only)\n* \\_\\_findById\\_\\__relatedModelNamePlural_\n* \\_\\_get\\_\\__relatedModelNamePlural_\n* \\_\\_link\\_\\__relatedModelNamePlural_ (through only)\n* \\_\\_updateById\\_\\__relatedModelNamePlural_\n* \\_\\_unlink\\_\\__relatedModelNamePlural_ (through only)\n\n**hasAndBelongsToMany**:\n\n* \\_\\_link\\_\\__relatedModelNamePlural_\n* \\_\\_unlink\\_\\__relatedModelNamePlural_\n\n您可以使用这些相关的模型方法来控制对相关路由的访问.\n\n例如,如果用户有多个项目,LoopBack创建这些路由(以及其他)和相应的相关模型方法:\n\n* `/api/users/count` - standard method is `count`\n* ``/api/users/:id/projects`` - related model method is `__get__projects`\n* `/api/users/:id/projects/count` - related model method is `__count__projects`\n\n>  重要: 如果模型具有DENY ALL权限(例如,内置模型,如用户模型),但相关模型没有ACL,则仍然无法通过User模型访问相关模型.因此,例如,即使图书模型的默认ACL是GET /books的ALLOW $ authenticated,路由GET /user/{id}/books default仍将是DENY ALL.\n\n要配置对这些路由的访问控制,请在模型定义JSON文件中设置相关模型方法的权限.例如,这些路由的用户模型定义JSON文件(user.json)的ACL可能如下所示,例如:\n\n**/common/models/user.json**\n\n```json\n\"acls\": [{\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"$authenticated\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"count\"\n}, {\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"$owner\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"__get__projects\"\n}, {\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"$authenticated\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"__count__projects\"\n}]\n```\n\n##### 查询相关模型\n\n查询模型时,您可能还需要从其相关模型返回数据.\n\n例如,假设您有三个模型: User,Report和LineItem,其中:\n\n- 用户可以有多个报告.也就是说,在User和Report(User hasMany Report)之间有一个HasMany关系.\n- 报表可以有多个订单项.也就是说,在Report和Lineitem之间有一个HasMany关系(Report hasMany LineItem).\n\n此外,ReportModel还配置了以下ACL,以便经过身份验证的用户可以创建新记录,并且用户可以更新自己的记录:\n\n```json\n[{\n    \"principalType\": \"ROLE\",\n    \"principalId\": \"$everyone\",\n    \"permission\": \"DENY\"\n  }, {\n    \"principalType\": \"ROLE\",\n    \"principalId\": \"$owner\",\n    \"permission\": \"ALLOW\",\n    \"property\": \"findById\"\n  },\n  ...\n]\n```\n\n假设LineItem模型具有定义的相同ACL.\n\n现在,假设您要获取您的用户拥有的模型,并获取其相关模型.下面是如何使用findById()使用Node API:\n\n```javascript\nReport.findById({\n  id: 1,\n  filter: {\n    include: 'lineitems'\n  }\n});\n```\n\nUsing the REST API:\n\n`GET /api/Reports/110?filter={\"include\":[\"lineItems\"]}`\n\nExample results:\n\n```json\n{\n  \"name\": \"january report - bob\",\n  \"id\": 110,\n  \"userId\": 100,\n  \"lineItemModels\": [{\n    \"name\": \"lunch\",\n    \"id\": 111,\n    \"reportModelId\": 110\n  }, {\n    \"name\": \"dinner\",\n    \"id\": 112,\n    \"reportModelId\": 110\n  }]\n}\n```\n\n---\n\n<h4 id=\"7.6\"> 7.6 创建默认管理员账号 </h4>\n\nLoopBack没有定义默认管理员用户,但是您可以在应用程序启动时定义一个,如loopback-example-access-control示例中所示.具体来说,该示例包括server/boot/sample-models.js中的代码:\n\n- 创建多个用户,以及其他模型的实例.\n- 定义模型之间的关系.\n- 定义管理角色.\n- 添加角色映射以将其中一个用户分配给管理角色.\n\n因为此脚本在`server/boot`,它是在应用程序启动时执行的,所以管理员用户将始终存在一次应用程序初始化.\n\n以下代码创建了名为\"John\",\"Jane\"和\"Bob\"的三个用户,然后(跳过创建项目,项目所有者和项目团队成员的代码)定义了\"管理\"角色,并且制定Bob为管理员.\n\n**/server/boot/script.js**\n\n```javascript\nUser.create([\n    {username: 'John', email: 'john@doe.com', password: 'opensesame'},\n    {username: 'Jane', email: 'jane@doe.com', password: 'opensesame'},\n    {username: 'Bob', email: 'bob@projects.com', password: 'opensesame'}\n], function(err, users) {\n    if (err) return debug('%j', err);\n    //...\n    // Create projects, assign project owners and project team members\n    //...\n    // Create the admin role\n    Role.create({\n      name: 'admin'\n    }, function(err, role) {\n      if (err) return debug(err);\n      debug(role);\n\n      // Make Bob an admin\n      role.principals.create({\n        principalType: RoleMapping.USER,\n        principalId: users[2].id\n      }, function(err, principal) {\n        if (err) return debug(err);\n        debug(principal);\n      });\n    });\n  });\n};\n```\n\n模型JSON(由ACL生成器创建)文件指定管理角色具有查看项目(GET /api/projects)的不受限制的访问权限:\n\n**/common/models/model.json**\n\n```json\n...\n{\n  \"accessType\": \"READ\",\n  \"principalType\": \"ROLE\",\n  \"principalId\": \"admin\",\n  \"permission\": \"ALLOW\",\n  \"property\": \"find\"\n},\n...\n```\n\n---\n\n<h4 id=\"7.7\"> 7.7 安全注意事项 </h4>\n\n##### Model REST APIs\n\n默认情况下,您创建的LoopBack模型会为CRUD操作公开一组标准的HTTP端点.model-config.json中的public属性指定是否公开模型的REST API,例如:\n\n**/server/model-config.json**\n\n```json\n...\n  \"MyModel\": {\n    \"public\": true,\n    \"dataSource\": \"db\"\n  },\n...\n```\n\n要隐藏模型的REST API,只需将public更改为false即可.\n\n##### CORS\n\nLoopBack应用程序使用cors中间件软件包进行跨源资源共享(CORS),但对于使用应用程序生成器创建的应用程序,它默认禁用.\n\n要启用CORS,请编辑server/config.json中的远程部分并将cors设置为true:\n\n```json\n{\n  ...\n  \"remoting\": {\n    ...\n    \"cors\": true,  // false by default\n    \"handleErrors\": false\n  }\n}\n```\n\n要配置CORS设置,请编辑server/middleware.json文件中的`initial`部分:\n\n```json\n{\n  // ...\n  \"initial\": {\n    // ...\n    \"cors\": {\n      \"params\": {\n        \"origin\": true,\n        \"credentials\": true,\n        \"maxAge\": 86400\n      }\n    }\n  },\n  // ...\n}\n```\n\n在客户端上启用CORS\n\n如果您使用的是JavaScript客户端,则还必须在客户端启用CORS.例如,使用AngularJS启用它的一种方法是:\n\n**/client/app.js**\n\n```javascript\nvar myApp = angular.module('myApp', [\n    'myAppApiService']);\n\nmyApp.config(['$httpProvider', function($httpProvider) {\n        $httpProvider.defaults.useXDomain = true;\n        delete $httpProvider.defaults.headers.common['X-Requested-With'];\n    }\n]);\n```\n\n---\n\n剧终!","slug":"LoopBack3-0官方文档中文增强版","published":1,"updated":"2019-08-14T01:31:33.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r9cm7h001bnw9wmwxclcoo","content":"<p><strong>翻译者:</strong> Yingshf<br><a href=\"https://github.com/yingsf\" target=\"_blank\" rel=\"noopener\">https://github.com/yingsf</a></p>\n<p><strong>翻译官方文档中基础的7部分:</strong></p>\n<ul>\n<li><strong>Defining models</strong></li>\n<li><strong>Using built-in models</strong></li>\n<li><strong>Connecting models to data sources</strong></li>\n<li><strong>Working with data</strong></li>\n<li><strong>Adding application logic</strong></li>\n<li><strong>Managing users</strong></li>\n<li><strong>Authentication, authorization, and permissions</strong></li>\n</ul>\n<p>增强版是指: 对官文中描述不清的地方(或者错误的地方)添加了自己的理解和试验代码.所有带<strong><em>“译注”</em></strong>的地方都是.</p>\n<p><a href=\"http://loopback.io/doc/en/lb3/index.html\" target=\"_blank\" rel=\"noopener\">官方文档在此处</a>,有需要的时候可以对比着看.</p>\n<a id=\"more\"></a>\n\n<hr>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录:\"></a>目录:</h4><ul>\n<li><a href=\"#1\">1. 定义Models - 对应官方文档中Defining models一章</a><ul>\n<li><a href=\"#1.1\">1.1 创建Models</a><ul>\n<li><a href=\"#1.1.1\">1.1.1 使用model generator创建model</a></li>\n<li><a href=\"#1.1.2\">1.1.2 从关系型数据库中发现model</a></li>\n<li><a href=\"#1.1.3\">1.1.3 从非结构化数据中创建model</a></li>\n</ul>\n</li>\n<li><a href=\"#1.2\">1.2 定制Models</a></li>\n<li><a href=\"#1.3\">1.3 将Model附加到数据源</a></li>\n<li><a href=\"#1.4\">1.4 通过REST公开Model</a></li>\n<li><a href=\"#1.5\">1.5 验证Model的数据</a></li>\n<li><a href=\"#1.6\">1.6 创建Model关系</a><ul>\n<li><a href=\"#1.6.1\">1.6.1 开启Model关系之旅</a></li>\n<li><a href=\"#1.6.2\">1.6.2 BelongsTo关系(多对一,一对一)</a></li>\n<li><a href=\"#1.6.3\">1.6.3 HasOne关系(一对一)</a></li>\n<li><a href=\"#1.6.4\">1.6.4 HasMany关系(一对多)</a></li>\n<li><a href=\"#1.6.5\">1.6.5 HasManyThrough关系(多对多)</a></li>\n<li><a href=\"#1.6.6\">1.6.6 HasAndBelongsToMany关系(多对多)</a></li>\n<li><a href=\"#1.6.7\">1.6.7 Polymorphic关系(多态)</a></li>\n<li><a href=\"#1.6.8\">1.6.8 查询相关model</a></li>\n<li><a href=\"#1.6.9\">1.6.9 嵌入式model和关系</a></li>\n<li><a href=\"#1.6.10\">1.6.10 嵌套查询</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#2\">2. 使用内置Models - 对应官方文档Using built-in models一章</a><ul>\n<li><a href=\"#2.1\">2.1 扩展内置Models</a></li>\n<li><a href=\"#2.2\">2.2 为内置Models添加remote methods</a></li>\n<li><a href=\"#2.3\">2.3 为内置Models创建数据库表</a></li>\n<li><a href=\"#2.4\">2.4 Model属性引用</a></li>\n<li><a href=\"#2.5\">2.5 内置Model的REST API</a><ul>\n<li><a href=\"#2.5.1\">2.5.1 PersistedModel REST API</a></li>\n<li><a href=\"#2.5.2\">2.5.2 Access token REST API</a></li>\n<li><a href=\"#2.5.3\">2.5.3 ACL REST API</a></li>\n<li><a href=\"#2.5.4\">2.5.4 Application REST API</a></li>\n<li><a href=\"#2.5.5\">2.5.5 Relation REST API</a></li>\n<li><a href=\"#2.5.6\">2.5.6 Role REST API</a></li>\n<li><a href=\"#2.5.7\">2.5.7 User REST API</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3\">3. 将Model连接到数据源 - 对应官方文档Connecting models to data sources一章</a><ul>\n<li><a href=\"#3.1\">3.1 从Model创建数据库schema</a></li>\n<li><a href=\"#3.2\">3.2 理解数据源</a></li>\n<li><a href=\"#3.3\">3.3 使用数据库事务</a></li>\n<li><a href=\"#3.4\">3.4 执行本地SQL</a></li>\n<li><a href=\"#3.5\">3.5 构建连接器(暂未翻译)</a></li>\n</ul>\n</li>\n<li><a href=\"#4\">4. 使用数据 - 对应官方文档Working with data一章</a><ul>\n<li><a href=\"#4.1\">4.1 创建,更新和删除数据</a></li>\n<li><a href=\"#4.2\">4.2 查询数据</a><ul>\n<li><a href=\"#4.2.1\">4.2.1 Fields filter</a></li>\n<li><a href=\"#4.2.2\">4.2.2 Include filter</a></li>\n<li><a href=\"#4.2.3\">4.2.3 Limit filter</a></li>\n<li><a href=\"#4.2.4\">4.2.4 Order filter</a></li>\n<li><a href=\"#4.2.5\">4.2.5 Skip filter</a></li>\n<li><a href=\"#4.2.6\">4.2.6 Where filter</a></li>\n</ul>\n</li>\n<li><a href=\"#4.3\">4.3 高级主题:数据</a><ul>\n<li><a href=\"#4.3.1\">4.3.1 Realtime server-sent events</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#5\">5. 添加应用程序逻辑 - 对应官方文档Adding application logic一章</a><ul>\n<li><a href=\"#5.1\">5.1 使用LoopBack对象</a></li>\n<li><a href=\"#5.2\">5.2 向model中添加业务逻辑</a><ul>\n<li><a href=\"#5.2.1\">5.2.1 Remote methods(远程方法)</a></li>\n<li><a href=\"#5.2.2\">5.2.2 Remote hooks(远程钩子)</a></li>\n<li><a href=\"#5.2.3\">5.2.3 Operation hooks(操作钩子)</a></li>\n<li><a href=\"#5.2.4\">5.2.4 Connector hooks(连接器钩子)</a></li>\n</ul>\n</li>\n<li><a href=\"#5.3\">5.3 定义引导脚本</a></li>\n<li><a href=\"#5.4\">5.4 定义中间件</a></li>\n<li><a href=\"#5.5\">5.5 使用当前上下文</a></li>\n<li><a href=\"#5.6\">5.6 事件</a></li>\n<li><a href=\"#5.7\">5.7 使用promises</a></li>\n</ul>\n</li>\n<li><a href=\"#6\">6. 管理用户 - 对应官方文档Managing users一章</a><ul>\n<li><a href=\"#6.1\">6.1 注册用户</a></li>\n<li><a href=\"#6.2\">6.2 用户登录</a></li>\n<li><a href=\"#6.3\">6.3 使用领域来分区用户</a></li>\n</ul>\n</li>\n<li><a href=\"#7\">7. 身份验证,授权和权限 - 对应官方文档Authentication, authorization, and permissions一章</a><ul>\n<li><a href=\"#7.1\">7.1 用户模型认证简介</a></li>\n<li><a href=\"#7.2\">7.2 控制数据访问</a></li>\n<li><a href=\"#7.3\">7.3 进行身份验证请求</a></li>\n<li><a href=\"#7.4\">7.4 定义和使用角色</a></li>\n<li><a href=\"#7.5\">7.5 访问相关模型</a></li>\n<li><a href=\"#7.6\">7.6 创建默认管理员账号</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"1\"> 1. 定义Models </h4>\n\n<blockquote>\n<p> <strong>概要:</strong> Models是LoopBack的核心,它代表了后端的数据源,例如: 数据库、或其他各种后端服务(REST、SOAP等).</p>\n</blockquote>\n<p>LoopBack的Model代表了后端系统(如数据库)中的数据,并且默认情况下具有Node API和REST API.此外，您还可以向Model添加验证规则和业务逻辑等功能。</p>\n<p>每个LoopBack应用程序都有一组预定义的内置Model,例如User(用户),Role(角色)和Application(应用程序).您可以扩展这些内置Model以满足应用程序的需要。</p>\n<p>此外,您还可以使用应用程序定义自己的Model：</p>\n<p>使用<code>model generator</code>(模型生成器)创建自定义model.这将创建一个model的定义JSON文件(<em>译注:还有个同名的js文件</em>),在这个JSON文件中您可以定义model的具体细节.</p>\n<p>使用<code>Datasource.buildModelFromInstance()</code>为数据源(如SOAP和REST服务)创建动态无模式的model.有关详细信息，请参阅Creating models from unstructured data.</p>\n<p>对于由关系型数据库支持的数据源,model通常对应于数据库中的表,使用<code>model discovery</code>为基于数据库的数据源创建静态的、模式驱动的模型.有关详细信息，请参阅Discovering models from relational databases.</p>\n<hr>\n<h4 id=\"1.1\"> 1.1 创建Models </h4>\n\n<blockquote>\n<p> <strong>概要:</strong> 您可以通过<code>model generator</code>这种方式来创建model,还可以通过从现有数据库模式进行<code>discovery</code>来创建model,还可以通过<code>实例内省(instance introspection)</code>的方式对非关系型数据源创建model.</p>\n</blockquote>\n<h5 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>您可以通过各种方式来创建model,这取决于model基于何种数据源(<em>译注:这并不意味着关系型数据库只能采用discovery的方式来创建model,使用model generator也可以,但表字段过多的话,这是种折磨</em>).</p>\n<p>您可以通过以下3种方式来创建model:</p>\n<ul>\n<li><p><strong>使用model generator</strong>.(<em>译注:</em> 建议model name使用首字母大写的格式(非大驼峰格式,就是第一个字母大写).经测试,如果名字是小写,生成器会把你的model name转换成首字母大写格式的(但文件名还是小写),如果名字是大驼峰的,生成器会把你的名字加个”-“例如,我输入的名字是coffeeshop,但实际被转成了Coffeeshop(所以我建议直接命名的时候就首字母大写),如果你还在js文件中使用coffeeshop这个名字,StrongLoop会抛出coffeeshop未定义的错误.在例如我输入的名字是CoffeeShop,那么model name虽然还是CoffeeShop,但文件名则被转成coffee-shop.json,看着不美.大家可以自己尝试一下.)</p>\n</li>\n<li><p><strong>使用model discovery创建现有关系型数据的model</strong>: 使用<em>model discovery</em>,然后您可以使用LoopBack’s schema/model synchronization API来使您的model和数据库保持同步.</p>\n</li>\n<li><p><strong>使用instance introspection</strong>为非关系型数据库或REST APIS创建model.</p>\n</li>\n</ul>\n<p>使用上述3个方法创建的model,都会创建一个<code>Model definition JSON</code>文件,这个JSON文件位于<code>common/models</code>目录(<em>译注: 其实还有别的目录</em>,如果你想让model只供server使用,它会在server/models/下,同理,还可以出现在client下.在common里,代表server和client都可以使用),名字是创建时您设置的名字,例如: <code>common/models/account.json</code>.</p>\n<p>您还可以使用<code>LoopBack API</code>以编程的方式来创建和自定义model,您还可以人工编辑那个JSON文件来创建和自定义model,多数情况下,在创建model的时候,不建议采用人工编辑的方式,但是在修改和自定义的model的时候,可以采用人工编辑的形式.</p>\n<h5 id=\"在JavaScript代码中获取对model的引用\"><a href=\"#在JavaScript代码中获取对model的引用\" class=\"headerlink\" title=\"在JavaScript代码中获取对model的引用.\"></a>在JavaScript代码中获取对model的引用.</h5><p>在JavaScript代码中获取对模型的引用(或”句柄”)的方式取决于您JavaScript代码所在的位置.</p>\n<h5 id=\"在model的js文件中-如何编写代码获取对model的引用\"><a href=\"#在model的js文件中-如何编写代码获取对model的引用\" class=\"headerlink\" title=\"在model的js文件中,如何编写代码获取对model的引用?\"></a>在model的js文件中,如何编写代码获取对model的引用?</h5><blockquote>\n<p> <strong>警告:</strong> 例如有一个名为”foo”的model,它的js文件是<code>common/models/foo.js</code>,在这个js文件中,您不能访问model的关系(<em>译注: 访问别的model</em>),因为model还没有被加载,如果您想执行对关系的操作,请在boot scripts中实现它.</p>\n</blockquote>\n<p><em>译注:</em> 上述警告是在告诉你,在某个model对应的js文件中(例如一个名为account的model,它的js文件是account.js),只能把自己的model name传进去.把其他的model name传进去是无效的,不信你可以多传入一个model,然后console.log它,你会发现是undefined.即使你把感觉上是全局对象的<code>app</code>传进来,仍然是undefined.</p>\n<p>在model的js文件中,model的名字作为参数传入进顶层函数(top-level function),于是在代码里就可以直接使用这个model对象了,例如有一个model叫”customer”,它的js文件里的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Customer作为参数传进来,如果你使用生成器生成model的话,生成器自动把model名传进来了</span></span><br><span class=\"line\"><span class=\"comment\">// 你可以试试在Customer后面在多加一个别的已经存在的model,然后console.log它.一定是undefined</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Customer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Customer object is available </span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>LoopBack还支持Promises以及model和其相关model的CRUD方法的回调.</p>\n<h5 id=\"当启动脚本中-如何以代码的形式获取对model的引用\"><a href=\"#当启动脚本中-如何以代码的形式获取对model的引用\" class=\"headerlink\" title=\"当启动脚本中,如何以代码的形式获取对model的引用?\"></a>当启动脚本中,如何以代码的形式获取对model的引用?</h5><p>在启动脚本中使用<code>app.models</code>,你就能获得对所有model的引用.假设你的启动脚本名叫script.js,它位于<code>/server/boot/script.js</code>,代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123; <span class=\"comment\">// 把app传进来</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> User = app.models.user;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Role = app.models.Role;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> RoleMapping = app.models.RoleMapping;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Team = app.models.Team;</span><br><span class=\"line\">  <span class=\"comment\">// 现在可以对上面4个model为所欲为了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.1.1\"> 1.1.1 使用model generator创建model </h4>\n\n<h5 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>使用<code>model generator</code>是创建新model最简单的方式,你可以使用IBM API Connect:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apic create --<span class=\"built_in\">type</span> model</span><br></pre></td></tr></table></figure>\n\n<p>或者使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:model</span><br></pre></td></tr></table></figure>\n\n<p>当执行上述命令创建新model的时候,生成器会提示你若干问题(<em>译注: 7个</em>),这些问题用来确定model的相关<strong>属性</strong>,随后,您还可以使用<code>property generator</code>来增加新的<strong>属性</strong>.(_译注:这句话中出现了2遍属性这个词,但意义却不同,回答7个问题生成的属性是top-level属性,它是属于model的,这种属性有13个.最后一个属性你可以理解成表字段.现在先不用纠结这些,继续往下看就可以了.)</p>\n<p>当您创建model的时候,(例如你创建了一个名为”myModel”的model),生成器会默默的为您:</p>\n<ul>\n<li><p>创建/common/models/myModel.json,这是model的定义JSON文件.(<em>译注: 7个问题中有一个问题是model位置的,如果你选择的”公共”,则放在common下</em>)</p>\n</li>\n<li><p>创建/common/models/myModel.js,在这个文件里,您可以用编程的方式来扩展model.例如添加个<code>remote methods</code>.</p>\n</li>\n<li><p>把你创建的这个model登记(注册)到<code>/server/model-config.json</code>中,登记内容包括名字,数据源等.</p>\n</li>\n</ul>\n<h5 id=\"基本的操作步骤-举例\"><a href=\"#基本的操作步骤-举例\" class=\"headerlink\" title=\"基本的操作步骤(举例)\"></a>基本的操作步骤(举例)</h5><p>在你的application根目录下输入下面的命令,创建一个名为book的新model.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:model book</span><br></pre></td></tr></table></figure>\n\n<p>或者使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apic create --<span class=\"built_in\">type</span> model book</span><br></pre></td></tr></table></figure>\n\n<p>回车后,生成器会提示您这么几个问题:</p>\n<ul>\n<li><p>选择model要连接哪种数据源,默认情况下,只有一个名为db的内存数据源.如果你创建过别的数据源,这里就会以列表的形式列出来供你选择..</p>\n</li>\n<li><p>选择model的基类,生成器会列出一堆内置的model和你曾经定义过的自定义model.</p>\n</li>\n</ul>\n<p><strong>注意:</strong></p>\n<p>通常情况下,如果您想将您的数据保存到数据库中的话(例如mysql,mongodb),基类请选择<code>PersistedModel</code>,如果您选择了<code>Model</code>作为您的基类的话,你这个model就没有CRUD方法</p>\n<ul>\n<li><p>选择是否把你的model公开在REST上,默认值是yes.</p>\n</li>\n<li><p>输入自定义复数后缀,默认是英文的复数规则,例如books,cites等.这个复数是用于API的URL的.</p>\n</li>\n<li><p>为model增加一个属性.生成器会提示您(<strong><em>译注: 这个属性你可以理解为数据库表的字段</em></strong>):</p>\n<ul>\n<li><p>属性名.</p>\n</li>\n<li><p>属性类型.</p>\n</li>\n<li><p>是否为必须属性.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"在创建完model后又想添加新属性怎么办\"><a href=\"#在创建完model后又想添加新属性怎么办\" class=\"headerlink\" title=\"在创建完model后又想添加新属性怎么办\"></a>在创建完model后又想添加新属性怎么办</h5><p>使用<code>property generator</code>即可,如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ [ slc | apic ] loopback:property</span><br></pre></td></tr></table></figure>\n\n<p>回答生成器提出的问题即可完成相关操作.</p>\n<p><strong>译者注:注意标题是添加新属性,所以,修改旧属性是不能用这个的</strong></p>\n<h5 id=\"给属性添加默认值\"><a href=\"#给属性添加默认值\" class=\"headerlink\" title=\"给属性添加默认值\"></a>给属性添加默认值</h5><p>编辑model的JSON文件,给属性添加<code>default</code>关键字,更多内容后续会讲.</p>\n<hr>\n<h4 id=\"1.1.2\"> 1.1.2 从关系型数据库中发现model </h4>\n\n<h5 id=\"译者概述\"><a href=\"#译者概述\" class=\"headerlink\" title=\"译者概述\"></a>译者概述</h5><p>原文标题叫做<em>Discovering models from relational databases</em>.</p>\n<p>你可以这样理解它的含义,假设关系型数据库mysql中有个表叫orders,它有200多个字段(可能是设计失误,或者必须要有这么多字段).如果用<a href=\"#1.1.1\">1.1.1</a>中的生成器来创建model并添加这200多个属性话,不仅特累,而且将来数据库中表结构变化的话,又要手工来维护这个model.</p>\n<p>如果解决这个问题?本节介绍的内容就是解决这个问题的.</p>\n<h5 id=\"原文概述\"><a href=\"#原文概述\" class=\"headerlink\" title=\"原文概述\"></a>原文概述</h5><p>基于已经存在的关系型数据库,LoopBack创建起model来那是轻松加愉快.它支持以下几种连接器(数据库):</p>\n<ul>\n<li><p><strong>MySQL connector</strong></p>\n</li>\n<li><p><strong>PostgreSQL connector</strong></p>\n</li>\n<li><p><strong>Oracle connector</strong></p>\n</li>\n<li><p><strong>SQL Server connector</strong></p>\n</li>\n</ul>\n<p>对于NoSQL数据库(如MongoDB),请改用instance introspection.</p>\n<p>连接到关系型数据库的数据源自动获取异步<code>Database discovery API</code>(<em>译注: 这句话显得很突兀,不明白是啥意思.我的理解是一旦model的数据源是关系型数据库,那model就自动获取了一组discovery API</em>)</p>\n<h5 id=\"基本的操作步骤-举例-1\"><a href=\"#基本的操作步骤-举例-1\" class=\"headerlink\" title=\"基本的操作步骤(举例)\"></a>基本的操作步骤(举例)</h5><ul>\n<li><p><strong>第一步:</strong> 使用脚本(例如下面的代码)来发现模型(原文:discover the schema).</p>\n</li>\n<li><p><strong>第二步:</strong> 使用fs.writeFile()将输出保存为<code>common/models/你的名字.json</code>.</p>\n</li>\n<li><p><strong>第三步:</strong> 别忘了在<code>server/model-config.json</code>登记这个model.</p>\n</li>\n<li><p><strong>第四步:</strong> 启动app(执行: node .)</p>\n</li>\n<li><p><strong>第五步:</strong> 使用<code>LoopBack Explorer</code>来验证你的模型是否已经正确定义.</p>\n</li>\n</ul>\n<p><em>译注:</em> 上面的步骤不要严格效仿,它的核心理念是提醒你要保存json文件,要登记model.在后面的代码中,你会看到该怎么做.</p>\n<h5 id=\"discovery样例代码\"><a href=\"#discovery样例代码\" class=\"headerlink\" title=\"discovery样例代码\"></a>discovery样例代码</h5><p>例如,假设有一个Oracle数据库.首先,我们的代码要设置Oracle数据源.然后调用discoverAndBuildModels()从数据库表中把表结构搂回来并创建模型.别忘了使用<code>associations: true</code>选项来保证能把主/外键关系也搂回来.以下为代码,它位于<code>/server/bin/script.js</code>文件中:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置oracle数据源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = loopback.createDataSource(<span class=\"string\">'oracle'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">\"host\"</span>: <span class=\"string\">\"oracle-demo.strongloop.com\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"port\"</span>: <span class=\"number\">1521</span>,</span><br><span class=\"line\">  <span class=\"string\">\"database\"</span>: <span class=\"string\">\"XE\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"username\"</span>: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"password\"</span>: <span class=\"string\">\"L00pBack\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从INVENTORY这个表把表结构搂回来并创建models</span></span><br><span class=\"line\"><span class=\"comment\">// dataSource.discoverAndBuildModels有三个参数(modelName, [options], [cb])</span></span><br><span class=\"line\">ds.discoverAndBuildModels(<span class=\"string\">'INVENTORY'</span>, &#123;<span class=\"attr\">visited</span>: &#123;&#125;, <span class=\"attr\">associations</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, models</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Now we have a list of models keyed by the model name</span></span><br><span class=\"line\">  <span class=\"comment\">// Find the first record from the inventory</span></span><br><span class=\"line\">  models.Inventory.findOne(&#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, inv</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nInventory: \"</span>, inv);</span><br><span class=\"line\">    <span class=\"comment\">// Navigate to the product model</span></span><br><span class=\"line\">    <span class=\"comment\">// Assumes inventory table has a foreign key relationship to product table</span></span><br><span class=\"line\">    inv.product(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, prod</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nProduct: \"</span>, prod);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\n ------------- \"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>译注:</em></strong> 如果按照上述的文字顺读下来,你就会以为上述代码可以直接把oracle数据库中的表INVENTORY的表结构给取回来然后在建立model,但实际是错误的,官文的这段代码有误导性.在查阅了API以后可以发现,上述代码中的discoverAndBuildModels()能根据表名创建一个如下的json,它确实是一个model,但与你的表没有关系(假设我的表叫coffeeshop).</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Coffeeshop: </span><br><span class=\"line\">   &#123; [Function: ModelConstructor]</span><br><span class=\"line\">     setMaxListeners: [Function: bound setMaxListeners],</span><br><span class=\"line\">     getMaxListeners: [Function: bound getMaxListeners],</span><br><span class=\"line\">     emit: [Function: bound emit],</span><br><span class=\"line\">     addListener: [Function: bound addListener],</span><br><span class=\"line\">     on: [Function: bound addListener],</span><br><span class=\"line\">     prependListener: [Function: bound prependListener],</span><br><span class=\"line\">     once: [Function: bound once],</span><br><span class=\"line\">     prependOnceListener: [Function: bound prependOnceListener],</span><br><span class=\"line\">     removeListener: [Function: bound removeListener],</span><br><span class=\"line\">     removeAllListeners: [Function: bound removeAllListeners],</span><br><span class=\"line\">     listeners: [Function: bound listeners],</span><br><span class=\"line\">     listenerCount: [Function: bound listenerCount],</span><br><span class=\"line\">     eventNames: [Function: bound eventNames],</span><br><span class=\"line\">     super_: </span><br><span class=\"line\">      &#123; [Function: ModelConstructor]</span><br><span class=\"line\">        setMaxListeners: [Function: bound setMaxListeners],</span><br><span class=\"line\">        getMaxListeners: [Function: bound getMaxListeners],</span><br><span class=\"line\">        emit: [Function: bound emit],</span><br><span class=\"line\">        addListener: [Function: bound addListener],</span><br><span class=\"line\">        on: [Function: bound addListener],</span><br><span class=\"line\">        prependListener: [Function: bound prependListener],</span><br><span class=\"line\">        once: [Function: bound once],</span><br><span class=\"line\">        prependOnceListener: [Function: bound prependOnceListener],</span><br><span class=\"line\">        removeListener: [Function: bound removeListener],</span><br><span class=\"line\">        removeAllListeners: [Function: bound removeAllListeners],</span><br><span class=\"line\">        listeners: [Function: bound listeners],</span><br><span class=\"line\">        listenerCount: [Function: bound listenerCount],</span><br><span class=\"line\">        eventNames: [Function: bound eventNames],</span><br><span class=\"line\">        super_: [Object],</span><br><span class=\"line\">        defineProperty: [Function],</span><br><span class=\"line\">        getPropertyType: [Function],</span><br><span class=\"line\">        isProtectedProperty: [Function],</span><br><span class=\"line\">        isHiddenProperty: [Function],</span><br><span class=\"line\">        mixin: [Function],</span><br><span class=\"line\">        getDataSource: [Function],</span><br><span class=\"line\">        observe: [Function],</span><br><span class=\"line\">        removeObserver: [Function],</span><br><span class=\"line\">        clearObservers: [Function],</span><br><span class=\"line\">        notifyObserversOf: [Function],</span><br><span class=\"line\">        _notifyBaseObservers: [Function],</span><br><span class=\"line\">        notifyObserversAround: [Function],</span><br><span class=\"line\">        afterInitialize: null,</span><br><span class=\"line\">        beforeValidate: null,</span><br><span class=\"line\">        afterValidate: null,</span><br><span class=\"line\">        beforeSave: null,</span><br><span class=\"line\">        afterSave: null,</span><br><span class=\"line\">        beforeCreate: null,</span><br><span class=\"line\">        afterCreate: null,</span><br><span class=\"line\">        beforeUpdate: null,</span><br><span class=\"line\">        afterUpdate: null,</span><br><span class=\"line\">        beforeDestroy: null,</span><br><span class=\"line\">        afterDestroy: null,</span><br><span class=\"line\">        validatesPresenceOf: [Function],</span><br><span class=\"line\">        validatesAbsenceOf: [Function],</span><br><span class=\"line\">        validatesLengthOf: [Function],</span><br><span class=\"line\">        validatesNumericalityOf: [Function],</span><br><span class=\"line\">        validatesInclusionOf: [Function],</span><br><span class=\"line\">        validatesExclusionOf: [Function],</span><br><span class=\"line\">        validatesFormatOf: [Function],</span><br><span class=\"line\">        validate: [Function],</span><br><span class=\"line\">        validateAsync: [Function],</span><br><span class=\"line\">        validatesUniquenessOf: [Function],</span><br><span class=\"line\">        getter: &#123;&#125;,</span><br><span class=\"line\">        setter: &#123;&#125;,</span><br><span class=\"line\">        definition: [Object],</span><br><span class=\"line\">        settings: [Object],</span><br><span class=\"line\">        forEachProperty: [Function],</span><br><span class=\"line\">        attachTo: [Function],</span><br><span class=\"line\">        extend: [Function],</span><br><span class=\"line\">        registerProperty: [Function],</span><br><span class=\"line\">        registry: [Object],</span><br><span class=\"line\">        setup: [Function: setupPersistedModel],</span><br><span class=\"line\">        _ACL: [Function: getACL],</span><br><span class=\"line\">        checkAccess: [Function],</span><br><span class=\"line\">        _getAccessTypeForMethod: [Function],</span><br><span class=\"line\">        getApp: [Function],</span><br><span class=\"line\">        remoteMethod: [Function],</span><br><span class=\"line\">        disableRemoteMethod: [Function],</span><br><span class=\"line\">        disableRemoteMethodByName: [Function],</span><br><span class=\"line\">        belongsToRemoting: [Function],</span><br><span class=\"line\">        hasOneRemoting: [Function],</span><br><span class=\"line\">        hasManyRemoting: [Function],</span><br><span class=\"line\">        scopeRemoting: [Function],</span><br><span class=\"line\">        nestRemoting: [Function],</span><br><span class=\"line\">        ValidationError: [Object],</span><br><span class=\"line\">        sharedClass: [Object],</span><br><span class=\"line\">        sharedCtor: [Object],</span><br><span class=\"line\">        beforeRemote: [Function],</span><br><span class=\"line\">        afterRemote: [Function],</span><br><span class=\"line\">        afterRemoteError: [Function],</span><br><span class=\"line\">        _runWhenAttachedToApp: [Function],</span><br><span class=\"line\">        create: [Object],</span><br><span class=\"line\">        patchOrCreate: [Object],</span><br><span class=\"line\">        updateOrCreate: [Object],</span><br><span class=\"line\">        upsert: [Object],</span><br><span class=\"line\">        patchOrCreateWithWhere: [Object],</span><br><span class=\"line\">        upsertWithWhere: [Object],</span><br><span class=\"line\">        replaceOrCreate: [Object],</span><br><span class=\"line\">        findOrCreate: [Object],</span><br><span class=\"line\">        exists: [Object],</span><br><span class=\"line\">        findById: [Object],</span><br><span class=\"line\">        find: [Object],</span><br><span class=\"line\">        findOne: [Object],</span><br><span class=\"line\">        destroyAll: [Object],</span><br><span class=\"line\">        remove: [Object],</span><br><span class=\"line\">        deleteAll: [Object],</span><br><span class=\"line\">        updateAll: [Object],</span><br><span class=\"line\">        update: [Object],</span><br><span class=\"line\">        destroyById: [Object],</span><br><span class=\"line\">        removeById: [Object],</span><br><span class=\"line\">        deleteById: [Object],</span><br><span class=\"line\">        count: [Object],</span><br><span class=\"line\">        replaceById: [Object],</span><br><span class=\"line\">        getIdName: [Function],</span><br><span class=\"line\">        setupRemoting: [Function],</span><br><span class=\"line\">        diff: [Function],</span><br><span class=\"line\">        changes: [Function],</span><br><span class=\"line\">        checkpoint: [Function],</span><br><span class=\"line\">        currentCheckpoint: [Function],</span><br><span class=\"line\">        replicate: [Function],</span><br><span class=\"line\">        createUpdates: [Function],</span><br><span class=\"line\">        bulkUpdate: [Function],</span><br><span class=\"line\">        getChangeModel: [Function],</span><br><span class=\"line\">        getSourceId: [Function],</span><br><span class=\"line\">        enableChangeTracking: [Function],</span><br><span class=\"line\">        _defineChangeModel: [Function],</span><br><span class=\"line\">        rectifyAllChanges: [Function],</span><br><span class=\"line\">        handleChangeError: [Function],</span><br><span class=\"line\">        rectifyChange: [Function],</span><br><span class=\"line\">        findLastChange: [Function],</span><br><span class=\"line\">        updateLastChange: [Function],</span><br><span class=\"line\">        createChangeStream: [Object] &#125;,</span><br><span class=\"line\">     defineProperty: [Function],</span><br><span class=\"line\">     getPropertyType: [Function],</span><br><span class=\"line\">     isProtectedProperty: [Function],</span><br><span class=\"line\">     isHiddenProperty: [Function],</span><br><span class=\"line\">     mixin: [Function],</span><br><span class=\"line\">     getDataSource: [Function],</span><br><span class=\"line\">     observe: [Function],</span><br><span class=\"line\">     removeObserver: [Function],</span><br><span class=\"line\">     clearObservers: [Function],</span><br><span class=\"line\">     notifyObserversOf: [Function],</span><br><span class=\"line\">     _notifyBaseObservers: [Function],</span><br><span class=\"line\">     notifyObserversAround: [Function],</span><br><span class=\"line\">     afterInitialize: null,</span><br><span class=\"line\">     beforeValidate: null,</span><br><span class=\"line\">     afterValidate: null,</span><br><span class=\"line\">     beforeSave: null,</span><br><span class=\"line\">     afterSave: null,</span><br><span class=\"line\">     beforeCreate: null,</span><br><span class=\"line\">     afterCreate: null,</span><br><span class=\"line\">     beforeUpdate: null,</span><br><span class=\"line\">     afterUpdate: null,</span><br><span class=\"line\">     beforeDestroy: null,</span><br><span class=\"line\">     afterDestroy: null,</span><br><span class=\"line\">     validatesPresenceOf: [Function],</span><br><span class=\"line\">     validatesAbsenceOf: [Function],</span><br><span class=\"line\">     validatesLengthOf: [Function],</span><br><span class=\"line\">     validatesNumericalityOf: [Function],</span><br><span class=\"line\">     validatesInclusionOf: [Function],</span><br><span class=\"line\">     validatesExclusionOf: [Function],</span><br><span class=\"line\">     validatesFormatOf: [Function],</span><br><span class=\"line\">     validate: [Function],</span><br><span class=\"line\">     validateAsync: [Function],</span><br><span class=\"line\">     validatesUniquenessOf: [Function],</span><br><span class=\"line\">     getter: &#123;&#125;,</span><br><span class=\"line\">     setter: &#123;&#125;,</span><br><span class=\"line\">     definition: </span><br><span class=\"line\">      ModelDefinition &#123;</span><br><span class=\"line\">        modelBuilder: [Object],</span><br><span class=\"line\">        name: 'Coffeeshop',</span><br><span class=\"line\">        rawProperties: [Object],</span><br><span class=\"line\">        settings: [Object],</span><br><span class=\"line\">        relations: [],</span><br><span class=\"line\">        properties: [Object],</span><br><span class=\"line\">        _ids: [Object] &#125;,</span><br><span class=\"line\">     settings: </span><br><span class=\"line\">      &#123; strict: false,</span><br><span class=\"line\">        base: [Object],</span><br><span class=\"line\">        replaceOnPUT: true,</span><br><span class=\"line\">        idInjection: false,</span><br><span class=\"line\">        mysql: [Object] &#125;,</span><br><span class=\"line\">     forEachProperty: [Function],</span><br><span class=\"line\">     attachTo: [Function],</span><br><span class=\"line\">     extend: [Function],</span><br><span class=\"line\">     registerProperty: [Function],</span><br><span class=\"line\">     registry: Registry &#123; defaultDataSources: &#123;&#125;, modelBuilder: [Object] &#125;,</span><br><span class=\"line\">     setup: [Function: setupPersistedModel],</span><br><span class=\"line\">     _ACL: [Function: getACL],</span><br><span class=\"line\">     checkAccess: [Function],</span><br><span class=\"line\">     _getAccessTypeForMethod: [Function],</span><br><span class=\"line\">     getApp: [Function],</span><br><span class=\"line\">     remoteMethod: [Function],</span><br><span class=\"line\">     disableRemoteMethod: [Function],</span><br><span class=\"line\">     disableRemoteMethodByName: [Function],</span><br><span class=\"line\">     belongsToRemoting: [Function],</span><br><span class=\"line\">     hasOneRemoting: [Function],</span><br><span class=\"line\">     hasManyRemoting: [Function],</span><br><span class=\"line\">     scopeRemoting: [Function],</span><br><span class=\"line\">     nestRemoting: [Function],</span><br><span class=\"line\">     ValidationError: &#123; [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 &#125;,</span><br><span class=\"line\">     sharedClass: </span><br><span class=\"line\">      SharedClass &#123;</span><br><span class=\"line\">        name: 'Coffeeshop',</span><br><span class=\"line\">        ctor: [Circular],</span><br><span class=\"line\">        _methods: [Object],</span><br><span class=\"line\">        _resolvers: [Object],</span><br><span class=\"line\">        _disabledMethods: &#123;&#125;,</span><br><span class=\"line\">        http: [Object],</span><br><span class=\"line\">        sharedCtor: [Object] &#125;,</span><br><span class=\"line\">     sharedCtor: &#123; [Function] accepts: [Object], http: [Object], returns: [Object] &#125;,</span><br><span class=\"line\">     beforeRemote: [Function],</span><br><span class=\"line\">     afterRemote: [Function],</span><br><span class=\"line\">     afterRemoteError: [Function],</span><br><span class=\"line\">     _runWhenAttachedToApp: [Function],</span><br><span class=\"line\">     create: [Function],</span><br><span class=\"line\">     patchOrCreate: [Function],</span><br><span class=\"line\">     updateOrCreate: [Function],</span><br><span class=\"line\">     upsert: [Function],</span><br><span class=\"line\">     patchOrCreateWithWhere: [Function],</span><br><span class=\"line\">     upsertWithWhere: [Function],</span><br><span class=\"line\">     replaceOrCreate: [Function: replaceOrCreate],</span><br><span class=\"line\">     findOrCreate: [Function: findOrCreate],</span><br><span class=\"line\">     exists: [Function: exists],</span><br><span class=\"line\">     findById: [Function: findById],</span><br><span class=\"line\">     find: [Function: find],</span><br><span class=\"line\">     findOne: [Function: findOne],</span><br><span class=\"line\">     destroyAll: [Function: destroyAll],</span><br><span class=\"line\">     remove: [Function: destroyAll],</span><br><span class=\"line\">     deleteAll: [Function: destroyAll],</span><br><span class=\"line\">     updateAll: [Function],</span><br><span class=\"line\">     update: [Function],</span><br><span class=\"line\">     destroyById: [Function: deleteById],</span><br><span class=\"line\">     removeById: [Function: deleteById],</span><br><span class=\"line\">     deleteById: [Function: deleteById],</span><br><span class=\"line\">     count: [Function],</span><br><span class=\"line\">     replaceById: [Function],</span><br><span class=\"line\">     getIdName: [Function],</span><br><span class=\"line\">     setupRemoting: [Function],</span><br><span class=\"line\">     diff: [Function],</span><br><span class=\"line\">     changes: [Function],</span><br><span class=\"line\">     checkpoint: [Function],</span><br><span class=\"line\">     currentCheckpoint: [Function],</span><br><span class=\"line\">     replicate: [Function],</span><br><span class=\"line\">     createUpdates: [Function],</span><br><span class=\"line\">     bulkUpdate: [Function],</span><br><span class=\"line\">     getChangeModel: [Function],</span><br><span class=\"line\">     getSourceId: [Function],</span><br><span class=\"line\">     enableChangeTracking: [Function],</span><br><span class=\"line\">     _defineChangeModel: [Function],</span><br><span class=\"line\">     rectifyAllChanges: [Function],</span><br><span class=\"line\">     handleChangeError: [Function],</span><br><span class=\"line\">     rectifyChange: [Function],</span><br><span class=\"line\">     findLastChange: [Function],</span><br><span class=\"line\">     updateLastChange: [Function],</span><br><span class=\"line\">     createChangeStream: &#123; [Function] _delegate: true &#125;,</span><br><span class=\"line\">     _mixins: [ [Object], [Object], [Object], [Object] ],</span><br><span class=\"line\">     _forDB: [Function],</span><br><span class=\"line\">     defaultScope: [Function],</span><br><span class=\"line\">     applyScope: [Function],</span><br><span class=\"line\">     applyProperties: [Function],</span><br><span class=\"line\">     lookupModel: [Function],</span><br><span class=\"line\">     getConnector: [Function],</span><br><span class=\"line\">     findByIds: [Function],</span><br><span class=\"line\">     all: [Function],</span><br><span class=\"line\">     _getSetting: [Function],</span><br><span class=\"line\">     _normalize: [Function],</span><br><span class=\"line\">     _coerce: [Function],</span><br><span class=\"line\">     scope: [Function],</span><br><span class=\"line\">     normalizeInclude: [Function: normalizeInclude],</span><br><span class=\"line\">     include: [Function],</span><br><span class=\"line\">     hasMany: [Function: hasMany],</span><br><span class=\"line\">     belongsTo: [Function],</span><br><span class=\"line\">     hasAndBelongsToMany: [Function: hasAndBelongsToMany],</span><br><span class=\"line\">     hasOne: [Function: hasOne],</span><br><span class=\"line\">     referencesMany: [Function: referencesMany],</span><br><span class=\"line\">     embedsOne: [Function: embedsOne],</span><br><span class=\"line\">     embedsMany: [Function: embedsMany],</span><br><span class=\"line\">     beginTransaction: [Function],</span><br><span class=\"line\">     Transaction: </span><br><span class=\"line\">      &#123; [Function: Transaction]</span><br><span class=\"line\">        super_: [Object],</span><br><span class=\"line\">        SERIALIZABLE: 'SERIALIZABLE',</span><br><span class=\"line\">        REPEATABLE_READ: 'REPEATABLE READ',</span><br><span class=\"line\">        READ_COMMITTED: 'READ COMMITTED',</span><br><span class=\"line\">        READ_UNCOMMITTED: 'READ UNCOMMITTED',</span><br><span class=\"line\">        hookTypes: [Object],</span><br><span class=\"line\">        begin: [Function] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外一个坑就是mac下strongloop配置oracle连接器有点麻烦,我简单尝试了一下没有成功,于是就利用现成的mysql了.</p>\n<p>下面是查阅API文档后写的一段代码(<a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/\" target=\"_blank\" rel=\"noopener\">API链接</a>),可以实现指定表的discovery,然后在创建model的json文件,并登记model.内容如下(已测试):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Discover And Build Model And Expose REST API From Mysql Database Table</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Create By: Yingshf</span></span><br><span class=\"line\"><span class=\"comment\"> * Put this file in the /server/bin/ directory for your application.</span></span><br><span class=\"line\"><span class=\"comment\"> * run: In Your root directory,Execute 'node ./server/bin/discoverAndBuildModel.js'</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Change to the correct path for your folder</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> commonFolder = <span class=\"string\">'../../common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> modelsFolder = commonFolder + <span class=\"string\">'/models'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> modelConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../model-config.json'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dataSources = <span class=\"built_in\">require</span>(<span class=\"string\">'../datasources.json'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dataSourceName must be the name of your datasource in server/datasources.json</span></span><br><span class=\"line\"><span class=\"comment\">// 'mysqlTables' is a array of table name</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataSourceName = <span class=\"string\">'mysqlDb'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mysqlTables = [<span class=\"string\">'coffeeshop'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> lowerModelConfigName = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = loopback.createDataSource(<span class=\"string\">'mysql'</span>, dataSources[dataSourceName]);</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Below is function definitions</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Check if common/models exists</span></span><br><span class=\"line\">  <span class=\"comment\">// If not, create them and build models from database</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs.existsSync(commonFolder)) &#123;</span><br><span class=\"line\">    fs.mkdirSync(commonFolder);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs.existsSync(modelsFolder)) &#123;</span><br><span class=\"line\">    fs.mkdirSync(modelsFolder);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  discoverAndCreate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">discoverAndCreate</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  mysqlTables.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tableName, index, array</span>) </span>&#123;</span><br><span class=\"line\">    ds.discoverSchema(tableName, <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, schema</span>) </span>&#123;</span><br><span class=\"line\">      lowerModelConfigName = schema.name.toLowerCase();</span><br><span class=\"line\">      fs.writeFile(<span class=\"string\">'common/models/'</span> + lowerModelConfigName + <span class=\"string\">'.json'</span>, prettyJSON(schema), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'It\\'s saved!'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//If last, then save</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === array.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          saveAndExposeSchemas();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      addSchema(schema.name);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addSchema</span>(<span class=\"params\">schema</span>) </span>&#123;</span><br><span class=\"line\">  modelConfig[schema] = &#123;</span><br><span class=\"line\">    dataSource: dataSourceName,</span><br><span class=\"line\">    public: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveAndExposeSchemas</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fs.writeFile(<span class=\"string\">'server/model-config.json'</span>, prettyJSON(modelConfig), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Schemas are exposed!'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'All thing is OK,Bye Bye!'</span>);</span><br><span class=\"line\">    process.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prettyJSON</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 2 means 'Indent with 2 spaces'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(str, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码与官方文档中的差异在于使用的方法不同,这里使用的是discoverSchema().</p>\n<p>更多的与discovery相关的方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List database tables and/or views,把数据库里的表名/视图名都取出来</span></span><br><span class=\"line\">ds.discoverModelDefinitions(&#123;<span class=\"attr\">views</span>: <span class=\"literal\">true</span>, <span class=\"attr\">limit</span>: <span class=\"number\">20</span>&#125;, cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List database columns for a given table/view,把表/视图字段取回来</span></span><br><span class=\"line\">ds.discoverModelProperties(<span class=\"string\">'PRODUCT'</span>, cb);</span><br><span class=\"line\">ds.discoverModelProperties(<span class=\"string\">'INVENTORY_VIEW'</span>, &#123;<span class=\"attr\">owner</span>: <span class=\"string\">'STRONGLOOP'</span>&#125;, cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List primary keys for a given table</span></span><br><span class=\"line\">ds.discoverPrimaryKeys(<span class=\"string\">'INVENTORY'</span>,  cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List foreign keys for a given table</span></span><br><span class=\"line\">ds.discoverForeignKeys(<span class=\"string\">'INVENTORY'</span>,  cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List foreign keys that reference the primary key of the given table</span></span><br><span class=\"line\">ds.discoverExportedForeignKeys(<span class=\"string\">'PRODUCT'</span>,  cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a model definition by discovering the given table</span></span><br><span class=\"line\">ds.discoverSchema(table, &#123;<span class=\"attr\">owner</span>: <span class=\"string\">'STRONGLOOP'</span>&#125;, cb);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.1.3\"> 1.1.3 从非结构化数据中创建model </h4>\n\n<p><strong><em>译注:</em></strong> 如果你是从1.1.2顺读下来的话,也许会以为这节内容跟上节差不多,只不过discovery的对象从关系型数据库变成了mongodb等nosql数据源.但事实不是这样的,LoopBack MongoDB connector不支持discovery.你只能从一个写好的json对象中创建model,所以不要误解了.</p>\n<p>对于非结构化数据(如NoSQL数据库和REST服务中的数据),您可以使用实例内省创建模型.实例内省使用buildModelFromInstance()从单个模型<strong>实例</strong>创建模型(<em>译注:我理解的实例就是一个json,看下面的代码,user就是一个实例,所以, buildModelFromInstance只能从一个json对象去创建model</em>)。</p>\n<p>以下数据源支持实例内省()：</p>\n<ul>\n<li><p><strong>MongoDB data sources</strong></p>\n</li>\n<li><p><strong>REST data sources</strong></p>\n</li>\n<li><p><strong>SOAP data sources</strong></p>\n</li>\n</ul>\n<p>举例如下(/server/boot/script.js):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> db = app.dataSources.db;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Instance JSON document</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Joe'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">30</span>,</span><br><span class=\"line\">    birthday: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    vip: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    address: &#123;</span><br><span class=\"line\">      street: <span class=\"string\">'1 Main St'</span>,</span><br><span class=\"line\">      city: <span class=\"string\">'San Jose'</span>,</span><br><span class=\"line\">      state: <span class=\"string\">'CA'</span>,</span><br><span class=\"line\">      zipcode: <span class=\"string\">'95131'</span>,</span><br><span class=\"line\">      country: <span class=\"string\">'US'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    friends: [<span class=\"string\">'John'</span>, <span class=\"string\">'Mary'</span>],</span><br><span class=\"line\">    emails: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">label</span>: <span class=\"string\">'work'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'x@sample.com'</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">label</span>: <span class=\"string\">'home'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'x@home.com'</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    tags: []</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a model from the user instance</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> User = db.buildModelFromInstance(<span class=\"string\">'User'</span>, user, &#123;<span class=\"attr\">idInjection</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Use the model for create, retrieve, update, and delete</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> User(user);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj.toObject());</span><br><span class=\"line\"></span><br><span class=\"line\">  User.create(user, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, u1</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Created: '</span>, u1.toObject());</span><br><span class=\"line\">    User.findById(u1.id, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, u2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Found: '</span>, u2.toObject());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>译注:</em> 上述代码还是不能实现创建model的json文件,登记注册model,感兴趣的可以自己查查API来实现这一需求,这里就不写了.</p>\n<hr>\n<h4 id=\"1.2\"> 1.2 定制Models </h4>\n\n<p>使用<code>model generator</code>创建一个model后,你就可以开始定制它了.定制的方式有多种,你可以使用<code>command-line tool</code>,或者直接编辑json文件,也可以编写JavaScript代码来实现定制.</p>\n<h5 id=\"使用command-line-tool定制model\"><a href=\"#使用command-line-tool定制model\" class=\"headerlink\" title=\"使用command-line tool定制model\"></a>使用command-line tool定制model</h5><blockquote>\n<p>  注意: 你不能对一个已经存在的model使用model generator来进行修改和定制.但是,您可以使用命令行工具手动和在一定程度上自定义模型,详见下文.</p>\n</blockquote>\n<p>能使用的命令行工具包括:</p>\n<ul>\n<li><p><strong>property generator</strong>.</p>\n</li>\n<li><p><strong>relation generator</strong>.</p>\n</li>\n<li><p><strong>ACL generator</strong>.</p>\n</li>\n</ul>\n<h5 id=\"通过编辑JSON文件来定制model\"><a href=\"#通过编辑JSON文件来定制model\" class=\"headerlink\" title=\"通过编辑JSON文件来定制model\"></a>通过编辑JSON文件来定制model</h5><p>下面是一个model的默认属性(用model generator创建model后自动添加的几个属性),例如这个model的json文件是common/models/model.json,它的内容如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"myModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">     // Properties listed here depend on your responses to the CLI</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"validations\": [],</span><br><span class=\"line\">  \"relations\": &#123;&#125;,</span><br><span class=\"line\">  \"acls\": [],</span><br><span class=\"line\">  \"methods\": []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>LoopBack为model添加了如上这些基本设置,对大多数model来说,这是比较直接的.但是对ACL设置来说,可能会有更复杂的交互,想了解更多关于acl的设置,请看<strong>ACL rule precedence</strong></p>\n<p><strong>从另一个model进行扩展</strong></p>\n<p>你可以让一个model扩展或继承自一个已经存在的model.比如内置的User或者你自定义的model.在model generator中,选择“Select model’s base class”中的model name即可.或者,你可以编辑json文件中的“base”属性来指定你的model是扩展自哪个model.</p>\n<blockquote>\n<p> 注意:如果你的model需要保存数据到mysql或者mongodb等数据库,那么基类需要选择PersistedModel. 如果选择Model作为model的基类,那你的model就不具备CRUD方法.</p>\n</blockquote>\n<p>例如,下面是customer.json的一段摘抄.它的基类是内置的User:</p>\n<p>/common/models/model.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;Customer&quot;,</span><br><span class=\"line\">  &quot;base&quot;: &quot;User&quot;,</span><br><span class=\"line\">  &quot;idInjection&quot;: false,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>强烈注意:千万不要修改内置model的属性,如果你确实想这么做.你需要创建有一个自定义的model,它继承自你想要修改的那个内置model,然后修改你自定义的这个model来代替直接修改内置model.</p>\n</blockquote>\n<p>你可以创建一个自定义model,它扩展自一个单个的、自定义的model.例如,先定义一个model叫做”mMyBaseModel”,然后你就可以定义一个名为”MyModel”的model,他的基类是”mMyBaseModel”,他的json文件的内容如下:</p>\n<p>common/models/MyModel.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"MyBaseModel\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后,你可以为这个model增加一些新的属性,例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">   <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"User\"</span>,</span><br><span class=\"line\">   <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"favoriteMovie\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>了解更多的数据类型信息,请查看<strong>LoopBack types</strong></p>\n<p><strong>定制model的其他设置</strong></p>\n<p>下面是4个你通常要定制的重要设置(<em>译注:</em> 只翻译了原文内容最多的strict,其余自己理解):</p>\n<ul>\n<li><p><strong>plural</strong> - 如果不指定,那默认就是英文规则的复数形式,比如book的复数是books,city的复数是cities.</p>\n</li>\n<li><p><strong>strict</strong> - 这个属性的默认值是false,如果你把它设置为true.那就代表该model仅仅保存具有预定义属性的实例,save或update操作中的任何其他属性都不会保留到数据源.(<em>译注:</em> 我的理解是,假设你的model的json文件中,”properties”属性下面预定义了6个字段,这时你开启这个属性为true,那么在save或update操作时,loopback就只认这6个字段,多余的一概抛弃).</p>\n</li>\n<li><p><strong>idInjection</strong> - Whether to automatically add an id property to the model. True by default.</p>\n</li>\n<li><p><strong>http.path</strong> - customized HTTP path of REST endpoints.</p>\n</li>\n</ul>\n<p>访问<strong>Model definition JSON file</strong>可以了解更多信息.</p>\n<h5 id=\"通过JavaScript代码定制model\"><a href=\"#通过JavaScript代码定制model\" class=\"headerlink\" title=\"通过JavaScript代码定制model\"></a>通过JavaScript代码定制model</h5><p>以编程方式扩展model的基本方法是编辑model对应的js文件,例如，“customer”模型有一个common/ models/customer.js文件（如果使用模型生成器创建模型）.该js脚本在定义模型之后立即执行.<strong>请将脚本视为模型定义的一部分</strong>(使用它进行模型配置和注册).在js文件里,您可以为特定属性添加model关系,复杂验证或默认函数.基本上,您不能在JSON中执行的任何操作都可以在js文件中实现.<strong>但是请注意,此时脚本无权访问app实例</strong>(<strong><em>译注:这点非常重要,切记,切记.要访问的话需要在boot目录下的脚本中实现</em></strong>)</p>\n<p>在这个js文件中,你还可以通过添加remote method或operation hook来扩展model.</p>\n<p>如果不想通过REST公开你的方法,则只需要省略remoteMethod()的调用即可.</p>\n<p><strong>更改内置model的实现</strong></p>\n<p><strong>通过server boot script</strong></p>\n<p>当将model附加到持久数据源时,它将成为扩展PersistedModel的持久化model.还记得前面介绍过的PersistedModel的特性么,那就是LoopBack会自动为你的model添加一组内置的CRUD操作方法.内置的CRUD不一定能完全符合你的要求,在某些情况下,您可能想要更改实现,这时候请使用/server/boot目录中的JavaScript文件执行此操作.例如,以下代码显示了如何重新实现Note.find()以覆盖内置的find()方法.</p>\n<p>/server/boot/script.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Note = app.models.Note;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> find = Note.find;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  Note.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filter, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(filter) &#123;</span><br><span class=\"line\">      key = <span class=\"built_in\">JSON</span>.stringify(filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cachedResults = cache[key];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cachedResults) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'serving from cache'</span>);</span><br><span class=\"line\">      process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, cachedResults);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'serving from db'</span>);</span><br><span class=\"line\">      find.call(Note, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!err) &#123;</span><br><span class=\"line\">          cache[key] = results;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cb(err, results);</span><br><span class=\"line\">      &#125;);;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过你的model’s script</strong></p>\n<p>所谓你的model’s script.就是创建model时配套生成的那个js文件.</p>\n<p>common/models/MyModel.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  MyModel.on(<span class=\"string\">'dataSourceAttached'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> find = MyModel.find;</span><br><span class=\"line\">    MyModel.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filter, cb</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> find.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.3\"> 1.3 将Model附加到数据源 </h4>\n\n<h5 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要:\"></a>概要:</h5><p>数据源使model能够访问和修改后端系统(如关系数据库)中的数据.数据源封装业务逻辑,以在model和各种后端系统(如关系数据库、REST API、SOAP Web服务、存储服务等)之间交换数据.数据源通常提供创建、检索、更新和删除(CRUD)功能.</p>\n<p>model通过可扩展和可定制的<code>connectors</code>访问数据源.一般来说,应用程序代码不直接使用连接器.相反,DataSource类提供了一个API来配置底层连接器,你可以使用这些API。</p>\n<p>内置的内存connectors适合开发环境,要使用其他数据源：</p>\n<ul>\n<li><p>使用data source generator生成器创建新的数据源，并将其添加到应用程序的datasources.json中.</p>\n</li>\n<li><p>编辑datasources.json以为数据源添加适当的凭据.</p>\n</li>\n<li><p>创建model以连接到数据源或修改现有model定义以使用你刚才添加的那个connectors.</p>\n</li>\n</ul>\n<h5 id=\"添加一个数据源\"><a href=\"#添加一个数据源\" class=\"headerlink\" title=\"添加一个数据源\"></a>添加一个数据源</h5><p>使用<code>data source generator</code>添加一个新的数据源:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:datasource</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apic create --<span class=\"built_in\">type</span> datasource</span><br></pre></td></tr></table></figure>\n\n<p>你还可以使用<code>API Designer tool</code>添加数据源.</p>\n<p>tool会提示你输入新数据源的名字以及要使用哪种connectors,例如:MySQL, Oracle, REST等等. 下面是一个datasources.json的例子:</p>\n<p>/server/datasources.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"corp1\": &#123;</span><br><span class=\"line\">  \"name\": \"corp1\",</span><br><span class=\"line\">  \"connector\": \"mysql\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>这个例子创建了一个使用mysql连接器的,名字叫做corp1的数据源.</p>\n<h5 id=\"添加数据源的访问凭证\"><a href=\"#添加数据源的访问凭证\" class=\"headerlink\" title=\"添加数据源的访问凭证\"></a>添加数据源的访问凭证</h5><p>编辑datasources.json来为数据源添加必要的访问权限信息.例如hostname, username,password, database name.</p>\n<p>例如:</p>\n<p>/server/datasources.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"corp1\": &#123;</span><br><span class=\"line\">    \"name\": \"corp1\",</span><br><span class=\"line\">    \"connector\": \"mysql\",</span><br><span class=\"line\">    \"host\": \"your-mysql-server.foo.com\",</span><br><span class=\"line\">    \"user\": \"db-username\",</span><br><span class=\"line\">    \"password\": \"db-password\",</span><br><span class=\"line\">    \"database\": \"your-db-name\"</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置model使用数据源\"><a href=\"#配置model使用数据源\" class=\"headerlink\" title=\"配置model使用数据源\"></a>配置model使用数据源</h5><p>当你使用model generator创建了新的model时.你可以从列表中选择已经添加好的数据源.如果你没添加过数据源,那么列表中只有一个默认的db数据源,这是个内存数据源.</p>\n<p>编辑应用程序的server/model-config.json文件来指定数据源.例如,让myModel使用corp1数据源.</p>\n<p>server/model-config.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"myModel\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"corp1\",</span><br><span class=\"line\">    \"public\": true</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下,model generator创建model时使用db数据源.</p>\n<hr>\n<h4 id=\"1.4\"> 1.4 通过REST公开Model </h4>\n\n<h5 id=\"概要-1\"><a href=\"#概要-1\" class=\"headerlink\" title=\"概要\"></a>概要</h5><p>LoopBack的model自动具有一组标准的<code>HTTP endpoints</code>,它们为model数据上的创建,读取,更新和删除(CRUD)操作提供REST API.要实现这个,只需要设置model-config.json中的public属性来指定是否公开model的REST API,例如:</p>\n<p>/server/model-config.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"MyModel\": &#123;</span><br><span class=\"line\">  \"public\": true,</span><br><span class=\"line\">  \"dataSource\": \"db\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>不想公开REST API,把public属性改为false就妥之.</p>\n<p><strong>REST paths</strong></p>\n<p>默认情况下,你的model的REST API访问路径是你的model名字加复数:</p>\n<p><em>译注:这段我没看明白,因为官文的原文是By default, the REST APIs are mounted to the plural of the model name; specifically:,这个specifically不好翻译.我个人对这段的理解是,下面这3个是个优先级,REST API的访问路径会按照如下的优先级去查找,例如,我的model叫cust,我设置了Model.settings.http.path=/custone,那路径就会变成这个,如果我没设置,那就默认用复数的名字作为路径</em></p>\n<ul>\n<li><p>Model.settings.http.path</p>\n</li>\n<li><p>plural, 自定义的复数形式(在Model definition JSON文件中)</p>\n</li>\n<li><p>默认情况下,自动在model名字后面加复数.例如你有个model叫location,默认情况下它被加载为/locations(后面加个复数s).</p>\n</li>\n</ul>\n<p><strong>使用REST Router</strong> </p>\n<p>如果你使用application generator创建你的应用程序, LoopBack会自动添加REST中间件并且把public属性设为true(公开REST).你不需要做任何其他事情.</p>\n<p>人工公开model的REST方法请使用loopback.rest,例如下面的代码:</p>\n<p>/server/server.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = loopback();</span><br><span class=\"line\">app.use(loopback.rest());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Expose the `Product` model</span></span><br><span class=\"line\">app.model(Product);</span><br></pre></td></tr></table></figure>\n\n<p>添加完上述代码后,名为Product的model将会自动具备了从远程mobile访问的create, read, update, delete方法. 此时,model是无模式的并且数据是未被检查的.</p>\n<p>你可以在<a href=\"http://localhost:3000/explorer查看生成的REST文档\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/explorer查看生成的REST文档</a>. </p>\n<p>LoopBack提供了一组具有REST API的内置model.有关详细信息,请查看<strong>Built-in models REST API</strong>.</p>\n<p><strong>Request format</strong></p>\n<p>对于POST和PUT请求,请求主体可以是JSON,XML或urlencoded格式,这取决于Content-Type头设置为application/json,application/xml或application/x-www-form-urlencoded.</p>\n<blockquote>\n<p> 提示:将请求的Accept头设置为application/vnd.api-json将导致响应的Content-Type头被自动设置为application/vnd.api-json.</p>\n</blockquote>\n<p><strong>使用HTTP查询字符串传递JSON对象或数组</strong></p>\n<p>某些REST API从查询字符串中获取json对象或数组.LoopBack支持2种风格来将json对象/数组编码为查询参数.</p>\n<ul>\n<li><p>Syntax from node-querystring (qs)</p>\n</li>\n<li><p>Stringified JSON</p>\n</li>\n</ul>\n<p>例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000/api/users?filter[where][username]=john&amp;filter[where][email]=callback@strongloop.com</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:3000/api/users?filter=&#123;&quot;where&quot;:&#123;&quot;username&quot;:&quot;john&quot;,&quot;email&quot;:&quot;callback@strongloop.com&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个表格描述了2种风格的编码格式:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>JSON object/array for the filter object</th>\n      <th>qs style</th>\n      <th>Stringified JSON</th>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\nwhere: {\n  username: 'john',\n  email: 'callback@strongloop.com'\n  }\n}</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter[where][username]=john<br>&amp;</code>filter[where][email]=callback@strongloop.com</pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"where\":\n{\"username\":\"john\",\n \"email\":\"callback@strongloop.com\"}\n}</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\nwhere: {\n    username: {inq: ['john', 'mary']}\n  }\n}</code></pre>\n      </td>\n      <td>\n        <pre>?filter[where][username][inq][0]=john<br>&amp;filter[where][username][inq][1]=mary</pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"where\":\n  {\"username\":{\"inq\":[\"john\",\"mary\"]}}\n}</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\n  include: ['a', 'b']\n}</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter[include]=a&amp;filter[include]=b</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"include\":[\"a\",\"b\"]}</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p><em>译注:我个人比较喜欢第二种,即Stringified JSON这种filter格式,尤其在strongloop自带的API Explorer中测试API的时候特别方便,请看下图:</em></p>\n<p>在filter那里填<code>{&quot;where&quot;:{&quot;username&quot;:&quot;john&quot;,&quot;email&quot;:&quot;callback@strongloop.com&quot;}}</code>,然后点击try it out,就可以根据指定的用户名和email查询数据了.</p>\n<p><img src=\"img/filter.jpg\" alt=\"filter\"></p>\n<p><strong>Response format</strong></p>\n<p>所有请求的响应格式通常是一个位于body或headers中的JSON对象/数组.有些响应的body是空的,例如:</p>\n<figure class=\"highlight plain\"><figcaption><span>200 OK</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://localhost:3000</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Content-Type: application/json; charset=utf-8</span><br><span class=\"line\">Content-Length: 59</span><br><span class=\"line\">Vary: Accept-Encoding</span><br><span class=\"line\">Date: Fri, 24 Oct 2014 18:02:34 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;title&quot;:&quot;MyNote&quot;,&quot;content&quot;:&quot;This is my first note&quot;,&quot;id&quot;:1&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HTTP status code表示一个请求是否成功:</p>\n<ul>\n<li>Status code 2xx indicates success</li>\n<li>Status code 4xx indicates request related issues.</li>\n<li>Status code 5xx indicates server-side problems</li>\n</ul>\n<p>对错误的响应采用以下JSON格式:</p>\n<ul>\n<li><p>message: String error message.</p>\n</li>\n<li><p>stack: String stack trace.</p>\n</li>\n<li><p>statusCode: Integer HTTP status code.</p>\n</li>\n</ul>\n<p>例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"error\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"could not find a model with id 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stack\"</span>: <span class=\"string\">\"Error: could not find a model with id 1\\n ...\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"statusCode\"</span>: <span class=\"number\">404</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>禁用API Explorer</strong></p>\n<p>LoopBack API Explorer在开发应用程序时非常有用,但为了安全起见,您可能不想在生产环境中公开它.</p>\n<p>对于使用loopback-component-explorer的应用程序，在生产环境中中禁它可以这么做：</p>\n<ul>\n<li><p>将NODE_ENV环境变量设置为“production”.</p>\n</li>\n<li><p>然后在server/component-config.production.json中:</p>\n</li>\n</ul>\n<p>server/component-config.production.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"loopback-component-explorer\"</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"预定义remote-methods\"><a href=\"#预定义remote-methods\" class=\"headerlink\" title=\"预定义remote methods\"></a>预定义remote methods</h5><p>默认情况下,对于那种后面是数据源支持的model(<em>译注:有点莫名,有不是数据源支持的model么</em>),LoopBack为他们默认公开了创建,读取,更新和删除(CRUD)操作的REST API.</p>\n<p>例如,有一个model名叫Location,LoopBack会自动创建多个具有相应REST端点的Node方法,如下表所示:</p>\n<table>\n<thead>\n<tr>\n<th>Model (Node) API</th>\n<th>HTTP Method</th>\n<th>Example Path</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-create\" target=\"_blank\" rel=\"noopener\">create()</a></td>\n<td>POST</td>\n<td>/locations</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-replaceorcreate\" target=\"_blank\" rel=\"noopener\">replaceOrCreate()</a></td>\n<td>PUT</td>\n<td>/locations</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-upsert\" target=\"_blank\" rel=\"noopener\">patchOrCreate()</a></td>\n<td>PATCH</td>\n<td>/locations</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-exists\" target=\"_blank\" rel=\"noopener\">exists()</a></td>\n<td>GET</td>\n<td>/locations/:id/exists</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findbyid\" target=\"_blank\" rel=\"noopener\">findById()</a></td>\n<td>GET</td>\n<td>/locations/:id</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-find\" target=\"_blank\" rel=\"noopener\">find()</a></td>\n<td>GET</td>\n<td>/locations</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findone\" target=\"_blank\" rel=\"noopener\">findOne()</a></td>\n<td>GET</td>\n<td>/locations/findOne</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid\" target=\"_blank\" rel=\"noopener\">destroyById() or deleteById()</a></td>\n<td>DELETE</td>\n<td>/locations/:id</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-count\" target=\"_blank\" rel=\"noopener\">count()</a></td>\n<td>GET</td>\n<td>/locations/count</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-replacebyid\" target=\"_blank\" rel=\"noopener\">replaceById()</a></td>\n<td>PUT</td>\n<td>/locations/:id</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattributes\" target=\"_blank\" rel=\"noopener\">prototype.patchAttributes()</a></td>\n<td>PATCH</td>\n<td>/locations/:id</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-createchangestream\" target=\"_blank\" rel=\"noopener\">createChangeStream()</a></td>\n<td>POST</td>\n<td>/locations/change-stream</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-updateall\" target=\"_blank\" rel=\"noopener\">updateAll()</a></td>\n<td>POST</td>\n<td>/locations/update</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-replaceorcreate\" target=\"_blank\" rel=\"noopener\">replaceOrCreate()</a></td>\n<td>POST</td>\n<td>/locations/replaceOrCreate</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-replacebyid\" target=\"_blank\" rel=\"noopener\">replaceById()</a></td>\n<td>POST</td>\n<td>/locations/:id/replace</td>\n</tr>\n</tbody></table>\n<p>LoopBack 2.0和3.0在默认公开的这些API中唯一不同的是HTTP PUT(both PUT /api/my-models and PUT /api/my-models/:id),在2.x中,默认情况下patch,部分更新.在3.0中,是完全替换更新.</p>\n<p><strong><em>译注:官方文档中这一节就这些内容,如果仅看篇幅很容易忽略这节的重要性!请回想一下,截至目前,我们掌握了创建model,还知道了从REST API上查询数据(HTTP),但在js代码中怎么获取model的数据?这就是remote methods发挥作用的时候.现在可以不必深入了解,心中有数就可以了.</em></strong></p>\n<p><strong>replaceOnPUT flag</strong></p>\n<p>使用model.json中的replaceOnPUT属性来更改mapping replace和update methods的行为.如果replaceOnPUT为true,replaceOrCreate和replaceById使用HTTP PUT方法.如果为false,updateOrCreate和updateAttributes/patchAttributes使用HTTP PUT方法。</p>\n<p>以下示例说明如何在location.json中设置replaceOnPUT：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: \"location\",</span><br><span class=\"line\">  plural: \"locations\",</span><br><span class=\"line\">  relations: &#123;…&#125;,</span><br><span class=\"line\">  acls: […],</span><br><span class=\"line\">  properties: &#123; … &#125;,</span><br><span class=\"line\">  replaceOnPUT: true</span><br><span class=\"line\">&#125;...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"公开和隐藏models-methods-and-endpoints\"><a href=\"#公开和隐藏models-methods-and-endpoints\" class=\"headerlink\" title=\"公开和隐藏models, methods, and endpoints\"></a>公开和隐藏models, methods, and endpoints</h5><p>公开model到REST上,只需设置public属性为true(/server/model-config.json):</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"Role\": &#123;</span><br><span class=\"line\">  \"dataSource\": \"db\",</span><br><span class=\"line\">  \"public\": false</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏methods and REST endpoints</strong></p>\n<p>如果不想公开某些创建,检索,更新和删除操作,可以通过在模型上调用disableRemoteMethod()来轻松隐藏它们.例如在model的js文件中,您将添加以下行以隐藏某个预定义的远程方法:</p>\n<p>common/models/location.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isStatic = <span class=\"literal\">true</span>;</span><br><span class=\"line\">MyModel.disableRemoteMethod(<span class=\"string\">'deleteById'</span>, isStatic);</span><br></pre></td></tr></table></figure>\n\n<p>现在deleteById()操作以及它对应的REST endpoint就被隐藏了.</p>\n<blockquote>\n<p> 重要提醒:确定你是在你自己的model上调用disableRemoteMethod(),而不是在内置model进行调用.</p>\n</blockquote>\n<p>下面这个例子隐藏除了login和logout的其余所有方法:</p>\n<p>In server/model-config.json:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"MyUser\": &#123;</span><br><span class=\"line\">  \"dataSource\": \"db\",</span><br><span class=\"line\">  \"public\": true,</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"remoting\": &#123;</span><br><span class=\"line\">      \"sharedMethods\": &#123;</span><br><span class=\"line\">        \"*\": false,</span><br><span class=\"line\">        \"login\": true,</span><br><span class=\"line\">        \"logout\": true</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了上面那种方法,还可以在<code>config.json</code>的remoting对象是隐藏他们:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"remoting\": &#123;</span><br><span class=\"line\">  \"context\": false,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"sharedMethods\": &#123;</span><br><span class=\"line\">    \"*\": false,</span><br><span class=\"line\">    \"login\": true,</span><br><span class=\"line\">    \"logout\": true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以通过你的model的js文件来禁用remoteMethods:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"create\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"upsert\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"updateAll\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"updateAttributes\"</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"find\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"findById\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"findOne\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"deleteById\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"confirm\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"count\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"exists\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"resetPassword\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__count__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__create__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__delete__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__destroyById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__findById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__get__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__updateById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Read-Only endpoints的例子</strong></p>\n<p>你可能想让你的model只公开read-only操作,隐藏其余所有的POST, PUT, DELETE.请看下面的例子:</p>\n<p>common/models/model.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'create'</span>, <span class=\"literal\">true</span>);\t\t\t\t<span class=\"comment\">// Removes (POST) /products</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'upsert'</span>, <span class=\"literal\">true</span>);\t\t\t\t<span class=\"comment\">// Removes (PUT) /products</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'deleteById'</span>, <span class=\"literal\">true</span>);\t\t\t<span class=\"comment\">// Removes (DELETE) /products/:id</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">\"updateAll\"</span>, <span class=\"literal\">true</span>);\t\t\t\t<span class=\"comment\">// Removes (POST) /products/update</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">\"updateAttributes\"</span>, <span class=\"literal\">false</span>);\t\t<span class=\"comment\">// Removes (PUT) /products/:id</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'createChangeStream'</span>, <span class=\"literal\">true</span>);\t<span class=\"comment\">// removes (GET|POST) /products/change-stream</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏相关model的endpoints</strong></p>\n<p>使用disableRemoteMethod()来禁用相关model的REST endpoints.</p>\n<p>例如,有2个model,分别叫post和tag,他们的关系是post hasMany tags.添加如下代码到/common/models/post.js去禁用相关model(tag)的remote methods和对应的REST endpoints: </p>\n<p>common/models/post.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Post</span>) </span>&#123;</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__get__tags'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__create__tags'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__destroyById__accessTokens'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// DELETE</span></span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__updateById__accessTokens'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// PUT</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏属性</strong></p>\n<p>上面说的都是隐藏REST或方法,如果想隐藏属性(可以理解为表字段)T,那就使用hidden属性就可以了.例如:</p>\n<p>common/models/user.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  \"properties\": &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"password\": &#123;</span><br><span class=\"line\">      \"type\": \"string\",</span><br><span class=\"line\">      \"required\": true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">   \"hidden\": [\"password\"],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>更多细节参看 <a href=\"Model-definition-JSON-file.html#hidden-properties\">Model definition JSON file (Hidden properties)</a>.</p>\n<hr>\n<h4 id=\"1.5\"> 1.5 验证Model的数据 </h4>\n\n<p>模式(schema)对model施加了限制,以确保model将保存与对应的数据库表匹配的数据.</p>\n<p>model可以在将数据传递到数据存储(例如数据库)之前验证数据,以确保其符合后端模式(schema).</p>\n<h5 id=\"为model添加schema-模式\"><a href=\"#为model添加schema-模式\" class=\"headerlink\" title=\"为model添加schema(模式)\"></a>为model添加schema(模式)</h5><p>验证数据的一种方法是创建model schema,LoopBack将确保数据符合该模式定义.</p>\n<p>例如,假设您的应用程序有一个名为product的model.以下代码定义了一个模式并将其分配给model.模式定义了两个属性:name,必需的字符串属性和price,可选的数字属性.</p>\n<p>common/models/product.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> productSchema = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: &#123; <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>, <span class=\"string\">\"required\"</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"price\"</span>: <span class=\"string\">\"number\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 实际上下面这行代码会报错,因为找不到Model,把Model换成Product就可以了.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Product = Model.extend(<span class=\"string\">'product'</span>, productSchema);</span><br></pre></td></tr></table></figure>\n\n<p>如果客户端尝试使用额外属性(例如一个名为description的属性)保存产品,那么在应用将数据保存在模型中之前,会删除这些属性.此外,由于name是必需的值,因此只有在产品包含name属性的值时,才会保存模型.</p>\n<p><strong><em>译注: 以下为实际测试,请仔细阅读</em></strong></p>\n<p><strong>基础准备:</strong></p>\n<p>首先,我在mysql数据库里建了一个表,名为city,有2个字段,分别是city_id(int类型),city_name(字符串类型),其中city_id为主键.</p>\n<p>然后,我在strongloop中建立了一个model,名为City,注意下面的model定义json中的细节.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"City\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  \"idInjection\": true,  //  先看一下这个参数,记住它是true,后面会说.</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"validateUpsert\": true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"properties\": &#123;</span><br><span class=\"line\">    \"city_id\": &#123;</span><br><span class=\"line\">      \"type\": \"number\",</span><br><span class=\"line\">      \"required\": true,</span><br><span class=\"line\">      \"id\": true // 请思考为什么要有这个属性?</span><br><span class=\"line\">      // 答案:如果我不设置这个参数,并且上面的\"idInjection\"参数还是true</span><br><span class=\"line\">      // 那么strongloop这个傻x就会默认的认为你的表主键叫\"id\",而事实上是city_id.</span><br><span class=\"line\">      // 所以在post的时候会报错.</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"city_name\": &#123;</span><br><span class=\"line\">      \"type\": \"string\",</span><br><span class=\"line\">      \"required\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"validations\": [],</span><br><span class=\"line\">  \"relations\": &#123;&#125;,</span><br><span class=\"line\">  \"acls\": [],</span><br><span class=\"line\">  \"methods\": &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来启动服务,到API Explorer中看一下city这个model,并进入到post一节,准备开始测试.如下图所示:</p>\n<p><img src=\"img/validaTest.jpg\" alt=\"model\"></p>\n<p>看一下上图我画红框地方,你会发现我并没有像上面文档要求的,在js文件里定义schema,但是model schema已经存在了,并且就是你json中定义的样子.</p>\n<p><strong>测试一:多加个schema中没有的字段,然后post,看看是什么效果</strong></p>\n<p>我在上图的data区域内输入如下内容:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"city_id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city_name\"</span>: <span class=\"string\">\"Haerbin\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"rem\"</span>:<span class=\"string\">\"我是个多加的字段\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后点击try it out!</p>\n<p>奇迹出现了!!!请看下图,strongloop居然告诉我成功了:</p>\n<p><img src=\"img/postField.jpg\" alt=\"ok\"></p>\n<p>赶紧到数据库里查一眼,确实插入进去了,新增的字段被忽略了.如下图所示:</p>\n<p><img src=\"img/dataOK.jpg\" alt=\"dataok\"></p>\n<p>如此智能和灵活,也不知道是好是坏!并且和我想象中的schema会约束数据有点不符!</p>\n<p><strong>测试二:在js中添加schema,然后多加个schema中没有的字段去post,看看是什么效果</strong></p>\n<p>首先,我在city的js文件中添加如下代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">City</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> citySchema = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city_id\"</span>: &#123; <span class=\"string\">\"type\"</span>: <span class=\"string\">\"number\"</span>, <span class=\"string\">\"required\"</span>: <span class=\"literal\">true</span>, <span class=\"string\">\"id\"</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"city_name\"</span>: &#123; <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>, <span class=\"string\">\"required\"</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"rem\"</span>: &#123; <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>, <span class=\"string\">\"required\"</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> City = City.extend(<span class=\"string\">'City'</span>, citySchema);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>请注意,上面代码中的”rem”在model的json定义中是不存在的.</p>\n<p>然后我重复上面的操作,到API Explorer中进行测试,看下图所示:</p>\n<p><img src=\"img/vaTest2.jpg\" alt=\"vaTest2\"></p>\n<p>请注意:上图中model schema红框那里的内容变成了我在js中定义的内容.作为知识要点回顾,这说明js和json定义model都是一样的.</p>\n<p>同样的,上面的操作又成功了,数据库里新增了一条记录.这和我想象的还不一样,我以为官方文档中的代码一旦添加到js文件中,就会约束数据,但实际还是没限制(不能说没限制,多余数据被抛弃了).</p>\n<p><strong>测试三:增加strict参数</strong></p>\n<p>如果我想实现”model定义了几个属性,post的时候如果有多余属性就让strongloop报错”,应该怎么操作.</p>\n<p>回想一下,上面其实提到过,在mode的json文件中,增加一条参数.”strict”: true,就可以了.</p>\n<p>测试一下,添加完这个参数,在用多余的字段去post就会报错,如下图所示:</p>\n<p><img src=\"img/vaPostErr.jpg\" alt=\"vaPostErr\"></p>\n<p>我还做了个测试,就不贴图了.我测了一下,把city_id输入个字符串(不是数字),然后去post,strongloop会报错(但是报错信息的内容比较恶心,居然提示我city_id不能为空,其实应该提示类型不符).这和下文中要讲的一点一致.那就是model会自动加载后面表格中所列的那些验证方法.</p>\n<p><strong>测试结论:</strong></p>\n<p>其实我主要是想吐槽一下strongloop的官方文档,可能是我智商低,我读到这里的时候,以为按照它要求的,在js文件中添加了schema就可以验证数据了.但实际测试真不是那么回事.所以,不要太相信官文,还是要自己多做测试.</p>\n<p><strong><em>译注: 以上为实际测试,请仔细阅读</em></strong></p>\n<h5 id=\"使用验证方法\"><a href=\"#使用验证方法\" class=\"headerlink\" title=\"使用验证方法\"></a>使用验证方法</h5><p>附加到持久数据源的每个model都具有Validatable中混合的验证方法,如下表所示:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesabsenceof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesAbsenceOf</a></td>\n      <td>验证一个或多个指定属性是否缺失.model不应包括被视为有效的属性,验证字段不为空时失败.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesexclusionof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesExclusionOf</a></td>\n      <td>验证排除.要求属性值不在指定的数组中.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesformatof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesFormatOf</a></td>\n      <td>\n        <p>验证格式.要求模型包含与给定格式匹配的属性.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesinclusionof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesInclusionOf</a></td>\n      <td>验证是否包含在集合中.要求属性的值在指定的数组中.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validateslengthof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesLengthOf</a></td>\n      <td>\n        <p>V验证长度.要求属性长度在指定范围内.三种验证：“min”，“max”和“is”.默认错误消息是：</p>\n        <ul>\n          <li>min: too short</li>\n          <li>max: too long</li>\n          <li>is: length is wrong</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesnumericalityof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesNumericalityOf</a></td>\n      <td>验证数字.需要属性的值为整数或数字.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatespresenceof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesPresenceOf</a></td>\n      <td>验证一个或多个指定属性的存在.需要包含一个被认为有效的属性的模型,验证字段为空时失败.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesuniquenessof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesUniquenessOf</a></td>\n      <td>\n        <p>验证唯一性.确保属性的值对模型是唯一的.不适用于所有连接器.目前支持这些连接器.:</p>\n        <ul>\n          <li>In Memory</li>\n          <li>Oracle</li>\n          <li>MongoDB</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>下面是上述那些方法的使用实例:</p>\n<p><strong>Options object</strong></p>\n<p>大多数验证方法接受一个选项参数,其属性取决于所使用的特定方法.不过,有两个共同的适用于所有方法的属性：</p>\n<ul>\n<li><p>message - Error message to use instead of the default message, if validation fails.</p>\n</li>\n<li><p>allowNull - Whether null values are allowed.</p>\n</li>\n</ul>\n<p>请看下面的例子:</p>\n<p>common/models/user.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  user.validatesPresenceOf(<span class=\"string\">'name'</span>, <span class=\"string\">'email'</span>);</span><br><span class=\"line\">  user.validatesLengthOf(<span class=\"string\">'password'</span>, &#123;<span class=\"attr\">min</span>: <span class=\"number\">5</span>, <span class=\"attr\">message</span>: &#123;<span class=\"attr\">min</span>: <span class=\"string\">'Password is too short'</span>&#125;&#125;);</span><br><span class=\"line\">  user.validatesInclusionOf(<span class=\"string\">'gender'</span>, &#123;<span class=\"attr\">in</span>: [<span class=\"string\">'male'</span>, <span class=\"string\">'female'</span>]&#125;);</span><br><span class=\"line\">  user.validatesExclusionOf(<span class=\"string\">'domain'</span>, &#123;<span class=\"attr\">in</span>: [<span class=\"string\">'www'</span>, <span class=\"string\">'billing'</span>, <span class=\"string\">'admin'</span>]&#125;);</span><br><span class=\"line\">  user.validatesNumericalityOf(<span class=\"string\">'age'</span>, &#123;<span class=\"attr\">int</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  user.validatesUniquenessOf(<span class=\"string\">'email'</span>, &#123;<span class=\"attr\">message</span>: <span class=\"string\">'email is not unique'</span>&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>译注:测试一下,不测不放心</em></strong></p>\n<p>在model的js文件中加一个验证city_id是否为数字并且返回指定错误信息的代码,如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">City</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义一个名为customValidator的验证方法</span></span><br><span class=\"line\">  City.validate(<span class=\"string\">'city_id'</span>, customValidator, &#123; <span class=\"attr\">message</span>: <span class=\"string\">'stop瞎整!'</span> &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 判断city_id是否为数字</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customValidator</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"keyword\">this</span>.city_id)) err();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后在API Explorer中测试一下,效果如下:</p>\n<p><img src=\"img/vaDefErr.jpg\" alt=\"vaDefErr\"></p>\n<p>效果还可以,虽然错误信息那块有点多,将来在收拾它.</p>\n<blockquote>\n<p> 提示: 当您在模型实例上调用isValid()时,将调用验证方法,并在每次创建或更新模型实例时自动调用验证方法.您不必自己去调用isValid()来验证数据.要在调用upsert()时强制执行验证约束,请确保在模型定义JSON文件中将validateUpsert选项设置为true.默认情况下,模型生成器将此属性设置为true.</p>\n</blockquote>\n<p>要显式调用验证约束,请调用isValid(),例如:</p>\n<p><strong><em>译注:实际测试下面代码还是不好使,并且代码后面少了个”)”</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user.isValid(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">valid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!valid) &#123;</span><br><span class=\"line\">    user.errors <span class=\"comment\">// hash of errors &#123;attr: [errmessage, errmessage, ...], attr: ...&#125;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个定义验证约束的示例,这次使用正则表达式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]-(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]-)*)|(\\\".-\\\"))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]-\\.)-[a-zA-Z]&#123;2,&#125;))$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">UserModel.validatesFormatOf(<span class=\"string\">'email'</span>, &#123;<span class=\"attr\">with</span>: re, <span class=\"attr\">message</span>: <span class=\"string\">'Must provide a valid email'</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(UserModel.settings.realmRequired || UserModel.settings.realmDelimiter)) &#123;</span><br><span class=\"line\">  UserModel.validatesUniquenessOf(<span class=\"string\">'email'</span>, &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Email already exists'</span>&#125;);</span><br><span class=\"line\">  UserModel.validatesUniquenessOf(<span class=\"string\">'username'</span>, &#123;<span class=\"attr\">message</span>: <span class=\"string\">'User already exists'</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要为创建新模型实例的模型添加验证,您不需要调用isValid().您可以通过添加验证器调用添加验证:</p>\n<p>common/models/MyModel.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  MyModel.validatesLengthOf(<span class=\"string\">'name'</span>, &#123; <span class=\"attr\">min</span>: <span class=\"number\">5</span>, <span class=\"attr\">message</span>: &#123; <span class=\"attr\">min</span>: <span class=\"string\">'Name should be 5- characters'</span> &#125; &#125;);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"本地化验证信息\"><a href=\"#本地化验证信息\" class=\"headerlink\" title=\"本地化验证信息\"></a>本地化验证信息</h5><p>可以在客户端上本地化验证错误消息,而不是修改服务器返回的错误响应.验证错误响应会包含error.details.codes中的错误代码,使客户端能够将错误映射到本地化消息.这里是一个示例错误响应:</p>\n<p>error.details.codes</p>\n<p><strong><em>译注:这段说的比较空,在哪?怎么设置都没说?我在model的js中试了重定义error对象,res对象都不好使,可能是我的问题.</em></strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ValidationError\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"status\"</span>: <span class=\"number\">422</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"The Model instance is not valid. See error object `details` property for more info.\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"statusCode\"</span>: <span class=\"number\">422</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"details\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"context\"</span>: <span class=\"string\">\"user\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"codes\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"password\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"presence\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"email\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"uniqueness\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"messages\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"password\"</span>: [</span><br><span class=\"line\">       <span class=\"string\">\"can't be blank\"</span></span><br><span class=\"line\">     ],</span><br><span class=\"line\">      <span class=\"attr\">\"email\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"Email already exists\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6\"> 1.6 创建Model关系 </h4>\n\n<h5 id=\"概述-2\"><a href=\"#概述-2\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>单个模型虽然易于理解和使用.但在现实中,模型通常是有联系(connected)或相关的.当您使用多个模型构建真实的应用程序时,通常需要定义模型之间的关系。 例如：</p>\n<ul>\n<li><p>客户有很多订单,每个订单都属于一个客户.</p>\n</li>\n<li><p>用户可以被分配一个或多个角色,角色可以有零个或多个用户.</p>\n</li>\n<li><p>医生伺候许多患者,患者也可以看许多医生.</p>\n</li>\n</ul>\n<p>对于有联系的模型,LoopBack为每个有联系的model公开了一组API以实现每个<strong>模型实例</strong>之间的交互,而且还可以根据客户端的需要在这些有联系的model上查询和过滤信息.</p>\n<p>您可以在模型之间定义以下关系：</p>\n<ul>\n<li><p>BelongsTo relations</p>\n</li>\n<li><p>HasOne relations</p>\n</li>\n<li><p>HasMany relations</p>\n</li>\n<li><p>HasManyThrough relations</p>\n</li>\n<li><p>HasAndBelongsToMany relations</p>\n</li>\n<li><p>Polymorphic relations(多态关系)</p>\n</li>\n<li><p>Embedded relations(嵌入关系) (embedsOne and embedsMany)</p>\n</li>\n</ul>\n<p>您可以在模型定义JSON文件或JavaScript代码中定义模型关系,最终结果是一样的(<em>译注:但是后面不建议使用js代码</em>).</p>\n<p>当为model定义关系时,LoopBack会向model中添加一组方法,详见每种关系类型的章节.</p>\n<h5 id=\"使用关系生成器relation-generator\"><a href=\"#使用关系生成器relation-generator\" class=\"headerlink\" title=\"使用关系生成器relation generator\"></a>使用关系生成器relation generator</h5><p>对于已经存在的model创建新的关系是非常简单的.使用<code>slc loopback:relation</code>, 或者<code>apic loopback:relation</code>这2个命令即可.</p>\n<p>生成器会提示你输入关系类型(belongsTo, hasMany等)和与之相关联的model name.</p>\n<h5 id=\"Relation-options-关系选项\"><a href=\"#Relation-options-关系选项\" class=\"headerlink\" title=\"Relation options(关系选项)\"></a>Relation options(关系选项)</h5><p>大多数关系类型有3个选项:</p>\n<ul>\n<li><p>Scope (<em>译注:scope可以理解为查询条件或过滤器或者model的实例,可能不太准确</em>)</p>\n</li>\n<li><p>Properties(属性)</p>\n</li>\n<li><p>Custom scope methods(自定义scope方法)</p>\n</li>\n</ul>\n<p><strong>Scope</strong></p>\n<p>scope可以是object或函数,它接受<strong>所有关联scope</strong>上的过滤器/查询条件.</p>\n<p>当scope是object时,它有常见的过滤器选项,例如:where, order, include, limit, offset等</p>\n<p>这些选项会被合并到默认过滤器中,这意味着where部分将进行AND运算(<em>译注:我理解,大概意思就是你定义的where会和原来默认过滤器的where进行AND,而其他的则会覆盖默认过滤器的选项</em>).其他选项通常会覆盖默认值(标准mergeQuery行为).</p>\n<p>当scope是函数时,它将接收当前实例,以及默认过滤器对象(<em>译注:函数入参</em>).</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// only allow products of type: 'shoe', always include products</span></span><br><span class=\"line\">Category.hasMany(Product, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">as</span>: <span class=\"string\">'shoes'</span>, </span><br><span class=\"line\">    <span class=\"comment\">// scope是object</span></span><br><span class=\"line\">    scope: &#123; </span><br><span class=\"line\">        where: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'shoe'</span> &#125;, </span><br><span class=\"line\">        include: <span class=\"string\">'products'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Product.hasMany(Image, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// scope是函数,inst是当前实例,filter是默认过滤器对象.</span></span><br><span class=\"line\">    <span class=\"comment\">// 但inst到底是谁,官文的注释说这里的inst是category,不太理解.</span></span><br><span class=\"line\">    scope: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">inst, filter</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: inst.type &#125;; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);  <span class=\"comment\">// inst is a category - match category type with product type.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Properties</strong></p>\n<p>与scope类似,Properties也可以是object或者函数.</p>\n<p><strong><em>译注,下面两句我保留了原文,因为我翻译的不太好</em></strong></p>\n<p>当Properties是object时,the keys refer to the instance, the value will be the attribute key on the related model (mapping).这个意思大概是说Properties对象的key是<strong>当前实例</strong>的属性引用,而Properties对象的value是它<strong>相关model</strong>的属性映射.</p>\n<p>当Properties是函数时,the resulting object (key/values) are merged into the related model directly.意思大概是说生成的对象直接被合并进它的<strong>关系model</strong>中.</p>\n<p>例如,以下关系将<code>type</code>转换到product这个model,并且在创建时将<code>category name</code>取消规范化为categoryName</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Category.hasMany(Product, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">as</span>: <span class=\"string\">'shoes'</span>, </span><br><span class=\"line\">    properties: &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'type'</span>,</span><br><span class=\"line\">        category: <span class=\"string\">'categoryName'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述是Properties为object时的例子,如果要以函数的形式完成同样的操作,例子如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.hasMany(Image, &#123;</span><br><span class=\"line\">    properties: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">inst</span>) </span>&#123; <span class=\"comment\">// inst is a category</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: inst.type, <span class=\"attr\">categoryName</span>: inst.name&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>译注:截至到目前,”// inst is a category”这个注释已经出现了好几次,我没太看懂inst为什么会代表category这个model,按字面理解,它好像更应该代表Product这个model.先这样吧,以后再说.</em></strong></p>\n<p><strong>invertProperties(反转属性)</strong></p>\n<p>通常情况下,属性从父对象传递到子对象,但是有时可以做相反的操作.要启用此选项,请使用invertProperties选项.可以参见<strong>Embedded models (embed with belongsTo)</strong>里面的例子.</p>\n<p><strong>Custom scope methods</strong></p>\n<p>最后,您可以使用scopeMethods属性添加自定义scope method.同样,该选项可以是对象或函数.</p>\n<blockquote>\n<p> 重要提示: 默认情况下,自定义的scope method不会作为remote methods公开,你必须手工设置functionName.shared = true才可以.</p>\n</blockquote>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reorderFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ids, cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// `this` refers to the RelationDefinition  - `images` (relation name) </span></span><br><span class=\"line\">  <span class=\"comment\">// Do some reordering here &amp; save cb(null, [3, 2, 1]); &#125;; </span></span><br><span class=\"line\">  <span class=\"comment\">// Manually declare remoting params </span></span><br><span class=\"line\">  reorderFn.shared = <span class=\"literal\">true</span>; </span><br><span class=\"line\">  reorderFn.accepts = &#123; <span class=\"attr\">arg</span>: <span class=\"string\">'ids'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'array'</span>, <span class=\"attr\">http</span>: &#123; <span class=\"attr\">source</span>: <span class=\"string\">'body'</span> &#125; &#125;; </span><br><span class=\"line\">  reorderFn.returns = &#123; <span class=\"attr\">arg</span>: <span class=\"string\">'ids'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'array'</span>, <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;; </span><br><span class=\"line\">  reorderFn.http = &#123; <span class=\"attr\">verb</span>: <span class=\"string\">'put'</span>, <span class=\"attr\">path</span>: <span class=\"string\">'/images/reorder'</span> &#125;; </span><br><span class=\"line\">  Product.hasMany(Image, &#123; <span class=\"attr\">scopeMethods</span>: &#123; <span class=\"attr\">reorder</span>: reorderFn &#125; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Exposing REST APIs for related models</strong></p>\n<p>以下示例演示如何通过REST API访问连接的模型:</p>\n<p>/server/script.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> db = loopback.createDataSource(&#123;<span class=\"attr\">connector</span>: <span class=\"string\">'memory'</span>&#125;);</span><br><span class=\"line\">  Customer = db.createModel(<span class=\"string\">'customer'</span>, &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Review = db.createModel(<span class=\"string\">'review'</span>, &#123;</span><br><span class=\"line\">    product: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    star: <span class=\"built_in\">Number</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Order = db.createModel(<span class=\"string\">'order'</span>, &#123;</span><br><span class=\"line\">    description: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    total: <span class=\"built_in\">Number</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  Customer.scope(<span class=\"string\">\"youngFolks\"</span>, &#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">age</span>: &#123;<span class=\"attr\">lte</span>: <span class=\"number\">22</span>&#125;&#125;&#125;);</span><br><span class=\"line\">  Review.belongsTo(Customer, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'authorId'</span>, <span class=\"attr\">as</span>: <span class=\"string\">'author'</span>&#125;);</span><br><span class=\"line\">  Customer.hasMany(Review, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'authorId'</span>, <span class=\"attr\">as</span>: <span class=\"string\">'reviews'</span>&#125;);</span><br><span class=\"line\">  Customer.hasMany(Order, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'customerId'</span>, <span class=\"attr\">as</span>: <span class=\"string\">'orders'</span>&#125;);</span><br><span class=\"line\">  Order.belongsTo(Customer, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'customerId'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.1\"> 1.6.1 开启Model关系之旅 </h4>\n\n<blockquote>\n<p> 一个简要的教程,说明如何设置model关系</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/strongloop/loopback-example-relations.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> loopback-example-relations</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ node .</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>译注:原文接下来一堆内容,都是介绍这个git的详细结构和内容的,我省略了大部分内容,只保留了model定义这几个与后续文档紧密相关的内容</em></strong> </p>\n<p><strong>创建models</strong></p>\n<ul>\n<li><p>Name: <code>Customer</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: Yes</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>age<ul>\n<li>number</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Order</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: Yes</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>description<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>date<ul>\n<li>date</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Account</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>date<ul>\n<li>date</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Address</code></p>\n<ul>\n<li>Data source: transient</li>\n<li>Base class: Model</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>street<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>city<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>state<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>zipCode<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Author</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Book</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: Yes</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>EmailAddress</code></p>\n<ul>\n<li>Data source: transient</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>label<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>address<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Link</code></p>\n<ul>\n<li>Data source: transient</li>\n<li>Base class: Model</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>id<ul>\n<li>number</li>\n<li>Required &gt; Please set “id”: true manually for this property, like link.json</li>\n</ul>\n</li>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>notes<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Reader</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>定义model关系</strong></p>\n<ul>\n<li><code>Customer</code><ul>\n<li>has many<ul>\n<li><code>Order</code><ul>\n<li>Property name for the relation: <code>orders</code></li>\n<li>Custom foreign key: <code>customerId</code></li>\n<li>Require a through model: No</li>\n</ul>\n</li>\n<li><code>Other Relations:</code> (please add them manually)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"address\": &#123;</span><br><span class=\"line\">  \"type\": \"embedsOne\",</span><br><span class=\"line\">  \"model\": \"Address\",</span><br><span class=\"line\">  \"property\": \"billingAddress\",</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"validate\": true,</span><br><span class=\"line\">    \"forceId\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"emails\": &#123;</span><br><span class=\"line\">  \"type\": \"embedsMany\",</span><br><span class=\"line\">  \"model\": \"EmailAddress\",</span><br><span class=\"line\">  \"property\": \"emailList\",</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"validate\": true,</span><br><span class=\"line\">    \"forceId\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"accounts\": &#123;</span><br><span class=\"line\">  \"type\": \"referencesMany\",</span><br><span class=\"line\">  \"model\": \"Account\",</span><br><span class=\"line\">  \"property\": \"accountIds\",</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"validate\": true,</span><br><span class=\"line\">    \"forceId\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Book</code>(please add them manually)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"people\": &#123;</span><br><span class=\"line\">    \"type\": \"embedsMany\",</span><br><span class=\"line\">    \"model\": \"Link\",</span><br><span class=\"line\">    \"scope\": &#123;</span><br><span class=\"line\">      \"include\": \"linked\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><code>Link</code>(please add them manually)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"linked\": &#123;</span><br><span class=\"line\">  \"type\": \"belongsTo\",</span><br><span class=\"line\">  \"polymorphic\": &#123;</span><br><span class=\"line\">    \"idType\": \"number\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"properties\": &#123;</span><br><span class=\"line\">    \"name\": \"name\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"invertProperties\": true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Order</code><ul>\n<li>belongs to<ul>\n<li><code>Customer</code><ul>\n<li>Property name for the relation: Leave blank - defaults to customer</li>\n<li>Custom foreign key: Leave blank</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"1.6.2\"> 1.6.2 BelongsTo关系(多对一,或一对一) </h4>\n\n<h5 id=\"概述-3\"><a href=\"#概述-3\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>belongsTo关系是指一个model与另一个model建立多对一(many-to-one)或一对一(one-to-one)的连接.在多对一关系中,声明model的每个实例”属于”另一个model的至多一个实例,而目标model可以具有许多声明model.</p>\n<p>例如,假设应用程序有customers和orders两个model:</p>\n<ul>\n<li><p>每个订单只能由一个客户设置: ”Order belongsTo (one) Customer”.</p>\n</li>\n<li><p>一个客户可以有多个订单: ”Customer hasMany Orders”.</p>\n</li>\n</ul>\n<p>这种belongsTo关系是hasMany关系的逻辑反射.</p>\n<p>声明模型(Order)具有引用目标模型(Customer)的主键属性的外键属性.如果主键不存在,LoopBack将自动添加一个(<em>译注:这句话是说order有个外键,内容是customer的主键</em>).</p>\n<p>另一种belongsTo关系是一对一的关系,它类似于many-to-one,但不同的是,一对一关系要求拥有模型的每个实例只能有一个声明模型的实例.</p>\n<p>例如,假设应用程序有customers和adress两个model：</p>\n<ul>\n<li><p>每个地址只能与一个客户相关联：“地址belongsTo一个客户”。</p>\n</li>\n<li><p>客户只能有一个地址：“客户hasOne一个地址”。</p>\n</li>\n</ul>\n<p>这种belongsTo关系是hasOne关系的逻辑反射.</p>\n<h5 id=\"定义belongsTo关系\"><a href=\"#定义belongsTo关系\" class=\"headerlink\" title=\"定义belongsTo关系\"></a>定义belongsTo关系</h5><p>使用关系生成器<code>relation generator</code>创建两个model之间的关系.该工具将提示您输入model的名称,相关model的名称和其他必需的信息.该工具将相应地修改model定义JSON文件(例如,common/models/customer.json).</p>\n<p>例如，下面是loopback-example-relation中的订单模型的JSON文件：</p>\n<p><strong>common/models/order.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \"name\": \"Order\",          // 这个就是前面说的\"声明模型(model)\"</span><br><span class=\"line\">  \"base\": \"PersistedModel\",</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"customer\": &#123;           // 关系名</span><br><span class=\"line\">      \"type\": \"belongsTo\",  // 关系类型</span><br><span class=\"line\">      \"model\": \"Customer\",  // 关联的model,也就是前面说的\"目标模型(model)\"</span><br><span class=\"line\">      \"foreignKey\": \"\"      // 为空,所以loopback自动指定customer的customerId为外键</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>或者,你还可以通过js代码来定义“belongsTo”关系, <strong>虽然一般不推荐这么做</strong>:</p>\n<p><strong>common/models/order.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Order.belongsTo(Customer, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'customerId'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果声明model没有外键属性,LoopBack将添加一个具有相同名称的属性.属性的类型将与目标模型的<code>id</code>属性的类型相同(<em>译注:id属性是永远存在的,如果你没指定,loopback默认也指定</em>).</p>\n<p>如果不指定它们,那么LoopBack指定关系名称和外键如下：</p>\n<ul>\n<li>关系名称：驼峰式的模型名称,例如,对于“Customer”模型,关系是“customer”.</li>\n<li>外键：附加了<code>Id</code>的关系名称,例如,对于关系名称“customer”,默认外键是“customerId”.</li>\n</ul>\n<h5 id=\"添加method到model\"><a href=\"#添加method到model\" class=\"headerlink\" title=\"添加method到model\"></a>添加method到model</h5><p>一旦定义belongsTo关系,LoopBack会自动添加一个带有关系名称的方法到声明模型类的原型,例如:<code>Order.prototype.customer(...)</code></p>\n<p>根据参数,该方法可用于get或set所属模型实例.方法调用的结果在内部缓存,并通过对方法的后续同步调用提供.</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>order.customer(function(err, customer) {<br>  ...<br>});</pre>\n      </td>\n      <td>Get the customer for the order asynchronously(异步获取定单的客户)</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var customer = order.customer();</pre>\n      </td>\n      <td>\n        <p>Synchronously get the results of a previous get call to <span>customer(...)(同步获取之前的get调用结果给客户)</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre>order.customer(customer);</pre>\n      </td>\n      <td>Set the customer for the order(设置定单的客户)</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"1.6.3\"> 1.6.3 HasOne关系(一对一) </h4>\n\n<h5 id=\"概述-4\"><a href=\"#概述-4\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>hasOne关系与另一个model建立了一对一的连接,这使得声明模型的每个实例具有另一个模型的”has one”实例.hasOne关系是hasMany关系的退化.</p>\n<h5 id=\"定义hasOne关系\"><a href=\"#定义hasOne关系\" class=\"headerlink\" title=\"定义hasOne关系\"></a>定义hasOne关系</h5><p>使用关系生成器<code>relation generator</code>创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).</p>\n<p>例如,假设有两个model:supplier和account</p>\n<p><strong>common/models/supplier.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"supplier\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"supplier_acct\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasOne\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"account\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"supplierId\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>supplier(供应商)有一个account(帐号), 在声明模型上有个外键:account.supplierId -&gt; supplier.id.</p>\n<p><em>译注: 观察上面supplier的json,你会发现,它自身的model定义中只有一个名为name的字段.这时,在它的关系中定义的foreignKey会不会合并到supplier的model中,大家可以试一下.</em></p>\n<p><strong>common/models/account.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"account\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"number\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"required\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"acctmgr\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"supplierId\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"number\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"required\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者,你可以通过模型的js代码来定义“hasOne”关系, <strong>虽然通常情况下不建议在和么做</strong>:</p>\n<p><strong>common/models/supplier.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Supplier.hasOne(Account, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'supplierId'</span>, <span class=\"attr\">as</span>: <span class=\"string\">'account'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果目标模型没有外键属性,LoopBack将添加一个具有相同名称的属性.属性的类型将与目标模型的id属性的类型相同.<strong>请注意,外键属性是在目标模型上定义的(例如,Account)</strong>.</p>\n<p>如果不指定它们,那么LoopBack生成关系名称和外键如下:</p>\n<ul>\n<li>关系名称:驼峰式模型名称,例如,对于”supplier”模型，关系是”supplier”.(<em>译注:你看出驼峰了么,我是没看出来</em>)</li>\n<li>外键:附有Id的关系名称,例如,对于关系名称”supplier”,默认外键是”supplierId”.</li>\n</ul>\n<h5 id=\"添加method到model-1\"><a href=\"#添加method到model-1\" class=\"headerlink\" title=\"添加method到model\"></a>添加method到model</h5><p>一旦定义了hasOne关系,LoopBack会自动添加一个带有关系名称的方法到声明模型类的原型.例如:supplier.prototype.account(…).</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account(function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>\n        <p>Find the supplier's account model.</p>\n        <div class=\"sl-hidden\"><strong>REVIEW COMMENT from Rand</strong><br>You cannot supply a filter, as you can for hasMany right?</div>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var supplier = supplier.account.build(data);</pre>\n        <p>Or equivalently:</p>\n        <pre>var account = new account({supplierId: supplier.id, ...});</pre>\n      </td>\n      <td>Build a new account for the supplier with the supplierId to be set to the id of the supplier. No persistence is involved.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.create(data, function(err, account) {<br>  ...<br>});</pre>\n        <p>Or, equivalently:</p>\n        <pre>account.create({supplierId: supplier.id, ...}, function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new account for the supplier. If there is already an account, an error will be reported.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.destroy(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove the account for the supplier.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.update({balance: 100}, function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>Update the associated account.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"1.6.4\"> 1.6.4 HasMany关系(一对多) </h4>\n\n<h5 id=\"概述-5\"><a href=\"#概述-5\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>hasMany关系与另一个模型建立一对多连接.你经常在belongsTo关系的“另一边”找到这个关系.此关系指示模型的每个实例具有另一个模型的零个或多个实例.例如,在具有客户和订单两个模型的应用程序中,客户可以有许多订单.</p>\n<h5 id=\"定义hasMany关系\"><a href=\"#定义hasMany关系\" class=\"headerlink\" title=\"定义hasMany关系\"></a>定义hasMany关系</h5><p>使用关系生成器<code>relation generator</code>创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).</p>\n<p>例如,下面是一个model的json定义文件:</p>\n<p><strong>common/models/customer.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"reviews\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Review\",</span><br><span class=\"line\">      \"foreignKey\": \"authorId\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>或者,你可以通过模型的js代码来定义“hasOne”关系, <strong>虽然通常情况下不建议在和么做</strong>:</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer.hasMany(Review, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'reviews'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'authorId'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果不指定它们,那么LoopBack生成关系名称和外键如下:</p>\n<ul>\n<li>关系名称:驼峰式的模型复数名称,例如,对于”Order”模型，关系是”orders”.</li>\n<li>外键:附有Id的关系名称,例如,对于关系名称”Customer”,默认外键是”customerId”.</li>\n</ul>\n<h5 id=\"添加method到model-2\"><a href=\"#添加method到model-2\" class=\"headerlink\" title=\"添加method到model\"></a>添加method到model</h5><p>一旦你定义了一个“hasMany”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:Customer.prototype.orders(…).</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders([filter],\n  function(err, orders) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find orders for the customer, optionally using provided [filter](Querying-data.html)</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var order = customer.orders.build(data);</pre>\n        <p>Or equivalently:</p>\n        <pre>var order = new Order({customerId: customer.id, ...});</pre>\n      </td>\n      <td>Build a new order for the customer with the customerId to be set to the id of the customer. No persistence is involved.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.create(data,\n  function(err, order) {<br>  ...<br>});</pre>\n        <p>Or, equivalently:</p>\n        <pre>Order.create({customerId: customer.id, ...},\n  function(err, order) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new order for the customer.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.destroyAll(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove all orders for the customer.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.findById(orderId,\n  function(err, order) {<br>   ...<br>});</pre>\n      </td>\n      <td>Find an order by ID.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.destroy(orderId,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Delete an order by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"1.6.5\"> 1.6.5 HasManyThrough关系(多对多) </h4>\n\n<h5 id=\"概述-6\"><a href=\"#概述-6\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>hasManyThrough关系设置了与另一个模型的多对多连接.此关系表示<code>通过第三(中介)模型，声明模型可以与另一模型的零个或多个实例匹配</code>(_译注:这句不太好理解,但是看下面的图就能理解了).例如,在医生的申请中,如果病人预约见医生,有关的关系声明可能是:</p>\n<p><img src=\"img/hasManyThrough.jpg\" alt=\"hasManyThrough\"></p>\n<p>第三(中介)模型(Appointment),有2个外键属性(physicianId和patientId),这2个外键分别引用声明模型(Physician)的主键,以及目标模型(Patient)的主键.</p>\n<h5 id=\"定义hasManyThrough关系\"><a href=\"#定义hasManyThrough关系\" class=\"headerlink\" title=\"定义hasManyThrough关系\"></a>定义hasManyThrough关系</h5><p>使用关系生成器<code>relation generator</code>创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).</p>\n<p>创建hasManyThrough关系时,对”Require a through model”这个问题回答<strong>Yes</strong>,然后指定model即可,如下所示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[?] Require a through model? Yes</span><br><span class=\"line\">[?] Choose a through model: Appointment</span><br></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<p><strong>common/models/physician.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Physician\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"patients\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Patient\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"physicianId\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"through\"</span>: <span class=\"string\">\"Appointment\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/patient.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Patient\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"physicans\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Physician\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"patientId\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"through\"</span>: <span class=\"string\">\"Appointment\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/appointment.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Appointment\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appointmentDate\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"date\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"physician\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"belongsTo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Physician\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"physicianId\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"patient\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"belongsTo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Patient\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"patientId\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>你还可以通过js代码来设置hasManyThrough关系,<strong>虽然通常情况下不建议在和么做</strong>:</p>\n<p><strong>common/models/physician.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">Appointment.belongsTo(Patient);</span><br><span class=\"line\">Appointment.belongsTo(Physician);</span><br><span class=\"line\"></span><br><span class=\"line\">Physician.hasMany(Patient, &#123;<span class=\"attr\">through</span>: Appointment&#125;);</span><br><span class=\"line\">Patient.hasMany(Physician, &#123;<span class=\"attr\">through</span>: Appointment&#125;);</span><br><span class=\"line\">                                                   <span class=\"comment\">// Now the Physician model has a virtual property called patients:</span></span><br><span class=\"line\">Physician.patients(filter, callback);              <span class=\"comment\">// Find patients for the physician</span></span><br><span class=\"line\">Physician.patients.build(data);                    <span class=\"comment\">// Build a new patient</span></span><br><span class=\"line\">Physician.patients.create(data, callback);         <span class=\"comment\">// Create a new patient for the physician</span></span><br><span class=\"line\">Physician.patients.destroyAll(callback);           <span class=\"comment\">// Remove all patients for the physician</span></span><br><span class=\"line\">Physician.patients.add(patient, callback);         <span class=\"comment\">// Add an patient to the physician</span></span><br><span class=\"line\">Physician.patients.remove(patient, callback);      <span class=\"comment\">// Remove an patient from the physician</span></span><br><span class=\"line\">Physician.patients.findById(patientId, callback);  <span class=\"comment\">// Find an patient by id</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>定义外键属性</strong></p>\n<p>hasManyThrough关系具有指示外键属性(字段)名称的keyThrough属性.如果未指定,它将默认为带有附加ID的toModelName.例如:</p>\n<ul>\n<li>Physician.hasMany(Patient, {through: Appointment}) - keyThrough defaults to patientId.</li>\n<li>Patient.hasMany(Physician, {through: Appointment})- keyThrough defaults to physicianId.</li>\n</ul>\n<p>上面的keyThrough属性将用于匹配这些foreignKeys：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Appointment.belongsTo(Physician, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'physicianId'</span>&#125;);</span><br><span class=\"line\">Appointment.belongsTo(Patient, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'patientId'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>你可以显式指定keyThrough属性:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Physician.hasMany(Patient, &#123;<span class=\"attr\">through</span>: Appointment, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'fooId'</span>, <span class=\"attr\">keyThrough</span>: <span class=\"string\">'barId'</span>&#125;);</span><br><span class=\"line\">Patient.hasMany(Physician, &#123;<span class=\"attr\">through</span>: Appointment, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'barId'</span>, <span class=\"attr\">keyThrough</span>: <span class=\"string\">'fooId'</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// keyThroughs above will be used to match foreignKeys below</span></span><br><span class=\"line\">Appointment.belongsTo(Physician, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'foo'</span>&#125;); <span class=\"comment\">// foreignKey defaults to 'fooId'</span></span><br><span class=\"line\">Appointment.belongsTo(Patient, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'bar'</span>&#125;);   <span class=\"comment\">// foreignKey defaults to 'barId'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在JSON中定义keyThrough</strong></p>\n<p>下面是使用外键定义hasManyThrough关系的示例.考虑下面的表:</p>\n<ul>\n<li>STUDENTS(ID,STUNAME): student information</li>\n<li>COURSES(ID,COURNAME): course information</li>\n<li>COURSTU(COURID,STUID): table with foreign keys that handle the many-to-many mapping</li>\n</ul>\n<p>你可以按照如下所示在JSON文件中定义关系:</p>\n<p><strong>common/models/courses.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"students\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Students\",</span><br><span class=\"line\">      \"foreignKey\": \"courid\",</span><br><span class=\"line\">      \"through\": \"Courstu\",</span><br><span class=\"line\">      \"keyThrough\": \"stuid\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/students.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"relations\": &#123;</span><br><span class=\"line\">    \"courses\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Courses\",</span><br><span class=\"line\">      \"foreignKey\": \"stuid\",</span><br><span class=\"line\">      \"through\": \"Courstu\",</span><br><span class=\"line\">      \"keyThrough\": \"courid\"</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Self throug)</strong></p>\n<p>在某些情况下,您可能想要定义从模型到其自身的关系.例如,考虑一个社交媒体应用程序,用户可以follow其他用户.在这种情况下,用户可以follow许多其他用户并且可以被其他用户follow.下面的代码显示了如何定义,以及相应的keyThrough属性:</p>\n<p><strong>common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.hasMany(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'followers'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'followeeId'</span>, <span class=\"attr\">keyThrough</span>: <span class=\"string\">'followerId'</span>, <span class=\"attr\">through</span>: Follow&#125;);</span><br><span class=\"line\">User.hasMany(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'following'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'followerId'</span>, <span class=\"attr\">keyThrough</span>: <span class=\"string\">'followeeId'</span>, <span class=\"attr\">through</span>: Follow&#125;);</span><br><span class=\"line\">Follow.belongsTo(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'follower'</span>&#125;);</span><br><span class=\"line\">Follow.belongsTo(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'followee'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加method到model-3\"><a href=\"#添加method到model-3\" class=\"headerlink\" title=\"添加method到model\"></a>添加method到model</h5><p>一旦你定义了一个“hasManyThrough”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:physician.patients.create(…).</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients(filter,\n  function(err, patients) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find patients for the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var patient = physician.patients.build(data);</pre>\n      </td>\n      <td>Create a new patient.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.create(data,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new patient for the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.destroyAll(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove all patients for the physician</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.add(patient,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Add a patient to the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.remove(patient,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove a patient from the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.findById(patientId,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find an patient by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>这些关系方法提供了用于与相关对象(上述示例中的患者)一起工作的API.但是,它们不允许您在单个调用中访问相关对象(Patient)和“through”记录(Appointment).</p>\n<p>例如,如果要添加新患者并在特定日期创建预约,则必须进行两次调用(REST请求):</p>\n<p>1.通过Patient.create创建</p>\n<p><code>POST /patients</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Jane Smith\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.通过Appointment.create创建appointment,将patientId属性设置为Patient.create返回的id.</p>\n<p><code>POST /appointments</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"patientId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"physicianId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"appointmentDate\"</span>: <span class=\"string\">\"2014-06-01\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下查询可用于列出给定医生的所有患者,包括其约会日期:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /appointments?filter=&#123;&quot;include&quot;:[&quot;patient&quot;],&quot;where&quot;:&#123;&quot;physicianId&quot;:2&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>响应返回:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appointmentDate\"</span>: <span class=\"string\">\"2014-06-01\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"patientId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"physicianId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"patient\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Jane Smith\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.6\"> 1.6.6 HasAndBelongsToMany关系(多对多) </h4>\n\n<h5 id=\"概述-7\"><a href=\"#概述-7\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>hasAndBelongsToMany关系创建了与另一个模型的<strong>直接</strong>多对多连接,没有中间模型.例如,某个应用程序具有名为组件(assembly)和部件(part)的2个model,其中每个组件具有许多部件,并且每个部件出现在许多组件中,您可以这样声明模型:</p>\n<h5 id=\"定义hasAndBelongsToMany关系\"><a href=\"#定义hasAndBelongsToMany关系\" class=\"headerlink\" title=\"定义hasAndBelongsToMany关系\"></a>定义hasAndBelongsToMany关系</h5><p>使用关系生成器<code>relation generator</code>创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).</p>\n<p><img src=\"img/assembly.jpg\" alt=\"assembly\"></p>\n<p>例如,下面是assembly模型的JSON文件的摘录,表示了assembly(组件)和part(部件)模型之间的hasAndBelongsToMany关系:</p>\n<p><strong>/common/models/assembly.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Assembly\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"plural\"</span>: <span class=\"string\">\"Assemblies\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"parts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasAndBelongsToMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Part\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>你还可以通过js代码定义hasAndBelongsToMany关系,虽然通常情况下不建议这么做:</p>\n<p><strong>/common/models/assembly.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Part.hasAndBelongsToMany(Assembly);</span><br><span class=\"line\">Assembly.hasAndBelongsToMany(Part);</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过REST API添加关系</strong></p>\n<p>通过REST API添加关系时,连接模型必须存在才能添加关系.例如,在上面的“Assembly”和“Part”模型示例中,要通过REST API接口将“Part”的实例添加到“Assembly”中,必须存在一个“AssemblyPart”模型才能工作.</p>\n<p><strong>大多数时候,你应该使用method(方法)添加“hasAndBelongToMany”关系</strong>到服务器端的模型:</p>\n<p><strong>Example method</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assembly.parts.add(part, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果您需要使用REST添加关系,首先检查是否首先存在“AssemblyPart”模型.然后使用此代码添加关系:</p>\n<p><strong>Rest Example Method</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assembly.Parts.link(&#123;<span class=\"attr\">id</span>:assemblyId, <span class=\"attr\">fk</span>: partId&#125;, partInstance,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, header</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//success</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"为model添加method\"><a href=\"#为model添加method\" class=\"headerlink\" title=\"为model添加method\"></a>为model添加method</h5><p>一旦你定义了一个“hasAndBelongsToMany”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:assembly.parts.create(…).</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts(filter,\n  function(err, parts) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find parts for the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var part = assembly.parts.build(data);</pre>\n      </td>\n      <td>Build a new part.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.create(data,\n  function(err, part) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new part for the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.add(part,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Add a part to the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.remove(part,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove a part from the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.findById(partId,\n  function(err, part) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find a part by ID.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.destroy(partId,\nfunction(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Delete a part by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"1.6.7\"> 1.6.7 Polymorphic关系(多态) </h4>\n\n<h5 id=\"概述-8\"><a href=\"#概述-8\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack支持多态关系(polymorphic relations),其中模型可以属于多个其他模型,在单个关联上。 例如,您可能具有属于作者模型或读者模型的图片模型.</p>\n<p><em>译注: 上面翻译的不好,原文在这里,自己理解LoopBack supports polymorphic relations in which a model can belong to more than one other model, on a single association. For example, you might have a Picture model that belongs to either an Author model or a Reader model</em></p>\n<p>下面的示例使用三个示例模型:Picture,Author,和Reader,其中Picture可以属于Author或Reader.</p>\n<h5 id=\"HasMany的polymorphic关系实现\"><a href=\"#HasMany的polymorphic关系实现\" class=\"headerlink\" title=\"HasMany的polymorphic关系实现\"></a>HasMany的polymorphic关系实现</h5><p>常用的选项都被支持,例如:’photos’指定一个不同的relation name/accessor(关系名称/访问器).</p>\n<p><strong>common/models/author.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Author\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"pictures\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Picture\",</span><br><span class=\"line\">      &#123; <span class=\"attr\">\"polymorphic\"</span>: <span class=\"string\">\"imageable\"</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>和:</p>\n<p><strong>common/models/reader.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Reader\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"pictures\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Picture\",</span><br><span class=\"line\">      \"polymorphic\": &#123;</span><br><span class=\"line\">        \"as\": \"imageable\",</span><br><span class=\"line\">        \"foreignKey\": \"imageableId\",</span><br><span class=\"line\">        \"discriminator\": \"imageableType\"</span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者,你可以在js代码中定义关系:</p>\n<p><strong>common/models/author.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Author.hasMany(Picture, &#123; <span class=\"attr\">polymorphic</span>: <span class=\"string\">'imageable'</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>和:</p>\n<p><strong>common/models/reader.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reader.hasMany(Picture, &#123; <span class=\"attr\">polymorphic</span>: &#123; <span class=\"comment\">// alternative syntax  </span></span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'imageable'</span>, <span class=\"comment\">// if not set, default to: reference</span></span><br><span class=\"line\">  foreignKey: <span class=\"string\">'imageableId'</span>, <span class=\"comment\">// defaults to 'as - Id'</span></span><br><span class=\"line\">  discriminator: <span class=\"string\">'imageableType'</span> <span class=\"comment\">// defaults to 'as - Type'</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"HasManyThrough的polymorphic关系实现\"><a href=\"#HasManyThrough的polymorphic关系实现\" class=\"headerlink\" title=\"HasManyThrough的polymorphic关系实现\"></a>HasManyThrough的polymorphic关系实现</h5><p>要定义hasMany多态关系,必须有一个“through”模型,类似于标准的HasManyThrough关系.</p>\n<p>例如,”ImageLink”:</p>\n<p><strong>/common/models/ImageLink.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ImageLink\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"author\": &#123;</span><br><span class=\"line\">      \"type\": \"belongsTo\",</span><br><span class=\"line\">      \"model\": \"Author\",</span><br><span class=\"line\">      \"foreignKey\": \"authorId\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"pictures\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Picture\",</span><br><span class=\"line\">      \"polymorphic\": &#123;</span><br><span class=\"line\">        \"foreignKey\": \"imageableId\",</span><br><span class=\"line\">        \"discriminator\": \"imageableType\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个例子就是polymorphic hasManyThrough关系:</p>\n<p><strong>/common/models/Author.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Author\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"pictures\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Picture\",</span><br><span class=\"line\">      \"polymorphic\": &#123;</span><br><span class=\"line\">        \"foreignKey\": \"imageableId\",</span><br><span class=\"line\">        \"discriminator\": \"imageableType\"</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      \"through\": \"ImageLink\",</span><br><span class=\"line\">      \"keyThrough\": \"authorId\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的,用js实现也可以,例子是下面这个:</p>\n<p><strong>/common/models/Author.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Author.hasMany(Picture, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'pictures'</span>,</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  through: ImageLink,</span><br><span class=\"line\">  keyThrough: <span class=\"string\">'authorId'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"BelongsTo的polymorphic关系实现\"><a href=\"#BelongsTo的polymorphic关系实现\" class=\"headerlink\" title=\"BelongsTo的polymorphic关系实现\"></a>BelongsTo的polymorphic关系实现</h5><p>因为你动态地定义了相关的模型,所以你不能在前面声明它(<em>译注:原文是you cannot declare it up front,我翻译的好像不准</em>). 因此,不是传入相关模型(名称),而是指定多态关系的名称.</p>\n<p><strong>common/models/picture.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Picture\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"author\": &#123;</span><br><span class=\"line\">      \"type\": \"belongsTo\",</span><br><span class=\"line\">      \"model\": \"Author\",</span><br><span class=\"line\">      \"polymorphic\": &#123;</span><br><span class=\"line\">        \"foreignKey\": \"imageableId\",</span><br><span class=\"line\">        \"discriminator\": \"imageableType\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者,使用js代码:</p>\n<p><strong>common/models/picture.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Picture.belongsTo(<span class=\"string\">'imageable'</span>, &#123;</span><br><span class=\"line\">  polymorphic: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"comment\">// Alternatively, use an object for setup</span></span><br><span class=\"line\">Picture.belongsTo(<span class=\"string\">'imageable'</span>, &#123;</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"HasAndBelongsToMany的polymorphic关系实现\"><a href=\"#HasAndBelongsToMany的polymorphic关系实现\" class=\"headerlink\" title=\"HasAndBelongsToMany的polymorphic关系实现\"></a>HasAndBelongsToMany的polymorphic关系实现</h5><p>这需要一个明确的“through”模型,例如:PictureLink.</p>\n<p>关系<code>Picture.belongsTo(PictureLink)</code>和<code>Picture.belongsTo(&#39;imageable&#39;,{polymorphic：true})</code>将自动设置.</p>\n<p>对于PictureLink所需的属性也是如此(true).</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Author.hasAndBelongsToMany(Picture, &#123;</span><br><span class=\"line\">  through: PictureLink,</span><br><span class=\"line\">  polymorphic: <span class=\"string\">'imageable'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Reader.hasAndBelongsToMany(Picture, &#123;</span><br><span class=\"line\">  through: PictureLink,</span><br><span class=\"line\">  polymorphic: <span class=\"string\">'imageable'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Optionally, define inverse hasMany relations with '(invert: true)'</span></span><br><span class=\"line\">Picture.hasMany(Author, &#123;</span><br><span class=\"line\">  through: PictureLink,</span><br><span class=\"line\">  polymorphic: <span class=\"string\">'imageable'</span>,</span><br><span class=\"line\">  invert: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Picture.hasMany(Reader, &#123;</span><br><span class=\"line\">  through: PictureLink,</span><br><span class=\"line\">  polymorphic: <span class=\"string\">'imageable'</span>,</span><br><span class=\"line\">  invert: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"HasOne的polymorphic关系实现\"><a href=\"#HasOne的polymorphic关系实现\" class=\"headerlink\" title=\"HasOne的polymorphic关系实现\"></a>HasOne的polymorphic关系实现</h5><p>如下所示,您可以指定’avatar’来显式设置关系的名称.如果未设置,它将默认为多态名称.</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Picture.belongsTo(<span class=\"string\">'imageable'</span>, &#123;<span class=\"attr\">polymorphic</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">Author.hasOne(Picture, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'avatar'</span>, <span class=\"attr\">polymorphic</span>: <span class=\"string\">'imageable'</span>&#125;);</span><br><span class=\"line\">Reader.hasOne(Picture, &#123;<span class=\"attr\">polymorphic</span>: &#123;<span class=\"attr\">as</span>: <span class=\"string\">'imageable'</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"处理polymorphic-idType\"><a href=\"#处理polymorphic-idType\" class=\"headerlink\" title=\"处理polymorphic.idType\"></a>处理polymorphic.idType</h5><p>因为modelTo在前面是未知的(它是多态的),你不能依靠<code>modelTo</code>来获得<code>foreignKey</code>类型.您可以显式声明<code>idType</code>,如下所示.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">  url: 'john.jpg',</span><br><span class=\"line\">  imageableType: 'Author',</span><br><span class=\"line\">  imageableId: '1',</span><br><span class=\"line\">  id: 1</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  url: 'joe.jpg',</span><br><span class=\"line\">  imageableType: 'Reader',</span><br><span class=\"line\">  imageableId: '1',</span><br><span class=\"line\">  id: 2</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">Authors: [&#123;</span><br><span class=\"line\">  username: 'John',</span><br><span class=\"line\">  id: 1</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">Readers: [&#123;</span><br><span class=\"line\">  name: 'Joe',</span><br><span class=\"line\">  id: 1</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Author = app.models.Author;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Reader = app.models.Reader;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Picture = app.models.Picture;</span><br><span class=\"line\"></span><br><span class=\"line\">Author.hasOne(Picture, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'avatar'</span>,</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Reader.hasOne(Picture, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'imageable'</span>,</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Picture.belongsTo(<span class=\"string\">'owner'</span>, &#123;</span><br><span class=\"line\">  idName: <span class=\"string\">'username'</span>,</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    idType: Author.definition.properties.username.type,</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Creating demo author, reader pictures then listing them</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAuthor</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  Author.create(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">\"John\"</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">author</span>) </span>&#123;</span><br><span class=\"line\">    author.avatar.create(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">\"john.jpg\"</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createReader</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  Reader.create(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Joe\"</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reader</span>) </span>&#123;</span><br><span class=\"line\">    reader.imageable.create(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">\"joe.jpg\"</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listPictures</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Picture.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nPictures:\\n\"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listReaders</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Reader.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nReaders:\\n\"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listAuthors</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Author.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nAuthors:\\n\"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//executing the demo</span></span><br><span class=\"line\">createAuthor(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  createReader(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    listPictures();</span><br><span class=\"line\">    listAuthors();</span><br><span class=\"line\">    listReaders();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.8\"> 1.6.8 查询相关model </h4>\n\n<h5 id=\"概述-9\"><a href=\"#概述-9\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>关系通过将外键属性连接到主键属性来定义两个模型之间的连接.对于每种关系类型,LoopBack自动将辅助方法混合到模型类中,以帮助导航和关联模型实例以加载或构建数据图.</p>\n<p>通常,客户端应用程序想要从图中选择相关数据,例如获得用户信息和最近放置的订单.LoopBack提供了几种方法来在查询中表达这些要求.</p>\n<h5 id=\"Inclusion\"><a href=\"#Inclusion\" class=\"headerlink\" title=\"Inclusion\"></a>Inclusion</h5><p>要在查询的响应中包括相关模型,请使用查询对象的<code>include</code>属性或在模型类上使用include()方法. <code>include</code>可以是字符串,数组或对象.有关详细信息,请参阅<code>Include filter</code>.</p>\n<p>以下示例说明有效的格式.</p>\n<p>Load all user posts with only one additional request:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: <span class=\"string\">'posts'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者用js代码:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: [<span class=\"string\">'posts'</span>]&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Load all user posts and orders with two additional requests:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: [<span class=\"string\">'posts'</span>, <span class=\"string\">'orders'</span>]&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Load all post owners (users), and all orders of each owner:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: <span class=\"string\">'orders'</span>&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Load all post owners (users), and all friends and orders of each owner:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [<span class=\"string\">'friends'</span>, <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Load all post owners (users), all posts (including images), and orders of each owner:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [&#123;<span class=\"attr\">posts</span>: <span class=\"string\">'images'</span>&#125; , <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The model class also has an include() method. For example, the code snippet below will populate the list of user instances with posts:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.include(users, <span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h5><p>使用Scoping可以将查询定义为目标模型类或原型的方法.例如:</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.scope(<span class=\"string\">'top10Vips'</span>, &#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">vip</span>: <span class=\"literal\">true</span>&#125;, <span class=\"attr\">limit</span>: <span class=\"number\">10</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.top10Vips(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, vips</span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You can create the same function using a custom method too:</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.top10Vips = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">vip</span>: <span class=\"literal\">true</span>&#125;, <span class=\"attr\">limit</span>: <span class=\"number\">10</span>&#125;, cb);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用包含关系的过滤器参数\"><a href=\"#使用包含关系的过滤器参数\" class=\"headerlink\" title=\"使用包含关系的过滤器参数\"></a>使用包含关系的过滤器参数</h5><p>在查询相关模型以从相关模型返回数据时,可以在过滤器(例如,where,order,fields,include过滤器)上使用参数.</p>\n<p>例如:考虑Student,Class和Teacher模型，其中Student有多个Class,并且Teacher有多个Class.</p>\n<p>查找所有学生,并返回所有他们的课程与教这些课的教师,以及所有的学生注册的这些课,诸如此类,等等.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.find(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"filter\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"relation\"</span>: <span class=\"string\">\"classes\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"scope\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"include\"</span>: [<span class=\"string\">\"teachers\"</span>, <span class=\"string\">\"students\"</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>另一个例子:找到一个特定的老师,也返回所有他们的课程,以及所有学生注册的这些课.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher.find(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"filter\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"where\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: $state.params.id</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"relation\"</span>: <span class=\"string\">\"classes\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"scope\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"include\"</span>: [<span class=\"string\">\"students\"</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.9\"> 1.6.9 嵌入式model和关系 </h4>\n\n<blockquote>\n<p> LoopBack支持如下这几种(5种)嵌入关系：embedsOne，embedsMany，embedsMany with belongsTo和referencesMany。</p>\n</blockquote>\n<h5 id=\"概述-10\"><a href=\"#概述-10\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack的relations使您能够在模型之间创建连接,并提供导航/聚合API来处理模型实例的图形(graph).除了传统的以外,LoopBack还支持以下嵌入关系:</p>\n<ul>\n<li><p><strong>EmbedsOne</strong> - 一个model嵌入了另一个model.例如:Customer里面迁入了billingAddress.</p>\n</li>\n<li><p><strong>EmbedsMany</strong> - 一个model嵌入许多其他model的实例.例如:Customer可以有很多个email地址,并且每一个email都是一个复合对象,它包括标签和地址等.</p>\n</li>\n<li><p><strong>EmbedsMany</strong> with belongsTo - a model that embeds many links to related people, such as an author or a reader. </p>\n</li>\n<li><p><strong>ReferencesMany</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>Important: 您可以使用关系数据库的嵌入关系,但数据将始终以字符化JSON格式存储.</p>\n</blockquote>\n<h5 id=\"EmbedsOne\"><a href=\"#EmbedsOne\" class=\"headerlink\" title=\"EmbedsOne\"></a>EmbedsOne</h5><p>EmbedsOne用于表示嵌入其他模型的模型,例如,Customer嵌入一个billingAddress.</p>\n<p><strong>Sample embedded model</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  id: 1,</span><br><span class=\"line\">  name: 'John Smith',</span><br><span class=\"line\">  billingAddress: &#123;</span><br><span class=\"line\">    street: '123 Main St',</span><br><span class=\"line\">    city: 'San Jose',</span><br><span class=\"line\">    state: 'CA',</span><br><span class=\"line\">    zipCode: '95124'</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在js代码中定义关系</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer.embedsOne(Address, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'address'</span>, <span class=\"comment\">// default to the relation name - address</span></span><br><span class=\"line\">  property: <span class=\"string\">'billingAddress'</span> <span class=\"comment\">// default to addressItem</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Parameters for the definition</p>\n<ul>\n<li><strong>methods</strong> - Scoped methods for the given relation</li>\n<li><strong>properties</strong> - Properties taken from the parent object</li>\n<li><strong>scope</strong> - Default scope</li>\n<li><strong>options</strong> - Options</li>\n<li><strong>default</strong> - Default value</li>\n<li><strong>property</strong> - Name of the property for the embedded item</li>\n<li><strong>as</strong> - Name of the relation</li>\n</ul>\n<p>Options</p>\n<ul>\n<li><strong>forceId</strong> - force generation of ida for embedded items, default to false(强制生成嵌入项的ida,默认为false)</li>\n<li><strong>validate</strong> - denote if the embedded items should be validated, default to true(表示是否应该验证嵌入的项目,默认为true)</li>\n<li><strong>persistent</strong> - denote if the embedded items should be persisted, default to false(表示嵌入的项目是否应该持久化,默认为false)</li>\n</ul>\n<p>在json中定义关系</p>\n<p><strong>common/models/customer.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"address\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"embedsOne\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Address\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"billingAddress\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"validate\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"forceId\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Helper methods(辅助方法)</p>\n<ul>\n<li>customer.address()</li>\n<li>customer.address.build()</li>\n<li>customer.address.create()</li>\n<li>customer.address.update()</li>\n<li>customer.address.destroy()</li>\n<li>customer.address.value()</li>\n</ul>\n<p>Operation hooks</p>\n<p>您可以在embedsOne关系中,为嵌入模型定义<code>before save</code>和<code>after save</code>的<code>operation hooks</code>. 然后,更新或创建容器模型的实例将触发嵌入式模型上的operation hook.发生这种情况时,ctx.isNewInstance为false,因为只创建容器模型的新实例.</p>\n<p>例如,如果<code>Customer embedsOne Address</code>,并且您在地址模型上定义了一个’before save’hook,则创建新的Customer实例将触发操作挂钩.</p>\n<h5 id=\"EmbedsMany\"><a href=\"#EmbedsMany\" class=\"headerlink\" title=\"EmbedsMany\"></a>EmbedsMany</h5><p>使用embedsMany关系来指示模型可以嵌入另一个模型的许多实例.例如,客户可以有多个电子邮件地址,每个电子邮件地址是一个包含标签和地址的复合对象.</p>\n<p><strong>Sample model instance with many embedded models</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  id: 1,</span><br><span class=\"line\">  name: 'John Smith',</span><br><span class=\"line\">  emails: [&#123;</span><br><span class=\"line\">    label: 'work',</span><br><span class=\"line\">    address: 'john@xyz.com'</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    label: 'home',</span><br><span class=\"line\">    address: 'john@gmail.com'</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> Important:把embedsMany作为一个实际的关系,和hasMany关系相比,没有任何不同.例如:这意味着,您不能只是通过嵌入/嵌套数据来POST完整对象,从而一次创建所有内容.因此,使用上面的示例添加一个客户和多个电子邮件地址将需要两个POST操作,一个用于客户记录,一个用于多个电子邮件地址数据.</p>\n</blockquote>\n<p>在js代码中定义关系</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer.embedsOne(EmailAddress, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'emails'</span>, <span class=\"comment\">// default to the relation name - emailAddresses</span></span><br><span class=\"line\">  property: <span class=\"string\">'emailList'</span> <span class=\"comment\">// default to emailAddressItems</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Parameters for the definition</p>\n<ul>\n<li>methods</li>\n<li>properties</li>\n<li>scope</li>\n<li>options</li>\n<li>default</li>\n<li>property</li>\n<li>as</li>\n</ul>\n<p>Options</p>\n<ul>\n<li>forceId</li>\n<li>validate</li>\n<li>persistent</li>\n</ul>\n<p>在json中定义关系</p>\n<p><strong>common/models/customer.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"emails\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"embedsMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"EmailAddress\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"emailList\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"validate\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"forceId\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Helper methods(辅助方法)</p>\n<ul>\n<li>customer.emails()</li>\n<li>customer.emails.create()</li>\n<li>customer.emails.build()</li>\n<li>customer.emails.findById()</li>\n<li>customer.emails.destroyById()</li>\n<li>customer.emails.updateById()</li>\n<li>customer.emails.exists()</li>\n<li>customer.emails.add()</li>\n<li>customer.emails.remove()</li>\n<li>customer.emails.get() - alias to findById</li>\n<li>customer.emails.set() - alias to updateById</li>\n<li>customer.emails.unset() - alias to destroyById</li>\n<li>customer.emails.at()</li>\n<li>customer.emails.value()</li>\n</ul>\n<p>Operation hooks</p>\n<p>您可以在embedsMany关系中为嵌入模型定义<code>before save</code>和<code>after save</code>的operation hooks.然后m更新或创建容器模型的实例将触发嵌入式模型上的operation hook.发生这种情况时,ctx.isNewInstance为false,因为只创建容器模型的新实例.</p>\n<p>例如,如果<code>Customer embedsOne Address</code>,并且您在地址模型上定义了一个<code>before save</code>hook,则创建一个新的Customer实例将触发operation hook.</p>\n<h5 id=\"EmbedsMany-with-belongsTo\"><a href=\"#EmbedsMany-with-belongsTo\" class=\"headerlink\" title=\"EmbedsMany with belongsTo\"></a>EmbedsMany with belongsTo</h5><p>使用embedsMany with belongsTo关系来表示可以嵌入许多链接到其他模型的模型.例如一个book模型嵌入许多相关人物的链接(例如作者或读者).每个链接属于一个人,它是多态的,因为一个人可以是一个作者或一个读者.</p>\n<p><strong>Exampel embedsMany with belongsTo model instance</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  id: 1</span><br><span class=\"line\">  name: 'Book 1',</span><br><span class=\"line\">  links: [&#123;</span><br><span class=\"line\">    notes: 'Note 1',</span><br><span class=\"line\">    id: 1,</span><br><span class=\"line\">    linkedId: 1,</span><br><span class=\"line\">    linkedType: 'Author',</span><br><span class=\"line\">    name: 'Author 1'</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">  notes: 'Note 2',</span><br><span class=\"line\">    id: 2,</span><br><span class=\"line\">    linkedId: 1,</span><br><span class=\"line\">    linkedType: 'Reader',</span><br><span class=\"line\">    name: 'Reader 1'</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Define the embedsMany relation for Book</p>\n<p><strong>common/models/book.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Book\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"people\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"embedsMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Link\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"scope\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"include\"</span>: <span class=\"string\">\"linked\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Define the polymorphic belongsTo relation for Link</p>\n<p><strong>common/models/link.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Link\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"Model\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"number\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"notes\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"linked\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"belongsTo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"polymorphic\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"idType\"</span>: <span class=\"string\">\"number\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"name\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"invertProperties\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ReferencesMany\"><a href=\"#ReferencesMany\" class=\"headerlink\" title=\"ReferencesMany\"></a>ReferencesMany</h5><p>Sample referencesMany model instance</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  id: 1,</span><br><span class=\"line\">  name: 'John Smith',</span><br><span class=\"line\">  accounts: [</span><br><span class=\"line\">    \"saving-01\", \"checking-01\",</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Parameters for the definition</p>\n<ul>\n<li>methods</li>\n<li>properties</li>\n<li>foreignKey</li>\n<li>scope</li>\n<li>options</li>\n<li>default</li>\n<li>as</li>\n</ul>\n<p>Options</p>\n<ul>\n<li>forceId</li>\n<li>validate</li>\n<li>persistent</li>\n</ul>\n<p>Define the relation in code</p>\n<p><strong>common/models/customer.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"accounts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"referencesMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Account\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"accountIds\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"validate\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"forceId\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Helper methods</p>\n<ul>\n<li>customer.accounts()</li>\n<li>customer.accounts.create()</li>\n<li>customer.accounts.build()</li>\n<li>customer.accounts.findById()</li>\n<li>customer.accounts.destroy()</li>\n<li>customer.accounts.updateById()</li>\n<li>customer.accounts.exists()</li>\n<li>customer.accounts.add()</li>\n<li>customer.accounts.remove()</li>\n<li>customer.accounts.at()</li>\n</ul>\n<h5 id=\"Transient-versus-persistent-for-the-embedded-model-嵌入模型的瞬态与永久\"><a href=\"#Transient-versus-persistent-for-the-embedded-model-嵌入模型的瞬态与永久\" class=\"headerlink\" title=\"Transient versus persistent for the embedded model(嵌入模型的瞬态与永久)\"></a>Transient versus persistent for the embedded model(嵌入模型的瞬态与永久)</h5><p>Define a transient data source</p>\n<p><strong>server/datasources.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"transient\": &#123;</span><br><span class=\"line\">    \"name\": \"transient\",</span><br><span class=\"line\">    \"connector\": \"transient\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Use the transient data source for embedded models</p>\n<p><strong>server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"Customer\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"db\",</span><br><span class=\"line\">    \"public\": true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"Address\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"transient\",</span><br><span class=\"line\">    \"public\": false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"EmailAddress\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"transient\",</span><br><span class=\"line\">    \"public\": false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"Account\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"db\",</span><br><span class=\"line\">    \"public\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.10\"> 1.6.10 嵌套查询 </h4>\n\n<p>除了使用LoopBack API直接查询数据,嵌套模型可以是API endpoints(端点).为此,必须使用nestRemoting函数.</p>\n<blockquote>\n<p> Important:通常,最好在引导脚本(boot script)中执行嵌套查询,以确保所有模型都已加载.虽然可以在模型定义JSON文件中执行嵌套查询,但必须使用事件来确保已加载相关模型.</p>\n</blockquote>\n<p>了解嵌套查询的最简单的方法是通过一个例子.</p>\n<p>假设应用程序有 book, chapter, page, and image models模型,和:</p>\n<ul>\n<li>Each book can have many pages and chapters.</li>\n<li>Each chapter and page can have many notes.</li>\n<li>Each book has an image.</li>\n</ul>\n<p>以下JSON块显示了和page和chapter模型有关系的的Book模型.</p>\n<p><strong>common/models/book.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Book\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"validateUpsert\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"pages\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Page\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"through\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"chapters\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Chapter\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"through\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/chapter.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Chapter\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"notes\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Note\",</span><br><span class=\"line\">      \"foreignKey\": \"\",</span><br><span class=\"line\">      \"through\": \"\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/page.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Page\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"notes\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Note\",</span><br><span class=\"line\">      \"foreignKey\": \"\",</span><br><span class=\"line\">      \"through\": \"\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/image.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Image\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"book\": &#123;</span><br><span class=\"line\">      \"type\": \"belongsTo\",</span><br><span class=\"line\">      \"model\": \"Book\",</span><br><span class=\"line\">      \"foreignKey\": \"\",</span><br><span class=\"line\">      \"required\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>您可以通过常规关系查询特定图书的页面,如以下API端点所示:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages</td>\n      <td>An array of pages data</td>\n      <td>Queries pages of a specific book</td>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456</td>\n      <td>An object of a page data</td>\n      <td>Queries a page data of a specific page under a specific book</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>但是,要更深入地查询嵌套模型并将它们作为API端点,您需要使用模型nestRemoting()函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.nestRemoting(<span class=\"string\">'pages'</span>);</span><br><span class=\"line\">Book.nestRemoting(<span class=\"string\">'chapters'</span>);</span><br><span class=\"line\">Image.nestRemoting(<span class=\"string\">'book'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码启用以下嵌套查询:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456/notes</td>\n      <td>An array of notes objects</td>\n      <td>Queries all of the notes associated with a specific page under a specific book</td>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456/notes/567</td>\n      <td>An object of a note data</td>\n      <td>Queries a specific note associated with a specific page under a specific book</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>或者,由于图像属于书实例,所以,您可以通过他们的图像查询他们的网页:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/images/345/book/pages</td>\n      <td>An array of pages of a book</td>\n      <td>Queries all of the pages of the book, whose associated image id is 345</td>\n    </tr>\n    <tr>\n      <td>/api/images/345/book/pages/456</td>\n      <td>An object of a page data</td>\n      <td>Queries page with the id of 456 under the book, whose associated image id is 345</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2\"> 2. 使用内置Models </h4>\n\n<h5 id=\"概述-11\"><a href=\"#概述-11\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack为常见使用场景提供了有用的内置models:</p>\n<ul>\n<li><p><strong>Application model</strong> - 包含具有自己的标识和与LoopBack服务关联配置的客户端应用程序的元数据.</p>\n</li>\n<li><p><strong>User model</strong> - 注册和验证本地或第三方服务的用户.</p>\n</li>\n<li><p><strong>Access control models</strong> - 包括ACL,AccessToken,Scope,Role和RoleMapping模型,用于控制对应用程序,资源和方法的访问.</p>\n</li>\n<li><p><strong>Email model</strong> - 使用SMTP或第三方服务向您的应用用户发送电子邮件.</p>\n</li>\n</ul>\n<p>内置模型（电子邮件除外）扩展自PersistedModel,因此它们自动具有完整的创建,更新和删除(CRUD)操作.</p>\n<blockquote>\n<p> 注意:默认情况下,只有User model通过REST公开.要暴露其他内置模型,请在server/model-config.json中将模型的public属性更改为true.使用警告:将某些模型暴露于公共API可能是一种安全风险.</p>\n</blockquote>\n<h5 id=\"Access-control-models\"><a href=\"#Access-control-models\" class=\"headerlink\" title=\"Access control models\"></a>Access control models</h5><p>使用访问控制模型来控制对应用程序,资源和方法的访问.这些模型包括:</p>\n<ul>\n<li>ACL</li>\n<li>AccessToken</li>\n<li>Scope</li>\n<li>Role</li>\n<li>RoleMapping</li>\n</ul>\n<p><strong><em>ACL model</em></strong></p>\n<p>ACL模型将主体连接到受保护的资源.系统向主体(用户或应用程序,以及那些可以被分组为角色的主体)授予权限.</p>\n<ul>\n<li>保护资源：模型数据和操作(模型/属性/方法/关系)</li>\n<li>是否允许给定的客户端应用程序或用户访问(读取,写入或执行)受保护的资源.</li>\n</ul>\n<p>创建新的ACL实例.</p>\n<p><strong>server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACL.create(&#123;</span><br><span class=\"line\">    principalType: ACL.USER, </span><br><span class=\"line\">    principalId: <span class=\"string\">'u001'</span>, </span><br><span class=\"line\">    model: <span class=\"string\">'User'</span>, </span><br><span class=\"line\">    property: ACL.ALL,</span><br><span class=\"line\">    accessType: ACL.ALL, </span><br><span class=\"line\">    permission: ACL.ALLOW&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, acl</span>) </span>&#123;</span><br><span class=\"line\">        ACL.create(&#123;</span><br><span class=\"line\">            principalType: ACL.USER, </span><br><span class=\"line\">            principalId: <span class=\"string\">'u001'</span>, </span><br><span class=\"line\">            model: <span class=\"string\">'User'</span>, </span><br><span class=\"line\">            property: ACL.ALL,</span><br><span class=\"line\">            accessType: ACL.READ, </span><br><span class=\"line\">            permission: ACL.DENY&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, acl</span>) </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2.1\"> 2.1 扩展内置Models </h4>\n\n<h5 id=\"使用JSON来扩展内置model\"><a href=\"#使用JSON来扩展内置model\" class=\"headerlink\" title=\"使用JSON来扩展内置model\"></a>使用JSON来扩展内置model</h5><p>当使用模型生成器创建模型时,选择基本模型,即模型将“扩展”的模型,并从中继承方法和属性.该工具将相应地在模型定义JSON文件中设置基本属性.例如,对于扩展PersistedModel的模型:</p>\n<p><strong>/common/models/model.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Order\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>要更改基本模型,只需编辑JSON文件并更改基本属性.</p>\n<p>一般来说,当您想要使用连接器(如MySQL或MongoDB)将数据存储在数据库中时,请使用<code>PersistedModel</code>作为基本模型.使用<code>Model</code>作为不具有CRUD语义的模型的基础,例如,使用诸如SOAP和REST之类的连接器.</p>\n<blockquote>\n<p> 提示:扩展内置的User模型以创建表示用户或客户的自己的模型.此模型提供注册,登录和恢复密码的功能.扩展内置User模型时,请使用除”User”以外的模型名称,例如”customer”或”client”.不要将其命名为”User”,因为这将与内置User模型冲突.为了避免混淆,最好避免使用小写字母”u”的”user”.</p>\n</blockquote>\n<h5 id=\"使用js代码来扩展内置model\"><a href=\"#使用js代码来扩展内置model\" class=\"headerlink\" title=\"使用js代码来扩展内置model\"></a>使用js代码来扩展内置model</h5><p>您还可以使用模型JavaScript文件/common/models/<em>modelName</em>.js中的JavaScript文件扩展模型(其中,modelName是模型的名称),例如:</p>\n<p><strong>/common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> properties = &#123;</span><br><span class=\"line\">  firstName: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  relations: &#123;</span><br><span class=\"line\">    accessTokens: &#123;</span><br><span class=\"line\">      model: accessToken,</span><br><span class=\"line\">      type: hasMany,</span><br><span class=\"line\">      foreignKey: userId</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    account: &#123;</span><br><span class=\"line\">      model: account,</span><br><span class=\"line\">      type: belongsTo</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transactions: &#123;</span><br><span class=\"line\">      model: transaction,</span><br><span class=\"line\">      type: hasMany</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  acls: [&#123;</span><br><span class=\"line\">    permission: ALLOW,</span><br><span class=\"line\">    principalType: ROLE,</span><br><span class=\"line\">    principalId: $everyone,</span><br><span class=\"line\">    property: myMethod</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = loopback.Model.extend(<span class=\"string\">'user'</span>, properties, options);</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>Mixing in model definitions</em></strong></p>\n<p>您可能需要创建共享一组公共属性和逻辑的模型.LoopBack使您能够将一个或多个其他模型“混合(mix-in)”到单个模型中.例如:</p>\n<p><strong>common/models/myModel.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> TimeStamp = modelBuilder.define(<span class=\"string\">'TimeStamp'</span>, &#123;</span><br><span class=\"line\">  created: <span class=\"built_in\">Date</span>,</span><br><span class=\"line\">  modified: <span class=\"built_in\">Date</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Group = modelBuilder.define(<span class=\"string\">'Group'</span>, &#123;</span><br><span class=\"line\">  groups: [<span class=\"built_in\">String</span>]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">User.mixin(Group, TimeStamp);</span><br></pre></td></tr></table></figure>\n\n<p><em>设置自定义model</em></p>\n<p>您可能需要为自定义模型执行其他设置,例如添加另一个模型的远程方法.要实现这些,请在新模型上实施setup()方法.loopback.Model.extend()函数调用setup(),因此在setup()中输入的代码将在创建模型时自动执行.</p>\n<p>例如:</p>\n<p><strong>common/models/myModel.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel = Model.extend(<span class=\"string\">'MyModel'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.on(<span class=\"string\">'myEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'meep meep!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyExtendedModel = MyModel.extend(<span class=\"string\">'MyExtendedModel'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.emit(<span class=\"string\">'myEvent'</span>); <span class=\"comment\">// nothing happens (no event listener)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this is where `setup()` becomes handy</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.setup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> MyModel = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// since setup is called for every extended model</span></span><br><span class=\"line\">  <span class=\"comment\">// the extended model will also have the event listener</span></span><br><span class=\"line\">  MyModel.on(<span class=\"string\">'myEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    MyModel.printModelName();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2.2\"> 2.2 为内置Models添加remote methods </h4>\n\n<p>要向内置模型添加远程方法.您可以扩展模型,然后将远程方法添加到新模型,或将其添加到引导脚本中.如此处示例所述:</p>\n<p>此示例将为内置的User模型添加”greet”方法.</p>\n<h5 id=\"Boot-script\"><a href=\"#Boot-script\" class=\"headerlink\" title=\"Boot script\"></a>Boot script</h5><p>通常,要向User模型添加远程方法,您需要将其添加到/common/models/user.js中.然而,对于内置模型,这个文件将覆盖内置的模型定义,所以你必须在启动脚本中创建和附加我们的远程方法,例如:</p>\n<p><strong>server/boot/userRemoteMethods.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> User = app.models.User;</span><br><span class=\"line\"></span><br><span class=\"line\">  User.greet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg, cb</span>) </span>&#123;</span><br><span class=\"line\">    cb(<span class=\"literal\">null</span>, <span class=\"string\">'Greetings... '</span> - msg);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  User.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'greet'</span>, &#123;</span><br><span class=\"line\">      accepts: &#123;</span><br><span class=\"line\">        arg: <span class=\"string\">'msg'</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'string'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      returns: &#123;</span><br><span class=\"line\">        arg: <span class=\"string\">'greeting'</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'string'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ACLs\"><a href=\"#ACLs\" class=\"headerlink\" title=\"ACLs\"></a>ACLs</h5><p>默认情况下,User模型的ACL拒绝除了明确列入白名单的所有请求,因此您必须为远程方法添加ACL记录. 最常见的做法是编辑/common/models/user.json这样的文件,但是这个文件会覆盖内置的版本,所以这是不可能的.相反,您可以在model-config.json中定义ACL.</p>\n<p>例如:</p>\n<p><strong>server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"User\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"dataSource\"</span>: <span class=\"string\">\"db\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"acls\"</span>: [&#123;</span><br><span class=\"line\">      <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"$everyone\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"greet\"</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在,所有用户都可以向/Users/greet发送POST请求,并访问此内置模型上的新自定义方法.</p>\n<h5 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h5><ul>\n<li>以这种方式添加远程方法<strong>不会将它们添加到Swagger JSON</strong>.这意味着您不会在API Explorer中看到“Users/greet”方法.</li>\n<li>通过设计,您可以通过<code>environment specific configurations</code>覆盖model-config.json中的设置.记住在定义ACL时,如上所示.</li>\n</ul>\n<hr>\n<h4 id=\"2.3\"> 2.3 为内置Models创建数据库表 </h4>\n\n<p>LoopBack应用程序附带一小组内置模型.要为这些内置模型创建数据库表,请使用<code>auto-migration</code>.</p>\n<blockquote>\n<p> 重要:如果数据库具有现有表,则运行automigrate()将删除并重新创建表,从而可能导致数据丢失.要避免此问题,请使用autoupdate().</p>\n</blockquote>\n<p>为LoopBack内置model创建数据库表情遵循以下步骤:</p>\n<ol>\n<li>按照<a href=\"#1.3\">1.3 将Model附加到数据源</a>的操作来指定数据源.</li>\n<li>创建<code>server/create-lb-tables.js</code>,代码如下:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'./server'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = server.dataSources.db;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lbTables = [<span class=\"string\">'User'</span>, <span class=\"string\">'AccessToken'</span>, <span class=\"string\">'ACL'</span>, <span class=\"string\">'RoleMapping'</span>, <span class=\"string\">'Role'</span>];</span><br><span class=\"line\">ds.automigrate(lbTables, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">er</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (er) <span class=\"keyword\">throw</span> er;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loopback tables ['</span> - lbTables - <span class=\"string\">'] created in '</span>, ds.adapter.name);</span><br><span class=\"line\">  ds.disconnect();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后,人工执行这个脚本:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> server</span><br><span class=\"line\">$ node create-lb-tables.js</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2.4\"> 2.4 Model属性引用 </h4>\n\n<blockquote>\n<p> 重要:此参考信息正在移至API文档.直到完成才在这里提供.</p>\n</blockquote>\n<p>原文比较少,所以就不翻译了.可以自己去看一下.<a href=\"#http://loopback.io/doc/en/lb3/Model-property-reference.html\">链接在这</a></p>\n<hr>\n<h4 id=\"2.5\"> 2.5 内置Model的REST API </h4>\n\n<p>LoopBack提供了一些具有REST API的内置模型.其中许多都从通用PersistedModel REST API继承端点.</p>\n<p>默认情况下,LoopBack使用<code>/api</code>作为应用程序REST API的URI根.要更改它,请在应用程序app.js文件中设置<code>apiPath</code>变量.</p>\n<p>内置model有:</p>\n<ul>\n<li>PersistedModel REST API</li>\n<li>Access token REST API</li>\n<li>ACL REST API</li>\n<li>Application REST API</li>\n<li>Email (See the email connector page)</li>\n<li>Relation REST API</li>\n<li>Role REST API</li>\n<li>User REST API</li>\n</ul>\n<hr>\n<h4 id=\"2.5.1\"> 2.5.1 PersistedModel REST API </h4>\n\n<blockquote>\n<p> 概要:PersistedModel是连接到持久数据源(如数据库)的模型的基类,也是所有内置模型(电子邮件除外)的基类.</p>\n</blockquote>\n<h5 id=\"概述-12\"><a href=\"#概述-12\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>PersistedModel是连接到持久数据源(如数据库)的模型的基类,也是所有内置模型(电子邮件除外)的基类.它提供所有标准的创建,读取,更新和删除(CRUD)操作,并为它们公开REST端点.</p>\n<p>默认情况下,LoopBack使用<code>/api</code>作为REST API的URI根.您可以通过更改应用程序<code>/server/config.json</code>文件中的restApiRoot属性来更改此属性.有关详细信息,请参阅config.json.</p>\n<p>Model REST API的端点通常是模型名称的复数形式.默认情况下,这只是带有”s”的名称.例如,如果模型是”car”,则”cars”是复数形式.您可以在模型定义JSON文件中自定义复数形式.</p>\n<blockquote>\n<p> 注意:您不能自定义到PersistedModel REST API端点的路由.但是,您可以使用server/ config.json中的rest.normalizeHttpPath属性来控制如何从自定义模型构造REST API端点.有关更多信息,请参阅config.json (Remoting properties).</p>\n</blockquote>\n<h5 id=\"创建model实例\"><a href=\"#创建model实例\" class=\"headerlink\" title=\"创建model实例\"></a>创建model实例</h5><p>创建模型的新实例并将其持久保存到数据源.</p>\n<p><code>POST /_modelName_</code></p>\n<p>参数:</p>\n<ul>\n<li>表单数据 - 模型实例数据.可以是表示单个模型实例或模型实例数组的JSON.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: POST  <a href=\"http://localhost:3000/api/locations\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations</a></p>\n<p><strong>Request body</strong>: {“name”: “L1”, “street”: “107 S B St”, “city”: “San Mateo”, “zipcode”: “94401”}</p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"96\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"107 S B St\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"San Mateo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94401</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L1\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Update-insert实例\"><a href=\"#Update-insert实例\" class=\"headerlink\" title=\"Update / insert实例\"></a>Update / insert实例</h5><p>更新现有模型实例或将新实例插入数据源.更新将覆盖请求数据对象中的任何指定的属性.它不会删除现有的,除非该值设置为null.</p>\n<p>执行upsertto检测是否有匹配的实例.如果没有,则插入(创建)一个新实例.如果有匹配的实例,则更新它.</p>\n<p><code>PUT /_modelName_</code></p>\n<p>参数:</p>\n<ul>\n<li>表单数据 - JSON格式的model实例数据</li>\n</ul>\n<p>例子:</p>\n<p><em>Insert</em></p>\n<p><strong>Request URL</strong>: PUT  <a href=\"http://localhost:3000/api/locations\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations</a></p>\n<p><strong>Request body</strong>: {“name”: “L1”, “street”: “107 S B St”, “city”: “San Mateo”, “zipcode”: “94401”}</p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"107 S B St\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"San Mateo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94401</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L1\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Update</em></p>\n<p><strong>Request URL</strong>: PUT  <a href=\"http://localhost:3000/api/locations\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations</a></p>\n<p><strong>Request body</strong>: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"98\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L4\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"107 S B St\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"San Mateo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"string\">\"94401\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"107 S B St\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"San Mateo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94401</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L4\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"检查实例存在\"><a href=\"#检查实例存在\" class=\"headerlink\" title=\"检查实例存在\"></a>检查实例存在</h5><p>在数据源中根据ID检查实例是否存在</p>\n<p><code>GET /_modelName_/_modelID_/exists</code></p>\n<p>参数:</p>\n<ul>\n<li>modelID - model instance ID</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: GET <a href=\"http://localhost:3000/api/locations/88/exists\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/88/exists</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>: javascript {“exists”: true}</p>\n<h5 id=\"根据ID查找实例\"><a href=\"#根据ID查找实例\" class=\"headerlink\" title=\"根据ID查找实例\"></a>根据ID查找实例</h5><p>从数据源中根据ID查找一个model实例</p>\n<p><code>GET /modelName/modelID?filter=[filterType1]=&lt;val1&gt;&amp;filter[filterType2]=&lt;val2&gt;...</code></p>\n<p>参数:</p>\n<ul>\n<li><p><strong>modelID</strong> - Model instance ID</p>\n</li>\n<li><p><em>filterType1, filterType2</em>, and so on, are the filter types. This operation supports only include and fields filters. See Include filter and Fields filter for more information.</p>\n</li>\n<li><p><em>val1, val2</em> are the corresponding values.</p>\n</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations/88\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/88</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"390 Lang Road\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Burlingame\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94010</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Bay Area Firearms\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查找匹配实例\"><a href=\"#查找匹配实例\" class=\"headerlink\" title=\"查找匹配实例\"></a>查找匹配实例</h5><p>从数据源中,根据过滤器,查找所有匹配的实例.</p>\n<p><code>GET /modelName?filter=[filterType1]=&lt;val1&gt;&amp;filter[filterType2]=&lt;val2&gt;...</code></p>\n<p>参数:</p>\n<p>将参数作为过滤器的HTTP查询参数的值传递,其中:</p>\n<ul>\n<li><p><em>filterType1, filterType2</em>, and so on, are the filter types.</p>\n</li>\n<li><p><em>val1, val2</em> are the corresponding values.</p>\n</li>\n</ul>\n<p>例子:</p>\n<p>Request without filter:</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations</a></p>\n<p>Request with a filter to limit response to two records:</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations?filter[limit]=2\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations?filter[limit]=2</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"87\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"7153 East Thomas Road\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Scottsdale\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">85251</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Phoenix Equipment Rentals\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"88\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"390 Lang Road\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Burlingame\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94010</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Bay Area Firearms\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查找第一个实例\"><a href=\"#查找第一个实例\" class=\"headerlink\" title=\"查找第一个实例\"></a>查找第一个实例</h5><p>从数据源中,根据过滤器,查找第一个匹配的实例.</p>\n<p><code>GET /modelName/findOne?filter=[filterType1]=&lt;val1&gt;&amp;filter[filterType2]=&lt;val2&gt;...</code></p>\n<p>参数:</p>\n<p>查询参数:</p>\n<ul>\n<li>filter - 定义位置,顺序,字段,跳过和限制的过滤器.它和find的filter参数一样.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations/findOne?filter[where][city]=Scottsdale\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/findOne?filter[where][city]=Scottsdale</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"87\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"7153 East Thomas Road\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Scottsdale\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">85251</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Phoenix Equipment Rentals\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除model实例\"><a href=\"#删除model实例\" class=\"headerlink\" title=\"删除model实例\"></a>删除model实例</h5><p>从数据源根据ID删除model实例.</p>\n<p><code>DELETE /modelName/modelID</code></p>\n<p>参数:</p>\n<ul>\n<li>modelID  - model instance ID</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: DELETE  <a href=\"http://localhost:3000/api/locations/88\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/88</a></p>\n<p><strong>Response status code</strong>: 204</p>\n<h5 id=\"删除所有匹配的实例\"><a href=\"#删除所有匹配的实例\" class=\"headerlink\" title=\"删除所有匹配的实例\"></a>删除所有匹配的实例</h5><blockquote>\n<p> 警告:默认情况下,此操作不会通过REST公开,以防止无意中删除数据.</p>\n</blockquote>\n<p>从与指定的where子句匹配的数据源中删除model的实例.</p>\n<p><code>DELETE /modelName?filter=[filterType1]=&lt;val1&gt;&amp;filter[filterType2]=&lt;val2&gt;...</code></p>\n<p>参数:</p>\n<ul>\n<li>filter - 用于定义位置,顺序,字段,跳过和限制的过滤器.它和find的filter参数一样.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: DELETE  <a href=\"http://localhost:3000/api/locations?[where][city]=Dallas\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations?[where][city]=Dallas</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<h5 id=\"获取匹配的实例数量-译注-可以理解为count\"><a href=\"#获取匹配的实例数量-译注-可以理解为count\" class=\"headerlink\" title=\"获取匹配的实例数量(译注:可以理解为count(*))\"></a>获取匹配的实例数量(<em>译注:可以理解为count(*)</em>)</h5><p>从与指定的where子句匹配的数据源中count model的实例.</p>\n<p><code>GET /modelName/count?where[property]=value</code></p>\n<p>参数:</p>\n<ul>\n<li>where - 匹配模型实例的条件.</li>\n</ul>\n<p>例子:</p>\n<p>Count without “where” filter</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations/count\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/count</a></p>\n<p>Count with a “where” filter</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations/count?where[city]=Burlingame\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/count?where[city]=Burlingame</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<p>{count: 6}</p>\n<h5 id=\"更新model实例属性\"><a href=\"#更新model实例属性\" class=\"headerlink\" title=\"更新model实例属性\"></a>更新model实例属性</h5><p>更新model实例属性并持久化进数据源.</p>\n<p><code>PUT /model/modelID</code></p>\n<p>参数:</p>\n<ul>\n<li>data - An object containing property name/value pairs</li>\n<li>modelID - The model instance ID</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: PUT  <a href=\"http://localhost:3000/api/locations/88\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/88</a></p>\n<p><strong>Request body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L2\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"88\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"390 Lang Road\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Burlingame\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94010</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L2\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"更新匹配的model实例\"><a href=\"#更新匹配的model实例\" class=\"headerlink\" title=\"更新匹配的model实例\"></a>更新匹配的model实例</h5><p>更新匹配model实例的属性,并持久化到数据源.</p>\n<p><code>POST /modelName/update?where[property]=value</code></p>\n<p>参数:</p>\n<ul>\n<li>data - An object containing property name/value pairs.</li>\n<li>where - The where object to select matching instances. See Where filter for more information.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: POST  <a href=\"http://localhost:3000/api/locations/update?where[city]=Burlingame\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/update?where[city]=Burlingame</a></p>\n<p><strong>Request body</strong>: {“city”: “San Jose”}</p>\n<p><strong>Response status code</strong>: 200</p>\n<h5 id=\"创建更改流-Create-Change-Stream\"><a href=\"#创建更改流-Create-Change-Stream\" class=\"headerlink\" title=\"创建更改流(Create Change Stream)\"></a>创建更改流(Create Change Stream)</h5><p>创建一个新的更改流:</p>\n<p><code>POST /modelName/change-stream?format=event-stream</code></p>\n<p>参数:</p>\n<ul>\n<li>表单数据 - 模型实例数据.表示单个模型实例的JSON或模型实例的数组.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: POST  <a href=\"http://localhost:3000/api/locations/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/</a></p>\n<p><strong>Request body</strong>: {“city”: “San Jose”}</p>\n<h5 id=\"获取更改流\"><a href=\"#获取更改流\" class=\"headerlink\" title=\"获取更改流\"></a>获取更改流</h5><p><code>GET /modelName/change-stream?format=event-stream</code></p>\n<hr>\n<h4 id=\"2.5.2\"> 2.5.2 Access token REST API </h4>\n\n<p>访问令牌REST API中的所有端点都是从通用PersistedModel REST API继承.为方便起见,此处提供了参考.</p>\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>URI Pattern</th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th width=\"200\">Description</th>\n      <th width=\"300\">Arguments</th>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#create-model-instance\">Add access token instance</a> and persist to data source.\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of accessTokens that match specified filter.</td>\n      <td>\n        One or more filters in query parameters:\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert access token instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find access token by ID</a>: Return data for the specified access token instance ID.</td>\n      <td><em>id</em>, the access token instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified access token ID and persist.</td>\n      <td>\n        Query parameters:\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete access token</a> with specified instance ID.</td>\n      <td><em>id</em>, access token ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified access token ID exists.\n      </td>\n      <td>\n        URI path:\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of access token instances</a>&nbsp;that matches specified where clause.\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first access token instance</a> that matches specified filter.\n      </td>\n      <td>Same as <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2.5.3\"> 2.5.3 ACL REST API </h4>\n\n<p>ACL REST API中的所有端点都继承自PersistedModel REST API.为方便起见,此处提供了参考.</p>\n<p>默认情况下,不显示ACL REST API.要公开它,请将以下内容添加到models.json中:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"acl\": &#123;</span><br><span class=\"line\">  \"public\": true,</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"base\": \"ACL\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"dataSource\": \"db\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/acls</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add ACL instance</a><span> and persist to data source.</span></p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/acls</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a><span> of ACLs that match specified filter.</span></td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert ACL instance</a><span> and persist to data source.</span></td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find ACL by ID</a><span>: Return data for the specified ACL instance ID.</span></td>\n      <td><em>id</em>, the ACL instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a><span> for specified ACL ID and persist.</span></td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete ACL</a><span> with specified instance ID.</span></td>\n      <td><em>id</em>, acls ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a><span>: Return true if specified ACL ID exists.</span></p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of ACL instances</a><span>&nbsp;that matches specified where clause.</span></p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/acls/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first ACL instance</a><span> that matches specified filter.</span></p>\n      </td>\n      <td>Same as <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2.5.4\"> 2.5.4 Application REST API </h4>\n\n<p>Application  REST API中的所有端点都继承自PersistedModel REST API.为方便起见.此处提供了参考.</p>\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/applications</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add application instance</a> and persist to data source.</p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/applications</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of applications that match specified filter.</td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert application instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find application by ID</a>: Return data for the specified application instance ID.</td>\n      <td><em>id</em>, the application instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified application ID and persist.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete application</a> with specified instance ID.</td>\n      <td><em>id</em>, application ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified application ID exists.</p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of application instances</a>&nbsp;that matches specified where clause.</p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/applications/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first application instance</a> that matches specified filter.</p>\n      </td>\n      <td>Same as&nbsp;<a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2.5.5\"> 2.5.5 Relation REST API </h4>\n\n<p>这些端点是PersistedModel REST API的一部分,但是为了方便参考,这里提供.</p>\n<h5 id=\"获取相关model实例\"><a href=\"#获取相关model实例\" class=\"headerlink\" title=\"获取相关model实例\"></a>获取相关model实例</h5><p><code>GET /&lt;model1-name&gt;/&lt;instanceID&gt;/&lt;model2-name&gt;</code></p>\n<p>参数:</p>\n<ul>\n<li><code>&lt;instanceID&gt;</code> - ID of instance in model1.</li>\n<li><code>&lt;model1-name&gt;</code> - name of first model. </li>\n<li><code>&lt;model2-name&gt;</code> - name of second related model.</li>\n</ul>\n<p>例子:</p>\n<p>Request:</p>\n<p><code>GET http://localhost:3000/locations/88/inventory</code></p>\n<p>Response:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"productId\"</span>: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"locationId\"</span>: <span class=\"string\">\"88\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"available\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"total\"</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"productId\"</span>: <span class=\"string\">\"3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"locationId\"</span>: <span class=\"string\">\"88\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"available\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"total\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Get-hasMany-related-model-instances\"><a href=\"#Get-hasMany-related-model-instances\" class=\"headerlink\" title=\"Get hasMany related model instances\"></a>Get hasMany related model instances</h5><p>列出由instance-ID标识指定的<code>&lt;model-name&gt;</code>的hasMany关系的相关模型实例.</p>\n<p><code>GET /&lt;model-name&gt;/&lt;instance-ID&gt;/&lt;hasManyRelationName&gt;</code></p>\n<h5 id=\"Create-hasMany-related-model-instance\"><a href=\"#Create-hasMany-related-model-instance\" class=\"headerlink\" title=\"Create hasMany related model instance\"></a>Create hasMany related model instance</h5><p>为hasMany关系的<code>&lt;instance-ID&gt;</code>标识的指定<code>&lt;model-name&gt;</code>创建相关模型实例.(<em>译注:原文在这里,以下不翻译了,容易造成误解,Create a related model instance for specified <model-name> identified by <instance-id>, for hasMany relationship.</instance-id></model-name></em>)</p>\n<p><code>POST /&lt;model1-name&gt;/&lt;instance-ID&gt;/&lt;hasMany-Relation-Name&gt;</code></p>\n<h5 id=\"Delete-hasMany-related-model-instances\"><a href=\"#Delete-hasMany-related-model-instances\" class=\"headerlink\" title=\"Delete hasMany related model instances\"></a>Delete hasMany related model instances</h5><p>Delete related model instances for specified <code>&lt;model-name&gt;</code> identified by <code>&lt;instance-ID&gt;</code>, for hasMany relationship.</p>\n<p><code>DELETE /&lt;model1-name&gt;/&lt;instance-ID&gt;/&lt;hasMany-relation-name&gt;</code></p>\n<h5 id=\"List-belongsTo-related-model-instances\"><a href=\"#List-belongsTo-related-model-instances\" class=\"headerlink\" title=\"List belongsTo related model instances\"></a>List belongsTo related model instances</h5><p>List the related model instances for the given model identified by <code>&lt;instance-ID&gt;</code>, for hasMany relationship.</p>\n<p><code>GET /model-name/&lt;instance-ID&gt;/&lt;belongsTo-relation-name&gt;</code></p>\n<h5 id=\"Aggregate-models-following-relations\"><a href=\"#Aggregate-models-following-relations\" class=\"headerlink\" title=\"Aggregate models following relations\"></a>Aggregate models following relations</h5><p>通常期望在对查询的响应中包含相关模型的实例,以使得客户端不必进行多个调用.</p>\n<p><code>GET /&lt;model1-name&gt;?filter[include]=...</code></p>\n<p>参数:</p>\n<ul>\n<li>include - The object that describes a hierarchy of relations to be included(描述要包含的关系的层次结构的对象)</li>\n</ul>\n<p>例子:</p>\n<p><code>GET /api/members?filter[include]=posts</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post D\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>The following request retrieves all members, including the posts, which further includes the author:</p>\n<p><code>GET /api/members?filter[include][posts]=author</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post D\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>The following request retrieves all members who are 21 years old, including the posts, which further includes the author:</p>\n<p><code>GET /api/members?filter[include][posts]=author&amp;filter[where][age]=21</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>The following request retrieves two members, including the posts, which further includes the author: </p>\n<p><code>GET /api/members?filter[include][posts]=author&amp;filter[limit]=2</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post D\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>The following request retrieves all members, including the posts and passports.</p>\n<p><code>GET /api/members?filter[include]=posts&amp;filter[include]=passports</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"passports\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"number\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ownerId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post D\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"passports\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"number\"</span>: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ownerId\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;, ... ]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2.5.6\"> 2.5.6 Role REST API </h4>\n\n<p>Role REST API中的所有端点都从通用PersistedModel REST API继承.为方便起见,此处提供了参考.</p>\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/roles</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add role instance</a> and persist to data source.</p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/roles</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of roles that match specified filter.</td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert role instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find role by ID</a>: Return data for the specified role instance ID.</td>\n      <td><em>id</em>, the role instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified role ID and persist.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete role</a> with specified instance ID.</td>\n      <td><em>id</em>, role ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified role ID exists.</p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of role instances</a>&nbsp;that matches specified where clause.</p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/roles/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first role instance</a> that matches specified filter.</p>\n      </td>\n      <td>Same as&nbsp;<a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2.5.7\"> 2.5.7 User REST API </h4>\n\n<p>下面表格中的所有端点都继承自PersistedModel REST API,但以下情况除外：</p>\n<ul>\n<li>Log in user - <code>POST /users/login</code></li>\n<li>Log out user - <code>POST /users/logout</code></li>\n<li>Confirm email address - <code>GET /users/confirm</code></li>\n<li>Reset password - <code>POST /users/reset</code></li>\n</ul>\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>URI Pattern</th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th style=\"width:300px;\">Arguments</th>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add user instance</a> and persist to data source. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.</p>\n      </td>\n      <td>\n        <p>JSON object (in request body) providing <a href=\"http://apidocs.strongloop.com/loopback/#user\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">User object properties</a>: <code>username</code>, <code>password</code>, <code>email</code>. LoopBack sets values for <code>emailVerified</code> and <code>verificationToken</code>.</p>\n        <p>NOTE: A value for <code>username</code> is not required, but a value for <code>email</code> is. LoopBack validates a unique value for <code>password</code> is provided. LoopBack does not automatically maintain values of the <code>created</code> and <code>lastUpdated</code> properties; you can set them manually if you wish.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a> of users that match specified filter. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert user instance</a> and persist to data source. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>JSON object (in request body)</p>\n        <p>Same as for <code>POST /users</code></p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find user by ID</a>: Return data for the specified user ID. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td><em>id</em>, the user ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update user attributes</a> for specified user ID and persist. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete user</a> with specified instance ID. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td><em>id</em>, user ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>Returns access token for specified user ID.</td>\n      <td>\n        <ul>\n          <li><em>id</em>, user ID, in URI path</li>\n          <li>where in query parameters</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>POST</td>\n      <td>Deny</td>\n      <td>Create access token for specified user ID.</td>\n      <td>\n        <p><em>id</em>, user ID, in URI path</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td>Delete access token for specified user ID.</td>\n      <td>\n        <p><em>id</em>, user ID, in URI path</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/confirm</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"#confirm-email-address\">Confirm email address</a> for specified user.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>uid</li>\n          <li>token</li>\n          <li>redirect</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-count\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">Return number of user instances</a>&nbsp;that match specified where clause. Inherited from <a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel\" target=\"_blank\" rel=\"noopener\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\"Where\" filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p>Check instance existence: Return true if specified user ID exists. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>users</em> - Model name</li>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p>Find first user instance that matches specified filter. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\n      <p>One or more filters in query parameters:</p>\n      <ul>\n        <li>where</li>\n        <li>include</li>\n        <li>order</li>\n        <li>limit</li>\n        <li>skip / offset</li>\n        <li>fields</li>\n      </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/login[?include=user]</code></td>\n      <td>\n        <p>POST</p>\n      </td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"#log-in-user\">Log in</a> the specified user.</p>\n      </td>\n      <td>\n        <p>Username and password in POST body.</p>\n        <p>If query parameter is <code>include=user</code>, then returns the user object.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>/users/logout</code>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td><a href=\"#log-out-user\">Log out</a> the specified user.</td>\n      <td>Access token in POST body.</td>\n    </tr>\n    <tr>\n      <td><code>/users/reset</code></td>\n      <td>POST</td>\n      <td>&nbsp;</td>\n      <td><a href=\"#reset-password\">Reset password</a> for the specified user.</td>\n      <td>In POST body</td>\n    </tr>\n  </tbody>\n</table>\n\n<h5 id=\"Log-in-user\"><a href=\"#Log-in-user\" class=\"headerlink\" title=\"Log in user\"></a>Log in user</h5><p><code>POST /users/login</code></p>\n<p>您必须在请求正文中提供用户名或电子邮件以及密码.为了确保这些值被加密,请将它们作为正文的一部分,并确保通过HTTPS提供应用程序.</p>\n<p>您还可以通过提供具有秒值的ttl(存活时间)属性来指定访问令牌有效的有效期.</p>\n<p>例子:</p>\n<p><strong>Request URL</strong>: POST  <a href=\"http://localhost:3000/users/login\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/users/login</a></p>\n<p><strong>Request body</strong>: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"foo@bar.com\"</span>, <span class=\"attr\">\"password\"</span>: <span class=\"string\">\"bar\"</span>, <span class=\"attr\">\"ttl\"</span>: <span class=\"number\">86400</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"ttl\"</span>: <span class=\"number\">86400</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"created\"</span>: <span class=\"string\">\"2014-12-23T08:31:33.464Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"userId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用户会话的访问令牌存储在在响应的id键中.它必须在查询参数<code>access_token</code>中为需要用户登录的所有API指定,例如:</p>\n<p><code>http://localhost:3000/api/Users/logout?access_token=PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE</code></p>\n<h5 id=\"Log-out-user\"><a href=\"#Log-out-user\" class=\"headerlink\" title=\"Log out user\"></a>Log out user</h5><p><code>POST /users/logout</code></p>\n<p>例子:</p>\n<p><strong>Request URL</strong>: <code>POST  http://localhost:3000/api/Users/logout?access_token=PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE</code></p>\n<p><strong>Response status code</strong>: 204</p>\n<h5 id=\"确认邮件地址\"><a href=\"#确认邮件地址\" class=\"headerlink\" title=\"确认邮件地址\"></a>确认邮件地址</h5><p>要求用户在登录前验证其电子邮件地址,这将向用户发送一封电子邮件,其中包含用于验证其地址的链接.一旦用户点击链接,他们将被重定向到web根(“/“),并将能够正常登录.</p>\n<p><code>GET /users/confirm</code></p>\n<p>参数:</p>\n<p>Query parameters:</p>\n<ul>\n<li>uid</li>\n<li>token</li>\n<li>redirect</li>\n</ul>\n<p>返回值:</p>\n<p>If token invalid: HTTP 400</p>\n<p>If user not found: HTTP 404</p>\n<p>If successful: HTTP 204</p>\n<h5 id=\"重置密码\"><a href=\"#重置密码\" class=\"headerlink\" title=\"重置密码\"></a>重置密码</h5><p><code>POST /users/reset</code></p>\n<p>参数:</p>\n<p>POST payload:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"foo@bar.com\"</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Return value</p>\n<p><code>200 OK</code></p>\n<p>您必须处理”resetPasswordRequest”事件才能向正确的用户发送包含访问令牌的重置电子邮件.</p>\n<p>下面的示例显示了如何获取用户可以用来重置密码的访问令牌:</p>\n<p><strong>common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.on(<span class=\"string\">'resetPasswordRequest'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">info</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(info.email); <span class=\"comment\">// the email of the requested user</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(info.accessToken.id); <span class=\"comment\">// the temp access token to allow password reset</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// requires AccessToken.belongsTo(User)</span></span><br><span class=\"line\">  info.accessToken.user(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(user); <span class=\"comment\">// the actual user</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3\"> 3. 将Model连接到数据源 </h4>\n\n<h5 id=\"概要-2\"><a href=\"#概要-2\" class=\"headerlink\" title=\"概要\"></a>概要</h5><p><img src=\"img/dsModel.jpg\" alt=\"dsModel\"></p>\n<p>LoopBack模型通过提供创建,检索,更新和删除(CRUD)功能的数据源连接到后端系统,如数据库.LoopBack还将其他后端服务(例如REST API,SOAP Web服务和存储服务等)概括为数据源.</p>\n<p>数据源由使用数据库驱动程序或其他客户端API实现数据交换逻辑的连接器支持.一般来说,应用程序不直接使用连接器,而是使用DataSource和PersistedModel API访问数据源.</p>\n<h5 id=\"基础步骤\"><a href=\"#基础步骤\" class=\"headerlink\" title=\"基础步骤\"></a>基础步骤</h5><ol>\n<li><p>使用<code>data source generator</code>创建新数据源.</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:datasource</span><br><span class=\"line\">? Enter the data-source name: mysql-corp</span><br><span class=\"line\">? Select the connector <span class=\"keyword\">for</span> mysql: MySQL (supported by StrongLoop)</span><br></pre></td></tr></table></figure>\n\n<p>按照提示命名数据源并选择要使用的连接器.这将新数据源添加到datasources.json中.</p>\n</li>\n<li><p>编辑<code>server/datasources.json</code>以添加必要的身份验证凭据:通常为主机名,用户名,密码和数据库名称.</p>\n<p>例如:</p>\n<p><strong>server/datasources.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \"mysql-corp\": &#123;</span><br><span class=\"line\"> \"name\": \"mysql-corp\",</span><br><span class=\"line\"> \"connector\": \"mysql\",</span><br><span class=\"line\"> \"host\": \"your-mysql-server.foo.com\",</span><br><span class=\"line\"> \"user\": \"db-username\",</span><br><span class=\"line\"> \"password\": \"db-password\",</span><br><span class=\"line\"> \"database\": \"your-db-name\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用npm安装连接器</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;your-app&gt;</span><br><span class=\"line\">$ npm install --save loopback-connector-mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用model generator创建model</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:model</span><br><span class=\"line\">? Enter the model name: myModel</span><br><span class=\"line\">? Select the data-source to attach myModel to: mysql (mysql)</span><br><span class=\"line\">? Select model<span class=\"string\">'s base class: PersistedModel</span></span><br><span class=\"line\"><span class=\"string\">? Expose myModel via the REST API? Yes</span></span><br><span class=\"line\"><span class=\"string\">? Custom plural form (used to build REST URL):</span></span><br><span class=\"line\"><span class=\"string\">Let'</span>s add some test2 properties now.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h5><p>下表列出了商业支持的LoopBack连接器.</p>\n<table>\n  <thead>\n    <tr>\n      <td colspan=\"3\" data-highlight-colour=\"red\" style=\"text-align: center;\"><strong>Database connectors</strong></td>\n    </tr>\n    <tr>\n      <th style=\"text-align: center;\">Connector</th>\n      <th>Module</th>\n      <th>Installation</th>\n    </tr>\n    <tr>\n      <td><a href=\"https://cloudant.com/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM Cloudant</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-cloudant\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-cloudant</a></td>\n      <td><code>npm install --save loopback-connector-cloudant</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"http://www.ibm.com/analytics/us/en/technology/cloud-data-services/dashdb/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM DashDB</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-dashdb\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-dashdb</a></td>\n      <td><code>npm install --save loopback-connector-dashdb</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"http://www.ibm.com/analytics/us/en/technology/db2/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM DB2</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-db2z\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-db2</a></td>\n      <td><code>npm install --save loopback-connector-db2</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www-01.ibm.com/software/data/db2/zos/family/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM DB2 for z/OS</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-db2z\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-db2z</a></td>\n      <td><code>npm install --save loopback-connector-db2z</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www-01.ibm.com/software/data/informix/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM Informix</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-informix\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-informix</a></td>\n      <td><code>npm&nbsp;install&nbsp;loopback-connector-informix&nbsp;--save</code></td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"Memory-connector.html\">Memory connector</a></td>\n      <td>Built in to LoopBack</td>\n      <td>Not required; suitable for development and debugging only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"MongoDB-connector.html\">MongoDB</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mongodb\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-mongodb</a></td>\n      <td><code>npm install --save loopback-connector-mongodb</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"MySQL-connector.html\">MySQL</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mysql\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-mysql</a></td>\n      <td><code>npm install --save loopback-connector-mysql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Oracle-connector.html\">Oracle</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-oracle\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-oracle</a></td>\n      <td><code>npm install --save loopback-connector-oracle</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"PostgreSQL-connector.html\">PostgreSQL</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mysql\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-postgresql</a></td>\n      <td><code>npm install --save loopback-connector-postgresql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"SQL-Server-connector.html\">SQL Server</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mssql\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-mssql</a></td>\n      <td><code>npm install --save loopback-connector-mssql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.sqlite.org/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">SQLite 3.x</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-sqlite3\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-sqlite3</a></td>\n      <td><code>npm install --save loopback-connector-sqlite3</code></td>\n    </tr>\n    <tr>\n      <td colspan=\"3\"><strong>Other connectors</strong></td>\n    </tr>\n    <tr>\n      <td><a href=\"Email-connector.html\">Email connector</a></td>\n      <td>Built in to LoopBack</td>\n      <td>\n        <p>Not required</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"Push-connector.html\">Push connector</a>  </td>\n      <td><a href=\"https://github.com/strongloop/loopback-component-push\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-component-push</a></td>\n      <td><code>npm install --save loopback-component-push</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Remote-connector.html\">Remote connector</a></td>\n      <td><a href=\"https://github.com/strongloop/loopback-connector-remote\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-remote</a></td>\n      <td><code>npm install --save loopback-connector-remote</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"REST-connector.html\">REST</a></td>\n      <td><a href=\"http://github.com/strongloop/loopback-connector-rest\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-rest</a></td>\n      <td><code>npm install --save loopback-connector-rest</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"SOAP-connector.html\">SOAP</a></td>\n      <td><a href=\"http://github.com/strongloop/loopback-connector-soap\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-soap</a></td>\n      <td><code>npm install --save loopback-connector-soap</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Storage-connector.html\">Storage connector</a></td>\n      <td><a href=\"https://github.com/strongloop/loopback-component-storage\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-component-storage</a>    </td>\n      <td><code>npm install --save loopback-component-storage</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h5 id=\"安装连接器\"><a href=\"#安装连接器\" class=\"headerlink\" title=\"安装连接器\"></a>安装连接器</h5><p>在你的应用程序根目录运行<code>npm install --save &lt;_connector-module_&gt;</code> ,然后它会把相关依赖保存到<code>package.json</code>文件中,例如安装Oracle database connector:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;your-app&gt;</span><br><span class=\"line\">$ npm install --save loopback-connector-oracle</span><br></pre></td></tr></table></figure>\n\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"loopback-connector-oracle\": \"latest\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建数据源\"><a href=\"#创建数据源\" class=\"headerlink\" title=\"创建数据源\"></a>创建数据源</h5><p>使用<code>data source generator</code>创建数据源.</p>\n<p>数据源属性:</p>\n<p>数据源属性取决于所使用的特定数据源.但是,数据库连接器(Oracle,MySQL,PostgreSQL,MongoDB等)的数据源共享一组公用属性,如下表所述:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>connector</td>\n      <td>String</td>\n      <td>\n        <p>Connector name; for example:</p>\n        <ul>\n          <li>\"memory\"</li>\n          <li>\"loopback-connector-mongodb\" or \"mongodb\"</li>\n          <li>\"loopback-connector-mysql\" or \"mysql\"</li>\n          <li>\"loopback-connector-oracle\" or \"oracle\"</li>\n          <li>\"loopback-connector-postgresql\" or \"postgresql\"</li>\n          <li>\"loopback-connector-rest\" or \"rest\"</li>\n          <li>\"loopback-connector-mssql\" or \"mssql\"</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>database</td>\n      <td>String</td>\n      <td>Database name</td>\n    </tr>\n    <tr>\n      <td>debug</td>\n      <td>Boolean</td>\n      <td>If true, turn on verbose mode to debug database queries and lifecycle.</td>\n    </tr>\n    <tr>\n      <td>host</td>\n      <td>String</td>\n      <td>Database host name</td>\n    </tr>\n    <tr>\n      <td>password</td>\n      <td>String</td>\n      <td>Password to connect to database</td>\n    </tr>\n    <tr>\n      <td>port</td>\n      <td>Number</td>\n      <td>Database TCP port</td>\n    </tr>\n    <tr>\n      <td>url</td>\n      <td>String</td>\n      <td>\n        <p>Combines and overrides <code>host</code>,&nbsp;<code>port</code>,&nbsp;<code>user</code>,&nbsp;<code>password</code>, and&nbsp;<code>database</code>&nbsp;properties.</p>\n        <p>Only valid with <a href=\"MongoDB-connector.html\">MongoDB connector</a>, <a href=\"PostgreSQL-connector.html\">PostgreSQL connector</a>, and <a href=\"SQL-Server-connector.html\">SQL Server connector</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>username</td>\n      <td>String</td>\n      <td>Username to connect to database</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"3.1\"> 3.1 从Model创建数据库schema </h4>\n\n<p>LoopBack _auto-migration_根据应用程序的模型创建数据库模式.在关系数据库中,auto-migration为每个模型创建一个表,并为模型中的每个属性在表中创建一个列.auto-migration为附加到数据源的所有模型创建表,包括内置模型.</p>\n<p>一旦定义了模型,如果需要调整数据库以匹配模型,LoopBack可以相应地创建或更新(同步0数据库模式. LoopBack提供了两种方法来将模型定义与表模式同步:</p>\n<ul>\n<li><p><strong>Auto-migrate</strong>: 基于模型定义自动创建或重新创建表模式. </p>\n</li>\n<li><p><strong>Auto-update</strong>: 根据模型定义自动更改表模式.</p>\n</li>\n</ul>\n<blockquote>\n<p> 警告:如果现有表的名称与模型名称匹配,Auto-migration将删除现有表.当表里有数据时,请使用自动更新以避免数据丢失.</p>\n</blockquote>\n<h5 id=\"Auto-migrate\"><a href=\"#Auto-migrate\" class=\"headerlink\" title=\"Auto-migrate\"></a>Auto-migrate</h5><p>下面的数据源支持auto-migration:</p>\n<ul>\n<li>Oracle</li>\n<li>PostgreSQL</li>\n<li>MySQL</li>\n<li>SQL Server</li>\n<li>MongoDB</li>\n</ul>\n<p>下面是个auto-migration的例子.</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema_v1 = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"CustomerTest\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"idInjection\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"oracle\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"schema\"</span>: <span class=\"string\">\"LOOPBACK\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"table\"</span>: <span class=\"string\">\"CUSTOMER_TEST\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">40</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"email\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">40</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Number\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>假设模型在Oracle数据库中没有相应的表,您可以使用autoMigrate()创建相应的模式对象以反映模型定义.</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ds = Model.app.dataSources.oracle;</span><br><span class=\"line\"></span><br><span class=\"line\">ds.createModel(schema_v1.name, schema_v1.properties, schema_v1.options);</span><br><span class=\"line\"></span><br><span class=\"line\">ds.automigrate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ds.discoverModelProperties(<span class=\"string\">'CUSTOMER_TEST'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(props);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码将在oracle数据库中创建如下对象:</p>\n<ul>\n<li>A table CUSTOMER_TEST.</li>\n<li>A sequence CUSTOMER_TEST_ID_SEQUENCE for keeping sequential IDs.</li>\n<li>A trigger CUSTOMER_ID_TRIGGER that sets values for the primary key.</li>\n</ul>\n<p>现在假设你打算对你的model做一些改变.下面是它的代码:</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema_v2 = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"CustomerTest\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"idInjection\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"oracle\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"schema\"</span>: <span class=\"string\">\"LOOPBACK\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"table\"</span>: <span class=\"string\">\"CUSTOMER_TEST\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"email\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">      <span class=\"string\">\"oracle\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"columnName\"</span>: <span class=\"string\">\"EMAIL\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dataType\"</span>: <span class=\"string\">\"VARCHAR\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dataLength\"</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">        <span class=\"string\">\"nullable\"</span>: <span class=\"string\">\"Y\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"firstName\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">40</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"lastName\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">40</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"MongoDB-indexes\"><a href=\"#MongoDB-indexes\" class=\"headerlink\" title=\"MongoDB indexes\"></a>MongoDB indexes</h5><p>运行autoMigrate()创建缺少的索引,但是如果它们的定义更改,则autoMigrate()不会修改它们.如果模型的索引定义更改,您必须通过MongoDB shell修改它们,或删除它们并重新创建它们.有关详细信息请参阅MongoDB文档.</p>\n<h5 id=\"Auto-update\"><a href=\"#Auto-update\" class=\"headerlink\" title=\"Auto-update\"></a>Auto-update</h5><p>如果数据库中存在现有表,则运行autoMigrate()将删除并重新创建表.这意味着数据将丢失.要避免此问题,请使用auto-update(). autoupdate()计算LoopBack模型和数据库表定义之间的差异,并相应地更改表,而不是删除表并重新创建它们.这样,只要属性未从模型中删除.列数据就会保留.</p>\n<p>例如:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ds.createModel(schema_v2.name, schema_v2.properties, schema_v2.options);</span><br><span class=\"line\">ds.autoupdate(schema_v2.name, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  ds.discoverModelProperties(<span class=\"string\">'CUSTOMER_TEST'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(props);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要检查是否需要数据库更改,请使用isActual()方法.它接受一个回调参数,该参数根据数据库状态接收一个布尔值:</p>\n<ul>\n<li>如果数据库结构过时则为False</li>\n<li>数据源和数据库同步时为True</li>\n</ul>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.isActual(models, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, actual</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!actual) &#123;</span><br><span class=\"line\">    dataSource.autoupdate(models, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3.2\"> 3.2 理解数据源 </h4>\n\n<p><img src=\"img/dsIntr.jpg\" alt=\"dsIntr\"></p>\n<h5 id=\"概述-13\"><a href=\"#概述-13\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>上图说明了LoopBack模型,DataSource和连接器之间的关系.</p>\n<ol>\n<li><p>定义模型.</p>\n</li>\n<li><p>创建ModelBuilder或DataSource的实例.DataSource从ModelBuilder扩展.ModelBuilder负责将模型定义编译为表示模型类的JavaScript构造函数.DataSource从ModelBuilder继承该函数.</p>\n</li>\n<li><p>使用ModelBuilder或DataSource从模型定义构建一个JavaScript构造函数(即模型类).从ModelBuilder构建的模型类可以稍后附加到DataSource,以接收混合的数据访问函数.</p>\n</li>\n<li><p>作为步骤2的一部分,DataSource使用设置对象初始化底层连接器,该对象为连接器实例提供配置.连接器与DataSource协作将函数定义为要混合到模型类中的DataAccessObject.DataAccessObject包括静态和原型方法的列表.它可以根据连接器的功能实现创建,检索,更新和删除操作或其他特定功能.</p>\n</li>\n</ol>\n<p>DataSource对象是LoopBack应用程序与后端系统集成的统一接口.它是围绕模型类的数据访问逻辑的工厂.通过各种连接器的能力,DataSource提供了与数据库或服务交互的必要抽象,以将业务逻辑与管道技术分离.</p>\n<h5 id=\"以编程方式创建DataSource\"><a href=\"#以编程方式创建DataSource\" class=\"headerlink\" title=\"以编程方式创建DataSource\"></a>以编程方式创建DataSource</h5><p><code>DataSource constructor</code>接受下面的参数:</p>\n<ul>\n<li><p><strong>name</strong>: Optional name of the data source instance being created. </p>\n</li>\n<li><p><strong>settings</strong>: An object of properties to configure the connector. Must include a connector property, specifying the connector to use. See Connecting models to data sources (Connectors).</p>\n</li>\n</ul>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DataSource = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataSource = <span class=\"keyword\">new</span> DataSource(&#123;</span><br><span class=\"line\">    connector: <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-connector-mongodb'</span>),</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">27017</span>,</span><br><span class=\"line\">    database: <span class=\"string\">'mydb'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>传递给DataSource构造函数的连接器参数可以是以下之一:</p>\n<ul>\n<li>The connector module from require(connectorName)</li>\n<li>The full name of the connector module, such as ‘loopback-connector-oracle’</li>\n<li>The short name of the connector module, such as ‘oracle’, which will be converted to ‘loopback-connector-‘</li>\n<li>A local module under ./connectors/ folder</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ds1 = <span class=\"keyword\">new</span> DataSource(<span class=\"string\">'memory'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds2 = <span class=\"keyword\">new</span> DataSource(<span class=\"string\">'loopback-connector-mongodb'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds3 = <span class=\"keyword\">new</span> DataSource(<span class=\"built_in\">require</span>(<span class=\"string\">'loopback-connector-oracle'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>LoopBack提供了内置内存连接器,它使用内存存储来进行创建,检索,更新和删除操作.</p>\n<p><code>Settings</code>参数用来配置连接器.<code>Settings</code>对象的格式和默认值取决于特定连接器,但常用字段包括:</p>\n<ul>\n<li>host: Database host</li>\n<li>port: Database port</li>\n<li>username: Username to connect to database</li>\n<li>password: Password to connect to database</li>\n<li>database: Database name</li>\n<li>debug: Turn on verbose mode to debug db queries and lifecycle</li>\n</ul>\n<h5 id=\"从数据源创建model\"><a href=\"#从数据源创建model\" class=\"headerlink\" title=\"从数据源创建model\"></a>从数据源创建model</h5><p>DataSource从ModelBuilder扩展,ModelBuilder是一个只有属性的纯模型类的工厂.DataSource使用Connector连接到数据库和其他后端系统.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DataSource = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).DataSource;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = <span class=\"keyword\">new</span> DataSource(<span class=\"string\">'memory'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> User = ds.define(<span class=\"string\">'User'</span>, &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  bio: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  approved: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">  joinedAt: <span class=\"built_in\">Date</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>单个数据源中的所有模型类共享相同的连接器类型和一个数据库连接或连接池.但是可以使用多个数据源连接到不同的数据库.</p>\n<p>或者，您可以将从ModelBuilder创建的plain model构造函数附加到DataSource.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ModelBuilder = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).ModelBuilder;</span><br><span class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ModelBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> User = builder.define(<span class=\"string\">'User'</span>, &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  bio: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  approved: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">  joinedAt: <span class=\"built_in\">Date</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> DataSource = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).DataSource;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = <span class=\"keyword\">new</span> DataSource(<span class=\"string\">'memory'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">User.attachTo(ds); <span class=\"comment\">// The create, retrieve, update, and delete</span></span><br><span class=\"line\">                   <span class=\"comment\">// methods will be mixed into the User constructor</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"为连接器创建数据源\"><a href=\"#为连接器创建数据源\" class=\"headerlink\" title=\"为连接器创建数据源\"></a>为连接器创建数据源</h5><p>应用程序代码不直接使用连接器.相反,您可以创建一个DataSource来与连接器交互.</p>\n<p>下面是个使用内存连接器的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> memory = loopback.createDataSource(&#123;</span><br><span class=\"line\">  connector: loopback.Memory</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>下面是使用oracle连接器的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DataSource = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).DataSource;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oracleConnector = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-connector-oracle'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = <span class=\"keyword\">new</span> DataSource(oracleConnector, &#123;</span><br><span class=\"line\">  host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">  database: <span class=\"string\">'XE'</span>,</span><br><span class=\"line\">  username: <span class=\"string\">'username'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'password'</span>,</span><br><span class=\"line\">  debug: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>传递给DataSource构造函数的连接器参数可以是以下之一:</p>\n<ul>\n<li>The connector module from require(‘connectorName’)</li>\n<li>The full name of the connector module, such as ‘loopback-connector-oracle’.</li>\n<li>The short name of the connector module, such as ‘oracle’, that LoopBack converts to ‘loopback-connector-oracle’ (for example).</li>\n<li>A local module in the /connectors folder</li>\n</ul>\n<h5 id=\"初始化连接器\"><a href=\"#初始化连接器\" class=\"headerlink\" title=\"初始化连接器\"></a>初始化连接器</h5><p>连接器模块可以导出为初始化函数,这个初始化函数可供拥有DataSource的实例调用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.initialize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dataSource, postInit</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> settings = dataSource.settings || &#123;&#125;;   <span class=\"comment\">// The settings is passed in from the dataSource</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> connector = <span class=\"keyword\">new</span> MyConnector(settings);  <span class=\"comment\">// Construct the connector instance</span></span><br><span class=\"line\">  dataSource.connector = connector;           <span class=\"comment\">// Attach connector to dataSource</span></span><br><span class=\"line\">  connector.dataSource = dataSource;          <span class=\"comment\">// Hold a reference to dataSource</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>DataSource使用自身和一个可选的<code>postInit</code>回调函数作为参数来调用<code>initialize</code>方法.连接器从<code>dataSource(自身)</code>参数接收设置,并使用它配置与后端系统的连接.</p>\n<p>请注意connector和dataSource设置了对方的引用(<em>译注:相互引用</em>).</p>\n<p>初始化时,连接器可能会自动连接到数据库.一旦连接建立,dataSource对象发出’connected’事件,并设置<code>connected</code>标志为true，但没有必要等待’connected’事件,因为所有的查询缓存和执行时会在收到dataSource的’connected’事件后自动执行.</p>\n<p>要断开与数据库服务器的连接,请调用dataSource.disconnect方法.如果连接器具有连接/断开连接的能力，则此调用将转发到连接器.</p>\n<hr>\n<h4 id=\"3.3\"> 3.3 使用数据库事务 </h4>\n\n<h5 id=\"概要-3\"><a href=\"#概要-3\" class=\"headerlink\" title=\"概要\"></a>概要</h5><p>事务是单个逻辑工作单元执行的数据操作序列.许多关系数据库支持事务以帮助实现数据一致性和业务逻辑需求.</p>\n<p>当模型连接到以下连接器之一时,LoopBack模型可以在事务中执行操作.</p>\n<ul>\n<li>MySQL connector (IMPORTANT: Only with InnoDB as the storage engine).</li>\n<li>PostgreSQL connector</li>\n<li>SQL Server connector</li>\n<li>Oracle connector</li>\n</ul>\n<h5 id=\"事务API\"><a href=\"#事务API\" class=\"headerlink\" title=\"事务API\"></a>事务API</h5><p>在事务中执行操作通常包括以下步骤:</p>\n<ul>\n<li>Start a new transaction.</li>\n<li>Perform create, read, update, and delete operations in the transaction.</li>\n<li>Commit or rollback the transaction.</li>\n</ul>\n<h5 id=\"Start-transaction\"><a href=\"#Start-transaction\" class=\"headerlink\" title=\"Start transaction\"></a>Start transaction</h5><p>使用<code>beginTransaction</code>方法来开始一个事务.</p>\n<p>例如, for a Post model:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.beginTransaction(&#123;<span class=\"attr\">isolationLevel</span>: Post.Transaction.READ_COMMITTED&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, tx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Now we have a transaction (tx)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Isolation levels</em></p>\n<p>调用beginTransaction()时可以选择指定事务隔离级别.LoopBack事务支持以下隔离级别:</p>\n<ul>\n<li>Transaction.READ_UNCOMMITTED</li>\n<li>Transaction.READ_COMMITTED (default)</li>\n<li>Transaction.REPEATABLE_READ</li>\n<li>Transaction.SERIALIZABLE</li>\n</ul>\n<p>如果你没指定,则默认的事务隔离级别是<code>READ_COMMITTED</code>.</p>\n<blockquote>\n<p> 提示: Oracle only supports READ_COMMITTED and SERIALIZABLE</p>\n</blockquote>\n<h5 id=\"Perform-operations-in-a-transaction\"><a href=\"#Perform-operations-in-a-transaction\" class=\"headerlink\" title=\"Perform operations in a transaction\"></a>Perform operations in a transaction</h5><p>在事务中执行创建,检索,更新和删除操作.将由事务对象组成的第二个参数添加到标准的create(),upsert(),destroyAll()等方法.</p>\n<p>例如,again assuming a Post model:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.create(&#123;<span class=\"attr\">title</span>: <span class=\"string\">'t1'</span>, <span class=\"attr\">content</span>: <span class=\"string\">'c1'</span>&#125;, &#123;<span class=\"attr\">transaction</span>: tx&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, post</span>) </span>&#123;</span><br><span class=\"line\">  post.updateAttributes(&#123;<span class=\"attr\">content</span>: <span class=\"string\">'c2'</span>, &#123;<span class=\"attr\">transaction</span>: tx&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, newPost</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    newPost.reviews.create(&#123;<span class=\"attr\">content</span>: <span class=\"string\">'r1'</span>&#125;, &#123;<span class=\"attr\">transaction</span>: tx&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, newPost</span>) </span>&#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Commit-or-rollback\"><a href=\"#Commit-or-rollback\" class=\"headerlink\" title=\"Commit or rollback\"></a>Commit or rollback</h5><p>Commit the transaction:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transaction.commit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Or to rollback the transaction:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transaction.rollback(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Please note all three APIs support the Promise flavor. See an example at <a href=\"https://github.com/strongloop/loopback-connector-mysql/blob/master/test/transaction.promise.test.js\" target=\"_blank\" rel=\"noopener\">https://github.com/strongloop/loopback-connector-mysql/blob/master/test/transaction.promise.test.js</a>.</p>\n<h5 id=\"Set-up-timeout\"><a href=\"#Set-up-timeout\" class=\"headerlink\" title=\"Set up timeout\"></a>Set up timeout</h5><p>您可以指定事务的超时时间(以毫秒为单位).如果事务在超时之前未完成(提交或回滚),则默认情况下会在超时后自动回滚.可以使用timeout hook捕获超时事件.</p>\n<p>For example, again assuming a Post model:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.beginTransaction(&#123;</span><br><span class=\"line\">    isolationLevel: Transaction.READ_COMMITTED,</span><br><span class=\"line\">    timeout: <span class=\"number\">30000</span> <span class=\"comment\">// 30000ms = 30s</span></span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, tx</span>) </span>&#123;</span><br><span class=\"line\">    tx.observe(<span class=\"string\">'timeout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// handle timeout</span></span><br><span class=\"line\">      next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"传播事务\"><a href=\"#传播事务\" class=\"headerlink\" title=\"传播事务\"></a>传播事务</h5><p>传播事务是指显示的为CRUD和relation methods的options参数传递一个transaction对象.</p>\n<p>For example, again assuming a Post model:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;<span class=\"attr\">transaction</span>: tx&#125;;</span><br><span class=\"line\">Post.create(&#123;<span class=\"attr\">title</span>: <span class=\"string\">'t1'</span>, <span class=\"attr\">content</span>: <span class=\"string\">'c1'</span>&#125;, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, post</span>) </span>&#123;</span><br><span class=\"line\">  post.updateAttributes(&#123;<span class=\"attr\">content</span>: <span class=\"string\">'c2'</span>, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, newPost</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    newPost.reviews.create(&#123;<span class=\"attr\">content</span>: <span class=\"string\">'r1'</span>&#125;, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, newPost</span>) </span>&#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Set-up-transaction-hooks\"><a href=\"#Set-up-transaction-hooks\" class=\"headerlink\" title=\"Set up transaction hooks\"></a>Set up transaction hooks</h5><p>事务有四种(<em>译注:眼瞅着是5种</em>)类型的可观察事件:</p>\n<ul>\n<li>before commit</li>\n<li>after commit</li>\n<li>before rollback</li>\n<li>after rollback</li>\n<li>timeout</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tx.observe(<span class=\"string\">'before commit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">tx.observe(<span class=\"string\">'after commit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">tx.observe(<span class=\"string\">'before rollback'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">tx.observe(<span class=\"string\">'after rollback'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"避免长时间等待或死锁\"><a href=\"#避免长时间等待或死锁\" class=\"headerlink\" title=\"避免长时间等待或死锁\"></a>避免长时间等待或死锁</h5><p>请注意,具有特定隔离级别的事务将锁定数据库对象.在事务内异步执行多个方法具有阻止其他事务(显式或隐式)的巨大可能性.为了避免长时间等待甚至死锁，您应该:</p>\n<ul>\n<li>让事务尽可能短暂.</li>\n<li>不要在多个事务中序列化方法的执行.</li>\n</ul>\n<hr>\n<h4 id=\"3.4\"> 3.4 执行本地SQL </h4>\n\n<blockquote>\n<p> 警告:此功能尚未完全测试,并且未正式支持,API可能会在将来的版本中更改.</p>\n</blockquote>\n<p>To execute SQL directly against your data-connected model, use the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.connector.execute(_sql_, _params_, _cb_);</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.connector.query(_sql_, _params_, _cb_); <span class=\"comment\">// For 1.x connectors</span></span><br></pre></td></tr></table></figure>\n\n<p>Where:</p>\n<ul>\n<li>sql - The SQL string.</li>\n<li>params - parameters to the SQL statement.</li>\n<li>cb - callback function</li>\n</ul>\n<hr>\n<h4 id=\"3.5\"> 3.5 构建连接器 </h4>\n\n<h5 id=\"概述-14\"><a href=\"#概述-14\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>本文适用于想要创建新连接器类型以连接到当前不支持的数据源的开发人员.它将引导您完成MySQL连接器的实施,以教您如何为关系数据库开发连接器.但是,许多概念也适用于创建到其他类型的数据源的连接器</p>\n<p><strong><em>译注:iworks暂时用不到这里,暂时先不翻译了</em></strong></p>\n<hr>\n<h4 id=\"4\"> 4. 使用数据 </h4>\n\n<p>一旦定义了模型,就可以使用创建,读取,更新和删除(CRUD)操作向模型添加数据,处理数据并进行查询. 所有连接到持久性数据存储(如数据库)的LoopBack模型都会自动拥有PersistedModel类的创建,检索,更新和删除操作.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>REST</th>\n      <th>LoopBack model method<br>(Node API)*</th>\n      <th>Corresponding SQL<br>Operation</th>\n    </tr>\n    <tr>\n      <td>Create</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">PUT /<em>modelName</em></a></p>\n        <p><a href=\"PersistedModel-REST-API.html#update--insert-instance\">POST /<em>modelName</em></a></p>\n      </td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-create\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">create()</a><sup>*</sup></code></td>\n      <td>INSERT</td>\n    </tr>\n    <tr>\n      <td>Read (Retrieve)</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">GET /modelName?filter=...</a></td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-find\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">find()</a><sup>*</sup></code></td>\n      <td>SELECT</td>\n    </tr>\n    <tr>\n      <td>Update (Modify)</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#update--insert-instance\">POST /<em>modelName</em></a>&nbsp;</p>\n        <p><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">PUT /modelName</a></p>\n      </td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-updateall\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">updateAll()</a><sup>*</sup></code></td>\n      <td>UPDATE</td>\n    </tr>\n    <tr>\n      <td>Delete (Destroy)</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">DELETE /<em>modelName</em>/<em>modelID</em></a></td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">destroyById()</a><sup>*</sup></code></td>\n      <td>DELETE</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>(*)列出的方法只是比较常用的例子,其他方法也可以提供类似的功能.例如:findById(),findOne()和findOrCreate().有关更多信息,请参阅PersistedModel API文档.</p>\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API.</p>\n</blockquote>\n<hr>\n<h4 id=\"4.1\"> 4.1 创建,更新和删除数据 </h4>\n\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<p>PersistedModel有一套方法用于创建,更新和删除数据.</p>\n<p>模型数据也称为模型实例.在数据库术语中,从概念上理解,模型对应于表,并且模型实例对应于表中的行或记录.</p>\n<h5 id=\"Creating-data-model-instances\"><a href=\"#Creating-data-model-instances\" class=\"headerlink\" title=\"Creating data (model instances)\"></a>Creating data (model instances)</h5><p>使用以下PersistedModel方法添加数据,即插入或创建实例:</p>\n<ul>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-create\" target=\"_blank\" rel=\"noopener\">create</a> - 创建一个新的模型实例(记录).</p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-upsert\" target=\"_blank\" rel=\"noopener\">upsert</a> - 根据指定的<a href=\"http://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#id-properties\" target=\"_blank\" rel=\"noopener\">ID property</a>属性检查实例(记录)是否存在,该属性必须具有唯一值.如果实例已存在,则方法将更新该实例.否则,它插入一个新实例.</p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-findorcreate\" target=\"_blank\" rel=\"noopener\">findOrCreate</a> - 查找与第一个参数提供的过滤器对象匹配的一个实例.如果找到,则返回对象.如果未找到,则创建一个新实例(记录).</p>\n<blockquote>\n<p> 重要: 请确保在过滤器对象中包含where子句.没有where,findOrCreate会查找并返回集合中的第一条记录,这可能导致意外的行为.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-save\" target=\"_blank\" rel=\"noopener\">save</a> - 保存模型实例.如果实例没有ID,则调用<a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-create\" target=\"_blank\" rel=\"noopener\">create</a>.触发器:验证,保存,更新或创建.</p>\n</li>\n</ul>\n<h5 id=\"Updating-data-model-instances\"><a href=\"#Updating-data-model-instances\" class=\"headerlink\" title=\"Updating data (model instances)\"></a>Updating data (model instances)</h5><p>静态方法(在Model对象上调用):</p>\n<ul>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-updateall\" target=\"_blank\" rel=\"noopener\">updateAll</a> - 更新与指定的where子句匹配的多个实例(记录)<a href=\"http://loopback.io/doc/en/lb3/Where-filter.html\" target=\"_blank\" rel=\"noopener\">where clause</a>. </li>\n</ul>\n<blockquote>\n<p> 要点: 与updateAll()一起使用的where子句与查询的where子句略有不同.从where子句中省略{where：…},只需提供条件作为第一个参数.有关详细信息，请参阅<a href=\"http://loopback.io/doc/en/lb3/Where-filter.html\" target=\"_blank\" rel=\"noopener\">where clause</a></p>\n</blockquote>\n<p>实例方法(在单个模型实例上调用):</p>\n<ul>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattribute\" target=\"_blank\" rel=\"noopener\">updateAttribute</a> - 更新单个属性(property).</p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattributes\" target=\"_blank\" rel=\"noopener\">updateAttributes</a> - 更新属性集(properties).在更新前执行验证.</p>\n</li>\n</ul>\n<h5 id=\"Performing-bulk-updates-执行批量更新\"><a href=\"#Performing-bulk-updates-执行批量更新\" class=\"headerlink\" title=\"Performing bulk updates(执行批量更新)\"></a>Performing bulk updates(执行批量更新)</h5><ul>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-createupdates\" target=\"_blank\" rel=\"noopener\">createUpdates</a></p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-bulkupdate\" target=\"_blank\" rel=\"noopener\">bulkUpdate</a></p>\n</li>\n</ul>\n<h5 id=\"Deleting-data\"><a href=\"#Deleting-data\" class=\"headerlink\" title=\"Deleting data\"></a>Deleting data</h5><p>静态方法(在Model对象上调用):</p>\n<ul>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-destroyall\" target=\"_blank\" rel=\"noopener\">destroyAll</a> - 删除与可选Where过滤器匹配的所有模型实例<a href=\"http://loopback.io/doc/en/lb3/Where-filter.html\" target=\"_blank\" rel=\"noopener\">Where filter</a>.</p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid\" target=\"_blank\" rel=\"noopener\">destroyById</a> - 删除指定ID的模型实例.</p>\n</li>\n</ul>\n<blockquote>\n<p> 重要:destroyAll()的where子句与查询的where子句略有不同.从where子句中省略{where：…}.只需提供条件作为第一个参数</p>\n</blockquote>\n<p>浏览更多信息,请访问<a href=\"http://loopback.io/doc/en/lb3/Where-filter.html\" target=\"_blank\" rel=\"noopener\">Where filter</a>.</p>\n<hr>\n<h4 id=\"4.2\"> 4.2 查询数据 </h4>\n\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<h5 id=\"概述-15\"><a href=\"#概述-15\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>查询是对返回一组数据或结果的模型的读取操作.您可以使用过滤器,使用Node API和REST API查询LoopBack模型,如下表所示.过滤器指定返回的数据集的条件,两个API的功能和选项是相同的,唯一的区别是在HTTP请求中使用的语法与Node 函数调用.在这两种情况下,LoopBack模型都返回JSON.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Query</th>\n      <th>Model API (Node)</th>\n      <th>REST API</th>\n    </tr>\n    <tr>\n      <td>\n        <p>Find all model instances using specified filters.&nbsp;</p>\n        <p>&nbsp;</p>\n      </td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-find\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">find(filter, callback)</a></code></p>\n        <p>Where filter is a JSON object containing the query filters.</p>\n        <p>See <a href=\"Querying-data.html\">Filters</a> below.</p>\n      </td>\n      <td>\n        <p> <code>GET /<em>modelName</em>?filter...</code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Model REST API - Find matching instances</a>.</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>Find first model instance using specified filters.</td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findone\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">findOne(filter, callback)</a></code></p>\n        <p>Where filter is a JSON object containing the query filters.</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n      <td>\n        <p><code><span>GET /<em>modelName</em>/findOne?filter...</span></code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-first-instance\">Model REST API - Find first instance</a>.&nbsp;</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>Find instance by ID.</td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findbyid\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">findById(id, [filter,] callback)</a></code></p>\n        <p>Where optional filter is a JSON object <span>containing the query filters.</span></p>\n        <p><span><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></span>\n        </p>\n      </td>\n      <td>\n        <p><code><span>GET /</span><em>modelName</em><span>/</span><em>modelID</em></code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Model REST API - Find instance by ID</a>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<blockquote>\n<p> 重要:REST查询必须在URL查询字符串中包含字符串”filter”.而Node API调用则在JSON中不包括字符串”filter”.LoopBack API Explorer将”过滤器”添加到查询字符串,但必须在filter字段中输入<a href=\"http://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries\" target=\"_blank\" rel=\"noopener\">Stringified JSON</a>.还要确保您使用的引号是正确的直引号(“)(<em>译注:半角引号</em>),而不是弯曲或印刷引号(”或“).这些通常很难在视觉上区分.</p>\n</blockquote>\n<p>LoopBack支持以下几种过滤器:</p>\n<ul>\n<li>Fields filter</li>\n<li>Include filter</li>\n<li>Limit filter</li>\n<li>Order filter</li>\n<li>Skip filter</li>\n<li>Where filter</li>\n</ul>\n<p>使用带有where和limit限制过滤器的find()方法的示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Account.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>&#125;, <span class=\"attr\">limit</span>: <span class=\"number\">3</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, accounts</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>用REST实现则是:</p>\n<p><code>/accounts?filter[where][name]=John&amp;filter[limit]=3</code></p>\n<h5 id=\"过滤器-Filters\"><a href=\"#过滤器-Filters\" class=\"headerlink\" title=\"过滤器(Filters)\"></a>过滤器(Filters)</h5><p>在REST和Node API中,您可以使用任意数量的过滤器来定义查询.</p>\n<p>LoopBack支持特定的过滤器语法:它很像SQL,但是专门用于安全地序列化,无需注入和本地JavaScript.以前，只有PersistedModel.find()方法(和相关方法)支持此语法.</p>\n<p>下表描述了LoopBack的过滤器类型:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Filter type</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>fields</td>\n      <td>Object, Array, or String</td>\n      <td>\n        <p>Specify fields to include in or exclude from the response.</p>\n        <p>See <a href=\"Fields-filter.html\">Fields filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>include</td>\n      <td>String, Object, or Array</td>\n      <td>\n        <p>Include results from related models, for relations such as&nbsp;<em>belongsTo</em>&nbsp;and&nbsp;<em>hasMany</em>.</p>\n        <p>See <a href=\"Include-filter.html\">Include filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>Number</td>\n      <td>\n        <p>Limit the number of instances to return.</p>\n        <p>See <a href=\"Limit-filter.html\">Limit filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>order</td>\n      <td>String</td>\n      <td>\n        <p>Specify sort order: ascending or descending.</p>\n        <p>See <a href=\"Order-filter.html\">Order filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>skip (offset)</td>\n      <td>Number</td>\n      <td>\n        <p>Skip the specified number of instances.</p>\n        <p>See <a href=\"Skip-filter.html\">Skip filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>where</td>\n      <td>Object</td>\n      <td>\n        <p>Specify search criteria; similar to a WHERE clause in SQL.</p>\n        <p>See <a href=\"Where-filter.html\">Where filter</a>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>REST语法:</p>\n<p><code>?filter_filterType_=_spec_&amp;_filterType_=_spec_....</code></p>\n<p>您可以应用于单个请求的过滤器数量仅受最大网址长度限制,后者通常取决于所使用的客户端.</p>\n<blockquote>\n<p> 重要: 在查询字符串中?filter后没有等号.例如:<a href=\"http://localhost:3000/api/books?filter[where][id]=1\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/books?filter[where][id]=1</a></p>\n</blockquote>\n<p>Node语法:</p>\n<p>指定filters作为find()和findOne()的第一个参数: </p>\n<p><code>{ filterType: spec, filterType: spec, ... }</code></p>\n<p>您可以应用的过滤器数量理论上没有限制.</p>\n<ul>\n<li><p>filterType是:where,include,order,limit,skip或fields.</p>\n</li>\n<li><p>spec是过滤器的规范:例如对于where过滤器,这是结果必须匹配的逻辑条件.对于include过滤器,它指定要包括的相关字段.</p>\n</li>\n</ul>\n<h5 id=\"在REST查询中使用”stringified”JSON\"><a href=\"#在REST查询中使用”stringified”JSON\" class=\"headerlink\" title=\"在REST查询中使用”stringified”JSON\"></a>在REST查询中使用”stringified”JSON</h5><p>除了上述标准REST语法之外,您还可以在REST查询中使用”stringified JSON”.为此,只需使用为Node语法指定的JSON,如下所示:</p>\n<p><code>?filter={ Stringified-JSON }</code></p>\n<p>其中Stringified-JSON是来自Node语法的字符串化JSON.但是在JSON中,所有keys/strings必须用引号(“)括起来.</p>\n<blockquote>\n<p> 重要:当使用带字符的JSON时,必须在查询字符串中的?filter后使用等号.例如:http：// localhost：3000 / api / books？filter = {％22where％22：{％22id％22：2}}</p>\n</blockquote>\n<p>例如: <code>GET /api/activities/findOne?filter={&quot;where&quot;:{&quot;id&quot;:1234}}</code></p>\n<h4 id=\"过滤对象数组\"><a href=\"#过滤对象数组\" class=\"headerlink\" title=\"过滤对象数组\"></a>过滤对象数组</h4><p><a href=\"https://github.com/strongloop/loopback-filters\" target=\"_blank\" rel=\"noopener\">Loopback-filters</a>模块实现了LoopBack的过滤器语法.使用此模块,可以使用MyModel.find(filter)支持的相同语法过滤对象数组.</p>\n<blockquote>\n<p> 提示:我们计划将所有模块转换为使用loopback-filter,所以它将成为LoopBack常见的内置过滤机制.</p>\n</blockquote>\n<p>下面是几个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [&#123;<span class=\"attr\">n</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">n</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">n</span>: <span class=\"number\">3</span>, <span class=\"attr\">id</span>: <span class=\"number\">123</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> filter = &#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">n</span>: &#123;<span class=\"attr\">gt</span>: <span class=\"number\">1</span>&#125;&#125;, <span class=\"attr\">skip</span>: <span class=\"number\">1</span>, <span class=\"attr\">fields</span>: [<span class=\"string\">'n'</span>]&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> filtered = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-filters'</span>)(data, filter);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(filtered); <span class=\"comment\">// =&gt; [&#123;n: 3&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>有关更多细节,假设您正在解析逗号分隔值的(CSV)文件,并且您需要输出价格在10到100之间的所有值.要使用LoopBack过滤器语法,您需要创建您自己的CSV连接器或使用内存连接器,这两者都需要一些额外的与您的实际目标无关的工作.</p>\n<p>解析CSV(使用像node-csv这样的模块)后,您将拥有一个类似这样的对象数组(例如,带有10,000个唯一项):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;price: 85, id: 79&#125;,</span><br><span class=\"line\">  &#123;price: 10, id: 380&#125;,</span><br><span class=\"line\">  //...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>要过滤行,你可以使用类似这样的通用JavaScript:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.price &lt; <span class=\"number\">100</span> &amp;&amp; item.price &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这对于过滤来说非常简单,但是排序,字段选择和更高级的操作则变得有点困难.除此之外,你通常还要接受参数作为输入.例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userInput = &#123;<span class=\"attr\">min</span>: <span class=\"number\">10</span>, <span class=\"attr\">max</span>: <span class=\"number\">100</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.price &lt; userInput.min &amp;&amp; item.price &gt;= userInput.max</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码用LoopBack filter重写是very easy的:</p>\n<p><code>filter(data, {where: {input: {gt: userInput.min, lt: userInput.max}}})</code></p>\n<p>或者,如果你只是采用过滤器对象语法作为用户输入:</p>\n<p><code>filter(data, userInput)</code></p>\n<p>但是<code>loopback-filters</code>支持的不仅仅是排除和包括.它还支持字段选择(包括/排除字段),排序,地理/距离排序,限制和跳过(<em>译注:原文如下(including / excluding fields), sorting, geo/distance sorting, limiting and skipping.</em>).所有这些都是通过用户输入轻松创建的声明性语法.</p>\n<p>作为LoopBack用户,这是一个非常强大的东西.通常,您将学习如何使用find()过滤器语法编写一些复杂的查询.在这之前你需要弄清楚,如何在JavaScript中做同样的事情（可能使用一个库,如underscore）.现在使用<code>loopback-filters</code>模块,在您的客户端应用程序中,您可以重复使用您发送到服务器的,相同的过滤器对象来过滤数据库,而不必与LoopBack服务器进行任何交互.</p>\n<hr>\n<h4 id=\"4.2.1\"> 4.2.1 Fields filter </h4>\n\n<p>_fields filter_指定要在结果中包括或排除的属性(字段).</p>\n<h5 id=\"REST-API\"><a href=\"#REST-API\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p><code>filter[fields][_propertyName_]=&lt;true|false&gt;&amp;filter[fields][propertyName]=&lt;true|false&gt;...</code></p>\n<p>请注意,要在REST中包含多个字段,请使用多个过滤器.</p>\n<p>您还可以在REST查询中使用stringified JSON format(<em>译注:看上一节</em>).</p>\n<h5 id=\"Node-API\"><a href=\"#Node-API\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<p><code>{ fields: {_propertyName_: &lt;true|false&gt;, _propertyName_: &lt;true|false&gt;, ... } }</code></p>\n<p>其中:</p>\n<ul>\n<li><p><em>propertyName</em> is the name of the property (field) to include or exclude.</p>\n</li>\n<li><p>Use <em>true</em> to include the property or <em>false</em> to exclude it from results.</p>\n</li>\n</ul>\n<p>默认情况下,查询返回结果中的所有模型属性.但是,如果您指定至少一个值为true的字段过滤器,则默认情况下查询将只包括您特别指定要包含的过滤器字段.</p>\n<p>例子:</p>\n<p>只返回id, make, and model properties:</p>\n<p>REST</p>\n<p><code>?filter[fields][id]=true&amp;filter[fields][make]=true&amp;filter[fields][model]=true</code></p>\n<p>Node API</p>\n<p><code>{ fields: {id: true, make: true, model: true} }</code></p>\n<p>返回:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"make\"</span>: <span class=\"string\">\"Nissan\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Titan\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"make\"</span>: <span class=\"string\">\"Nissan\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Avalon\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>排除vin属性的例子:</p>\n<p>REST</p>\n<p><code>?filter[fields][vin]=false</code></p>\n<p>Node API</p>\n<p><code>{ fields: {vin: false} }</code></p>\n<hr>\n<h4 id=\"4.2.2\"> 4.2.2 Include filter </h4>\n\n<p>_ include filter_使您能够在查询中包括相关模型的结果,例如具有belongsTo或hasMany关系的模型.</p>\n<p>include filter的值可以是字符串,数组或对象.</p>\n<blockquote>\n<p> 重要:You can use an include filter with find(), findOne() and findById().</p>\n</blockquote>\n<h5 id=\"REST-API-1\"><a href=\"#REST-API-1\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p><code>filter[include][relatedModel]=propertyName</code></p>\n<p>您还可以在REST查询中使用stringified JSON format.</p>\n<h5 id=\"Node-API-1\"><a href=\"#Node-API-1\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;include: &apos;relatedModel&apos;&#125;</span><br><span class=\"line\">&#123;include: [&apos;relatedModel1&apos;, &apos;relatedModel2&apos;, ...]&#125;</span><br><span class=\"line\">&#123;include: &#123;relatedModel1: [&#123;relatedModel2: &apos;relationName&apos;&#125; , &apos;relatedModel&apos;]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><p><em>relatedModel, relatedModel1, and relatedModel2</em> are the names (pluralized) of related models.</p>\n</li>\n<li><p><em>relationName</em> is the name of a relation in the related model. </p>\n</li>\n</ul>\n<p>例子:</p>\n<p>Include relations without filtering:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: <span class=\"string\">'posts'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Return all user posts and orders with two additional requests:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: [<span class=\"string\">'posts'</span>, <span class=\"string\">'orders'</span>]&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Return all post owners (users), and all orders of each owner:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: <span class=\"string\">'orders'</span>&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Return all post owners (users), and all friends and orders of each owner:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [<span class=\"string\">'friends'</span>, <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Return all post owners (users), and all posts and orders of each owner. The posts also include images.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [&#123;<span class=\"attr\">posts</span>: <span class=\"string\">'images'</span>&#125; , <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Include with filters</p>\n<p>在某些情况下,您可能要对包含的相关模型应用过滤器.</p>\n<blockquote>\n<p> 注意:将过滤器应用于相关模型时,查询将返回第一个模型的结果以及包含过滤器查询的相关模型的任何结果,类似于SQL中的”左连接”</p>\n</blockquote>\n<p>LoopBack支持使用以下语法(例如):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;</span><br><span class=\"line\">  include: &#123;</span><br><span class=\"line\">    relation: <span class=\"string\">'owner'</span>, <span class=\"comment\">// include the owner object</span></span><br><span class=\"line\">    scope: &#123; <span class=\"comment\">// further filter the owner object</span></span><br><span class=\"line\">      fields: [<span class=\"string\">'username'</span>, <span class=\"string\">'email'</span>], <span class=\"comment\">// only show two fields</span></span><br><span class=\"line\">      include: &#123; <span class=\"comment\">// include orders for the owner</span></span><br><span class=\"line\">        relation: <span class=\"string\">'orders'</span>, </span><br><span class=\"line\">        scope: &#123;</span><br><span class=\"line\">          where: &#123;<span class=\"attr\">orderId</span>: <span class=\"number\">5</span>&#125; <span class=\"comment\">// only select order with id 5</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于只有<code>$authenticated</code>或<code>$owner</code>角色的用户,在访问权限的真实场景里,请使用findById().例如,以下示例使用过滤器执行分页.(<em>译注:翻译的不准,原文如下For real-world scenarios where only users in $authenticated or $owner roles should have access, use findById(). For example, the following example uses filters to perform pagination:</em>)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.findById(<span class=\"string\">'123'</span>, &#123;</span><br><span class=\"line\">  include: &#123;</span><br><span class=\"line\">    relation: <span class=\"string\">'orders'</span>,</span><br><span class=\"line\">    scope: &#123; <span class=\"comment\">// fetch 1st \"page\" with 5 entries in it</span></span><br><span class=\"line\">      skip:<span class=\"number\">0</span>,</span><br><span class=\"line\">      limit:<span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Access included objects</p>\n<p>在Node.js API中,调用toJSON()将带有相关项的返回模型实例转换为纯JSON对象.例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [&#123;<span class=\"attr\">posts</span>: <span class=\"string\">'images'</span>&#125; , <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, posts</span>) </span>&#123;</span><br><span class=\"line\"> posts.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// post.owner points to the relation method instead of the owner instance</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> p = post.toJSON();</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(p.owner.posts, p.owner.orders);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> <span class=\"comment\">//... </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>请注意关系属性,例如<code>post.owner</code>引用关系方法的JavaScript函数.</p>\n<p>REST examples</p>\n<p>这些示例假定customer模型与reviews模型具有hasMany关系. </p>\n<p>Return all customers including their reviews:</p>\n<p><code>/customers?filter[include]=reviews</code></p>\n<p>Return all customers including their reviews which also includes the author:</p>\n<p><code>/customers?filter[include][reviews]=author</code></p>\n<p>Return all customers whose age is 21, including their reviews which also includes the author:</p>\n<p><code>/customers?filter[include][reviews]=author&amp;filter[where][age]=21</code></p>\n<p>Return first two customers including their reviews which also includes the author</p>\n<p><code>/customers?filter[include][reviews]=author&amp;filter[limit]=2</code></p>\n<p>Return all customers including their reviews and orders</p>\n<p><code>/customers?filter[include]=reviews&amp;filter[include]=orders</code></p>\n<hr>\n<h4 id=\"4.2.3\"> 4.2.3 Limit filter </h4>\n\n<p>_limit filter_限制返回的记录数.</p>\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<h5 id=\"REST-API-2\"><a href=\"#REST-API-2\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p><code>filter[limit]=_n_</code></p>\n<p>You can also use stringified JSON format in a REST query.</p>\n<h5 id=\"Node-API-2\"><a href=\"#Node-API-2\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><p><code>{limit: _n_}</code></p>\n<p>其中n是要返回的结果(记录)的最大数目.</p>\n<p>例子:</p>\n<p>仅返回前五个查询结果:</p>\n<p>REST</p>\n<p><code>/cars?filter[limit]=5</code></p>\n<p>Node API</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find(&#123;<span class=\"attr\">limit</span>: <span class=\"number\">5</span>&#125;,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4.2.4\"> 4.2.4 Order filter </h4>\n\n<p>_order filter_指定如何对结果进行排序:根据指定的属性升序(ASC)或降序(DESC).</p>\n<h5 id=\"REST-API-3\"><a href=\"#REST-API-3\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p>根据一个属性排序: </p>\n<p><code>filter[order]=propertyName &lt;ASC|DESC&gt;</code></p>\n<p>根据2个或更多属性排序:</p>\n<p><code>filter[order][0]=propertyName &lt;ASC|DESC&gt;&amp;filter[order][1]propertyName]=&lt;ASC|DESC&gt;...</code></p>\n<p>You can also use stringified JSON format in a REST query.</p>\n<blockquote>\n<p> 注意:默认排序可以在<a href=\"http://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#default-scope\" target=\"_blank\" rel=\"noopener\">default scope.</a>配置</p>\n</blockquote>\n<h5 id=\"Node-API-3\"><a href=\"#Node-API-3\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<p>根据一个属性排序: </p>\n<p><code>{ order: &#39;propertyName &lt;ASC|DESC&gt;&#39; }</code></p>\n<p>根据2个或更多属性排序:</p>\n<p><code>{ order: [&#39;propertyName &lt;ASC|DESC&gt;&#39;, &#39;propertyName &lt;ASC|DESC&gt;&#39;,...] }</code></p>\n<p>其中:</p>\n<ul>\n<li><p><em>propertyName</em> is the name of the property (field) to sort by. </p>\n</li>\n<li><p><code>&lt;ASC|DESC&gt;</code> signifies either ASC for ascending order or DESC for descending order.</p>\n</li>\n</ul>\n<p>例子:</p>\n<p>返回三个最响的武器,按audibleRange属性排序</p>\n<p>REST</p>\n<p><code>/weapons?filter[order]=audibleRange%20DESC&amp;filter[limit]=3</code></p>\n<p>Node API</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weapons.find(&#123;</span><br><span class=\"line\">  order: <span class=\"string\">'price DESC'</span>,</span><br><span class=\"line\">  limit: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4.2.5\"> 4.2.5 Skip filter </h4>\n\n<p>_skip filter_省略指定的返回记录数.这是有用的,例如,分页响应.</p>\n<p>使用<code>offset</code>作为<code>skip</code>的别名.</p>\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<h5 id=\"REST-API-4\"><a href=\"#REST-API-4\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p><code>?filter=[skip]=n</code></p>\n<p>You can also use stringified JSON format in a REST query.</p>\n<h5 id=\"Node-API-4\"><a href=\"#Node-API-4\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><p><code>{skip: n}</code></p>\n<p>n是被跳过的最大记录数.</p>\n<p>例子:</p>\n<p>此REST请求将跳过返回的前50条记录:</p>\n<p><code>/cars?filter[skip]=50</code></p>\n<p>等价的Node API是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find( &#123;<span class=\"attr\">skip</span>: <span class=\"number\">50</span>&#125;,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125; )</span><br></pre></td></tr></table></figure>\n\n<p>分页例子:</p>\n<p>以下REST请求说明如何对查询结果进行分页.每个request请求返回十条记录,第一个返回前十个,第二个返回第11个到第20个,依此类推…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/cars?filter[limit]=10&amp;filter[skip]=0</span><br><span class=\"line\">/cars?filter[limit]=10&amp;filter[skip]=10</span><br><span class=\"line\">/cars?filter[limit]=10&amp;filter[skip]=20</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>使用Node API实现上述效果:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find(&#123;<span class=\"attr\">limit</span>: <span class=\"number\">10</span>, <span class=\"attr\">skip</span>: <span class=\"number\">0</span>&#125;,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br><span class=\"line\">Cars.find(&#123;<span class=\"attr\">limit</span>: <span class=\"number\">10</span>, <span class=\"attr\">skip</span>: <span class=\"number\">10</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br><span class=\"line\">Cars.find(&#123;<span class=\"attr\">limit</span>: <span class=\"number\">10</span>, <span class=\"attr\">skip</span>: <span class=\"number\">20</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4.2.6\"> 4.2.6 Where filter </h4>\n\n<p>where过滤器指定要匹配的一组逻辑条件,类似于SQL查询中的WHERE子句.</p>\n<h5 id=\"REST-API-5\"><a href=\"#REST-API-5\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p>在下面的第一种形式中,条件是等价的,也就是说,它测试属性是否等于value.下面的第二种形式适用于所有其他条件.</p>\n<p><code>filter[where][property]=value</code></p>\n<p><code>filter[where][property][op]=value</code></p>\n<p>例如,如果存在具有odo属性的cars模型,则以下查询将查找odo大于5000的实例:</p>\n<p><code>/cars?filter[where][odo][gt]=5000</code></p>\n<p>找到cars与odo小于30,000的实例:</p>\n<p><code>/cars?filter[where][odo][lt]=30000</code></p>\n<h5 id=\"过滤器限制\"><a href=\"#过滤器限制\" class=\"headerlink\" title=\"过滤器限制\"></a>过滤器限制</h5><blockquote>\n<p> 重要：<em>译注:不好翻,直接上原文.There is a limit of twenty filters (combined with AND or OR) using this format, due to the use of qs. When there are more than twenty, the filter is converted into an Object where it is expecting an Array. See LoopBack issue #2824 for more details.</em></p>\n</blockquote>\n<p>有两种方法可以解决过滤器限制：</p>\n<ul>\n<li>将大过滤器对象编码为”stringified JSON”.</li>\n<li>在调用引导之前(before boot is called),在server/server.js中手动覆盖限制.</li>\n</ul>\n<p><strong>Encode filter object as JSON</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000/api/Books</span><br><span class=\"line\">?filter=&#123;&quot;where&quot;:&#123;&quot;or&quot;:[&#123;&quot;id&quot;:1&#125;,&#123;&quot;id&quot;:2&#125;,...,&#123;&quot;id&quot;:20&quot;&#125;,&#123;&quot;id&quot;:21&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Override limit in server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In `server/server.js`, before boot is called</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> boot = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-boot'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'qs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">module</span>.exports = loopback();</span><br><span class=\"line\">app.set(<span class=\"string\">'query parser'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, option</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> qs.parse(value, &#123;<span class=\"attr\">arrayLimit</span>: <span class=\"number\">500</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Node-API-5\"><a href=\"#Node-API-5\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<p><strong>where子句</strong></p>\n<p>对于查询方法,如find(),findOrCreate()或findOne(),使用下面的第一个表单来测试等价性,也就是说property是否等于value.对于所有其他条件,请使用下面的第二个表单.</p>\n<p><code>{where: {property: value}}</code></p>\n<p><code>{where: {property: {op: value}}}</code></p>\n<p>其中:</p>\n<ul>\n<li><p><em>property</em> is the name of a property (field) in the model being queried.</p>\n</li>\n<li><p><em>value</em> is a literal value. </p>\n</li>\n<li><p><em>op</em> is one of the operators listed below.</p>\n</li>\n</ul>\n<p><code>Cars.find({where: {carClass:&#39;fullsize&#39;}});</code></p>\n<p>等价的REST查询是:</p>\n<p><code>/api/cars?filter[where][carClass]=fullsize</code></p>\n<blockquote>\n<p> 提示:上面的where子句语法是查询,而不是count().对于所有其他方法,包括count(),省略{where : … }包装器.请参阅下面的<code>Where clause for other methods</code></p>\n</blockquote>\n<p><strong>Where clause for other methods</strong></p>\n<blockquote>\n<p> 重要:当为查询以外的方法调用Node API时,即对于更新和删除(和<code>count()</code>)的方法,不要在{where：…}对象中包装where子句,只需使用条件作为参数.参见下面的例子</p>\n</blockquote>\n<p>在下面的第一种形式中,条件是等价的,也就是说它测试属性是否等于value.第二种形式适用于所有其他条件.</p>\n<p><code>{property: value}</code></p>\n<p><code>{property: {op: value}}</code></p>\n<p>其中:</p>\n<ul>\n<li><p><em>property</em> is the name of a property (field) in the model being queried.</p>\n</li>\n<li><p><em>value</em> is a literal value. </p>\n</li>\n<li><p><em>op</em> is one of the operators listed below.</p>\n</li>\n</ul>\n<p>例如,下面显示了对模型的updateAll()方法的一个where子句.注意在参数中缺少{where：…}.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myModel = req.app.models.Thing;</span><br><span class=\"line\"><span class=\"keyword\">var</span> theId = <span class=\"number\">12</span>;</span><br><span class=\"line\">myModel.updateAll( &#123;<span class=\"attr\">id</span>: theId&#125;, &#123;<span class=\"attr\">regionId</span>: <span class=\"literal\">null</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> callback(err, results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>更多的例子,例如调用destroyAll():</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> RoleMapping = app.models.RoleMapping;</span><br><span class=\"line\">RoleMapping.destroyAll( &#123; <span class=\"attr\">principalId</span>: userId &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123; ... &#125; );</span><br></pre></td></tr></table></figure>\n\n<p>要删除cost属性大于100的所有记录:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">productModel.destroyAll(&#123;<span class=\"attr\">cost</span>: &#123;<span class=\"attr\">gt</span>: <span class=\"number\">100</span>&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>带过滤器的默认scopes</strong></p>\n<p>将<code>scope</code>添加到模型定义(在model.json文件中)会自动向名为defaultScope()的模型添加一个方法.当创建,更新或查询模型时,LoopBack将调用此方法.</p>\n<blockquote>\n<p> 提示:带有where过滤器的默认scopes可能无法正常工作！</p>\n</blockquote>\n<p>每次创建或更新模型实例时,生成的defaultScope()方法将修改与where过滤器匹配的模型属性,以强制执行指定的值.</p>\n<p>如果不希望以此方式应用默认scope,请尽可能使用命名的scope.</p>\n<p>如果必须使用默认scope,但不希望它影响upsert(),那么,在调用upsert()之前,可以覆盖模型的defaultScope()方法.</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> defaultScope = Report.defaultScope;</span><br><span class=\"line\">  Report.defaultScope = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">  Report.upsert(&#123;<span class=\"attr\">id</span>: reportId, <span class=\"string\">'deleted'</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...</span>) </span>&#123;</span><br><span class=\"line\">    Report.defaultScope = defaultScope;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"操作-运算-符\"><a href=\"#操作-运算-符\" class=\"headerlink\" title=\"操作(运算)符\"></a>操作(运算)符</h5><p>此表描述”where”过滤器中可用的操作符,参见下面的示例.</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>Equivalence. See <a href=\"#equivalence\">examples</a> below.</td>\n</tr>\n<tr>\n<td>and</td>\n<td>Logical AND operator. See <a href=\"#and-and-or-operators\">AND and OR operators</a> and <a href=\"#and--or\">examples</a> below.</td>\n</tr>\n<tr>\n<td>or</td>\n<td>Logical OR operator. See <a href=\"#and-and-or-operators\">AND and OR operators</a> and <a href=\"#and--or\">examples</a> below.</td>\n</tr>\n<tr>\n<td>gt, gte</td>\n<td>Numerical greater than (&gt;); greater than or equal (&gt;=). Valid only for numerical and date values. See <a href=\"#gt-and-lt\">examples</a> below. <br><br>  For Geopoint values, the units are in miles by default. See <a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint\" target=\"_blank\" rel=\"noopener\">Geopoint</a> for more information.</td>\n</tr>\n<tr>\n<td>lt, lte</td>\n<td>Numerical less than (&lt;); less than or equal (&lt;=). Valid only for numerical and date values. <br><br>For geolocation values, the units are in miles by default. See <a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint\" target=\"_blank\" rel=\"noopener\">Geopoint</a> for more information.</td>\n</tr>\n<tr>\n<td>between</td>\n<td>True if the value is between the two specified values: greater than or equal to first value and less than or equal to second value. See <a href=\"#gt-and-lt\">examples</a> below. <br><br> For geolocation values, the units are in miles by default. See <a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint\" target=\"_blank\" rel=\"noopener\">Geopoint</a> for more information.</td>\n</tr>\n<tr>\n<td>inq, nin</td>\n<td>In / not in an array of values. See <a href=\"#inq\">examples</a> below.</td>\n</tr>\n<tr>\n<td>near</td>\n<td>For geolocations, return the closest points, sorted in order of distance. Use with <code>limit</code> to return the <em>n</em> closest points. See <a href=\"#near\">examples</a> below.</td>\n</tr>\n<tr>\n<td>neq</td>\n<td>Not equal (!=)</td>\n</tr>\n<tr>\n<td>like, nlike</td>\n<td>LIKE / NOT LIKE operators for use with regular expressions. The regular expression format depends on the backend data source.  See <a href=\"#like-and-nlike\">examples</a> below.</td>\n</tr>\n<tr>\n<td>ilike, nilike</td>\n<td>ILIKE / NOT ILIKE operators for use with regular expressions. The regular expression format depends on the backend data source. See <a href=\"#ilike-and-nilike\">examples</a> below.</td>\n</tr>\n<tr>\n<td>regexp</td>\n<td>Regular expression. See <a href=\"#regular-expressions\">examples</a> below.</td>\n</tr>\n</tbody></table>\n<p><strong>AND和OR操作符</strong></p>\n<p>使用AND和OR运算符可以基于简单的过滤条件(使用以下语法)创建复合逻辑过滤器.</p>\n<p>Node API</p>\n<p><code>{where: {&lt;and|or&gt;: [condition1, condition2, ...]}}</code></p>\n<p>REST API</p>\n<p><code>[where][&lt;and|or&gt;][0]condition1&amp;[where][&lt;and|or&gt;]condition2...</code></p>\n<p>其中_condition1_和_condition2_是过滤器条件.</p>\n<p><strong>正则表达式</strong></p>\n<p>您可以在where过滤器中使用正则表达式,并使用以下语法.您可以在where子句中使用正则表达式进行更新和删除,以及查询.</p>\n<p>基本上,regexp就像一个运算符,其中提供正则表达式值作为比较值.</p>\n<blockquote>\n<p> 提示：正则表达式值还可以包括一个或多个标志.例如,将/i附加到正则表达式以执行不区分大小写的匹配.</p>\n</blockquote>\n<p>Node API</p>\n<p><code>{where: {property: {regexp: &lt;expression&gt;}}}</code></p>\n<p>其中_<expression>_:</expression></p>\n<ul>\n<li>String defining a regular expression (for example, ‘^foo’ ).</li>\n<li>Regular expression literal (for example, /^foo/ ).</li>\n<li>Regular expression object (for example, new RegExp(/John/)).</li>\n</ul>\n<p>简写格式:</p>\n<p><code>{where: {property: &lt;expression&gt;}}}</code></p>\n<p>其中_<expression>_:</expression></p>\n<ul>\n<li>Regular expression literal (for example, /^foo/ ).</li>\n<li>Regular expression object (for example, new RegExp(/John/)).</li>\n</ul>\n<blockquote>\n<p> 提示:上述where子句语法用于查询.对于更新和删除,请忽略{where：…}包装器.</p>\n</blockquote>\n<p>例如,此查询返回模型以大写字母”T”开头的所有汽车:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find( &#123;<span class=\"string\">\"where\"</span>: &#123;<span class=\"string\">\"model\"</span>: &#123;<span class=\"string\">\"regexp\"</span>: <span class=\"string\">\"^T\"</span>&#125;&#125;&#125; );</span><br></pre></td></tr></table></figure>\n\n<p>或者使用简写格式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find( &#123;<span class=\"string\">\"where\"</span>: &#123;<span class=\"string\">\"model\"</span>: <span class=\"regexp\">/^T/</span>&#125; &#125; );</span><br></pre></td></tr></table></figure>\n\n<p>REST</p>\n<p><code>filter[where][property][regexp]=expression</code></p>\n<p>其中:</p>\n<ul>\n<li>property is the name of a property (field) in the model being queried.</li>\n<li>expression is the JavaScript regular expression string. </li>\n</ul>\n<p>正则表达式值还可以包括一个或多个标志.例如,将/i附加到正则表达式以执行不区分大小写的匹配.</p>\n<blockquote>\n<p> 提示:在REST API中使用正则表达式标志时，必须在正则表达式前面使用斜杠字符(/).</p>\n</blockquote>\n<p>以下REST查询返回模型以大写”T”开头的所有汽车:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/api/cars?filter[where][model][regexp]=^T</span><br></pre></td></tr></table></figure>\n\n<p>以下REST查询返回以大写”T”或小写”t”开头的所有模型:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/api/cars?filter[where][model][regexp]=/^t/i</span><br></pre></td></tr></table></figure>\n\n<p>注意,由于正则表达式包括一个标志,所以它前面是一个斜杠(/).</p>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p><strong>Equivalence(等于)</strong></p>\n<p>查询名为M1911的武器:</p>\n<p><strong>REST</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/weapons?filter[where][name]=M1911</span><br></pre></td></tr></table></figure>\n\n<p>carClass是”fullsize”的汽车:</p>\n<p><strong>REST</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/api/cars?filter[where][carClass]=fullsize</span><br></pre></td></tr></table></figure>\n\n<p><strong>Node实现</strong>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find(&#123; <span class=\"attr\">where</span>: &#123;<span class=\"attr\">carClass</span>:<span class=\"string\">'fullsize'</span>&#125; &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>gt and lt</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ONE_MONTH = <span class=\"number\">30</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;  <span class=\"comment\">// Month in milliseconds</span></span><br><span class=\"line\">transaction.find(&#123;</span><br><span class=\"line\">      where: &#123;</span><br><span class=\"line\">        userId: user.id,</span><br><span class=\"line\">        time: &#123;<span class=\"attr\">gt</span>: <span class=\"built_in\">Date</span>.now() - ONE_MONTH&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如,以下查询使用_where_过滤器返回雇员模型的所有实例,该过滤器指定要大于某个日期(大于): </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/employees?filter[where][date][gt]=2014-04-01T18:30:00.000Z</span><br></pre></td></tr></table></figure>\n\n<p>Node实现:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employees.find(&#123;</span><br><span class=\"line\">  where: &#123; </span><br><span class=\"line\">    date: &#123;<span class=\"attr\">gt</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2014-04-01T18:30:00.000Z'</span>)&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>射程超过900米的前三个武器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/weapons?filter[where][effectiveRange][gt]=900&amp;filter[limit]=3</span><br></pre></td></tr></table></figure>\n\n<p>Weapons的audibleRange属性小于10:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/weapons?filter[where][audibleRange][lt]=10</span><br></pre></td></tr></table></figure>\n\n<p><strong>and / or</strong></p>\n<p>以下代码是使用”and”运算符查找标题为”我的帖子”且内容为”Hello”的帖子的示例.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">and</span>: [&#123;<span class=\"attr\">title</span>: <span class=\"string\">'My Post'</span>&#125;, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'Hello'</span>&#125;]&#125;&#125;, </span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>REST实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?filter[where][and][0][title]=My%20Post&amp;filter[where][and][1][content]=Hello</span><br></pre></td></tr></table></figure>\n\n<p>使用”or”运算符查找标题为”我的帖子”或内容为”Hello”的帖子的示例.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">or</span>: [&#123;<span class=\"attr\">title</span>: <span class=\"string\">'My Post'</span>&#125;, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'Hello'</span>&#125;]&#125;&#125;, </span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>更复杂的例子. 请看这个表达式<code>(field1= foo and field2=bar) OR field1=morefoo</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   or: [</span><br><span class=\"line\">     &#123; <span class=\"attr\">and</span>: [&#123; <span class=\"attr\">field1</span>: <span class=\"string\">'foo'</span> &#125;, &#123; <span class=\"attr\">field2</span>: <span class=\"string\">'bar'</span> &#125;] &#125;,</span><br><span class=\"line\">     &#123; <span class=\"attr\">field1</span>: <span class=\"string\">'morefoo'</span> &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>between</strong></p>\n<p>例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter[where][price][between][0]=0&amp;filter[where][price][between][1]=7</span><br></pre></td></tr></table></figure>\n\n<p>Node实现:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shirts.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">size</span>: &#123;<span class=\"attr\">between</span>: [<span class=\"number\">0</span>,<span class=\"number\">7</span>]&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125; )</span><br></pre></td></tr></table></figure>\n\n<p><strong>near</strong></p>\n<p>The <code>where.&lt;field&gt;.near</code> 不同于其他过滤器:大多数where过滤器限制返回的记录数,而<code>near</code>则是对返回结果进行排序.这很像SQL order by子句.通过将其与limit组合,可以创建诸如这样的查询,这个查询根据跟定经纬度获取最接近的三个记录.</p>\n<p>例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/locations?filter[where][geo][near]=153.536,-28.1&amp;filter[limit]=3</span><br></pre></td></tr></table></figure>\n\n<p>GeoPoints可以是以下任意一种形式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = <span class=\"keyword\">new</span> GeoPoint(&#123;<span class=\"attr\">lat</span>: <span class=\"number\">42.266271</span>, <span class=\"attr\">lng</span>: <span class=\"number\">-72.6700016</span>&#125;); <span class=\"comment\">// GeoPoint</span></span><br><span class=\"line\">location = <span class=\"string\">'42.266271,-72.6700016'</span>;                          <span class=\"comment\">// String</span></span><br><span class=\"line\">location = [<span class=\"number\">42.266271</span>, <span class=\"number\">-72.6700016</span>];                         <span class=\"comment\">// Array</span></span><br><span class=\"line\">location = &#123;<span class=\"attr\">lat</span>: <span class=\"number\">42.266271</span>, <span class=\"attr\">lng</span>: <span class=\"number\">-72.6700016</span>&#125;;               <span class=\"comment\">// Object Literal</span></span><br><span class=\"line\"></span><br><span class=\"line\">Restaurants.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">geo</span>: &#123;<span class=\"attr\">near</span>: location &#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">...</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>near (ordering <em>and limiting by distance</em>)</strong></p>\n<p>near过滤器可以接受2个额外属性:</p>\n<ul>\n<li><code>maxDistance</code></li>\n<li><code>unit</code></li>\n</ul>\n<p>当<code>maxDistance</code>包含在过滤器中时,near表现得更像典型的where过滤器,将结果限制在到某个位置的给定距离内的结果.默认情况下,maxDistance以英里为单位测量距离.</p>\n<p>例如,查找给定地理位置两英里内的所有餐馆:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userLocation = <span class=\"keyword\">new</span> GeoPoint(&#123;</span><br><span class=\"line\">  lat: <span class=\"number\">42.266271</span>,</span><br><span class=\"line\">  lng: <span class=\"number\">-72.6700016</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> resultsPromise = Restaurants.find(&#123;</span><br><span class=\"line\">  where: &#123;</span><br><span class=\"line\">    location: &#123;</span><br><span class=\"line\">      near: userLocation,</span><br><span class=\"line\">      maxDistance: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要更改距离(测量)单位,请指定<code>unit</code>的值为以下一种:</p>\n<ul>\n<li><code>kilometers</code></li>\n<li><code>meters</code></li>\n<li><code>miles</code></li>\n<li><code>feet</code></li>\n<li><code>radians</code></li>\n<li><code>degrees</code></li>\n</ul>\n<p>例如,要使用公里而不是英里:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> resultsPromise = Restaurants.find(&#123;</span><br><span class=\"line\">  where: &#123;</span><br><span class=\"line\">    location: &#123;</span><br><span class=\"line\">      near: userLocation,</span><br><span class=\"line\">      maxDistance: <span class=\"number\">2</span>,</span><br><span class=\"line\">      unit: <span class=\"string\">'kilometers'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 注意:如果单位值错误,例如”mile”而不是”miles”,LoopBack将默认忽略过滤器！</p>\n</blockquote>\n<p><strong>like and nlike</strong></p>\n<p>like和nlike(not like)运算符使您能够匹配SQL正则表达式.正则表达式格式取决于后端数据源.</p>\n<p>like的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: &#123;<span class=\"attr\">like</span>: <span class=\"string\">'M.-st'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>nlike的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: &#123;<span class=\"attr\">nlike</span>: <span class=\"string\">'M.-XY'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>使用memory connector时:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: &#123;<span class=\"attr\">like</span>: <span class=\"string\">'%St%'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br><span class=\"line\">User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: &#123;<span class=\"attr\">nlike</span>: <span class=\"string\">'M%XY'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>ilike and nilike</strong></p>\n<p>ilike和nilike(不是ilike)运算符使您能够匹配不区分大小写的SQL正则表达式.正则表达式格式取决于后端数据源.</p>\n<p>ilike例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: &#123;<span class=\"attr\">ilike</span>: <span class=\"string\">'m.-st'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>nilike例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: &#123;<span class=\"attr\">nilike</span>: <span class=\"string\">'m.-xy'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>使用memory connector时:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: &#123;<span class=\"attr\">ilike</span>: <span class=\"string\">'%st%'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br><span class=\"line\">User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: &#123;<span class=\"attr\">nilike</span>: <span class=\"string\">'s%xy'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>inq</strong></p>\n<p>inq运算符检查指定的属性值是否与数组中提供的任何值匹配.一般的语法是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">where</span>: &#123; <span class=\"attr\">property</span>: &#123; <span class=\"attr\">inq</span>: [val1, val2, ...]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><em>property</em> is the name of a property (field) in the model being queried.</li>\n<li><em>val1, val2</em>, and so on, are literal values in an array.</li>\n</ul>\n<p>inq例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Posts.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">id</span>: &#123;<span class=\"attr\">inq</span>: [<span class=\"number\">123</span>, <span class=\"number\">234</span>]&#125;&#125;&#125;, </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, p</span>)</span>&#123;... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>REST:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/medias?filter[where][keywords][inq]=foo&amp;filter[where][keywords][inq]=bar</span><br></pre></td></tr></table></figure>\n\n<p>Or </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?filter=&#123;&quot;where&quot;: &#123;&quot;keywords&quot;: &#123;&quot;inq&quot;: [&quot;foo&quot;, &quot;bar&quot;]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4.3\"> 4.3 高级主题:数据 </h4>\n\n<p><em>译注:这里只翻译一处,因为其他的3个主题与angularjs有关,目前不涉及</em></p>\n<hr>\n<h4 id=\"4.3.1\"> 4.3.1 Realtime server-sent events </h4>\n\n<h5 id=\"概述-16\"><a href=\"#概述-16\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>PersistedModel API支持使用CRUD方法和createChangeStream()方法的组合,实现从服务器到客户端的流式更改.</p>\n<p>ChangeStream使服务器能够向客户端发送模型更改.客户端向初始请求通知更改,然后服务器将这些更改推送到客户端.</p>\n<h5 id=\"Creating-ChangeStreams-on-the-server\"><a href=\"#Creating-ChangeStreams-on-the-server\" class=\"headerlink\" title=\"Creating ChangeStreams on the server\"></a>Creating ChangeStreams on the server</h5><p><strong>设置</strong></p>\n<p>首先,添加event-stream到你的Node app:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -save event-stream</span><br></pre></td></tr></table></figure>\n\n<p><strong>禁用压缩</strong></p>\n<p>事件流不适用于Node compression.要禁用npm compression,请从server/middleware.json中删除条目,如下所示:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"compression\": &#123;</span><br><span class=\"line\">  \"enabled\":false</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>脚本</strong></p>\n<p>下面是一个在LoopBack应用程序中使用createChangeStream()方法的基本示例:</p>\n<p><strong>server/boot/realtime.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> es = <span class=\"built_in\">require</span>(<span class=\"string\">'event-stream'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> MyModel = app.models.MyModel;</span><br><span class=\"line\">  MyModel.createChangeStream(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, changes</span>) </span>&#123;</span><br><span class=\"line\">    changes.pipe(es.stringify()).pipe(process.stdout);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  MyModel.create(&#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此示例将打印以下内容到控制台:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"target\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"data\"</span>:&#123;<span class=\"attr\">\"foo\"</span>:<span class=\"string\">\"bar\"</span>,<span class=\"attr\">\"id\"</span>:<span class=\"number\">1</span>&#125;,<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"create\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Pushing-data-to-clients\"><a href=\"#Pushing-data-to-clients\" class=\"headerlink\" title=\"Pushing data to clients\"></a>Pushing data to clients</h5><p>此示例显示如何使用EventSource API从浏览器使用ChangeStream,该API是内置于大多数浏览器中的.下面的示例代码假设一个名为MyModel的模型,并将响应记录到浏览器JavaScript控制台.</p>\n<p><strong>Browser script</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> urlToChangeStream = <span class=\"string\">'/api/MyModels/change-stream?_format=event-stream'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> src = <span class=\"keyword\">new</span> EventSource(urlToChangeStream);</span><br><span class=\"line\">src.addEventListener(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(msg.data);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// the change object</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要推送数据,服务器上的模型必须更改.例如,如果添加新记录(模型实例).</p>\n<p>发生这种情况时,在浏览器JavaScript控制台中,您将看到:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object &#123;target: 2, data: Object, type: \"create\"&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5\"> 5. 添加应用程序逻辑 </h4>\n\n<p>在构建应用程序时,通常需要实现自定义逻辑以处理数据并在响应客户端请求之前执行其他操作.在LoopBack中,有三种方法：</p>\n<ul>\n<li>向模型添加逻辑 - 添加远程方法,远程钩子和操作钩子(adding <code>remote methods</code>, <code>remote hooks</code> and <code>operation hooks</code>).</li>\n<li>定义引导脚本 - 编写在应用程序启动时运行的脚本(在/server/boot目录中).</li>\n<li>定义中间件 - 向应用程序添加自定义中间件.</li>\n</ul>\n<hr>\n<h4 id=\"5.1\"> 5.1 使用LoopBack对象 </h4>\n\n<h5 id=\"概述-17\"><a href=\"#概述-17\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack中主要的javascript对象包括:</p>\n<ul>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#var-app-loopback\" target=\"_blank\" rel=\"noopener\">App</a></li>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#model\" target=\"_blank\" rel=\"noopener\">Models</a></li>\n<li><a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#define-new-datasource\" target=\"_blank\" rel=\"noopener\">Data sources</a></li>\n</ul>\n<p>如何获取对这些对象的引用取决于代码的位置以及要引用的对象(<em>译注:代码位置例如boot script,model的js文件等位置</em>).</p>\n<h5 id=\"获取App对象的引用\"><a href=\"#获取App对象的引用\" class=\"headerlink\" title=\"获取App对象的引用\"></a>获取App对象的引用</h5><p>获取对App对象的引用是至关重要的,因为从App中可以获得对其他对象(如model和data source)的引用.通常你可以在以下几种方式中获取app对象的句柄：</p>\n<ul>\n<li><p>Model scripts: /common/models/<em>modelName</em>.js(其中modelName是模型的名称).</p>\n</li>\n<li><p>/server/boot中的引导脚本.</p>\n</li>\n<li><p>Middleware(在boot scripts中和/server/server.js中注册的中间件）</p>\n</li>\n<li><p>您自己的自定义脚本</p>\n</li>\n</ul>\n<p>App对象为典型的LoopBack应用程序的各个部分提供上下文.</p>\n<p><strong>在boot script中获取对App对象的引用</strong></p>\n<p>要在引导脚本中获取对<code>app</code>对象的引用,请将其作为导出函数的第一个参数传递进去.</p>\n<p>下面是个带有回调函数的异步启动脚本的例子:</p>\n<p><strong>Asynchronous boot script - /server/boot/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app, cb</span>) </span>&#123; <span class=\"comment\">//app is injected by LoopBack</span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下面是个不带回调函数的异步脚本的例子:</p>\n<p><strong>Synchronous boot script - /server/boot/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123; <span class=\"comment\">//app is injected by loopback</span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在middleware中获取对App对象的引用</strong></p>\n<p>LoopBack在中间件的<code>request</code>对象中自动设置app了对象(实际上,在底层是Express在做它).您可以在server/server.js中访问,如下所示:</p>\n<p><strong>Middleware - /server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = req.app;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>在自定义脚本中获取对App对象的引用</strong></p>\n<p>如果您需要在自己的自定义脚本中引用应用程序,只需要<code>require</code>它(如示例中所示):</p>\n<p><strong>A custom script - /server/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'/server/server'</span>);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>你只需要require<code>/server/server.js</code>,就像任何Node模块一样.</p>\n<p><strong>在model的js文件中获取对App对象的引用</strong></p>\n<p>要在模型生成器(Model generator)支持的模型中获取<code>app</code>对象的句柄,仍然是使用”require”,就像任何Node模块一样:</p>\n<p><strong>Model - /common/models/book.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'../../server/server'</span>); <span class=\"comment\">//require `server.js` as in any node.js app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>对于model,有一个特殊情况.从除了/common/models/model.js之外的任何地方,你实际上可以通过使用<code>model.app</code>的模型获得对<code>app</code>的引用.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Book.app</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>但是,需要注意的是,您不能在/common/model/model.js中引用model.app,因为此文件在引导完成之前不会添加<code>app</code>属性.这意味着您不能在/common/models/model.js中执行以下操作:</p>\n<p><strong>CANNOT do this in a model script</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  Book.app... <span class=\"comment\">//won't work because `.app` has not been added to the Book object yet</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>但是,您可以获得对app INSIDE remote methods, remote hooks和model hooks的引用,因为这些是在应用程序完成加载后触发的(即在loopback.boot运行之后|/在server/server.js调用boot(…)之后）.</p>\n<p>这意味着你可以:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  Book.read(cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> app = Book.app;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(app.models...)</span><br><span class=\"line\">    cb();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Book.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'read'</span>, <span class=\"comment\">// read里有对app的引用</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当然,你可以在remote hooks和remote methods中做同样的事情,但要注意加载时序.简单地说,<code>model.app</code>将不可用,直到应用程序完成引导,即在/server/server.js中运行boot().这里的想法是,在我们的模型被添加到应用程序之前定义它们.应用程序完成引导后,您就可以访问模型的<code>app</code>属性.</p>\n<p>访问应用程序对象的最简单的方法是通过Model.on(‘attached’)事件.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app;</span><br><span class=\"line\">  MyModel.on(<span class=\"string\">'attached'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    app = a;</span><br><span class=\"line\">    <span class=\"comment\">// perform any setup that requires the app object</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用app对象\"><a href=\"#使用app对象\" class=\"headerlink\" title=\"使用app对象\"></a>使用app对象</h5><p>LoopBack的app对象在主脚本中定义,如下:</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = loopback();</span><br></pre></td></tr></table></figure>\n\n<p>app对象扩展自<code>Express app obejct</code>,继承了它的所有属性和方法,以及LoopBack app obejct的所有其他属性和方法.</p>\n<blockquote>\n<p> 重要:在某些地方,如启动脚本中,app可能不叫app,而叫做server.</p>\n</blockquote>\n<h5 id=\"使用model对象\"><a href=\"#使用model对象\" class=\"headerlink\" title=\"使用model对象\"></a>使用model对象</h5><p><strong>获取对model对象的引用</strong></p>\n<p>一旦你获得了<code>app</code>对象的句柄,你就可以通过app对象上的models属性来获得对特定model的引用.</p>\n<p><strong>Boot script - /server/boot/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = app.models.Book;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在你自己的脚本中:</p>\n<p><strong>A custom script - /server/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'/server/server'</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取对不相关模型的引用</strong></p>\n<p>您可以使用诸如<code>MyModel.app.models.MyRelatedModel</code>这样的表达式轻松的引用相关模型(<em>译注:相关模型是指建立了关系的model</em>).但是如果与其他模型没有关系,这将不起作用.在这种情况下,您需要像下面这样获取对应用程序对象的引用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../../server/server'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例如,假设您想要在observer (hook)中引用User模型,如下:</p>\n<p><strong>common/models/my-model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'../../server/server'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  MyModel.observe(<span class=\"string\">'loaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ctx, next</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> User = app.models.User;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   User.create(...);</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用data-source对象\"><a href=\"#使用data-source对象\" class=\"headerlink\" title=\"使用data source对象\"></a>使用data source对象</h5><p><strong>获取对data sources的引用</strong></p>\n<p>类似于在模型上获取句柄,您需要首先获取<code>app</code>对象的句柄,然后访问<code>app.datasources</code>属性即可:</p>\n<p><strong>Boot script - /server/boot/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dataSource = app.datasources.db; <span class=\"comment\">//db can be any registered datasource in `/server/datasources.json`</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>或者在你自己的脚本中:</p>\n<p><strong>A custom script - /server/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'./server/server'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> datasource = app.datasources.db;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者在中间件中:</p>\n<p><strong>Middleware - /server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dataSource = app.datasources.db;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者在model的js文件中:</p>\n<p><strong>Model - /common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  Book.read = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataSource = Book.app.datasources.db;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Book.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'read'</span>,</span><br><span class=\"line\">     ...</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在model的js文件中要注意,因为诸如下面这样的代码是不会起作用的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model - <span class=\"regexp\">/common/m</span>odels/model.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  Book.app... <span class=\"comment\">//`Book` is not registered yet! This WON'T WORK.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5.2\"> 5.2 向model中添加业务逻辑 </h4>\n\n<p>有三种方法可以向模型添加自定义逻辑:</p>\n<p><strong><em>译注:下面三个极其重要,要记住他们的作用场景</em></strong></p>\n<ul>\n<li><strong>Remote methods</strong>(远程方法) - REST端点映射到Node函数.</li>\n<li><strong>Remote hooks</strong>(远程钩子) - 在执行<code>remote method</code>时触发的逻辑(之前或之后).</li>\n<li><strong>Operation hooks</strong>(操作钩子) - 当模型对数据源执行创建,读取,更新和删除操作时触发的逻辑.</li>\n</ul>\n<p>您可以通过配置如何调用每个方法来进一步优化自定义逻辑的时序.在任何情况下,你都需要编写自己的逻辑,因为LoopBack只提供了触发逻辑的机制.</p>\n<hr>\n<h4 id=\"5.2.1\"> 5.2.1 Remote methods(远程方法) </h4>\n\n<blockquote>\n<p> 概要:远程方法是模型的静态方法,它通过自定义REST端点来公开.</p>\n</blockquote>\n<h5 id=\"概述-18\"><a href=\"#概述-18\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>远程方法是模型的静态方法,它通过自定义的REST端点公开.使用远程方法可以实现:LoopBack标准模型REST API不提供的操作.</p>\n<blockquote>\n<p> 注意:定义远程方法的最简单的方法是使用远程方法生成器(remote method generator)</p>\n</blockquote>\n<h5 id=\"如何定义远程方法\"><a href=\"#如何定义远程方法\" class=\"headerlink\" title=\"如何定义远程方法\"></a>如何定义远程方法</h5><p>要定义远程方法:</p>\n<ol>\n<li><p>在/common/models目录中编辑模型定义JSON文件,例如,要将远程方法附加到Person模型,请编辑/common/models/person.js.</p>\n</li>\n<li><p>定义处理request请求的方法(<em>译注:函数定义</em>).请注意,方法的名称将确定远程方法是静态的还是实例的方法.如果方法名称从<code>prototype.</code>开始,说明它是实例方法,否则,它是一个静态方法.</p>\n</li>\n<li><p>调用<code>remoteMethod()</code>注册该方法,使用两个参数调用它:</p>\n<ul>\n<li>第一个参数是一个字符串,它是您在步骤2中定义的方法的名称.</li>\n<li>第二个参数(可选)为REST端点提供了额外的配置.</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p> 重要：LoopBack模型生成器会自动将驼峰形式的模型名称(例如MyModel)转换为小写横线名称(my-model).例如,如果您使用模型生成器创建名为”FooBar”的模型,它将在common/models中创建文件foo-bar.json和foo-bar.js.但是,模型名称FooBar将通过模型的name属性保留.</p>\n</blockquote>\n<p><strong>例子</strong></p>\n<p>假设您有一个Person模型,并且您要在REST端点中添加一个<code>/greet</code>端点,该端点返回一个带有请求中提供的名称的问候语(greeting).请您将此代码添加到/common/models/person.js来实现它:</p>\n<p><strong>/common/models/person.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Person</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.greet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg, cb</span>) </span>&#123;</span><br><span class=\"line\">      cb(<span class=\"literal\">null</span>, <span class=\"string\">'Greetings... '</span> - msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.remoteMethod(<span class=\"string\">'greet'</span>, &#123;</span><br><span class=\"line\">          accepts: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'msg'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;,</span><br><span class=\"line\">          returns: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'greeting'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在,您发起一个post请求到<code>/api/people/greet</code>端点,携带的数据是<code>{&quot;msg&quot;: &quot;John&quot;}</code>.您将会在shell中收到如下结果:<code>Greetings... John!</code>.</p>\n<blockquote>\n<p> 注意:上面的REST API请求使用复数形式”people”而不是“person”.</p>\n</blockquote>\n<h5 id=\"注册远程方法\"><a href=\"#注册远程方法\" class=\"headerlink\" title=\"注册远程方法\"></a>注册远程方法</h5><p>所有的LoopBack模型都有一个<code>remoteMethod()</code>静态方法,使用这个方法来注册一个<code>remote method(远程方法)</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.remoteMethod(requestHandlerFunctionName, [options])</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li>model是要添加远程方法的模型对象,在我们的示例中是Person.</li>\n<li>requestHandlerFunctionName是一个字符串,指定远程方法的名称,例如”greet”.</li>\n<li>options是指定配置REST端点的参数对象,见下文.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>options参数是一个包含用于配置远程方法REST端点的键/值对的Javascript对象.</p>\n<blockquote>\n<p> 重要:所有的options属性都是可选的.但是,如果远程方法需要参数,则必须指定accept.如果remote方法返回一个值,则必须指定returns.</p>\n</blockquote>\n<table>\n  <thead>\n    <tr>\n      <th width=\"50\">Option</th>\n      <th>Description</th>\n      <th width=\"260\">Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>accepts</td>\n      <td>\n        Defines arguments that the remote method accepts that map to the static method you define. For the example above, the function signature is <pre>Person.greet(name, age, callback)...</pre> so\n        <code>name</code> is the first argument, <code>age</code> is the second argument and callback is automatically provided by LoopBack (do not specify it in your <code>accepts</code> array). For more information, see <a href=\"Remote-methods.html#argument-descriptions\">Argument descriptions</a>.<br><br>\n        The default value is the empty array, <code>[ ]</code>.\n      </td>\n      <td>\n        <pre style=\"font-size: 80%;\">{  ...\n  accepts: [\n   {arg: 'name',\n    type: 'string'},\n   {arg: 'age',\n    type: 'number'}, ...],\n  ... }</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>\n        Text description of the method, used by API documentation generators such as Swagger.\n        You can put long strings in an array if needed (see note below).\n      </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>http.path</td>\n      <td>\n        HTTP path (relative to the model) at which the method is exposed.\n      </td>\n      <td>\n        <pre>http: {path: '/sayhi'}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.verb</td>\n      <td>\n        HTTP method (verb) at which the method is available. One of:\n        <ul>\n          <li>get</li>\n          <li>post (default)</li>\n          <li>patch</li>\n          <li>put</li>\n          <li>del</li>\n          <li>all</li>\n        </ul>\n      </td>\n      <td>\n     <pre>http: {path: '/sayhi',\nverb: 'get'}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.status</td>\n      <td>Default HTTP status set when the callback is called without an error.</td>\n      <td>\n      <pre>http: {status: 201}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.errorStatus</td>\n      <td>Default HTTP status set when the callback is called with an error.</td>\n      <td>\n        <pre>http: {errorStatus: 400}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>notes</td>\n      <td>\n        Additional notes, used by API documentation generators like Swagger.\n        You can put long strings in an array if needed (see note below).\n      </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>returns</td>\n      <td>\n        Describes the remote method's callback arguments; See <a href=\"Remote-methods.html#argument-descriptions\">Argument descriptions</a>. The <code>err </code>argument is assumed; do not specify.\n        Default if not provided is the empty array,  <code>[]</code>.\n      </td>\n      <td>\n        <pre>returns: {arg: 'greeting',\ntype: 'string'}</pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>参数描述</strong></p>\n<p><code>accept</code>和<code>returns</code>这2个可选属性,可以是单个参数的对象,或者是个数组,数组的内容是有序的参数集.下表描述了每个单独参数的属性.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Property (key)</th>\n      <th width=\"100\">Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>arg</td>\n      <td>String</td>\n      <td>Argument name</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>String or Array</td>\n      <td>\n        A text description of the argument. This is used by API documentation generators like Swagger.\n        You can put long strings in an array if needed (see note above).\n      </td>\n    </tr>\n    <tr>\n      <td>http</td>\n      <td>Object or Function</td>\n      <td>For input arguments: a function or an object describing mapping from HTTP request to the argument value. See <a href=\"Remote-methods.html\">HTTP mapping of input arguments</a> below.</td>\n    </tr>\n    <tr>\n      <td>http.target</td>\n      <td>String</td>\n      <td>\n        Map the callback argument value to the HTTP response object. The following values are supported.\n        <ul>\n          <li><code>status</code> sets the <code>res.statusCode</code> to the provided value</li>\n          <li><code>header</code> sets the <code>http.header</code> or <code>arg</code> named header to the value</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>required</td>\n      <td>Boolean</td>\n      <td>True if argument is required; false otherwise.</td>\n    </tr>\n    <tr>\n      <td>root</td>\n      <td>Boolean</td>\n      <td>For callback arguments: set this property to <code>true</code>\n         if your function has a single callback argument to use as the root object returned to remote caller.\n        Otherwise the root object returned is a map (argument-name to argument-value).\n      </td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>String</td>\n      <td>Argument datatype; must be a <a href=\"LoopBack-types.html\">Loopback type</a>. Additionally, callback arguments allow a special type \"file\"; see below.</td>\n    </tr>\n    <tr>\n      <td>default</td>\n      <td>String</td>\n      <td>Default value that will be used to populate loopback-explorer input fields and swagger documentation.\n        <strong>Note</strong>: This value will not be passed into remote methods function if argument is not present.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>例如,单个参数,指定其为对象:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;arg: 'myArg', type: 'number'&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多个参数,则需要数组来存放:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;arg: 'arg1', type: 'number', required: true&#125;,</span><br><span class=\"line\">  &#123;arg: 'arg2', type: 'array'&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><strong>返回文件(流)响应</strong></p>\n<p>您可以为回调参数指定{type：’file’，root：true},它会被直接发送给response body.file参数可以设置为以下值之一:</p>\n<ul>\n<li>String</li>\n<li>Buffer</li>\n<li>ReadableStream (anything that exposes .pipe() method)</li>\n</ul>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  MyModel.download = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// getTheStreamBody() can be implemented by calling http.request() or fs.readFile() for example</span></span><br><span class=\"line\">    getTheStreamBody(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stream</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> cb(err);</span><br><span class=\"line\">      <span class=\"comment\">// stream can be any of: string, buffer, ReadableStream (e.g. http.IncomingMessage)</span></span><br><span class=\"line\">      cb(<span class=\"literal\">null</span>, stream, <span class=\"string\">'application/octet-stream'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  MyModel.remoteMethod(<span class=\"string\">'download'</span>, &#123;</span><br><span class=\"line\">    returns: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'body'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'file'</span>, <span class=\"attr\">root</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'Content-Type'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">http</span>: &#123; <span class=\"attr\">target</span>: <span class=\"string\">'header'</span> &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入参数的HTTP映射</strong></p>\n<p>有两种方法可以为输入参数指定HTTP映射:</p>\n<ul>\n<li>提供一个具有<code>source</code>属性的对象.</li>\n<li>指定一个自定义映射函数</li>\n</ul>\n<p><strong>使用具有source属性的对象</strong></p>\n<p>要使用第一种方法为输入参数指定HTTP映射,请提供具有<code>source</code>属性的对象,该属性具有下表中所示的值之一.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Value of source property</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>body</td>\n      <td>The whole request body is used as the value.</td>\n    </tr>\n    <tr>\n      <td>form<br>query<br>path </td>\n      <td>\n        The value is looked up using <code>req.param</code>, which searches route arguments, the request body and the query string.\n        Note that <code>query</code> and <code>path</code> are aliases for <code>form</code>.\n      </td>\n    </tr>\n    <tr>\n      <td>req</td>\n      <td>The <a href=\"http://expressjs.com/4x/api.html#req\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">Express HTTP request object</a>.</td>\n    </tr>\n    <tr>\n      <td>res</td>\n      <td>The <a href=\"http://expressjs.com/4x/api.html#res\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">Express HTTP response object</a>.</td>\n    </tr>\n    <tr>\n      <td>context</td>\n      <td>The whole context object, which holds request and response objects.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>例如,将整个请求正文作为值的参数:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; arg: 'data', type: 'object', http: &#123; source: 'body' &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个显示Express HTTP请求和响应对象的示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\"> &#123;arg: 'req', type: 'object', 'http': &#123;source: 'req'&#125;&#125;,</span><br><span class=\"line\"> &#123;arg: 'res', type: 'object', 'http': &#123;source: 'res'&#125;&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用自定义映射函数</strong></p>\n<p>指定输入参数的HTTP映射的第二种方法是指定自定义映射函数,例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  arg: <span class=\"string\">'custom'</span>,</span><br><span class=\"line\">  type: <span class=\"string\">'number'</span>,</span><br><span class=\"line\">  http: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ctx is LoopBack Context object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1\\. Get the HTTP request object as provided by Express</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> req = ctx.req;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2\\. Get 'a' and 'b' from query string or form data and return their sum.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -req.param(<span class=\"string\">'a'</span>) - req.param(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不指定映射,LoopBack将像下面这样确定值(假设<code>name</code>为要解析的输入参数的名称):</p>\n<ol>\n<li>如果有JSON格式的请求参数args,则它使用<code>args[&#39;name&#39;]</code>的值.</li>\n<li>否则,它使用req.param(‘name’).</li>\n</ol>\n<p><strong>将返回指定为非JSON格式(<em>译注:原文Returning data outside of a JSON field</em>)</strong></p>\n<p>使用arg属性指定返回参数将自动返回一个JSON对象,您的数据存储在同名的字段中.</p>\n<p>如果要将数据作为主响应返回,例如数组,可以通过在returns对象中设置root属性并省略arg来实现.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">returns: &#123;type: 'array', root: true&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置远程方法的路由\"><a href=\"#设置远程方法的路由\" class=\"headerlink\" title=\"设置远程方法的路由\"></a>设置远程方法的路由</h5><p>默认情况下,远程方法公开在：</p>\n<p><code>POST http://apiRoot/modelName/methodName</code></p>\n<p>其中:</p>\n<ul>\n<li>apiRoot是应用程序的API根路径.</li>\n<li>modelName是模型的复数名称.</li>\n<li>methodName是函数名.</li>\n</ul>\n<p>回想之前的greet例子,远程方法公开在：</p>\n<p><code>POST /api/people/greet</code></p>\n<p>要更改路由,请使用remoteMethod()方法的options参数的http.path和http.verb属性,例如:</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.remoteMethod(<span class=\"string\">'greet'</span>,&#123;</span><br><span class=\"line\">  accepts: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'msg'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;,</span><br><span class=\"line\">  returns: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'greeting'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;,</span><br><span class=\"line\">  http: &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/sayhi'</span>, <span class=\"attr\">verb</span>: <span class=\"string\">'get'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码将默认路由改变到:</p>\n<p><code>GET /api/people/sayhi</code></p>\n<p>于是,一个到<code>http://localhost:3000/api/people/sayhi?msg=LoopBack%20developer</code>的GET请求将返回:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"greeting\"</span>: <span class=\"string\">\"Greetings... LoopBack developer\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"向远程方法添加ACLs\"><a href=\"#向远程方法添加ACLs\" class=\"headerlink\" title=\"向远程方法添加ACLs\"></a>向远程方法添加ACLs</h5><p>要限制对自定义远程方法的访问,请以控制对任何模型API的访问的相同方式使用ACL生成器(ACL generator).自定义远程方法的访问类型为Execute.</p>\n<p><strong>基础应用</strong></p>\n<p>例如,要拒绝调用上面示例中使用的greet方法:</p>\n<p>shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:acl</span><br><span class=\"line\">[?] Select the model to apply the ACL entry to: Person</span><br><span class=\"line\">[?] Select the ACL scope: A single method</span><br><span class=\"line\">[?] Enter the method name: greet</span><br><span class=\"line\">[?] Select the access <span class=\"built_in\">type</span>: Execute</span><br><span class=\"line\">[?] Select the role: All users</span><br><span class=\"line\">[?] Select the permission to apply: Explicitly deny access</span><br></pre></td></tr></table></figure>\n\n<p>shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:acl</span><br><span class=\"line\">[?] Select the model to apply the ACL entry to: Person</span><br><span class=\"line\">[?] Select the ACL scope: A single method</span><br><span class=\"line\">[?] Enter the method name: greet</span><br><span class=\"line\">[?] Select the access <span class=\"built_in\">type</span>: Execute</span><br><span class=\"line\">[?] Select the role: All users</span><br><span class=\"line\">[?] Select the permission to apply: Explicitly deny access</span><br></pre></td></tr></table></figure>\n\n<p>然后,该工具创建以下访问控制规范:</p>\n<p><strong>/common/models/person.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"acls\": [&#123;</span><br><span class=\"line\">  \"principalType\": \"ROLE\",</span><br><span class=\"line\">  \"principalId\": \"$everyone\",  // apply the ACL to everyone</span><br><span class=\"line\">  \"permission\": \"DENY\",        // DENY attempts to invoke this method</span><br><span class=\"line\">  \"property\": \"greet\"          // applies the access control to the greet() method</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>高级应用</strong></p>\n<p>另一个例子,允许只为该模型对象的<code>$owner</code>调用一个远程方法:</p>\n<p><strong>/common/models/YourModel.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">YourModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  YourModel.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'someRemoteMethod'</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      accepts: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'id'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'number'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"comment\">// mixing ':id' into the rest url allows $owner to be determined and used for access control</span></span><br><span class=\"line\">      http: &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/:id/some-remote-method'</span>, <span class=\"attr\">verb</span>: <span class=\"string\">'get'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"格式化远程方法的响应\"><a href=\"#格式化远程方法的响应\" class=\"headerlink\" title=\"格式化远程方法的响应\"></a>格式化远程方法的响应</h5><p>您可以通过添加引导脚本来重新格式化所有远程方法返回的响应,该引导脚本修改app.remotes()返回的对象,如下所示:</p>\n<p><strong>/server/boot/hook.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> remotes = app.remotes();</span><br><span class=\"line\">  <span class=\"comment\">// modify all returned values</span></span><br><span class=\"line\">  remotes.after(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    ctx.result = &#123;</span><br><span class=\"line\">      data: ctx.result</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"禁用远程方法\"><a href=\"#禁用远程方法\" class=\"headerlink\" title=\"禁用远程方法\"></a>禁用远程方法</h5><p>使用<code>Model.disableRemoteMethod(name, isStatic)</code>和<code>Model.disableRemoteMethodByName(name)</code>来禁用远程方法.更多的信息请访问:</p>\n<ul>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#model-disableremotemethod\" target=\"_blank\" rel=\"noopener\">Model.disableRemoteMethod</a></li>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#model-disableremotemethodbyname\" target=\"_blank\" rel=\"noopener\">Model.disableRemoteMethodByName</a></li>\n</ul>\n<hr>\n<h4 id=\"5.2.2\"> 5.2.2 Remote hooks(远程钩子) </h4>\n\n<h5 id=\"概述-19\"><a href=\"#概述-19\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack提供了两种钩子:</p>\n<ul>\n<li>远程钩子(Remote hooks),在调用远程方法之前或之后执行.它可以是自定义的远程方法或继承自PersistedModel的标准创建,检索,更新和删除方法.</li>\n<li>当模型执行创建,检索,更新和删除操作时执行的操作钩子(Operation hooks).</li>\n</ul>\n<p>远程钩子(remote hook)使您能够在客户端调用远程方法之前或之后执行函数:</p>\n<ul>\n<li><strong>beforeRemote()</strong>,在远程方法之前运行.</li>\n<li><strong>afterRemote()</strong>,在远程方法成功完成后运行.</li>\n<li><strong>afterRemoteError()</strong>,在远程方法发生error后运行.</li>\n</ul>\n<blockquote>\n<p> 提示: 使用beforeRemote钩子可以验证和清除远程方法的输入.因为beforeRemote钩子在执行远程方法之前运行,所以它可以访问远程方法的输入,但不能访问结果.在将远程方法的结果发送到远程客户端之前,可以使用afterRemote钩子来进行修改,记录或其他操作.因为afterRemote钩子在执行远程方法之后运行,它可以访问远程方法的结果,但是不能修改输入参数.</p>\n</blockquote>\n<p><strong>Signature</strong></p>\n<p>beforeRemote()和afterRemote()具有相同的Signature,下面的语法使用beforeRemote,但是afterRemote是相同的.</p>\n<p>对于静态自定义远程方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_modelName_.beforeRemote( _methodName_, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>实例方法和静态内置方法(如upsert()或create())需要回调中的第三个参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_modelName_.beforeRemote( _methodName_, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ctx, _modelInstance_, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>afterRemoteError()的signature有一点点不同:它只有2个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_modelName_.afterRemoteError( _methodName_, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><code>_modelName_</code>是远程钩子附加到的模型的名称.</li>\n<li><code>_methodName_</code>是触发远程钩子的方法的名称.可以是自定义远程方法或从PersistedModel继承的标准创建,检索,更新和删除方法.它可以包括匹配多个方法的通配符(见下文).</li>\n<li><code>ctx</code>是上下文对象.</li>\n<li><code>_modelInstance_</code>是受影响的模型实例.</li>\n</ul>\n<p>上面的语法包括对next()的调用,要提醒您,您必须在远程钩子的回调函数中的某一点调用next().它不一定必须在函数结束时出现,但必须在函数完成之前的某个点调用.</p>\n<p><strong>通配符</strong></p>\n<p>您可以在<code>_methodName_</code>中使用以下通配符：</p>\n<ul>\n<li>星号’*‘匹配任何字符,直到第一次出现分隔符字符’.’</li>\n<li>双星号匹配任何字符,包括分隔符字符’.’</li>\n</ul>\n<p>例如，使用”<em>.</em>“匹配任何静态方法,使用’prototype.*’来匹配任何实例方法.</p>\n<h5 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p>以下示例为revEngine()远程方法定义beforeRemote和afterRemote钩子:</p>\n<p><strong>common/models/car.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Car</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// remote method</span></span><br><span class=\"line\">  Car.revEngine = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sound, cb</span>) </span>&#123;</span><br><span class=\"line\">    cb(<span class=\"literal\">null</span>, sound - <span class=\"string\">' '</span> - sound - <span class=\"string\">' '</span> - sound);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Car.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'revEngine'</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      accepts: [&#123;<span class=\"attr\">arg</span>: <span class=\"string\">'sound'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;],</span><br><span class=\"line\">      returns: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'engineSound'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;,</span><br><span class=\"line\">      http: &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/rev-engine'</span>, <span class=\"attr\">verb</span>: <span class=\"string\">'post'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// remote method before hook</span></span><br><span class=\"line\">  Car.beforeRemote(<span class=\"string\">'revEngine'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, unused, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Putting in the car key, starting the engine.'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// remote method after hook</span></span><br><span class=\"line\">  Car.afterRemote(<span class=\"string\">'revEngine'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, remoteMethodOutput, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Turning off the engine, removing the key.'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下示例在远程方法名称中使用通配符.当执行名称以”save”结尾的任何远程方法时,将调用此远程钩子:</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer.beforeRemote(<span class=\"string\">'*.save'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, unused, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ctx.req.accessToken) &#123;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'must be logged in to update'</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Customer.afterRemote(<span class=\"string\">'*.save'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, user, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'user has been saved'</span>, user);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 重要: 钩子的第二个参数(上例中的user)是ctx.result,它不总是可用</p>\n</blockquote>\n<p>下面是更多使用通配符的远程钩子的示例,以便在调用任何远程方法之前运行函数.</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ** will match both prototype.* and *.*</span></span><br><span class=\"line\">Customer.beforeRemote(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, user, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(ctx.methodString, <span class=\"string\">'was invoked remotely'</span>); <span class=\"comment\">// customers.prototype.save was invoked remotely</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Other wildcard examples</span><br><span class=\"line\"><span class=\"comment\">// run before any static method eg. User.find</span></span><br><span class=\"line\">Customer.beforeRemote(<span class=\"string\">'*'</span>, ...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// run before any instance method eg. User.prototype.save</span></span><br><span class=\"line\">Customer.beforeRemote(<span class=\"string\">'prototype.*'</span>, ...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prevent password hashes from being sent to clients</span></span><br><span class=\"line\">Customer.afterRemote(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx, user, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ctx.result) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(ctx.result)) &#123;</span><br><span class=\"line\">      ctx.result.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> result.password;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> ctx.result.password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>A safer means of effectively white-listing the fields to be returned by copying the values into new objects(<em>译注:这句翻译不好,保留原文</em>):</p>\n<p><strong>common/models/account.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> WHITE_LIST_FIELDS = [<span class=\"string\">'account_id'</span>, <span class=\"string\">'account_name'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">Account.afterRemote(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, modelInstance, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.result) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(modelInstance)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> answer = [];</span><br><span class=\"line\">      ctx.result.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> replacement =&#123;&#125;;</span><br><span class=\"line\">        WHITE_LIST_FIELDS.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">field</span>) </span>&#123;</span><br><span class=\"line\">          replacement[field] = result[field];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        answer.push(replacement);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> answer =&#123;&#125;;</span><br><span class=\"line\">      WHITE_LIST_FIELDS.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">field</span>) </span>&#123;</span><br><span class=\"line\">        answer[field] = ctx.result[field];</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.result = answer;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>afterRemoteError的例子</strong></p>\n<p>当实例方法speak()失败时执行附加操作:</p>\n<p><strong>common/models/dog.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.afterRemoteError(<span class=\"string\">'prototype.speak'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Cannot speak!'</span>, ctx.error);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>将额外的元数据附加到error对象:</p>\n<p><strong>common/models/dog.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.afterRemoteError(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ctx.error.details) ctx.result.details = &#123;&#125;;</span><br><span class=\"line\">  ctx.error.details.info = <span class=\"string\">'intercepted by a hook'</span>;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>向调用者报告不同的error:</p>\n<p><strong>common/models/dog.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.afterRemoteError(<span class=\"string\">'prototype.speak'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(ctx.error);</span><br><span class=\"line\">  next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'See server console log for details.'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上下文对象-Context-object\"><a href=\"#上下文对象-Context-object\" class=\"headerlink\" title=\"上下文对象(Context object)\"></a>上下文对象(Context object)</h5><p>远程钩子提供了一个包含传输特定数据(例如HTTP的req和res)的Context<code>ctx</code>对象.<code>ctx</code>对象还具有跨传输的一组一致的API.</p>\n<p>应用程序使用loopback.rest()中间件来提供以下额外的ctx属性:</p>\n<ul>\n<li><p><code>ctx.req</code>:Express Request对象.</p>\n</li>\n<li><p><code>ctx.result</code>:Express Response对象.</p>\n</li>\n</ul>\n<p>传递给afterRemoteError()钩子的上下文对象具有一个附加属性<code>ctx.error</code>,设置为由远程方法报告的错误.</p>\n<p>其他属性：</p>\n<ul>\n<li><p><code>ctx.args</code> - 是指包含HTTP请求参数定义的对象,可以使用arg定义从请求中查找值.这些是远程方法的输入值.</p>\n</li>\n<li><p><code>ctx.result</code> - An object keyed by the argument names. Exception: If the root property is true, then it’s the value of the argument that has root set to true(<em>译注:这句暂时保留原文,等做完实验再说</em>).</p>\n</li>\n</ul>\n<p><strong>ctx.req.accessToken</strong></p>\n<p>调用远程方法的用户的<code>accessToken</code>.</p>\n<blockquote>\n<p> 重要: 如果远程方法未由登录用户(或其他主体)调用,则ctx.req.accessToken未定义.</p>\n</blockquote>\n<p><strong>ctx.result</strong></p>\n<p>在<code>afterRemote</code>钩子期间,<code>ctx.result</code>将包含要发送到客户端的数据.所以,可以修改此对象以在发送数据之前对其进行转换.</p>\n<blockquote>\n<p> 重要: ctx.result的值可能不会始终可用</p>\n</blockquote>\n<p>如果远程方法显式的指定了返回值,那么只有<code>ctx.result</code>才会被设置.因此,您的远程方法必须执行以下操作:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.remoteMethod(<span class=\"string\">'doSomething'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  returns: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'redirectUrl'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5.2.3\"> 5.2.3 Operation hooks(操作钩子) </h4>\n\n<blockquote>\n<p> 概要:操作钩子由执行特定高级创建,读取,更新或删除操作的所有方法触发.在LoopBack版本3.0中对操作钩子进行了大量更改.</p>\n</blockquote>\n<h5 id=\"概述-20\"><a href=\"#概述-20\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>Operation hooks不与特定方法绑定,而是被执行特定高级创建,读取,更新或删除操作的所有方法触发. 使用操作钩子使您能够拦截修改数据的操作,而与调用它们的特定方法无关(例如,<code>create</code>,<code>save</code>或<code>updateOrCreate</code>).</p>\n<p>API很简单：使用<code>Model.observe(_name_，_observer_)</code>,其中name是操作钩子的字符串名称,例如”before save”,observer是<code>function observer(context, callback)</code>.子模型继承observers(观察者),您可以为一个钩子注册多个observers(观察者).</p>\n<p>下表总结了PersistedModel创建,检索,更新和删除方法调用的操作钩子.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>Method&nbsp;→<br>&nbsp;</p>\n        <p>Operation hook ↓</p>\n      </th>\n      <th>find<br>findOne<br>findById</th>\n      <th>exists</th>\n      <th>count</th>\n      <th>create</th>\n      <th>upsert</th>\n      <th>findOrCreate</th>\n      <th>deleteAll<br>deleteById </th>\n      <th>updateAll</th>\n      <th>prototype<br>.save</th>\n      <th>prototype<br>.delete</th>\n      <th>prototype<br>.updateAttributes</th>\n      <th>\n        prototype<br>.replaceAttributes\n      </th>\n      <th>replaceById</th>\n      <th>replaceOrCreate</th>\n      <th>upsertWithWhere</th>\n    </tr>\n    <tr>\n      <th>access</th>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>before save</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>after save</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>before delete</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <th>after delete</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <th>loaded</th>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>persist</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>Operation hook上下文对象</strong></p>\n<p>上下文对象特定于操作钩子,并且与传递到通过Model.beforeRemote和Model.afterRemote注册的远程钩子的上下文对象没有任何关系.请注意，上下文对象与loopback.getCurrentContext()提供的”当前上下文”无关.</p>\n<p><strong>所有钩子和操作的公共属性</strong></p>\n<p>目标模型</p>\n<p>属性<code>context.Model</code>设置为作为操作目标的模型的构造函数.例如<code>Product.find()</code>设置<code>context.Model = Product</code>.</p>\n<p>操作选项</p>\n<p>上下文对象有一个options属性,它允许钩子访问由特定模型方法(操作)的调用者提供的任何选项.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> FILTERED_PROPERTIES = [<span class=\"string\">'immutable'</span>, <span class=\"string\">'birthday'</span>];</span><br><span class=\"line\">MyModel.observe(<span class=\"string\">'before save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterProperties</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.options &amp;&amp; ctx.options.skipPropertyFilter) <span class=\"keyword\">return</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    FILTERED_PROPERTIES.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">      ctx.instance.unsetAttribute(p);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    FILTERED_PROPERTIES.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> ctx.data[p];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// immutable is not updated</span></span><br><span class=\"line\">MyModel.updateOrCreate(&#123;</span><br><span class=\"line\">  id: <span class=\"number\">1</span>,</span><br><span class=\"line\">  immutable: <span class=\"string\">'new value'</span></span><br><span class=\"line\">&#125;, cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// immutable is changed</span></span><br><span class=\"line\">MyModel.updateOrCreate(&#123;</span><br><span class=\"line\">  id: <span class=\"number\">2</span>,</span><br><span class=\"line\">  immutable: <span class=\"string\">'new value'</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  skipPropertyFilter: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;, cb);</span><br></pre></td></tr></table></figure>\n\n<p><strong>共享hookState属性</strong></p>\n<p>单个操作调用的所有钩子都保存<code>ctx.hookState</code>属性.</p>\n<p>例如,对于<code>Model.create()</code>调用的“access”, “before save”和“after save”都在<code>ctx.hookState</code>中传递的相同对象.</p>\n<p>这样钩子可以在”before”和”after”钩子之间传递状态日期.</p>\n<p><strong>钩子和操作的具体属性</strong></p>\n<p>除了上面列出的公共属性,每个钩子都提供了附加属性来标识受操作和变化影响的模型实例.一般规则是上下文提供<code>instance</code>属性或一对<code>data</code>和<code>where</code>属性.</p>\n<p><strong>instance</strong></p>\n<p>当操作影响单个实例并执行所有模型属性的完全update/create/delete(例如<code>PersistedModel.create()</code>)时,将提供此属性.</p>\n<p><strong>where + data</strong></p>\n<p>当操作影响多个实例(例如<code>PersistedModel.updateAll()</code>)或执行模型属性子集的部分更新(例如<code>PersistedModel.prototype.updateAttributes()</code>）时,上下文提供了一个where过滤器用于查找受影响的记录和包含要进行的更改的plain<code>data</code>对象.</p>\n<p><strong>isNewInstance</strong></p>\n<p>一些操作提供用于区分CREATE操作和UPDATE操作的标志.有关详细信息请参阅单个钩子的文档.</p>\n<blockquote>\n<p> 重要: 只有某些连接器支持ctx.isNewInstance.其他连接器则是未定义的.请参阅检查ctx.isNewInstance的支持(<em>译注:官方文档上此处给的链接打不开</em>).</p>\n</blockquote>\n<p><strong>currentInstance</strong></p>\n<p>此属性由执行单个实例的部分更改的钩子提供.它包含受影响的模型实例,您应该将值视为只读(不可变).</p>\n<p><strong>检查ctx.isNewInstance的支持情况</strong></p>\n<p><code>ctx.isNewInstance</code>的初始实现仅包括对内存,MongoDB和MySQL连接器的支持.您可以通过测试“after save”返回的值来检查连接器是否支持此功能.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'after save'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'supports isNewInstance?'</span>, ctx.isNewInstance !== <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// It's important to provide a value for the id property</span></span><br><span class=\"line\"><span class=\"comment\">// Include also values for any required properties</span></span><br><span class=\"line\">MyModel.updateOrCreate(&#123;</span><br><span class=\"line\">  id: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;, <span class=\"built_in\">console</span>.log);</span><br></pre></td></tr></table></figure>\n\n<p><strong>访问受影响的实例</strong></p>\n<p>仅影响单个实例的操作(所有创建,检索,更新和删除操作,除了<code>PersistedModel.deleteAll</code>和<code>PersistedModel.updateAll</code>）通常在上下文对象中提供受影响的实例.但是,根据操作,此实例可以是可修改的<code>ctx.instance</code>或只读的<code>ctx.currentInstance</code>:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>&nbsp;</th>\n      <th>before save</th>\n      <th>persist</th>\n      <th>after save</th>\n      <th>before delete</th>\n      <th>after delete</th>\n    </tr>\n    <tr>\n      <td><code>create</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>findOrCreate</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>updateOrCreate</code></td>\n      <td><em>n/a*</em></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>upsertWithWhere</code></td>\n      <td><em>n/a*</em></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>updateAll</code></td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>prototype.save</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>prototype.updateAttributes</code></td>\n      <td><code><span>ctx.currentInstance</span></code></td>\n      <td><code><span>ctx.currentInstance</span></code></td>\n      <td><code><span>ctx.instance</span></code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td>\n        <p><code>prototype.delete</code></p>\n      </td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td><code><span>ctx.where.id</span></code></td>\n      <td><code><span>ctx.where.id</span></code></td>\n    </tr>\n    <tr>\n      <td><code>deleteAll</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n    </tr>\n    <tr>\n      <td><span>replaceOrCreate</span></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td>---</td>\n      <td>---</td>\n    </tr>\n    <tr>\n      <td>\n        <p><span>prototype.replaceAttributes/</span></p>\n        <p><span>replaceById</span></p>\n      </td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td>---</td>\n      <td>---</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>(*)操作<code>updateOrCreate</code>和<code>upsertWithWhered</code>在“before save”钩子中不提供任何实例.因为我们不能预先告诉操作是否会导致UPDATE或CREATE,我们不能确定是否有任何存在的”currentInstance”受操作影响.</p>\n<p>有关详细信息,请参阅以下部分.</p>\n<h5 id=\"Hooks-钩子\"><a href=\"#Hooks-钩子\" class=\"headerlink\" title=\"Hooks(钩子)\"></a>Hooks(钩子)</h5><p>LoopBack提供如下这些操作钩子:</p>\n<ul>\n<li>access</li>\n<li>before save</li>\n<li>after save</li>\n<li>before delete</li>\n<li>after delete</li>\n<li>loaded</li>\n<li>persist</li>\n</ul>\n<p>下表列出了PersistedModel方法调用的钩子:</p>\n<table>\n  <tbody>\n    <tr>\n      <th width=\"160\">Method name</th>\n      <th>Hooks invoked</th>\n    </tr>\n    <tr>\n      <td>\n        <p>all<br>find<br>findOne <br>findById  <br>exists<br>count </p>\n      </td>\n      <td>access, loaded</td>\n    </tr>\n    <tr>\n      <td>create</td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>upsert (aka updateOrCreate)</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>upsertWithWhere</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>findOrCreate</td>\n      <td>access, before save*, after save*, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>deleteAll (destroyAll)<br>deleteById (destroyById)</td>\n      <td>access, before delete, after delete</td>\n    </tr>\n    <tr>\n      <td>updateAll</td>\n      <td>access, before save, after save, persist</td>\n    </tr>\n    <tr>\n      <td>prototype.save</td>\n      <td>before save, after save, persist, loaded</td>\n    </tr>\n    <tr>\n      <td>prototype.delete</td>\n      <td>before delete, after delete</td>\n    </tr>\n    <tr>\n      <td>prototype.<br>updateAttributes</td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>replaceOrCreate</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>prototype.<br>replaceAttributes\n        <br>replaceById<\n      </td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>(*)当<code>findOrCreate</code>找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发<code>before save</code>钩子,即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.</p>\n<p><strong>access</strong></p>\n<p>每当为模型查询数据库时,即调用PersistedModel的任何create,retrieve,update和delete方法时,都会触发<code>access</code>钩子. Observers(观察者)可以修改查询,例如添加额外的限制.</p>\n<blockquote>\n<p> 注意:原型方法不会触发access钩子,因为钩子已经被从数据库加载模型实例的方法触发了.例如,当您通过REST API调用原型方法时,会进行两个模型调用:static findById()(触发”access”钩子),然后根据请求创建原型方法.</p>\n</blockquote>\n<p>上下文属性</p>\n<ul>\n<li><code>model</code> - 将被查询的模型的构造函数</li>\n<li><code>query</code> - 包含字段的查询,<code>where</code>,<code>include</code>,<code>order</code>等等.</li>\n</ul>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'access'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logQuery</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing %s matching %s'</span>, ctx.Model.modelName, ctx.query.where);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.observe(<span class=\"string\">'access'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">limitToTenant</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  ctx.query.where.tenantId = loopback.getCurrentContext().tenantId;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>before save</strong></p>\n<p>在修改(创建,更新)模型实例之前触发<code>before save</code>钩子,特别是当调用PersistedModel的以下方法时:</p>\n<ul>\n<li>create()</li>\n<li>upsert()</li>\n<li>upsertWithWhere()</li>\n<li>findOrCreate()*</li>\n<li>updateAll()</li>\n<li>prototype.save()</li>\n<li>prototype.updateAttributes()</li>\n<li>replaceOrCreate()</li>\n<li>prototype.replaceById() / replaceAttributes()</li>\n</ul>\n<p>(*)当<code>findOrCreate</code>找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发<code>before save</code>钩子,即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.</p>\n<p>钩子在调用模型验证函数之前触发.</p>\n<p>由于在调用验证器之前触发<code>before save</code>钩子,因此可以使用它来确保空值或使用缺省值填充缺少值.</p>\n<p>根据触发此钩子的方法,上下文将具有以下属性集之一:</p>\n<ul>\n<li><p>完全保存单个模型</p>\n<ul>\n<li><code>Model</code> - 将被保存的模型的构造函数</li>\n<li><code>instance</code> - 要保存的模型实例,该值是Model类的一个实例.</li>\n</ul>\n</li>\n<li><p>多个模型的部分更新</p>\n<ul>\n<li><code>Model</code> - 将被保存的模型的构造函数</li>\n<li><code>where</code> - where过滤器描述将影响哪些实例</li>\n<li><code>data</code> - 更新期间应用的（部分）数据</li>\n<li><code>currentInstance</code> - 受影响的实例,请参见下面的prototype.updateAttributes触发.</li>\n</ul>\n</li>\n</ul>\n<p><strong><em>ctx.isNewInstance</em></strong></p>\n<p>在设置ctx.instance时,<code>before save</code>钩子提供<code>ctx.isNewInstance</code>属性,并具有以下值:</p>\n<ul>\n<li>所有CREATE操作均为真</li>\n<li>所有UPDATE和REPLACE操作均为False</li>\n<li>updateOrCreate,upsertWithWhere,replaceOrCreate,prototype.save,prototype.updateAttributes和updateAll操作的值都是Undefined(未定义).</li>\n</ul>\n<p><strong><em>嵌入关系(Embedded relations)</em></strong></p>\n<p>您可以为嵌入在另一个模型中的模型定义<code>before save</code>钩子.然后,更新或创建包含模型的实例将触发嵌入模型上的操作钩子.发生这种情况时,<code>ctx.isNewInstance</code>为false,因为只创建容器模型的新实例.</p>\n<p>例如,如果<code>Customer embedsOne Address</code>,并且您在地址模型上定义了一个<code>before save</code>钩子,则创建一个新的Customer实例将触发操作钩子.</p>\n<p><strong><em>在before save钩子中操作模型数据</em></strong></p>\n<p>如上所述,上下文提供<code>instance</code>属性或一对<code>data</code>以及<code>where</code>属性.在<code>ctx.instance</code>中公开一个完整的模型实例允许钩子调用自定义模型的实例方法(例如,当地址等订单数据改变时,钩子可以调用<code>order.recalculateShippingAndTaxes()</code>）.这就是为什么LoopBack创建,检索,更新和删除操作会提供实例(如果可能).</p>\n<p>当提供实例对象不可行时.有两个异常值得注意:</p>\n<ol>\n<li><p><code>PersistedModel.updateAll</code>更新与提供的查询匹配的多个实例.LoopBack甚至不从数据库加载它们的数据,它是由数据库来查找这些实例并应用必要的更改.</p>\n</li>\n<li><p><code>PersistedModel.updateAttributes</code>执行部分更新，只修改模型属性的子集.虽然LoopBack具有可用的模型实例,但它还需要知道应该在数据库中更改哪些模型属性.在<code>ctx.data</code>中传递操作有效内容 - 一个仅包含应该修改的属性的纯对象 - 使钩子实现可以轻松地添加/删除要修改的属性.您仍然可以通过<code>ctx.currentInstance</code>访问要修改的模型实例,只要将其视为不可变(只读)即可.</p>\n</li>\n</ol>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'before save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateTimestamp</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    ctx.instance.updated = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ctx.data.updated = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.observe(<span class=\"string\">'before save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computePercentage</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    ctx.instance.percentage = <span class=\"number\">100</span> * ctx.instance.part / ctx.instance.total;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ctx.data.part &amp;&amp; ctx.data.total) &#123;</span><br><span class=\"line\">    ctx.data.percentage = <span class=\"number\">100</span> * ctx.data.part / ctx.data.total;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ctx.data.part || ctx.data.total) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// either report an error or fetch the missing properties from DB</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>移除不需要的属性</em></strong></p>\n<p>要删除(取消设置)模型实例中的属性,将其值设置为undefined或删除属性是不够的.必须调用<code>unsetAttribute(name)</code>. 但是,不要忘记处理上下文具有数据属性的情况!由于数据对象是普通对象,因此可以通过delete操作符以常规方式删除属性.</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'before save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeUnwantedField</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    ctx.instance.unsetAttribute(<span class=\"string\">'unwantedField'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ctx.data.unwantedField;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这将完全删除字段,并防止将伪数据插入数据库.</p>\n<p><strong>after save</strong></p>\n<p>在模型更改成功地保持到数据源之后调用<code>after save</code>钩子,特别是当调用PersistedModel的以下方法时:</p>\n<ul>\n<li>create()</li>\n<li>upsert()</li>\n<li>upsertWithWhere()</li>\n<li>findOrCreate()*</li>\n<li>updateAll()</li>\n<li>prototype.save()</li>\n<li>prototype.updateAttributes()</li>\n<li>prototye.replaceAttributes() / replaceById()</li>\n<li>replaceOrCreate()</li>\n</ul>\n<p>(*)当<code>findOrCreate</code>找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发<code>before save</code>钩子(<em>译注:这里原文是不是有问题?应该是after save吧</em>),即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.</p>\n<p>根据触发此钩子的方法,上下文将具有以下属性集之一:</p>\n<ul>\n<li><p>单个模型被更新：</p>\n<ul>\n<li><p><code>Model</code> - 将被保存的模型的构造函数.</p>\n</li>\n<li><p><code>instance</code> - 保存的模型实例.该值是Model类的实例,并包含由数据存储计算的更新值(例如,自动生成的ID).</p>\n<blockquote>\n<p>注意： after save钩子将对ctx.instance的更改返回给调用者(REST客户端),但不会将它们持久保存到数据库!</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>通过<code>Model.updateAll</code>对更多模型实例进行部分更新：</p>\n<ul>\n<li><p><code>Model</code> - 将被保存的模型的构造函数.</p>\n</li>\n<li><p><code>where</code> - where过滤器描述查询哪些实例.请参阅下面的警告.</p>\n</li>\n<li><p>‘data` - 在更新期间应用的(部分)数据.</p>\n<blockquote>\n<p> 注意：您不能可靠地使用”after save”的”where”查询来查找受影响的模型.考虑下面的调用:</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.updateAll(&#123; <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;, &#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;, cb);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>此时,&quot;after save&quot;钩子是运行的,但是没有记录会匹配这个查询条件{ color: &apos;yellow&apos; }.</code></pre><p><code>after save</code>在设置<code>ctx.instance</code>时提供<code>ctx.isNewInstance</code>属性,并具有以下值:</p>\n<ul>\n<li>所有CREATE操作后为true.</li>\n<li>所有UPDATE/REPLACE操作后为False.</li>\n<li><code>updateOrCreate</code>,<code>prototype.save</code>和<code>prototype.updateAttributes</code>需要连接器来报告是创建了新实例还是更新了现有实例.当连接器提供此信息时,<code>ctx.isNewInstance</code>为True或False. 当连接器不支持此功能(见下文)时,该值为undefined.</li>\n</ul>\n<blockquote>\n<p> 重要:只有某些连接器支持ctx.isNewInstace.其他连接器是未定义的.请参阅检查ctx.isNewInstance的支持.</p>\n</blockquote>\n<p><strong><em>Embedded relations(嵌入关系)</em></strong></p>\n<p>您可以为嵌入在另一个模型中的模型定义<code>after save</code>钩子.然后,更新或创建包含模型的实例将触发嵌入模型上的操作钩子.发生这种情况时,<code>ctx.isNewInstance为false</code>,因为只创建容器模型的新实例.</p>\n<p>例如,如果<code>Customer embedsOne Address</code>,并且您在地址模型上定义了一个<code>after save</code>钩子,则创建一个新的Customer实例将触发操作钩子.</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'after save'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Saved %s#%s'</span>, ctx.Model.modelName, ctx.instance.id);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Updated %s matching %j'</span>,</span><br><span class=\"line\">      ctx.Model.pluralModelName,</span><br><span class=\"line\">      ctx.where);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>before delete</strong></p>\n<p>在从数据源中删除模型之前触发<code>before delete</code>钩子,特别是当调用PersistedModel的以下方法时:</p>\n<ul>\n<li><code>destroyAll()</code> (same as <code>deleteAll()</code>)</li>\n<li><code>destroyById()</code>(same as <code>deleteById()</code>)</li>\n<li><code>prototype.destroy()</code> (same as <code>prototype.delete()</code>)</li>\n</ul>\n<blockquote>\n<p> 重要: <code>before delete</code>钩子不接收删除的模型实例ID的列表,因为后端数据存储器(例如关系数据库或NoSQL数据库)不提供此信息.但是,当删除单个模型实例时,钩子接收包含要删除的实例的id的ctx.where.</p>\n</blockquote>\n<p><em>Context properties(上下文属性)</em></p>\n<ul>\n<li><code>Model</code> - 将被查询的模型的构造函数</li>\n<li><code>where</code> - where过滤器描述将删除哪些实例</li>\n</ul>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'before delete'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Going to delete %s matching %j'</span>,</span><br><span class=\"line\">    ctx.Model.pluralModelName,</span><br><span class=\"line\">    ctx.where);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要拒绝基于某些条件删除模型,请调用带有错误的next()以中止删除操作.</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (subscriptions.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//Stop the deletion of this Client</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Client has an active subscription, cannot delete\"</span>);</span><br><span class=\"line\">  err.statusCode = <span class=\"number\">400</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err.toString());</span><br><span class=\"line\">  next(err);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>after delete</strong></p>\n<blockquote>\n<p> 重要:<code>after delete</code>钩子不接收已删除模型实例ID的列表,因为后端数据存储(如关系数据库或NoSQL数据库)不提供此信息.但是,当删除单个模型实例时,钩子接收包含要删除的实例的id的ctx.where.</p>\n</blockquote>\n<p>在从数据源中删除一些模型之后触发<code>after delete</code>钩子,特别是当调用PersistedModel的以下方法时:</p>\n<ul>\n<li><code>destroyAll()</code> (same as <code>deleteAll()</code>)</li>\n<li><code>destroyById()</code>(same as <code>deleteById()</code>)</li>\n<li><code>prototype.destroy()</code> (same as <code>prototype.delete()</code>)</li>\n</ul>\n<p><em>Context properties(上下文属性)</em></p>\n<ul>\n<li><code>Model</code> - 将被查询的模型的构造函数</li>\n<li><code>where</code> - where过滤器描述哪些实例被删除</li>\n</ul>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'after delete'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Deleted %s matching %j'</span>,</span><br><span class=\"line\">    ctx.Model.pluralModelName,</span><br><span class=\"line\">    ctx.where);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>loaded</strong></p>\n<p>这个钩子由PersistedModel的以下方法触发:</p>\n<ul>\n<li>find()</li>\n<li>findOne()</li>\n<li>findById()</li>\n<li>exists()</li>\n<li>count()</li>\n<li>create()</li>\n<li>upsert() (same as updateOrCreate())</li>\n<li>upsertWithWhere()</li>\n<li>findOrCreate()*</li>\n<li>prototype.save()</li>\n<li>prototype.updateAttributes()</li>\n<li>replaceOrCreate()</li>\n<li>prototype.replaceAttributes() / replaceById()</li>\n</ul>\n<blockquote>\n<p> 重要:默认情况下,create和updateAttributes不会将数据库更新应用于返回到回调的模型实例,因此”loaded”挂钩所做的任何更改都将被丢弃.要更改此行为,请设置每个模型选项updateOnLoad：true.</p>\n</blockquote>\n<p>LoopBack在连接器获取数据之后,在从该数据创建模型实例之前调用此钩子.这使钩子能够解密数据.注意:此钩子使用原始数据库数据调用,而不是完整的模型实例.</p>\n<p><em>Context properties(上下文属性)</em></p>\n<ul>\n<li><code>data</code> - 连接器返回的数据(从数据库加载)</li>\n</ul>\n<p><strong>persist</strong></p>\n<p>此钩子由将数据保存到数据源的操作触发,具体来说,是PersistedModel的以下方法:</p>\n<ul>\n<li>create()</li>\n<li>upsert() (same as updateOrCreate())</li>\n<li>upsertWithWhere()</li>\n<li>findOrCreate()*</li>\n<li>prototype.save()</li>\n<li>prototype.updateAttributes()</li>\n<li>updateAll()</li>\n<li>replaceOrCreate()</li>\n<li>prototype.replaceAttributes() / replaceById()</li>\n</ul>\n<p>不要将此钩子与”before save”钩子混淆:</p>\n<ul>\n<li><p><strong>before save</strong> - 使用此钩子观察(并操作)将要保存的模型实例(例如,设置国家代码并且国家名称未填写时,填写国家/地区名称).</p>\n</li>\n<li><p><strong>persist</strong> - 使用此钩子在数据被持久化到数据源(例如,加密数据库中的值)之前观察(和操作)数据.</p>\n</li>\n</ul>\n<p>在<code>create</code>期间通过persist钩子将应用的更新反映到数据库中,但是相同的更新不会反映在create回调里获得的实例对象中.</p>\n<p>其次,对于实现原子<code>findOrCreate</code>的连接器,每次都会创建对象的新实例,即使稍后在数据库中找到现有记录也是如此.所以:</p>\n<ul>\n<li>ctx.data.id和ctx.currentInstance.id都设置为新ID.</li>\n<li>ctx.isNewInstance为true</li>\n</ul>\n<p><em>上下文属性(Context properties)</em></p>\n<ul>\n<li><code>data</code> - 将发送到连接器的数据保存到数据库</li>\n<li><code>currentInstance</code> - 受影响的模型实例</li>\n<li><code>isNewInstance</code> - 见下文</li>\n</ul>\n<p>对于这个钩子来说,<code>ctx.isNewInstance</code>是:</p>\n<ul>\n<li>True for all CREATE operations</li>\n<li>False for all UPDATE operations</li>\n<li>Undefined for updateOrCreate, , upsertWithWhere, replaceOrCreate, prototype.save, prototype.updateAttributes, and updateAll operations.</li>\n</ul>\n<p><strong>afterInitialize hook</strong></p>\n<blockquote>\n<p> 重要:afterInitialize不是严格的操作钩子,它实际上是唯一没有被弃用的模型钩子.<br>它是一个同步方法,没有回调函数,在钩子中执行逻辑后,不需要调用next().</p>\n</blockquote>\n<p>在模型初始化后调用此钩子.例如:</p>\n<p><strong>/common/models/coffee-shop.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">CoffeeShop.afterInitialize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//your logic goes here</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>大多数操作需要在实际执行操作之前初始化模型,但是有一些情况下不会触发initialize事件,例如对exists,count或批量更新REST端点的HTTP请求.</p>\n<hr>\n<h4 id=\"5.2.4\"> 5.2.4 Connector hooks(连接器钩子) </h4>\n\n<blockquote>\n<p> 概要:连接器钩子由连接器操作触发</p>\n</blockquote>\n<h5 id=\"概述-21\"><a href=\"#概述-21\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>连接器负责在模型方法上与后端系统交互,连接器钩子使应用程序能够拦截连接器执行.</p>\n<h5 id=\"Hooks-钩子-1\"><a href=\"#Hooks-钩子-1\" class=\"headerlink\" title=\"Hooks(钩子)\"></a>Hooks(钩子)</h5><p><strong>before execute</strong></p>\n<p>在连接器向后端发送请求之前,调用”before execute”钩子.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connector = MyModel.getDataSource().connector;</span><br><span class=\"line\">connector.observe(<span class=\"string\">'before execute'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要终止调用,请调用<code>ctx.end(err, result)</code>,例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connector = MyModel.getDataSource().connector;</span><br><span class=\"line\">connector.observe(<span class=\"string\">'before execute'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ctx.end(<span class=\"literal\">null</span>, cachedResponse);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>after execute</strong></p>\n<p>在连接器从后端接收到响应之后,调用”after execute”钩子.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connector.observe(<span class=\"string\">'after execute'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Context-上下文\"><a href=\"#Context-上下文\" class=\"headerlink\" title=\"Context(上下文)\"></a>Context(上下文)</h5><p>上下文对象包含要操作的钩子的信息.它根据连接器的类型而变化.</p>\n<p><em>SQL based connectors (MySQL, PostgreSQL, SQL Server, Oracle)</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before: &#123;req: &#123;sql: 'SELECT ...', params: [1, 2]&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after: &#123;req: &#123;sql: 'SELECT ...', params: [1, 2]&#125;, res: ..., end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>MongoDB connector</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before: &#123;req: &#123;command: ..., params: ...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after: &#123;req: &#123;...&#125;, res: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>req.command is the command for the mongodb collection.<br>req.params is the parameters passing to the mongodb driver.<br>res is the object received from the mongodb driver.</p>\n<p><em>REST connector</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before: &#123;req: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after: &#123;req: &#123;...&#125;, res: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>req is the object passing to request module.<br>res is the object received from request module.</p>\n<p><em>SOAP connector</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before: &#123;req: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after: &#123;req: &#123;...&#125;, res: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>req is the object passing to request module.<br>res is the object received from request module.</p>\n<hr>\n<h4 id=\"5.3\"> 5.3 定义引导脚本 </h4>\n\n<h5 id=\"概述-22\"><a href=\"#概述-22\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack引导程序,<code>loopback-boot</code>执行应用程序初始化(也称为引导).当应用程序启动时,引导程序:</p>\n<ul>\n<li>配置数据源.</li>\n<li>定义自定义模型.</li>\n<li>配置模型并将模型附加到数据源.</li>\n<li>配置应用程序设置.</li>\n<li>运行/server/boot目录中的引导脚本.</li>\n</ul>\n<p>loopback-boot模块导出一个初始化应用程序的<code>boot()</code>函数.例如,从标准的scaffolded server.js脚本:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> boot = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-boot'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">module</span>.exports = loopback();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">boot(app, __dirname, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"comment\">// start the server if `$ node server.js`</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">require</span>.main === <span class=\"built_in\">module</span>)</span><br><span class=\"line\">    app.start();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 注意:如果您使用应用程序生成器创建应用程序,那么您不需要执行任何操作来引导应用程序 - 上述代码会自动为您架设脚本.</p>\n</blockquote>\n<p><strong>使用引导脚本</strong></p>\n<p>除了由LoopBack引导程序执行的操作之外,还可以使用引导脚本执行自定义初始化.当应用程序启动时,LoopBack加载<code>server/boot</code>目录中的所有脚本.默认情况下,LoopBack按字母顺序加载启动脚本. 您可以使用boot()的options参数自定义引导脚本加载顺序.有关详细信息,请参阅引导脚本加载顺序.</p>\n<h5 id=\"预定义的引导脚本\"><a href=\"#预定义的引导脚本\" class=\"headerlink\" title=\"预定义的引导脚本\"></a>预定义的引导脚本</h5><p>应用程序生成器将创建以下引导脚本:</p>\n<ul>\n<li><code>/server/boot/root.js</code>在根端点(“/“)绑定loopback.status()中间件以提供基本状态信息.</li>\n<li><code>/server/boot/authentication.js</code> - 通过调用app.enableAuth()为应用程序启用身份验证.</li>\n</ul>\n<p><strong>API连接</strong></p>\n<p>API Connect LoopBack生成器不会创建启用身份验证的authentication.js启动脚本.要启用用户模型身份验证,您必须自己添加此脚本.</p>\n<h5 id=\"使用boot-script-generator\"><a href=\"#使用boot-script-generator\" class=\"headerlink\" title=\"使用boot script generator\"></a>使用boot script generator</h5><p>除了预定义的引导脚本之外,还可以自定义引导脚本,以在应用程序启动时执行自己的逻辑.</p>\n<p>使用引导脚本生成器快速生成引导脚本模板.根据对生成器提示的响应方式,它将为同步或异步引导脚本生成模板:</p>\n<p><strong>Synchronous boot script template</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Asynchronous boot script template</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app, cb</span>) </span>&#123;</span><br><span class=\"line\">  process.nextTick(cb); <span class=\"comment\">// Remove if you pass `cb` to an async function yourself</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"同步和异步引导脚本\"><a href=\"#同步和异步引导脚本\" class=\"headerlink\" title=\"同步和异步引导脚本\"></a>同步和异步引导脚本</h5><p>LoopBack支持同步和异步引导脚本.使用的类型取决于任务的性质.对于不想阻止程序执行的任务(如数据库请求或网络操作),请使用异步启动脚本.</p>\n<p>两种类型的引导脚本都必须导出包含脚本操作的函数.对于两种类型的引导脚本,此函数的签名是类似的,但是异步引导脚本函数需要一个额外的回调参数.</p>\n<p><strong>Bootstrap function arguments</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app, [callback]</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n  <tbody>\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Required</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>app</td>\n      <td>Object</td>\n      <td>Yes</td>\n      <td>\n        <p>The application context object. Provides a handle the the application, so (for example) you can get model objects:</p>\n        <pre>var User = app.models.User;</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>callback</td>\n      <td>Function</td>\n      <td>Only for asynchronous boot scripts</td>\n      <td>Call the callback function when your application logic is done.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>异步引导脚本</strong></p>\n<p>异步引导脚本必须导出具有两个参数的函数:</p>\n<ul>\n<li>应用程序对象<code>app</code>.此对象使您能够访问系统定义的变量和配置.</li>\n<li>回调函数,使您能够根据应用程序逻辑来计算响应时间.</li>\n</ul>\n<blockquote>\n<p> 重要:当脚本完成时,必须调用回调函数将控制权传回应用程序.</p>\n</blockquote>\n<p>例如,此引导脚本打印”hello world”并在三秒(3000毫秒)后触发回调函数.</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app, callback</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello world'</span>);</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>同步引导脚本</strong></p>\n<p>同步启动脚本必须导出一个函数,它接受一个参数,应用程序对象<code>app</code>.此对象使您能够访问系统定义的变量和配置.</p>\n<p>例如,此引导脚本检索在应用程序中注册的所有模型的名称,并将它们显示到控制台.</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> modelNames = <span class=\"built_in\">Object</span>.keys(app.models);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> models = [];</span><br><span class=\"line\">  modelNames.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> modelName = app.models[m].modelName;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (models.indexOf(modelName) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      models.push(modelName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Models:'</span>, models);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"引导脚本加载顺序\"><a href=\"#引导脚本加载顺序\" class=\"headerlink\" title=\"引导脚本加载顺序\"></a>引导脚本加载顺序</h5><p>LoopBack按文件名的字母顺序执行启动脚本,因此指定启动脚本加载顺序的最简单方法是按照文件名.例如,您可以命名引导脚本01-your-first-script.js,02-your-second-script.js等.这确保LoopBack按照您想要的顺序加载脚本.例如在/server/boot中的默认引导脚本之前.</p>\n<blockquote>\n<p> 注意: LoopBack按字母顺序处理引导脚本,一次一个(不并行).这适用于同步和异步引导脚本</p>\n</blockquote>\n<p>您还可以在/server/server.js中为boot()函数调用指定加载顺序选项.替换默认的scaffolded函数调用:</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">boot(app, __dirname);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>With something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">bootOptions = &#123; <span class=\"string\">\"appRootDir\"</span>: __dirname, </span><br><span class=\"line\">                <span class=\"string\">\"bootScripts\"</span> : [ <span class=\"string\">\"/full/path/to/boot/script/first.js\"</span>, <span class=\"string\">\"//full/path/to/boot/script/second.js\"</span>, ... ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">boot(app, bootOptions);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>然后应用程序将按照bootScripts数组中指定的顺序执行脚本,指定每个脚本的完整目录路径.您还可以指定相对目录路径.</p>\n<blockquote>\n<p> 重要: 使用上面的技术,在bootScripts中指定的自定义引导脚本运行完之后,应用程序将仍然按照字母顺序运行/server/boot中的所有引导脚本(除非您移动或删除它们).</p>\n</blockquote>\n<p>如果需要,您还可以在<code>bootDirs</code>属性中指定一个或多个目录,应用程序将在<code>bootScripts</code>中指定的那些字符之后,然后在<code>/server/boot</code>目录中指定的字母顺序之前,在该目录中运行脚本.</p>\n<hr>\n<h4 id=\"5.4\"> 5.4 定义中间件 </h4>\n\n<h5 id=\"概述-23\"><a href=\"#概述-23\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>中间件是指向REST端点发出HTTP请求时执行的函数.由于LoopBack基于Express,所以LoopBack中间件与Express中间件相同.但是,LoopBack添加了中间件阶段的概念,以清楚地定义中间件被调用的顺序.使用阶段有助于避免标准Express中间件可能出现的顺序问题.</p>\n<p>LoopBack支持以下类型的中间件:</p>\n<ul>\n<li><strong>Pre-processing middleware</strong> - 自定义应用程序逻辑的预处理中间件.请参阅静态中间件的示例.</li>\n<li><strong>Dynamic request handling middleware</strong> - 动态请求处理中间件提供动态生成的响应,例如从模板呈现的HTML页面和对REST API请求的JSON响应.请参阅预处理中间件的示例.</li>\n<li><strong>Static middleware</strong> - 静态中间件用于提供静态客户端资源.请参阅静态中间件的示例.</li>\n<li><strong>Error-handling middleware</strong> - 错误处理中间件处理请求错误.请参见错误处理中间件的示例.</li>\n</ul>\n<p><strong>如何添加中间件</strong></p>\n<p>要向应用程序添加中间件:</p>\n<ol>\n<li><p>指定中间件功能:</p>\n<ul>\n<li>如果使用现有的函数或包,请将代码添加到应用程序或安装包.</li>\n<li>如果要创建新的中间件函数,请编一个.请参阅定义新的中间件处理程序函数.</li>\n</ul>\n</li>\n<li><p>注册中间件:</p>\n<ul>\n<li>编辑服务器/middleware.json.这是注册中间件的推荐方法.请参阅在middleware.json中注册中间件.</li>\n<li>或者,在应用程序代码中注册中间件.请参阅在JavaScript中注册中间件.</li>\n</ul>\n</li>\n</ol>\n<p><strong>中间件阶段</strong></p>\n<p>LoopBack定义了许多阶段,对应于应用程序执行的不同方面.注册中间件时,您可以指定应用程序调用它的阶段.请参阅在middleware.json中注册中间件和使用LoopBack API.如果您使用Express API注册中间件(或路由),则它会在路由阶段开始时执行.</p>\n<p>预定义的阶段是:</p>\n<ol>\n<li><code>initial</code> - 中间件可以运行的第一个点.</li>\n<li><code>session</code> - 准备会话对象.</li>\n<li><code>auth</code> - 处理身份验证和授权.</li>\n<li><code>parse</code> - 解析请求体.</li>\n<li><code>routes</code> - 实现应用程序逻辑的HTTP路由.通过Express API <code>app.use</code>,<code>app.route</code>,<code>app.get</code>(和其他HTTP动词)注册的中间件在此阶段开始运行.对于子应用程序(如loopback/server/middleware/rest或loopback-explorer)也使用此阶段.</li>\n<li><code>files</code> - 服务静态资源.</li>\n<li><code>final</code> - 处理错误和未知网址的请求.</li>\n</ol>\n<p>每个阶段除了主阶段之外还具有”before”和”after”子阶段,在阶段名称后面编码,以冒号分隔.例如,对于”initial”阶段,中间件按此顺序执行:</p>\n<ol>\n<li>initial:before </li>\n<li>initial</li>\n<li>initial:after</li>\n</ol>\n<p>单个子阶段中的中间件按注册顺序执行.但是,你不应该依赖这样的顺序.当顺序重要时,始终使用适当的阶段显式地订购中间件.</p>\n<h5 id=\"指定中间件函数\"><a href=\"#指定中间件函数\" class=\"headerlink\" title=\"指定中间件函数\"></a>指定中间件函数</h5><p><strong>使用Express中间件</strong></p>\n<p>您可以使用任何与Express兼容的中间件,请参阅Express文档以获取部分列表.</p>\n<p>只需安装:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save &lt;module-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后简单地注册它,使其根据需要被调用.请参阅在middleware.json中注册中间件和在JavaScript中注册中间件.</p>\n<p><strong>定义一个新的中间件处理函数</strong></p>\n<p>如果没有现有的中间件是你所需要的,你可以轻松地编写自己的中间件处理函数.要在middleware.json中注册中间件函数,需要创建一个返回中间件函数的构造函数(factory)函数.</p>\n<p>按照惯例,将中间件函数放在server/middleware目录中.</p>\n<p>中间件处理程序函数接受三个参数,或四个参数,如果它是错误处理中间件.一般形式是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myMiddlewareFunc</span>(<span class=\"params\">[err,] req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n  <tbody>\n    <tr>\n      <th width=\"60\">Name</th>\n      <th width=\"100\">Type</th>\n      <th>Optional?</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>err</td>\n      <td>Object</td>\n      <td>Required for error-handling middleware.</td>\n      <td>\n        <p>Use <em>only</em> for error-handling middleware.</p>\n        <p>Error object, usually an instance or <code>Error</code>; for more information, see <a href=\"Error-object.html\">Error object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>req</td>\n      <td>Object</td>\n      <td>No</td>\n      <td>\n        <p>The Express <a href=\"http://expressjs.com/4x/api.html#request\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">request object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>res</td>\n      <td>Object</td>\n      <td>No</td>\n      <td>\n        <p>The Express <a href=\"http://expressjs.com/4x/api.html#response\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">response object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>Function</td>\n      <td>No</td>\n      <td>Call <code>next()</code> after your application logic runs to pass control to the next middleware handler.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>具有三个参数的中间件函数的示例,调用以在先前处理程序未报告错误时处理请求:</p>\n<p><strong>Regular middleware</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myMiddleware</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里是这个函数的构造函数(工厂)在middleware.json中注册时使用此表单.</p>\n<p><strong>Regular middleware</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myMiddleware</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>一个具有四个参数的中间件函数的示例,仅当遇到错误时调用.</p>\n<p><strong>Error handler middleware</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myErrorHandler</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>打包中间件函数</strong></p>\n<p>要跨多个项目共享中间件,请创建一个包,用于导出中间件构造函数(factory)函数,该函数接受配置选项并返回中间件处理函数,例如,如下所示.</p>\n<p>如果您使用应用程序生成器创建的现有项目,要实现可与其他项目共享的新中间件处理程序,请将中间件构造函数放在server/middleware目录中,例如server/middleware/myhandler.js.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customHandler</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// use options to control handler's behavior</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在middleware-json注册中间件\"><a href=\"#在middleware-json注册中间件\" class=\"headerlink\" title=\"在middleware.json注册中间件\"></a>在middleware.json注册中间件</h5><p>注册中间件的最简单的方法是在server/middleware.json中.此文件指定所有应用程序的中间件函数及其调用阶段.</p>\n<p>当使用应用程序生成器创建应用程序时,它会创建一个默认的middleware.json文件,如下所示:</p>\n<p><strong>server/middleware.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"initial:before\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loopback#favicon\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"initial\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"compression\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"session\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"auth\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"parse\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"routes\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"files\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"final\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loopback#urlNotFound\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"final:after\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"errorhandler\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>middleware.json中的每个顶级键定义了一个中间件阶段或子阶段,例如”initial”,”session:before”或”final”.阶段按照它们在文件中出现的顺序运行.</p>\n<p>每个阶段都是一个JSON对象,其中包含要在该阶段中调用的每个中间件函数的键.例如,”loopback/server/middleware/favicon”或”compression”.</p>\n<p>一般来说,每个阶段都有以下语法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phase[:sub-phase] : &#123;</span><br><span class=\"line\"> middlewarePath : &#123;</span><br><span class=\"line\">   [ enabled: [<span class=\"literal\">true</span> | <span class=\"literal\">false</span>] ]</span><br><span class=\"line\">   [, <span class=\"attr\">name</span>: nameString ]</span><br><span class=\"line\">   [, <span class=\"attr\">params</span> : paramSpec ]</span><br><span class=\"line\">   [, <span class=\"attr\">methods</span>: methodSpec ]</span><br><span class=\"line\">   [ paths : routeSpec ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><em>phase</em>:是上面列出的预定义阶段之一(初始,会话,auth等)或自定义阶段,请参阅添加自定义阶段.</li>\n<li><em>sub-phase</em>:(可选)可以在<code>before</code>或<code>after</code>.</li>\n<li><em>name</em>:可选中间件名称.请参阅下面的中间件配置属性.</li>\n<li><em>middlewarePath</em>:中间件函数的路径.请参阅下面的中间件功能路径.</li>\n<li><em>paramSpec</em>:中间件参数的值,通常为JSON对象.请参阅下面的中间件配置属性.</li>\n<li><em>methodSpec</em>:HTTP方法,例如’GET’,’POST’和’PUT’.如果不存在,则适用于所有方法.</li>\n<li><em>routeSpec</em>:触发中间件的REST端点.</li>\n</ul>\n<p><strong>中间件函数的路径</strong></p>\n<p>通过以下方式指定中间件函数(middlewarePath)的路径:</p>\n<ul>\n<li>对于安装在项目中的外部中间件模块,只需使用模块的名称,例如<code>compression</code>.</li>\n<li>对于安装在项目中的模块中的脚本,请使用模块的路径,例如loopback/server/middleware/rest.</li>\n<li>对于具有自定义中间件函数的脚本,请使用相对于middleware.json的路径,例如<code>./middleware/custom</code>.</li>\n<li>脚本文件的绝对路径(不推荐).</li>\n</ul>\n<p>此外,您可以使用速记格式<code>{_module _}＃{_ fragment_}</code>,其中fragment是:</p>\n<ul>\n<li>由模块导出的属性,例如<code>loopback＃favicon</code>解析为<code>require(&#39;loopback&#39;).favicon</code>.</li>\n<li>模块的<code>server/middleware</code>目录中的文件,例如<code>require(&#39;loopback/server/middleware/ favicon&#39;)</code>.</li>\n<li>模块中间件目录中的文件,例如<code>require(&#39;loopback/middleware/favicon&#39;)</code>.</li>\n</ul>\n<p><strong>中间件配置属性</strong></p>\n<p>您可以在每个中间件部分指定以下属性.它们都是可选的:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>String</td>\n      <td>An optional name for the entry. It can be used to identify an entry within the same phase/path for the purpose of merging</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>enabled</td>\n      <td>Boolean</td>\n      <td>\n        <p>Whether to register or enable the middleware. You can override this property in environment-specific files, for example to disable certain middleware when running in production. For more information, see <a href=\"Defining-middleware.html\">Environment-specific configuration</a></p>\n      </td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td>params</td>\n      <td>Object or Array</td>\n      <td>\n        <p>Parameters to pass to the middleware handler (constructor) function. Most middleware constructors take a single \"options\" object parameter; in that case the&nbsp;<code>params</code>&nbsp;value is that object.</p>\n        <p>To specify a project-relative path (for example, to a directory containing static assets), start the string with the prefix&nbsp;<code>$!</code>. Such values are interpreted as paths relative to the file&nbsp;<code>middleware.json</code>. &nbsp;</p>\n        <p>See examples below.</p>\n      </td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>methods</td>\n      <td>String[]</td>\n      <td>Specifies the HTTP methods, such as 'GET', 'POST', and 'PUT'. If not present, it will apply to all methods.</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>paths</td>\n      <td>String[]</td>\n      <td>Specifies the REST endpoint(s) that trigger the middleware. In addition to a literal string, route can be a path matching pattern, a regular expression, or an array including all these types. For more information, see the&nbsp;<a href=\"http://expressjs.com/4x/api.html#app.use\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">app.use (Express documentation)</a>.&nbsp;</td>\n      <td>Triggers on all routes</td>\n    </tr>\n    <tr>\n      <td>optional</td>\n      <td>Boolean</td>\n      <td>Specify whether the middleware is optional. Optional middleware do not throw, even if they are not installed or cannot be resolved in the file system.</td>\n      <td>N/A</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>采用单个”options”对象参数的典型中间件函数示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"compression\": &#123;</span><br><span class=\"line\">   \"params\": &#123;</span><br><span class=\"line\">     \"threshold\": 512</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要多个参数的中间件函数示例,其中使用参数数组:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"morgan\": &#123;</span><br><span class=\"line\">   \"params\": [\"dev\", &#123;</span><br><span class=\"line\">     \"buffer\": true</span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态中间件的条目,用于从项目根目录中的客户端目录提供内容:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//...</span><br><span class=\"line\">\"files\": &#123;</span><br><span class=\"line\">  \"loopback#static\": &#123;</span><br><span class=\"line\">    \"params\": \"$!../client\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//...</span><br></pre></td></tr></table></figure>\n\n<p>静态中间件的条目,用于从项目根目录中的多个目录提供内容:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//...</span><br><span class=\"line\">\"files\": &#123;</span><br><span class=\"line\">  \"loopback#static\": [&#123;</span><br><span class=\"line\">    \"name\": \"x\",</span><br><span class=\"line\">    \"paths\": [\"/x\"],</span><br><span class=\"line\">    \"params\": \"$!../client/x\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"y\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"paths\"</span>: [<span class=\"string\">\"/y\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"params\"</span>: <span class=\"string\">\"$!../client/y\"</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//...</span><br></pre></td></tr></table></figure>\n\n<p><strong>在值中使用变量</strong></p>\n<p>对于任何中间件配置属性,可以使用以下语法在值中指定变量:</p>\n<p><code>${_ var_}</code></p>\n<p>其中var是app对象的属性.这些属性包括:</p>\n<ul>\n<li>应用程序范围属性,如config.json中定义的属性.</li>\n<li>Express应用程序对象属性.</li>\n</ul>\n<p>For example, the following middleware.json configuration will load LoopBack’s built-in rest middleware (loopback.rest) during the routes phase at the path resolved by app.get(‘restApiRoot’), which defaults to /api.(<em>译注:暂时保留原文,翻译不好</em>)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"routes\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loopback#rest\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"paths\"</span>: [<span class=\"string\">\"$&#123;restApiRoot&#125;\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The following example loads hypothetical middleware named environmental during the routes phase at the return value of app.get(env), typically either /development or /production.(<em>译注:暂时保留原文,翻译不好</em>)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"routes\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"environmental\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"paths\"</span>: <span class=\"string\">\"$&#123;env&#125;\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加自定义阶段</strong></p>\n<p>除了middleware.json中的预定义阶段之外,您还可以通过添加新的顶级键来添加自己的自定义阶段.</p>\n<p>例如,下面是一个middleware.json文件,定义了”parse”之后和”routes”之前的一个新阶段”log”:</p>\n<p><strong>server/middleware.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"parse\": &#123;&#125;,</span><br><span class=\"line\">  \"log\": &#123; ... &#125;,</span><br><span class=\"line\">  \"routes\": &#123;&#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>环境特定配置</strong></p>\n<p>您可以通过<code>middleware.local.js,middleware.local.json和middleware.env_.js或middleware.env_.json</code>进一步自定义配置,其中env是NODE_ENV环境变量(通常是开发或生产)的值.</p>\n<h5 id=\"用javascript注册中间件\"><a href=\"#用javascript注册中间件\" class=\"headerlink\" title=\"用javascript注册中间件\"></a>用javascript注册中间件</h5><p>您可以在JavaScript代码中注册中间件:</p>\n<ul>\n<li>LoopBack API,您可以指定希望中间件执行的阶段.</li>\n<li>Express API,中间件在路由阶段的开始处执行.</li>\n</ul>\n<p><strong>使用LoopBack API</strong></p>\n<p>要使用LoopBack阶段API注册中间件,请使用以下应用程序方法:</p>\n<ul>\n<li>middleware()</li>\n<li>middlewareFromConfig()</li>\n<li>defineMiddlewarePhases()</li>\n</ul>\n<p>例如:</p>\n<p><strong>server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> morgan = <span class=\"built_in\">require</span>(<span class=\"string\">'morgan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> errorhandler = <span class=\"built_in\">require</span>(<span class=\"string\">'error-handler'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = loopback();</span><br><span class=\"line\"></span><br><span class=\"line\">app.middleware(<span class=\"string\">'routes:before'</span>, morgan(<span class=\"string\">'dev'</span>));</span><br><span class=\"line\">app.middleware(<span class=\"string\">'final'</span>, errorhandler());</span><br><span class=\"line\">app.middleware(<span class=\"string\">'routes'</span>, loopback.rest());</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用Express API</strong></p>\n<blockquote>\n<p> 重要: 当您使用Express API注册中间件时,它始终在路由阶段开始时执行.</p>\n</blockquote>\n<p>您可以通过调用app.use()为指定路由的所有HTTP请求指定中间件,在主应用程序脚本文件/server/server.js中使用Express定义中间件的”常规方式”.您还可以使用app.get()仅指定GET请求中间件,使用app.post()指定仅针对POST请求的中间件,等等.有关更多信息,请参阅Express.ini文档中的app.METHOD.</p>\n<p>这里是app.use()的一般签名:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use([route], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">[err,] req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>像往常一样,app是LoopBack应用程序对象: app = loopback（）.</p>\n<p>参数为:</p>\n<ul>\n<li>route,一个可选参数,指定中间件绑定到的URI路由或”装载路径”.当应用程序在此路由接收到HTTP请求时,它调用(或触发)处理函数.</li>\n<li>中间件处理函数(或只是”中间件函数”).请参阅定义新的中间件处理程序函数.</li>\n</ul>\n<p>例如：</p>\n<p><strong>server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> boot = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-boot'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">module</span>.exports = loopback();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Bootstrap the application, configure models, datasources and middleware.</span></span><br><span class=\"line\"><span class=\"comment\">// Sub-apps like REST API are mounted via boot scripts.</span></span><br><span class=\"line\">boot(app, __dirname);</span><br><span class=\"line\"><span class=\"comment\">// this middleware is invoked in the \"routes\" phase</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/status'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.json(&#123; <span class=\"attr\">running</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>指定路由</strong></p>\n<p><code>_route_</code>参数是一个字符串,指定将触发中间件的REST端点.如果不提供参数,那么中间件将在所有路由上触发.除了字符串,<code>_route_</code>可以是路径匹配模式,正则表达式或包含所有这些类型的数组.有关更多信息,请参阅app.use()的Express文档.</p>\n<p>例如，要为以”/greet”开头的所有端点注册中间件:</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/greet'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next </span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述中间件由以”/greet”开头的所有路由触发,因此”/greet/you”,”greet/me/and/you”将触发它.</p>\n<p>要为所有端点注册中间件:</p>\n<p><strong>server/server.js or server/boot/scripts.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Caveats(警告)</strong></p>\n<p>使用中间件时有一些事情要注意,主要是中间件声明顺序.使用”全部”路由时,请注意中间件注册的顺序.</p>\n<p>例如:</p>\n<p><strong>server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'hello from `get` route'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world from \"catch-all\" route'</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'hello from `post` route'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下,由于GET /中间件结束响应链,所以在发出get请求时,不会触发”catch-all”中间件.但是,当向/发出POST请求时,”catch-all”路由会被触发,因为它在post路由之前被声明.执行POST将显示来自”catch-all”路由和POST /路由的控制台消息.</p>\n<h5 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p><strong>静态中间件</strong></p>\n<p>静态中间件,用于从项目根目录中的client目录提供内容:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//...</span><br><span class=\"line\">\"files\": &#123;</span><br><span class=\"line\">  \"loopback#static\": &#123;</span><br><span class=\"line\">    \"params\": \"$!../client\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//...</span><br></pre></td></tr></table></figure>\n\n<p><strong>预处理中间件</strong></p>\n<p>使用预处理中间件为应用程序中的各种端点应用自定义逻辑.通过注册处理程序函数以在对特定端点或多个端点发出HTTP请求时执行某些操作来执行此操作.</p>\n<blockquote>\n<p> 重要：始终在路由之前的阶段注册预处理中间件,例如初始或解析.</p>\n</blockquote>\n<p>预处理中间件必须在处理程序函数的结尾调用next(),以将控制权传递给下一个中间件.如果你不这样做,你的应用程序将基本上”冻结”.从技术上讲,next()不必发生在函数的结尾(例如,它可能发生在if / else块),但是处理函数必须最终调用它.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tracker</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request tracking middleware triggered on %s'</span>, req.url);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = process.hrtime();</span><br><span class=\"line\">    res.once(<span class=\"string\">'finish'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> diff = process.hrtime(start);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ms = diff[<span class=\"number\">0</span>] * <span class=\"number\">1e3</span> + diff[<span class=\"number\">1</span>] * <span class=\"number\">1e-6</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'The request processing time is %d ms.'</span>, ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>此中间件通知服务器显示在所有应用程序路由上处理传入HTTP请求所花费的时间.</p>\n<p>你可以看到这个中间件在使用LoopBack入门的基本LoopBack应用程序(或任何标准的LoopBack应用程序):</p>\n<ol>\n<li><p>将上面的代码添加到server/middleware/tracker.js.</p>\n</li>\n<li><p>编辑(或创建)server/middleware.json并在”初始”阶段注册新的中间件.</p>\n<p><strong>server/middleware.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"initial\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">\"./middleware/tracker\"</span>: &#123;&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动应用程序:<code>node .</code></p>\n</li>\n<li><p>访问<code>http://localhost:3000</code>.</p>\n</li>\n</ol>\n<p>In the console, you will see (for example):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Request tracking middleware triggered on /.</span><br><span class=\"line\">The request processing time is 4.281957 ms. //your results will vary</span><br></pre></td></tr></table></figure>\n\n<p><strong>路由中间件</strong></p>\n<p>对于提供JSON的路由,最佳实践是创建一个新模型并将路由实现为远程方法.对于提供非JSON响应的路由,最佳实践是在server.js或引导脚本中为它们定义标准的”Express方式”.有关详细信息,请参阅路由和路由(Express文档).</p>\n<blockquote>\n<p> 注意: 如果在路由或路由上添加中间件,在阶段之后,它将不会在路由匹配后执行.相反,它将被忽略,因为路由已经匹配.</p>\n</blockquote>\n<p><strong>错误处理中间件</strong></p>\n<p>使用错误处理中间件处理请求错误.虽然您可以自由注册任何数量的错误处理中间件,但请务必在”final”阶段注册它们.LoopBack默认注册两个错误处理中间件:</p>\n<ul>\n<li><code>urlNotFound</code>中间件将所有到达中间件的请求转换为状态为404的错误对象,以使404错误响应与”通常”错误响应一致.</li>\n<li><code>errorhandler</code>中间件来自errorhandler模块,以前在Express v.3中作为<code>express.errorHandler</code>可用.有关自定义此错误处理程序的信息.请参阅自定义REST错误处理.</li>\n</ul>\n<p>自定义错误处理中间件的示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logError</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ERR'</span>, req.url, err); </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>要注册这个中间件:</p>\n<ol>\n<li><p>Add the code above to /server/middleware/log-error.js.</p>\n</li>\n<li><p>Edit /server/middleware.json and register the new middleware in the “final” phase: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"final\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"./middleware/log-error\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Start the application.</p>\n</li>\n<li><p>Load <a href=\"http://localhost:3000/url-does-not-exist\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/url-does-not-exist</a> in your browser.</p>\n</li>\n</ol>\n<hr>\n<h4 id=\"5.5\"> 5.5 使用当前上下文 </h4>\n\n<blockquote>\n<p> 警告: 不推荐使用当前上下文功能!loopback-context的当前实现基于已知存在许多问题的模块continuation-local-storage(例如,参见issue＃59).因此,loopback-context在许多情况下不工作,从LoopBack的问题跟踪器中报告的问题可以看出.参见loopback issue＃1495更新和一个替代解决方案.</p>\n</blockquote>\n<p>LoopBack应用程序有时需要访问上下文信息来实现业务逻辑,例如:</p>\n<ul>\n<li>访问当前登录的用户.</li>\n<li>访问HTTP请求(如URL和标头).</li>\n</ul>\n<p>调用LoopBack模型方法的典型请求通过具有异步回调链的多个层传递.并不总是可以通过方法参数传递所有信息.</p>\n<h5 id=\"Error-messages\"><a href=\"#Error-messages\" class=\"headerlink\" title=\"Error messages\"></a>Error messages</h5><p>LoopBack 3.0删除了当前上下文API.使用当前上下文的应用程序在收到其第一个HTTP请求时将打印以下错误消息:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unhandled error for request GET /api/Users:</span><br><span class=\"line\">Error: remoting.context option was removed in version 3.0.</span><br><span class=\"line\">For more information, see https://loopback.io/doc/en/lb3/Using-current-context.html</span><br><span class=\"line\">for more details.</span><br><span class=\"line\">    at restApiHandler (.../node_modules/loopback/server/middleware/rest.js:44:15)</span><br><span class=\"line\">    at Layer.handle [as handle_request] (.../node_modules/express/lib/router/layer.js:95:5)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>要删除此警告,请禁用由内置REST处理程序添加的上下文中间件.将server/config.json中的remoting.context属性设置为false,例如:</p>\n<p><strong>server/config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"remoting\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"context\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果您的应用程序依赖于loopback.getCurrentContext,请按照以下说明重新使用您的代码直接使用loopback-context.</p>\n<h5 id=\"安装loopback-context\"><a href=\"#安装loopback-context\" class=\"headerlink\" title=\"安装loopback-context\"></a>安装loopback-context</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save loopback-context</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置上下文传播\"><a href=\"#配置上下文传播\" class=\"headerlink\" title=\"配置上下文传播\"></a>配置上下文传播</h5><p>要设置LoopBack应用程序为每个传入的HTTP请求创建一个新的上下文,请在server/middleware.json中配置per-context中间件,如下所示:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"initial\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loopback-context#per-request\"</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 重要:默认情况下,HTTP req/res对象不会设置到当前上下文.您需要将enableHttpContext设置为true以启用req/res对象的自动填充.</p>\n</blockquote>\n<h5 id=\"使用当前上下文\"><a href=\"#使用当前上下文\" class=\"headerlink\" title=\"使用当前上下文\"></a>使用当前上下文</h5><p>一旦启用上下文传播,就可以使用LoopBackContext.getCurrentContext()访问当前上下文对象.上下文将在中间件(如果它在上下文中间件之后加载),远程钩子,模型钩子和自定义方法中可用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> LoopBackContext = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-context'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.myMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = LoopBackContext.getCurrentContext();</span><br><span class=\"line\">  <span class=\"comment\">// Get the current access token</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> accessToken = ctx &amp;&amp; ctx.get(<span class=\"string\">'accessToken'</span>);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// Set more information on current context</span></span><br><span class=\"line\">  ctx.set(<span class=\"string\">'foo'</span>, &#123; <span class=\"attr\">bar</span>: <span class=\"string\">'val'</span> &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在远程方法中使用当前授权用户\"><a href=\"#在远程方法中使用当前授权用户\" class=\"headerlink\" title=\"在远程方法中使用当前授权用户\"></a>在远程方法中使用当前授权用户</h5><p>在高级用例中,例如,当您想要添加自定义中间件时,必须在中间件链中的正确位置(在依赖于LoopBackContext.getCurrentContext的中间件之前)添加上下文中间件.</p>\n<blockquote>\n<p> 重要: LoopBackContext.perRequest()检测在相同请求上多次调用时的情况,并在后续运行中立即返回.</p>\n</blockquote>\n<p>这里的示例代码使用中间件函数将当前认证的用户放入上下文中,以便远程方法可以使用它:</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// -- Add your pre-processing middleware here --</span></span><br><span class=\"line\">app.use(LoopBackContext.perRequest());</span><br><span class=\"line\">app.use(loopback.token());</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCurrentUser</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!req.accessToken) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  app.models.UserModel.findById(req.accessToken.userId, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'No user with this access token was found.'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loopbackContext = LoopBackContext.getCurrentContext();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loopbackContext) &#123;</span><br><span class=\"line\">      loopbackContext.set(<span class=\"string\">'currentUser'</span>, user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// boot scripts mount components like REST API</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>/common/models/YourModel.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> LoopBackContext = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-context'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">YourModel</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">//remote method</span></span><br><span class=\"line\">  YourModel.someRemoteMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = LoopBackContext.getCurrentContext();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentUser = ctx &amp;&amp; ctx.get(<span class=\"string\">'currentUser'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'currentUser.username: '</span>, currentUser.username); <span class=\"comment\">// voila!</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    cb(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5.6\"> 5.6 事件 </h4>\n\n<p>LoopBack app对象是一个Node EventEmitter,因此具有app.emit()和app.on()方法.</p>\n<p>除了标准的Node事件,LoopBack应用程序和模型还能发起其他事件.</p>\n<h5 id=\"应用程序事件\"><a href=\"#应用程序事件\" class=\"headerlink\" title=\"应用程序事件\"></a>应用程序事件</h5><p>默认情况下,使用应用程序生成器创建的应用程序在运行引导脚本后启动时会发出”started”事件.</p>\n<h5 id=\"模型事件\"><a href=\"#模型事件\" class=\"headerlink\" title=\"模型事件\"></a>模型事件</h5><p>所有模型发出以下事件:</p>\n<p>默认情况下,基本的LoopBack模型对象具有属性和方法”mixed in”:</p>\n<ul>\n<li>包含对象 - 允许您加载多个对象的关系并优化请求数.</li>\n<li>可验证对象 - 提供验证方法.请参阅验证模型数据。</li>\n</ul>\n<p>当定义模型之间的关系时,RelationMixin对象对象也会混合到模型对象中.</p>\n<p><strong>附件</strong></p>\n<p><code>Model</code>已附加到<code>app</code>后发出.</p>\n<p><strong>dataSourceAttached</strong></p>\n<p>在<code>Model</code>已附加到<code>DataSource</code>之后发出.</p>\n<p><strong>set(设置)</strong></p>\n<p>设置模型属性时发出,参数:inst,模型实例,对象.</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.on(<span class=\"string\">'set'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">inst</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'model with id %s has been changed'</span>, inst.id);</span><br><span class=\"line\">  <span class=\"comment\">// =&gt; model with id 1 has been changed</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Arguments: data, an object.</p>\n<h5 id=\"PersistedModel事件\"><a href=\"#PersistedModel事件\" class=\"headerlink\" title=\"PersistedModel事件\"></a>PersistedModel事件</h5><p>PersistedModels还有一个更改的事件,监听模型更改.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPersistedModel.on(<span class=\"string\">'changed'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">// =&gt; the changed model</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"User模型事件\"><a href=\"#User模型事件\" class=\"headerlink\" title=\"User模型事件\"></a>User模型事件</h5><p><code>User</code>模型User.resetPassword()方法发出了”resetPasswordRequest”事件.</p>\n<hr>\n<h4 id=\"5.7\"> 5.7 使用promises </h4>\n\n<p>暂不翻译……</p>\n<p>–</p>\n<h4 id=\"6\"> 6 管理用户 </h4>\n\n<blockquote>\n<p> 概要: LoopBack的内置用户模型提供基本的用户管理功能.</p>\n</blockquote>\n<h5 id=\"概述-24\"><a href=\"#概述-24\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack的内置用户模型提供基本的用户管理功能,如:</p>\n<ul>\n<li>通过电子邮件注册和确认.</li>\n<li>登录和注销.</li>\n<li>创建访问令牌.</li>\n<li>重设密码.</li>\n</ul>\n<blockquote>\n<p> 重要: 您必须创建自己的自定义模型(命名为”客户”或”客户端”),它扩展了内置用户模型,而不是直接使用内置用户模型.内置的用户模型提供了大量常用的功能,您可以通过您的自定义模型使用.此外,LoopBack在单个应用程序中不支持基于用户模型的多个模型.也就是说,在单个应用程序中,不能有多个模型从内置User模型派生.</p>\n</blockquote>\n<h5 id=\"创建和验证-授权-用户\"><a href=\"#创建和验证-授权-用户\" class=\"headerlink\" title=\"创建和验证(授权)用户\"></a>创建和验证(授权)用户</h5><p>创建和验证用户的基本过程是:</p>\n<ol>\n<li>使用User.create()方法注册一个新用户,继承自通用的PersistedModel对象.有关详细信息,请参阅注册用户.</li>\n<li>通过调用User.login()登录用户以获取访问令牌.有关详细信息,请参阅登录用户.</li>\n<li>使用访问令牌进行后续的API调用.在HTTP头中提供访问令牌或作为REST API调用的查询参数,如使用访问令牌进行身份验证请求中所示.</li>\n</ol>\n<p><strong>性能提示</strong></p>\n<p>要在登录和创建用户期间提高性能,请尝试本地化安装bcrypt.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save bcrypt</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"理解内置User模型\"><a href=\"#理解内置User模型\" class=\"headerlink\" title=\"理解内置User模型\"></a>理解内置User模型</h5><p>默认情况下,LoopBack应用程序具有由user.json定义的内置用户模型(此文件是LoopBack框架的一部分,不要修改它,而是遵循扩展内置模型中的过程).</p>\n<blockquote>\n<p> 提示:有关LoopBack用户模型如何执行身份验证的基本介绍，请参阅用户模型身份验证简介.</p>\n</blockquote>\n<p><strong>默认访问控制</strong></p>\n<p>内置的User模型有如下的ACL:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"User\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"acls\": [&#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"DENY\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"create\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$owner\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"deleteById\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"login\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"logout\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$owner\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"findById\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$owner\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"updateAttributes\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"confirm\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"resetPassword\",</span><br><span class=\"line\">      \"accessType\": \"EXECUTE\"</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    //...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述ACL拒绝所有操作,然后选择性地允许:</p>\n<ul>\n<li>任何人都创建一个新用户(用户实例).</li>\n<li>任何人登录,注销,确认其身份,并重置自己的密码.</li>\n<li>用户对自己的用户记录(实例)执行deleteById,findById和updateAttributes.</li>\n</ul>\n<blockquote>\n<p> 重要提示: 无法使用ACL生成器直接修改内置模型(例如User模型).但是,您可以创建扩展内置用户模型的自定义模型,然后使用ACL生成器定义添加到默认用户模型的访问控制.例如,您可以创建扩展内置用户模型的客户或客户端模型,然后使用该工具修改该模型的ACL.由于模型不从其基本模型继承ACL,因此必须为新的自定义模型定义ACL.</p>\n</blockquote>\n<p><strong>User领域</strong></p>\n<p>see <a href=\"http://loopback.io/doc/en/lb3/Partitioning-users-with-realms.html\" target=\"_blank\" rel=\"noopener\">Partitioning users with realms</a>.</p>\n<hr>\n<h4 id=\"6.1\"> 6.1 注册用户 </h4>\n\n<blockquote>\n<p> 概要: 内置用户模型提供了注册新用户并确认其电子邮件地址的方法.</p>\n</blockquote>\n<p>LoopBack用户模型提供了注册新用户和确认其电子邮件地址的方法.您还可以使用loopback-component-passport模块将登录信息与Facebook,Google和其他第三方提供商集成.</p>\n<h5 id=\"使用LoopBack-User模型注册用户\"><a href=\"#使用LoopBack-User模型注册用户\" class=\"headerlink\" title=\"使用LoopBack User模型注册用户\"></a>使用LoopBack User模型注册用户</h5><p><strong>创建新用户</strong></p>\n<p>通过添加模型实例创建用户(注册用户),与任何其他模型相同,电子邮件和密码是唯一必需的属性.</p>\n<p><strong>/boot/server/my-boot-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> User = app.models.User;</span><br><span class=\"line\">  User.create(&#123;<span class=\"attr\">email</span>: <span class=\"string\">'foo@bar.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'bar'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, userInstance</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(userInstance);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>通过REST,使用<code>POST / users</code>端点来创建新的用户实例,例如:</p>\n<p><strong>REST</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -H &quot;Content-Type:application/json&quot;         \\</span><br><span class=\"line\">-d &apos;&#123;&quot;email&quot;: &quot;me@domain.com&quot;, &quot;password&quot;: &quot;secret&quot;&#125;&apos;   \\</span><br><span class=\"line\">http://localhost:3000/api/users</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加其他注册约束</strong></p>\n<p>通常,您可能希望在注册过程中添加方法,例如查看给定的用户名是否可用,或者电子邮件地址是否已注册.一个好的方法是在User对象上添加方法作为beforeRemote钩子.有关详细信息,请参阅远程钩子.</p>\n<p><strong>验证邮件地址</strong></p>\n<p>通常,应用程序将要求用户在能够登录之前验证其电子邮件地址.这将向用户发送一封电子邮件,其中包含用于验证其地址的链接.一旦用户跟随链接,他们将被重定向到web根(“/“),并将能够正常登录.</p>\n<p>要强制实施此约束,请将emailVerificationRequired用户模型属性设置为true,在server/model-config.json中.</p>\n<p><strong>server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"user\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"db\",</span><br><span class=\"line\">    \"public\": true,</span><br><span class=\"line\">    \"options\": &#123;</span><br><span class=\"line\">      \"emailVerificationRequired\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>在REST上,使用GET /users/confirm端点来验证用户的电子邮件地址.有关详细信息,请参阅用户REST API.</p>\n<p>此示例在调用create()方法后执行的User模型上创建remote钩子.</p>\n<blockquote>\n<p> 重要: 在使用下面的示例之前,您必须设置User模型以及Mail数据源.</p>\n</blockquote>\n<p><strong>/common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../../server/config.json'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//send verification email after registration</span></span><br><span class=\"line\">  user.afterRemote(<span class=\"string\">'create'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, userInstance, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; user.afterRemote triggered'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">'email'</span>,</span><br><span class=\"line\">      to: userInstance.email,</span><br><span class=\"line\">      <span class=\"keyword\">from</span>: <span class=\"string\">'noreply@loopback.com'</span>,</span><br><span class=\"line\">      subject: <span class=\"string\">'Thanks for registering.'</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">'../../server/views/verify.ejs'</span>),</span><br><span class=\"line\">      redirect: <span class=\"string\">'/verified'</span>,</span><br><span class=\"line\">      user: user</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    userInstance.verify(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, response, next</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; verification email sent:'</span>, response);</span><br><span class=\"line\"></span><br><span class=\"line\">      context.res.render(<span class=\"string\">'response'</span>, &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Signed up successfully'</span>,</span><br><span class=\"line\">        content: <span class=\"string\">'Please check your email and click on the verification link '</span> -</span><br><span class=\"line\">            <span class=\"string\">'before logging in.'</span>,</span><br><span class=\"line\">        redirectTo: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        redirectToLinkText: <span class=\"string\">'Log in'</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过第三方系统注册用户\"><a href=\"#通过第三方系统注册用户\" class=\"headerlink\" title=\"通过第三方系统注册用户\"></a>通过第三方系统注册用户</h5><p>使用LoopBack Passport组件(loopback-component-passport)使用户能够使用以下来源的现有凭据注册和登录应用程序:</p>\n<ul>\n<li>Facebook</li>\n<li>Google</li>\n<li>Twitter</li>\n</ul>\n<p>有关详细信息,请参阅<a href=\"http://loopback.io/doc/en/lb3/Third-party-login-using-Passport.html\" target=\"_blank\" rel=\"noopener\">使用Passport进行第三方登录</a></p>\n<hr>\n<h4 id=\"6.2\"> 6.2 用户登录 </h4>\n\n<blockquote>\n<p> 概要:内置用户模型提供登录用户,注销用户和重置用户密码的方法.</p>\n</blockquote>\n<h5 id=\"使用LoopBack-User模型\"><a href=\"#使用LoopBack-User模型\" class=\"headerlink\" title=\"使用LoopBack User模型\"></a>使用LoopBack User模型</h5><p><strong>登录</strong></p>\n<p>通过调用User.login()方法登录(验证)用户,并提供包含密码和电子邮件或用户名属性作为第一个参数的对象.该方法返回访问令牌.</p>\n<p>此示例在引导脚本中创建一个路由以处理登录请求:</p>\n<p><strong>/server/boot/routes.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.post(<span class=\"string\">'/login'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  User.login(&#123;</span><br><span class=\"line\">    email: req.body.email,</span><br><span class=\"line\">    password: req.body.password</span><br><span class=\"line\">  &#125;, <span class=\"string\">'user'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, token</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      res.render(<span class=\"string\">'response'</span>, &#123; <span class=\"comment\">//render view named 'response.ejs'</span></span><br><span class=\"line\">        title: <span class=\"string\">'Login failed'</span>,</span><br><span class=\"line\">        content: err,</span><br><span class=\"line\">        redirectTo: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        redirectToLinkText: <span class=\"string\">'Try again'</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.render(<span class=\"string\">'home'</span>, &#123; <span class=\"comment\">//login user and render 'home' view</span></span><br><span class=\"line\">      email: req.body.email,</span><br><span class=\"line\">      accessToken: token.id</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 重要: User.login()有一个可选的第二个参数,它是一个字符串或一个字符串数组.为此参数传入”user”以包括用户信息.对于REST apis,使用?include = user.</p>\n</blockquote>\n<p>有关完整的示例,请参阅loopback-example-user-management中的routes.js.</p>\n<p>您还可以通过提供具有以秒为单位的值的ttl属性来指定访问令牌的有效期.</p>\n<p>例如:</p>\n<p><strong>Boot script</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> TWO_WEEKS = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\">User.login(&#123;</span><br><span class=\"line\">  email: <span class=\"string\">'me@domain.com'</span>,           <span class=\"comment\">// must provide email or \"username\"</span></span><br><span class=\"line\">  password: <span class=\"string\">'secret'</span>,               <span class=\"comment\">// required by default</span></span><br><span class=\"line\">  ttl: TWO_WEEKS                    <span class=\"comment\">// keep the AccessToken alive for at least two weeks</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, accessToken</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accessToken.id);      <span class=\"comment\">// =&gt; GOkZRwg... the access token</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accessToken.ttl);     <span class=\"comment\">// =&gt; 1209600 time to live</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accessToken.created); <span class=\"comment\">// =&gt; 2013-12-20T21:10:20.377Z</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accessToken.userId);  <span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果登录尝试不成功,将按以下格式返回错误.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \"status\": 401,             // or 400 if the credentails object is invalid</span><br><span class=\"line\">  \"message\": \"login failed\"  // could also be \"realm is required\" or \"username or email is required\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过REST,使用POST /users/login端点.</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -H <span class=\"string\">\"Content-Type:application/json\"</span> \\</span><br><span class=\"line\">-d <span class=\"string\">'&#123;\"email\": \"me@domain.com\", \"password\": \"secret\", \"ttl\": 1209600000&#125;'</span> \\</span><br><span class=\"line\">http://localhost:3000/api/users/login</span><br></pre></td></tr></table></figure>\n\n<p>返回值是具有id属性的JSON对象,该属性是在后续请求中使用的访问令牌.</p>\n<p>例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"GOkZRwgZ61q0XXVxvxlB8TS1D6lrG7Vb9V8YwRDfy3YGAN7TM7EnxWHqdbIZfheZ\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ttl\"</span>: <span class=\"number\">1209600</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"created\"</span>: <span class=\"string\">\"2013-12-20T21:10:20.377Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"userId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>登出</strong></p>\n<p>使用User.logout()方法登出用户,提供用户的访问令牌作为参数.</p>\n<p>在下面的示例中,创建了处理登出请求的路由:</p>\n<p><strong>/server/boot/routes.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"comment\">//log a user out</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/logout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!req.accessToken) <span class=\"keyword\">return</span> res.sendStatus(<span class=\"number\">401</span>); <span class=\"comment\">//return 401:unauthorized if accessToken is not present</span></span><br><span class=\"line\">  User.logout(req.accessToken.id, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);</span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/'</span>); <span class=\"comment\">//on successful logout, redirect</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>通过REST,使用POST /users/logout端点,再次在POST有效内容的sid属性中提供用户的访问令牌.</p>\n<p>要通过REST API销毁访问令牌，请使用POST /users/logout端点.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK</span><br><span class=\"line\">VERB=POST <span class=\"comment\"># any verb is allowed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authorization Header</span></span><br><span class=\"line\">curl -X VERB -H <span class=\"string\">\"Authorization: <span class=\"variable\">$ACCESS_TOKEN</span>\"</span> \\</span><br><span class=\"line\">http://localhost:3000/api/users/<span class=\"built_in\">logout</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Query Parameter</span></span><br><span class=\"line\">curl -X VERB http://localhost:3000/api/users/<span class=\"built_in\">logout</span>?access_token=<span class=\"variable\">$ACCESS_TOKEN</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"重置用户密码\"><a href=\"#重置用户密码\" class=\"headerlink\" title=\"重置用户密码\"></a>重置用户密码</h5><p>使用User.resetPassword()方法重置用户的密码.此方法为临时登录创建一个短期访问令牌,允许用户在忘记时更改密码.</p>\n<p>例如,在下面的routes.js(在loopback-example-user-management中),创建一个路由: /request-password-reset来处理密码重置请求:</p>\n<p><strong>/server/boot/routes.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//send an email with instructions to reset an existing user's password</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/request-password-reset'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  User.resetPassword(&#123;</span><br><span class=\"line\">    email: req.body.email</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.status(<span class=\"number\">401</span>).send(err);</span><br><span class=\"line\">    res.render(<span class=\"string\">'response'</span>, &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Password reset requested'</span>,</span><br><span class=\"line\">      content: <span class=\"string\">'Check your email for further instructions'</span>,</span><br><span class=\"line\">      redirectTo: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">      redirectToLinkText: <span class=\"string\">'Log in'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>您必须处理”resetPasswordRequest”事件,才能将包含由resertPassword()方法生成的短期访问令牌的重置电子邮件发送给正确的用户(请参见下面的示例):</p>\n<blockquote>\n<p> 重要: 下面的示例假设您已经设置了User模型和Mail数据源.</p>\n</blockquote>\n<p><strong>/common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"comment\">//send password reset link when password reset requested</span></span><br><span class=\"line\">user.on(<span class=\"string\">'resetPasswordRequest'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">info</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"string\">'http://'</span> - config.host - <span class=\"string\">':'</span> - config.port - <span class=\"string\">'/reset-password'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> html = <span class=\"string\">'Click &lt;a href=\"'</span> - url - <span class=\"string\">'?access_token='</span> -</span><br><span class=\"line\">      info.accessToken.id - <span class=\"string\">'\"&gt;here&lt;/a&gt; to reset your password'</span>;</span><br><span class=\"line\">  <span class=\"comment\">//'here' in above html is linked to : 'http://&lt;host:port&gt;/reset-password?access_token=&lt;short-lived/temporary access token&gt;'</span></span><br><span class=\"line\">  user.app.models.Email.send(&#123;</span><br><span class=\"line\">    to: info.email,</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: info.email,</span><br><span class=\"line\">    subject: <span class=\"string\">'Password reset'</span>,</span><br><span class=\"line\">    html: html</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; error sending password reset email'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; sending password reset email to:'</span>, info.email);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>并且当用户按照链接重置密码时,临时访问令牌用于使用updateAttribute()方法查找用户和更新密码,如下所示:</p>\n<p><strong>/server/boot/routes.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">User.findById(req.accessToken.userId, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.sendStatus(<span class=\"number\">404</span>);</span><br><span class=\"line\">   user.updateAttribute(<span class=\"string\">'password'</span>, req.body.password, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.sendStatus(<span class=\"number\">404</span>);</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; password reset processed successfully'</span>);</span><br><span class=\"line\">     res.render(<span class=\"string\">'response'</span>, &#123;</span><br><span class=\"line\">       title: <span class=\"string\">'Password reset success'</span>,</span><br><span class=\"line\">       content: <span class=\"string\">'Your password has been reset successfully'</span>,</span><br><span class=\"line\">       redirectTo: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">       redirectToLinkText: <span class=\"string\">'Log in'</span></span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>了解详细的例子,请看loopback-example-user-management中的routes.js.</p>\n<h5 id=\"通过第三方系统账号登录\"><a href=\"#通过第三方系统账号登录\" class=\"headerlink\" title=\"通过第三方系统账号登录\"></a>通过第三方系统账号登录</h5><p>您可以与支持OAuth的第三方系统(例如Google,Facebook或Twitter)集成,而不必使用LoopBack的用户系统.</p>\n<p>了解更多信息,请看 <a href=\"http://loopback.io/doc/en/lb3/Third-party-login-using-Passport.html\" target=\"_blank\" rel=\"noopener\">Third-party login using Passport</a>.</p>\n<hr>\n<h4 id=\"6.3\"> 6.3 使用领域来分区用户 </h4>\n\n<p>默认情况下,LoopBack用户模型管理全局命名空间中的所有用户.它不隔离不同的应用程序.在某些情况下,您可能需要将用户划分到多个命名空间,以使不同的应用程序具有单独的用户.LoopBack使用领域来支持:</p>\n<ul>\n<li>属于单个全局域(或无域)的用户和应用程序.</li>\n<li>将用户和应用程序分布到多个领域.用户或应用程序只能属于一个领域.每个领域可以有很多用户和许多应用程序.</li>\n<li>每个应用程序是唯一的领域,每个用户属于应用程序(通过领域).</li>\n</ul>\n<p>每个应用程序或用户实例在领域中仍具有唯一的ID.当应用程序/用户注册时,它可以分配到一个领域.<code>User.login()</code>函数:</p>\n<ul>\n<li>Honors the realm property from the user credential(<em>译注:保留原文</em>).</li>\n<li>允许从用户名/电子邮件的前缀中提取领域.</li>\n</ul>\n<p>User模型中的两个设置控制领域：</p>\n<ul>\n<li>realmRequired(Boolean): 默认值为false.</li>\n<li>realmDelimiter(string): 如果配置,电子邮件或用户名可以前缀为<realm><realmdelimiter>&lt;username或email&gt;,例如myRealm: john或myRealm:<a href=\"mailto:john@sample.com\" target=\"_blank\" rel=\"noopener\">john@sample.com</a>.如果不存在,将不检查用户名或电子邮件的前缀.</realmdelimiter></realm></li>\n</ul>\n<p>例如:</p>\n<p><strong>server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"User\": &#123;</span><br><span class=\"line\">  \"dataSource\": \"db\",</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"realmRequired\": true,</span><br><span class=\"line\">    \"realmDelimiter\": \":\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>启用领域时,必须在调用User.create()时提供领域属性,例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.create(&#123;</span><br><span class=\"line\">  realm: <span class=\"string\">'myRealm'</span>,</span><br><span class=\"line\">  username: <span class=\"string\">'john'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'john@sample.com'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'my-password'</span></span><br><span class=\"line\">&#125;, callback);</span><br></pre></td></tr></table></figure>\n\n<p>要登录领域内的用户,凭证还应包括领域属性.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.login(&#123;</span><br><span class=\"line\">  realm: <span class=\"string\">'myRealm'</span>,</span><br><span class=\"line\">  username: <span class=\"string\">'john'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'my-password'</span></span><br><span class=\"line\">&#125;, callback);</span><br></pre></td></tr></table></figure>\n\n<p>如果配置了realmDelimiter(例如,”:”),则登录名允许将领域作为前缀传递给用户名或电子邮件.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.login(&#123;</span><br><span class=\"line\">  username: <span class=\"string\">'myRealm:john'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'my-password'</span></span><br><span class=\"line\">&#125;, callback);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7\"> 7. 身份验证,授权和权限 </h4>\n\n<blockquote>\n<p> 概要:LoopBack包括内置的基于令牌的身份验证.</p>\n</blockquote>\n<p>大多数应用程序需要控制谁可以访问数据或调用服务.通常,这涉及要求用户登录以访问受保护的数据,或者需要用于其他应用的授权令牌以访问受保护的数据.</p>\n<p>LoopBack应用程序通过模型访问数据,因此控制对数据的访问意味着对模型施加限制.也就是说,指定谁或什么可以读/写数据或在模型上执行方法.</p>\n<p>当您使用LoopBack应用程序生成器(application generator)创建应用程序时,将自动启用访问控制,除非您选择”empty-server”应用程序类型.要为”empty-server”应用程序启用访问控制,必须添加调用enableAuth()的引导脚本.例如,在server/boot/authentication.js中:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enableAuthentication</span>(<span class=\"params\">server</span>) </span>&#123;</span><br><span class=\"line\">  server.enableAuth();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"访问控制概念\"><a href=\"#访问控制概念\" class=\"headerlink\" title=\"访问控制概念\"></a>访问控制概念</h5><p>LoopBack的访问控制系统围绕几个核心概念构建,如下表所示.</p>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Description</th>\n<th>Responsibility</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Principal</td>\n<td>An entity that can be identified or authenticated.</td>\n<td>Represents identities of a request to protected resources.</td>\n<td>A user <br> An application <br> A role (please note a role is also a principal)</td>\n</tr>\n<tr>\n<td>Role</td>\n<td>A group of principals with the same permissions.</td>\n<td>Organizes principals into groups so they can be used.</td>\n<td><strong>Dynamic role</strong>: <br><code>$everyone</code> (for all users) <br><code>$unauthenticated</code> (unauthenticated users) <br> <code>$owner</code> (the principal is owner of the model instance), which can be:<br>&nbsp;&nbsp;&#9702; A simple property called <code>userId</code><br>&nbsp;&nbsp;&#9702; A simple property called <code>owner</code><br>&nbsp;&nbsp;&#9702; A relation to a model that extends User.  <br><br> <strong>Static role</strong>: admin (a defined role for administrators)</td>\n</tr>\n<tr>\n<td>RoleMapping</td>\n<td>Assign principals to roles</td>\n<td>Statically assigns principals to roles.</td>\n<td>Assign user with id 1 to role 1 <br> Assign role ‘admin’ to role 1</td>\n</tr>\n<tr>\n<td>ACL</td>\n<td>Access control list</td>\n<td>Controls if a principal can perform a certain operation against a model.</td>\n<td>Deny everyone to access the project model.<br> Allow ‘admin’ role to execute <code>find()</code> method on the project model.</td>\n</tr>\n</tbody></table>\n<h5 id=\"一般过程\"><a href=\"#一般过程\" class=\"headerlink\" title=\"一般过程\"></a>一般过程</h5><p>实现应用程序访问控制的一般过程是:</p>\n<ol>\n<li><p><strong>Specify user roles</strong>(指定用户角色):定义应用程序需要的用户角色.例如,您可以为匿名用户,授权用户和管理员创建角色.</p>\n</li>\n<li><p><strong>Define access for each role and model method</strong>(为每个角色和模型方法定义访问权限):例如,您可以允许匿名用户读取银行列表,但不允许他们执行其他操作.LoopBack模型具有一组内置方法,每个方法映射到READ或WRITE访问类型.实质上,此步骤等于指定是否允许每个角色和每个模型被访问,如下面的示例所示.</p>\n</li>\n<li><p><strong>Implement authentication</strong>(实现身份验证):在应用程序中,添加创建(注册)新用户,登录用户(获取和使用身份验证令牌)和注销用户的代码.</p>\n</li>\n</ol>\n<h5 id=\"公开和隐藏模型-方法和端点\"><a href=\"#公开和隐藏模型-方法和端点\" class=\"headerlink\" title=\"公开和隐藏模型,方法和端点\"></a>公开和隐藏模型,方法和端点</h5><p>要通过REST公开模型,请在/server/model-config.json中将public属性设置为true:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  \"Role\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"db\",</span><br><span class=\"line\">    \"public\": false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏method和REST endpoints</strong></p>\n<p>如果不想公开某些创建,检索,更新和删除操作.则可以通过在模型上调用disableRemoteMethod()来轻松隐藏它们.例如,按照前面的例子,按照约定,自定义模型代码将放在文件common/models/location.js中.您将添加以下行以”隐藏”预定义的远程方法之一:</p>\n<p><strong>common/models/location.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isStatic = <span class=\"literal\">true</span>;</span><br><span class=\"line\">MyModel.disableRemoteMethod(<span class=\"string\">'deleteById'</span>, isStatic);</span><br></pre></td></tr></table></figure>\n\n<p>现在,deleteById()操作和相应的REST端点将不会公开.</p>\n<p>对于原型对象的方法,如updateAttributes():</p>\n<p><strong>common/models/location.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isStatic = <span class=\"literal\">false</span>;</span><br><span class=\"line\">MyModel.disableRemoteMethod(<span class=\"string\">'updateAttributes'</span>, isStatic);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 重要:确保在您自己的自定义模型上调用disableRemoteMethod(),而不是一个内置模型.在下面的示例中,例如,调用是MyUser.disableRemoteMethod(),而不是User.disableRemoteMethod().</p>\n</blockquote>\n<p>这里有一个隐藏<code>MyUser</code>模型的所有方法的例子,除了<code>login</code>和<code>logout</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"create\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"upsert\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"updateAll\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"updateAttributes\"</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"find\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"findById\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"findOne\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"deleteById\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"confirm\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"count\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"exists\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"resetPassword\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__count__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__create__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__delete__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__destroyById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__findById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__get__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__updateById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Read-Only endpoints例子</strong></p>\n<p>您可能希望仅在模型上公开只读操作,隐藏所有POST,PUT,DELETE动词.</p>\n<p><strong>common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'create'</span>, <span class=\"literal\">true</span>);\t\t<span class=\"comment\">// Removes (POST) /products</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'upsert'</span>, <span class=\"literal\">true</span>);\t\t<span class=\"comment\">// Removes (PUT) /products</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'deleteById'</span>, <span class=\"literal\">true</span>);\t<span class=\"comment\">// Removes (DELETE) /products/:id</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">\"updateAll\"</span>, <span class=\"literal\">true</span>);\t\t<span class=\"comment\">// Removes (POST) /products/update</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">\"updateAttributes\"</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// Removes (PUT) /products/:id</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'createChangeStream'</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// removes (GET|POST) /products/change-stream</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏相关模型的endpoints</strong></p>\n<p>要为相关模型方法禁用REST端点,请使用disableRemoteMethod().</p>\n<p>例如,如果有post和tag模型,其中post有多个标签,请将以下代码添加到/common/models/post.js以禁用相关模型和相应REST端点的远程方法:</p>\n<p><strong>common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Post</span>) </span>&#123;</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__get__tags'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__create__tags'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__destroyById__accessTokens'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// DELETE</span></span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__updateById__accessTokens'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// PUT</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.1\"> 7.1 用户模型认证简介 </h4>\n\n<p><strong>相关文章:</strong></p>\n<p>LoopBack为认证和授权提供了一个全功能的解决方案.按照此处的步骤,使用StrongLoop API Explorer查看内置用户模型的工作原理概述.</p>\n<p>首先,如果你没有这样做,请按照LoopBack入门中的第一步,下载loopback-getting-started应用程序并运行它.</p>\n<p>打开<a href=\"http://localhost:3000/explorer,查看StrongLoop\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/explorer,查看StrongLoop</a> API Explorer.然后:</p>\n<h5 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h5><p>点击<code>POST /Users</code>创建新用户</p>\n<p><img src=\"img/cuser.jpg\" alt=\"cuser\"></p>\n<p>在<code>Parameters</code>下,单击<code>data</code>字段并输入具有电子邮件和密码属性的JSON对象,例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"foo@bar.com\"</span>,</span><br><span class=\"line\">   <span class=\"attr\">\"password\"</span>: <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>基本用户模型验证电子邮件是否具有电子邮件地址的标准格式,并且密码不为空.</p>\n<p><img src=\"img/cuserdata.jpg\" alt=\"cuserdata\"></p>\n<p>点击<code>Try it Out!</code>提交. </p>\n<p>你会收到值为200的响应代码,并且在Response Body中会显示新建用户的邮件地址和主键id.</p>\n<p><img src=\"img/cuserres.jpg\" alt=\"cuserres\"></p>\n<h5 id=\"使用新用户登录\"><a href=\"#使用新用户登录\" class=\"headerlink\" title=\"使用新用户登录\"></a>使用新用户登录</h5><p>现在点击<code>POST /Users/login</code>登录.将包含您之前输入的电子邮件和密码的相同JSON复制并传递到凭据字段,然后点击<code>Try it Out!</code></p>\n<p><img src=\"img/loginuser.jpg\" alt=\"loginuser\"></p>\n<p>现在,响应将包含用户的授权令牌:</p>\n<p><img src=\"img/logintoken.jpg\" alt=\"logintoken\"></p>\n<h5 id=\"设置access-token\"><a href=\"#设置access-token\" class=\"headerlink\" title=\"设置access token\"></a>设置access token</h5><p>选择并复制响应正文中id属性的值,并将其粘贴到API Explorer窗口右上角的accessToken字段中:</p>\n<p><img src=\"img/settoken.jpg\" alt=\"settoken\"></p>\n<p>执行此操作后,消息将更改为令牌集.此时,您创建的用户现在已登录并向应用程序进行身份验证.</p>\n<p>现在可以执行某些REST操作,例如:单击GET /Users/{id},在id字段中输入1,然后单击Try It Out！ 以获取您自己的用户记录的用户模型实例数据:</p>\n<blockquote>\n<p> 注意:某些操作受到限制,即使您已通过身份验证.例如,您无法查看其他用户的记录.</p>\n</blockquote>\n<hr>\n<h4 id=\"7.2\"> 7.2 控制数据访问 </h4>\n\n<blockquote>\n<p> 概要: LoopBack使用访问控制列表(ACL)来控制谁可以访问什么数据.</p>\n</blockquote>\n<h5 id=\"启用身份验证\"><a href=\"#启用身份验证\" class=\"headerlink\" title=\"启用身份验证\"></a>启用身份验证</h5><p>当您使用LoopBack应用程序生成器创建应用程序时,将自动启用访问控制,除非您选择”empty-server”应用程序类型.要为”empty-server”应用程序启用访问控制,必须添加调用enableAuth()的引导脚本.例如,在server/boot/authentication.js中:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enableAuthentication</span>(<span class=\"params\">server</span>) </span>&#123;</span><br><span class=\"line\">  server.enableAuth();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"指定用户角色\"><a href=\"#指定用户角色\" class=\"headerlink\" title=\"指定用户角色\"></a>指定用户角色</h5><p>指定用户角色的第一步是确定应用程序需要的角色.大多数应用程序将有未经身份验证或匿名的用户(未登录的用户)和经过身份验证的用户(已登录的用户).此外,许多应用程序将具有提供广泛访问权限的管理角色.并且应用可以具有任何数量的附加用户角色.</p>\n<p>例如,startkicker应用程序由四种类型的用户组成:来宾,所有者,团队成员和管理员.每个用户类型都可以根据其角色和我们定义的访问控制列表(ACL)访问应用程序的各个部分.</p>\n<p><strong>用户访问类型</strong></p>\n<p>LoopBack提供了一个内置的User模型,具有相应的REST API,继承了PersistedModel对象的所有”CRUD”方法.LoopBack用户模型的每个CRUD方法映射到READ或WRITE访问类型,如下所示:</p>\n<p>READ:</p>\n<ul>\n<li>exists - 确定用户是否存在的布尔方法.</li>\n<li>findById - 按ID查找用户.</li>\n<li>find - 查找符合指定条件的所有用户.</li>\n<li>findOne - 查找与指定条件匹配的单个用户实例.</li>\n<li>count - 返回与指定条件匹配的用户数.</li>\n</ul>\n<p>WRITE:</p>\n<ul>\n<li>create - 创建新用户.</li>\n<li>updateAttributes(update) - 更新用户记录.</li>\n<li>upsert(更新或插入) - 更新或插入新的用户记录.</li>\n<li>destroyById(相当于removeById或deleteById) - 删除具有指定ID的用户.</li>\n</ul>\n<p>对于其他方法,默认访问类型为EXECUTE.例如,自定义方法映射到EXECUTE访问类型.</p>\n<h5 id=\"定义访问控制\"><a href=\"#定义访问控制\" class=\"headerlink\" title=\"定义访问控制\"></a>定义访问控制</h5><p>使用ACL生成器为应用程序设置访问控制.在这之前,你必须清楚地知道如何为你的应用程序配置访问控制.</p>\n<p>例如,以下是loopback-example-access-control如何设置用户及其权限:</p>\n<ul>\n<li><p>Guest - Guest</p>\n<ul>\n<li>Role = $ everyone，$ unauthenticated</li>\n<li>有权访问”List projects”功能,但没有其他</li>\n</ul>\n</li>\n<li><p>John - 项目所有者</p>\n<ul>\n<li>Role = $ everyone，$ authenticated，teamMember，$ owner</li>\n<li>可以访问除”View all projects”之外的所有功能</li>\n</ul>\n</li>\n<li><p>Jane - 项目团队成员</p>\n<ul>\n<li>Role = $ everyone，$ authenticated，teamMember</li>\n<li>可以访问所有功能,除了“View all projects”和“Withdraw”</li>\n</ul>\n</li>\n<li><p>Bob - 管理员</p>\n<ul>\n<li>Role = $ everyone，$ authenticated，admin</li>\n<li>可以访问除”Withdraw”之外的所有功能</li>\n</ul>\n</li>\n</ul>\n<p>一旦你创建了这种规范,你可以很容易地构造命令来设置访问控制,如下所示.</p>\n<h5 id=\"使用ACL生成器定义访问控制\"><a href=\"#使用ACL生成器定义访问控制\" class=\"headerlink\" title=\"使用ACL生成器定义访问控制\"></a>使用ACL生成器定义访问控制</h5><p>为应用程序定义访问控制的最简单方法是使用ACL生成器.这使您能够在运行时之前创建静态定义.生成器会提示您输入所有必要的信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:acl</span><br></pre></td></tr></table></figure>\n\n<p><strong>例子</strong></p>\n<p>例如,以下是为loopback-example-access-control示例定义ACL条目的提示的答案.</p>\n<p>Deny access to all project REST endpoints</p>\n<ul>\n<li>Select the model to apply the ACL entry to: All existing models</li>\n<li>Select the ACL scope: All methods and properties</li>\n<li>Select the access type: All (match all types)</li>\n<li>Select the role: All users</li>\n<li>Select the permission to apply: Explicitly deny access</li>\n</ul>\n<p>Allow unrestricted access to GET <code>/api/projects/listProjects</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: listProjects</li>\n<li>Select the access type: Execute</li>\n<li>Select the role: All users</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<p>Only allow admin unrestricted access to GET <code>/api/projects</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: find</li>\n<li>Select the access type: Read</li>\n<li>Select the role: other</li>\n<li>Enter the role name: admin</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<p>Only allow team members access to GET <code>/api/projects/:id</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: findById</li>\n<li>Select the access type: Read</li>\n<li>Select the role: other</li>\n<li>Enter the role name: teamMember</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<p>Allow authenticated users to access POST <code>/api/projects/donate</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: donate</li>\n<li>Select the access type: Execute</li>\n<li>Select the role: Any authenticated user</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<p>Allow owners access to POST <code>/api/projects/withdraw</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: withdraw</li>\n<li>Select the access type: Execute</li>\n<li>Select the role: The user owning the object</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<h5 id=\"应用访问控制规则\"><a href=\"#应用访问控制规则\" class=\"headerlink\" title=\"应用访问控制规则\"></a>应用访问控制规则</h5><p>每个传入请求都映射到具有三个属性的对象:</p>\n<ul>\n<li>model - 目标模型名称,例如’order’</li>\n<li>property - 目标方法名称,例如’find’.您还可以指定一个方法名称数组,以对所有方法应用相同的约束.</li>\n<li>accessType - 访问类型,’EXECUTE’,’READ’和’WRITE’</li>\n</ul>\n<p>ACL规则被描述为一个对象数组,每个对象由在Model definition JSON file - ACLs中列出的属性组成.</p>\n<ol>\n<li>model</li>\n<li>property</li>\n<li>accessType</li>\n<li>principalType<ol>\n<li>USER</li>\n<li>APP</li>\n<li>ROLE<ol>\n<li>custom roles</li>\n<li>$owner</li>\n<li>$authenticated</li>\n<li>$unauthenticated</li>\n<li>$everyone</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>permission<ol>\n<li>DENY</li>\n<li>ALLOW</li>\n</ol>\n</li>\n</ol>\n<p><strong>ACL规则优先级</strong></p>\n<p>单个模型可能应用了多个ACL:基本模型(或模型)的ACL和模型本身的ACL,在模型定义JSON文件中定义. LoopBack通过添加具有权限和访问类型的优先级规则的所有适用的ACL来解决任何冲突,从而确定最终ACL.</p>\n<p>权限优先级按此顺序应用:</p>\n<ol>\n<li>DENY</li>\n<li>ALLOW</li>\n<li>DEFAULT</li>\n</ol>\n<p>因此,例如,某个操作和用户组的DENY规则优先于同一操作和组的ALLOW规则.</p>\n<p>按照以下顺序应用访问类型优先级(按特殊性顺序):</p>\n<ol>\n<li>Type (read, write, replicate, update)</li>\n<li>Method name</li>\n<li>Wildcard(通配符)</li>\n</ol>\n<p>一般来说,更具体的规则将优先于更一般的规则.例如,拒绝访问经过身份验证的用户的操作的规则将优先于拒绝对所有用户的访问的规则.</p>\n<p>LoopBack通过将请求与每个规则匹配的细节来对多个规则进行排序.它通过按照属性的分级顺序对每个ACL规则检查访问请求来计算细节.</p>\n<p>在每个级别,匹配产生三点:</p>\n<ol>\n<li>完全匹配</li>\n<li>通配符匹配（’*’）</li>\n<li>无匹配</li>\n</ol>\n<p>较高级别的匹配优先于较低级别的匹配.例如,在模型级别的完全匹配将超过通配符匹配.</p>\n<p>例如,考虑以下访问请求:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  model: 'order',</span><br><span class=\"line\">  property: 'find',</span><br><span class=\"line\">  accessType: 'EXECUTE'</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设定义了以下ACL规则:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  // Rule #<span class=\"number\">1</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    model: '*',</span><br><span class=\"line\">    property: 'find',</span><br><span class=\"line\">    accessType: 'EXECUTE',</span><br><span class=\"line\">    principalType: 'ROLE',</span><br><span class=\"line\">    principalId: '$authenticated',</span><br><span class=\"line\">    permission: 'ALLOW'</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // Rule #2</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    model: 'order',</span><br><span class=\"line\">    property: '*',</span><br><span class=\"line\">    accessType: '*',</span><br><span class=\"line\">    principalType: 'ROLE',</span><br><span class=\"line\">    principalId: '$authenticated',</span><br><span class=\"line\">    permission: 'ALLOW'</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // Rule #3</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    model: 'order',</span><br><span class=\"line\">    property: 'find',</span><br><span class=\"line\">    accessType: '*',</span><br><span class=\"line\">    principalType: 'ROLE',</span><br><span class=\"line\">    principalId: '$authenticated',</span><br><span class=\"line\">    permission: 'DENY'</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>ACL规则的顺序将是＃3,＃2,＃1.因此,请求将被拒绝,因为规则＃3设置的权限是”DENY”.</p>\n<hr>\n<h4 id=\"7.3\"> 7.3 进行身份验证请求 </h4>\n\n<p>应用程序创建和验证用户的基本过程是:</p>\n<ol>\n<li>使用User.create()方法注册一个新用户,继承自PersistedModel对象.</li>\n<li>调用User.login()从客户端应用程序代表用户请求访问令牌.</li>\n<li>使用访问令牌调用API.在HTTP标头中提供访问令牌,或作为REST API调用的查询参数,如下所示.</li>\n</ol>\n<h5 id=\"使用访问令牌进行身份验证请求\"><a href=\"#使用访问令牌进行身份验证请求\" class=\"headerlink\" title=\"使用访问令牌进行身份验证请求\"></a>使用访问令牌进行身份验证请求</h5><p>一旦用户登录,LoopBack创建一个新的AccessToken引用用户.在为访问控制系统进行后续REST请求以验证用户可以调用给定模型上的方法时,需要此令牌.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authorization Header</span></span><br><span class=\"line\">curl -X GET -H <span class=\"string\">\"Authorization: <span class=\"variable\">$ACCESS_TOKEN</span>\"</span> \\</span><br><span class=\"line\">http://localhost:3000/api/widgets</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Query Parameter</span></span><br><span class=\"line\">curl -X GET http://localhost:3000/api/widgets?access_token=<span class=\"variable\">$ACCESS_TOKEN</span></span><br></pre></td></tr></table></figure>\n\n<p>要使用cookie进行身份验证,请将以下内容添加到server.js(引导前):</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(loopback.token(&#123;</span><br><span class=\"line\">    model: app.models.accessToken</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"将当前用户标识用作REST的URL中的文字\"><a href=\"#将当前用户标识用作REST的URL中的文字\" class=\"headerlink\" title=\"将当前用户标识用作REST的URL中的文字\"></a>将当前用户标识用作REST的URL中的文字</h5><p>要允许REST API当前登录的用户标识,请使用currentUserLiteral选项配置标记中间件.</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(loopback.token(&#123;</span><br><span class=\"line\">    model: app.models.accessToken,</span><br><span class=\"line\">    currentUserLiteral: <span class=\"string\">'me'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>currentUserLiteral定义了可以在REST API的URL中使用的特殊标记，例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET http://localhost:3000/api/users/me/orders?access_token=<span class=\"variable\">$ACCESS_TOKEN</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意,URL将被重写为如下:</p>\n<p><code>http://localhost:3000/api/users/&lt;currentLoggedInUserId&gt;/orders?access_token=$ACCESS_TOKEN</code></p>\n<h5 id=\"删除访问令牌\"><a href=\"#删除访问令牌\" class=\"headerlink\" title=\"删除访问令牌\"></a>删除访问令牌</h5><p>通过删除在登录时发出的访问令牌,用户将被有效地注销.这仅影响指定的访问令牌,附加到用户的其他令牌仍将有效.</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> USER_ID = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ACCESS_TOKEN = <span class=\"string\">'6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK'</span>;</span><br><span class=\"line\"><span class=\"comment\">// remove just the token</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> token = <span class=\"keyword\">new</span> AccessToken(&#123;</span><br><span class=\"line\">  id: ACCESS_TOKEN</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">token.destroy();</span><br><span class=\"line\"><span class=\"comment\">// remove all user tokens</span></span><br><span class=\"line\">AccessToken.destroyAll(&#123;</span><br><span class=\"line\">  where: &#123;</span><br><span class=\"line\">    userId: USER_ID</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.4\"> 7.4 定义和使用角色 </h4>\n\n<p>LoopBack允许您定义静态和动态角色.静态角色存储在数据源中,并映射到用户.相反,动态角色不分配给用户,而是在访问期间确定.</p>\n<h5 id=\"静态角色\"><a href=\"#静态角色\" class=\"headerlink\" title=\"静态角色\"></a>静态角色</h5><p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.create([</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'john@doe.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'Jane'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'jane@doe.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'Bob'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'bob@projects.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;</span><br><span class=\"line\">  ], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> cb(err);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//create the admin role</span></span><br><span class=\"line\">    Role.create(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'admin'</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, role</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) cb(err);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//make bob an admin</span></span><br><span class=\"line\">      role.principals.create(&#123;</span><br><span class=\"line\">        principalType: RoleMapping.USER,</span><br><span class=\"line\">        principalId: users[<span class=\"number\">2</span>].id</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, principal</span>) </span>&#123;</span><br><span class=\"line\">        cb(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>现在你可以使用上面定义的角色在访问控制中.例如,将以下内容添加到common/models/project.json中,以使”admin”角色的用户能够调用所有REST API.</p>\n<p><strong>/common/models/model.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"accessType\"</span>: <span class=\"string\">\"EXECUTE\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"find\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态角色\"><a href=\"#动态角色\" class=\"headerlink\" title=\"动态角色\"></a>动态角色</h5><p>有时静态角色不够灵活.LoopBack还使您能够定义在运行时定义的动态角色.</p>\n<p>LoopBack提供以下内置动态角色.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Role object property</th>\n      <th>String value</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Role.OWNER</td>\n      <td>$owner</td>\n      <td>Owner of the object</td>\n    </tr>\n    <tr>\n      <td>Role.AUTHENTICATED</td>\n      <td>$authenticated</td>\n      <td>authenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.UNAUTHENTICATED</td>\n      <td>$unauthenticated</td>\n      <td>Unauthenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.EVERYONE</td>\n      <td>$everyone</td>\n      <td>Everyone</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>第一个示例使用<code>$owner</code>动态角色来允许访问所请求的项目模型的所有者.</p>\n<blockquote>\n<p> 注意: 为了限定<code>$owner</code>,目标模型需要具有与User模型(或者从User扩展的模型)和属性匹配目标模型实例的外键的belongsTo关系.对<code>$owner</code>的检查仅对路径上有’:id’的远程方法执行,例如GET /api/users/:id.</p>\n</blockquote>\n<p>使用Role.registerResolver()在引导脚本中设置自定义角色处理程序.此函数有两个参数:</p>\n<ol>\n<li>角色的字符串名称。</li>\n<li>确定主体是否处于指定角色的函数.函数签名必须是function(role, context, callback).</li>\n</ol>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Role = app.models.Role;</span><br><span class=\"line\"></span><br><span class=\"line\">  Role.registerResolver(<span class=\"string\">'teamMember'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">role, context, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Q: Is the current request accessing a Project?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.modelName !== <span class=\"string\">'project'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// A: No. This role is only for projects: callback with FALSE</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Q: Is the user logged in? (there will be an accessToken with an ID if so)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userId = context.accessToken.userId;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!userId) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//A: No, user is NOT logged in: callback with FALSE</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Q: Is the current logged-in user associated with this Project?</span></span><br><span class=\"line\">    <span class=\"comment\">// Step 1: lookup the requested project</span></span><br><span class=\"line\">    context.model.findById(context.modelId, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, project</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// A: The datastore produced an error! Pass error to callback</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> cb(err);</span><br><span class=\"line\">      <span class=\"comment\">// A: There's no project by this ID! Pass error to callback</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!project) <span class=\"keyword\">return</span> cb(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Project not found\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 2: check if User is part of the Team associated with this Project</span></span><br><span class=\"line\">      <span class=\"comment\">// (using count() because we only want to know if such a record exists)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> Team = app.models.Team;</span><br><span class=\"line\">      Team.count(&#123;</span><br><span class=\"line\">        ownerId: project.ownerId,</span><br><span class=\"line\">        memberId: userId</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, count</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// A: The datastore produced an error! Pass error to callback</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> cb(err);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">          <span class=\"comment\">// A: YES. At least one Team associated with this User AND Project</span></span><br><span class=\"line\">          <span class=\"comment\">// callback with TRUE, user is role:`teamMember`</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// A: NO, User is not in this Project's Team</span></span><br><span class=\"line\">          <span class=\"comment\">// callback with FALSE, user is NOT role:`teamMember`</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 注意:关于process.nextTick()的注释.在上面的代码中,我们将一些回调调用包装在process.nextTick( () =&gt; cb(…) ),但不是其他.为什么?在这样的异步函数中,它需要一个回调并在稍后的时间将结果传递给它,重要的是要确保我们总是调用稍后回调,而不是立即调用它(同步).我们从传递给process.nextTick的函数调用回调函数,否则会被同步调用.来自findById或count回调的调用已经保证在稍后访问数据库时发生,这是异步操作,因此我们不需要在process.nextTick中包装这些调用.</p>\n</blockquote>\n<p>使用上面定义的动态角色,我们可以限制项目信息访问作为项目团队成员的用户.</p>\n<p><strong>/common/models/model.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"accessType\"</span>: <span class=\"string\">\"READ\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"teamMember\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"findById\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.5\"> 7.5 访问相关模型 </h4>\n\n<blockquote>\n<p> 重要:在访问相关模型时,活动ACL仍然是您调用的模型的ACL.因此,即使您的模型设置了DENY ALL权限,如果与其相关的模型没有ACL,则所有关系端点都将打开.这可能是一个安全风险,因为例如GET /OpenModel/{id}/ ACLSecuredModel将允许通过OpenModel关系对ACLSecuredModel的完全访问.</p>\n</blockquote>\n<h5 id=\"限制对相关模型的访问\"><a href=\"#限制对相关模型的访问\" class=\"headerlink\" title=\"限制对相关模型的访问\"></a>限制对相关模型的访问</h5><p>当两个模型之间存在关系(参见创建模型关系)时,LoopBack会自动创建一组相关的模型方法,这些方法与为关系定义的API路由相对应.</p>\n<p>在下面的列表中,modelName是相关模型的名称,而modelNamePlural是相关模型名称的复数形式.</p>\n<blockquote>\n<p> 注意:在下面的方法名称中,分隔符是双下划线__.</p>\n</blockquote>\n<p><strong>belongsTo</strong>:</p>\n<ul>\n<li>__get__<em>relatedModelName</em></li>\n</ul>\n<p><strong>hasOne</strong>:</p>\n<ul>\n<li>__create__<em>relatedModelName</em></li>\n<li>__get__<em>relatedModelName</em></li>\n<li>__update__<em>relatedModelName</em></li>\n<li>__destroy__<em>relatedModelName</em></li>\n</ul>\n<p><strong>hasMany</strong>:</p>\n<ul>\n<li>__count__<em>relatedModelNamePlural</em></li>\n<li>__create__<em>relatedModelNamePlural</em></li>\n<li>__delete__<em>relatedModelNamePlural</em></li>\n<li>__destroyById__<em>relatedModelNamePlural</em></li>\n<li>__findById__<em>relatedModelNamePlural</em></li>\n<li>__get__<em>relatedModelNamePlural</em></li>\n<li>__updateById__<em>relatedModelNamePlural</em></li>\n</ul>\n<p><strong>hasManyThrough</strong>:</p>\n<ul>\n<li>__count__<em>relatedModelNamePlural</em></li>\n<li>__create__<em>relatedModelNamePlural</em></li>\n<li>__delete__<em>relatedModelNamePlural</em></li>\n<li>__destroyById__<em>relatedModelNamePlural</em></li>\n<li>__exists__<em>relatedModelNamePlural</em> (through only)</li>\n<li>__findById__<em>relatedModelNamePlural</em></li>\n<li>__get__<em>relatedModelNamePlural</em></li>\n<li>__link__<em>relatedModelNamePlural</em> (through only)</li>\n<li>__updateById__<em>relatedModelNamePlural</em></li>\n<li>__unlink__<em>relatedModelNamePlural</em> (through only)</li>\n</ul>\n<p><strong>hasAndBelongsToMany</strong>:</p>\n<ul>\n<li>__link__<em>relatedModelNamePlural</em></li>\n<li>__unlink__<em>relatedModelNamePlural</em></li>\n</ul>\n<p>您可以使用这些相关的模型方法来控制对相关路由的访问.</p>\n<p>例如,如果用户有多个项目,LoopBack创建这些路由(以及其他)和相应的相关模型方法:</p>\n<ul>\n<li><code>/api/users/count</code> - standard method is <code>count</code></li>\n<li><code>/api/users/:id/projects</code> - related model method is <code>__get__projects</code></li>\n<li><code>/api/users/:id/projects/count</code> - related model method is <code>__count__projects</code></li>\n</ul>\n<blockquote>\n<p> 重要: 如果模型具有DENY ALL权限(例如,内置模型,如用户模型),但相关模型没有ACL,则仍然无法通过User模型访问相关模型.因此,例如,即使图书模型的默认ACL是GET /books的ALLOW $ authenticated,路由GET /user/{id}/books default仍将是DENY ALL.</p>\n</blockquote>\n<p>要配置对这些路由的访问控制,请在模型定义JSON文件中设置相关模型方法的权限.例如,这些路由的用户模型定义JSON文件(user.json)的ACL可能如下所示,例如:</p>\n<p><strong>/common/models/user.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"acls\": [&#123;</span><br><span class=\"line\">  \"principalType\": \"ROLE\",</span><br><span class=\"line\">  \"principalId\": \"$authenticated\",</span><br><span class=\"line\">  \"permission\": \"ALLOW\",</span><br><span class=\"line\">  \"property\": \"count\"</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  \"principalType\": \"ROLE\",</span><br><span class=\"line\">  \"principalId\": \"$owner\",</span><br><span class=\"line\">  \"permission\": \"ALLOW\",</span><br><span class=\"line\">  \"property\": \"__get__projects\"</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  \"principalType\": \"ROLE\",</span><br><span class=\"line\">  \"principalId\": \"$authenticated\",</span><br><span class=\"line\">  \"permission\": \"ALLOW\",</span><br><span class=\"line\">  \"property\": \"__count__projects\"</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查询相关模型\"><a href=\"#查询相关模型\" class=\"headerlink\" title=\"查询相关模型\"></a>查询相关模型</h5><p>查询模型时,您可能还需要从其相关模型返回数据.</p>\n<p>例如,假设您有三个模型: User,Report和LineItem,其中:</p>\n<ul>\n<li>用户可以有多个报告.也就是说,在User和Report(User hasMany Report)之间有一个HasMany关系.</li>\n<li>报表可以有多个订单项.也就是说,在Report和Lineitem之间有一个HasMany关系(Report hasMany LineItem).</li>\n</ul>\n<p>此外,ReportModel还配置了以下ACL,以便经过身份验证的用户可以创建新记录,并且用户可以更新自己的记录:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"$everyone\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"DENY\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"$owner\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"findById\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>假设LineItem模型具有定义的相同ACL.</p>\n<p>现在,假设您要获取您的用户拥有的模型,并获取其相关模型.下面是如何使用findById()使用Node API:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Report.findById(&#123;</span><br><span class=\"line\">  id: <span class=\"number\">1</span>,</span><br><span class=\"line\">  filter: &#123;</span><br><span class=\"line\">    include: <span class=\"string\">'lineitems'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Using the REST API:</p>\n<p><code>GET /api/Reports/110?filter={&quot;include&quot;:[&quot;lineItems&quot;]}</code></p>\n<p>Example results:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"january report - bob\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">110</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"userId\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"lineItemModels\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"lunch\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"reportModelId\"</span>: <span class=\"number\">110</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"dinner\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">112</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"reportModelId\"</span>: <span class=\"number\">110</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.6\"> 7.6 创建默认管理员账号 </h4>\n\n<p>LoopBack没有定义默认管理员用户,但是您可以在应用程序启动时定义一个,如loopback-example-access-control示例中所示.具体来说,该示例包括server/boot/sample-models.js中的代码:</p>\n<ul>\n<li>创建多个用户,以及其他模型的实例.</li>\n<li>定义模型之间的关系.</li>\n<li>定义管理角色.</li>\n<li>添加角色映射以将其中一个用户分配给管理角色.</li>\n</ul>\n<p>因为此脚本在<code>server/boot</code>,它是在应用程序启动时执行的,所以管理员用户将始终存在一次应用程序初始化.</p>\n<p>以下代码创建了名为”John”,”Jane”和”Bob”的三个用户,然后(跳过创建项目,项目所有者和项目团队成员的代码)定义了”管理”角色,并且制定Bob为管理员.</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.create([</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'john@doe.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'Jane'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'jane@doe.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'Bob'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'bob@projects.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;</span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> debug(<span class=\"string\">'%j'</span>, err);</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">// Create projects, assign project owners and project team members</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">// Create the admin role</span></span><br><span class=\"line\">    Role.create(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'admin'</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, role</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> debug(err);</span><br><span class=\"line\">      debug(role);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Make Bob an admin</span></span><br><span class=\"line\">      role.principals.create(&#123;</span><br><span class=\"line\">        principalType: RoleMapping.USER,</span><br><span class=\"line\">        principalId: users[<span class=\"number\">2</span>].id</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, principal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> debug(err);</span><br><span class=\"line\">        debug(principal);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>模型JSON(由ACL生成器创建)文件指定管理角色具有查看项目(GET /api/projects)的不受限制的访问权限:</p>\n<p><strong>/common/models/model.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"accessType\"</span>: <span class=\"string\">\"READ\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"find\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.7\"> 7.7 安全注意事项 </h4>\n\n<h5 id=\"Model-REST-APIs\"><a href=\"#Model-REST-APIs\" class=\"headerlink\" title=\"Model REST APIs\"></a>Model REST APIs</h5><p>默认情况下,您创建的LoopBack模型会为CRUD操作公开一组标准的HTTP端点.model-config.json中的public属性指定是否公开模型的REST API,例如:</p>\n<p><strong>/server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  \"MyModel\": &#123;</span><br><span class=\"line\">    \"public\": true,</span><br><span class=\"line\">    \"dataSource\": \"db\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>要隐藏模型的REST API,只需将public更改为false即可.</p>\n<h5 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h5><p>LoopBack应用程序使用cors中间件软件包进行跨源资源共享(CORS),但对于使用应用程序生成器创建的应用程序,它默认禁用.</p>\n<p>要启用CORS,请编辑server/config.json中的远程部分并将cors设置为true:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"remoting\": &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"cors\": true,  // false by default</span><br><span class=\"line\">    \"handleErrors\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要配置CORS设置,请编辑server/middleware.json文件中的<code>initial</code>部分:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  \"initial\": &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    \"cors\": &#123;</span><br><span class=\"line\">      \"params\": &#123;</span><br><span class=\"line\">        \"origin\": true,</span><br><span class=\"line\">        \"credentials\": true,</span><br><span class=\"line\">        \"maxAge\": 86400</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在客户端上启用CORS</p>\n<p>如果您使用的是JavaScript客户端,则还必须在客户端启用CORS.例如,使用AngularJS启用它的一种方法是:</p>\n<p><strong>/client/app.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myApp = angular.module(<span class=\"string\">'myApp'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'myAppApiService'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">myApp.config([<span class=\"string\">'$httpProvider'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$httpProvider</span>) </span>&#123;</span><br><span class=\"line\">        $httpProvider.defaults.useXDomain = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> $httpProvider.defaults.headers.common[<span class=\"string\">'X-Requested-With'</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>剧终!</p>\n","site":{"data":{}},"excerpt":"<p><strong>翻译者:</strong> Yingshf<br><a href=\"https://github.com/yingsf\" target=\"_blank\" rel=\"noopener\">https://github.com/yingsf</a></p>\n<p><strong>翻译官方文档中基础的7部分:</strong></p>\n<ul>\n<li><strong>Defining models</strong></li>\n<li><strong>Using built-in models</strong></li>\n<li><strong>Connecting models to data sources</strong></li>\n<li><strong>Working with data</strong></li>\n<li><strong>Adding application logic</strong></li>\n<li><strong>Managing users</strong></li>\n<li><strong>Authentication, authorization, and permissions</strong></li>\n</ul>\n<p>增强版是指: 对官文中描述不清的地方(或者错误的地方)添加了自己的理解和试验代码.所有带<strong><em>“译注”</em></strong>的地方都是.</p>\n<p><a href=\"http://loopback.io/doc/en/lb3/index.html\" target=\"_blank\" rel=\"noopener\">官方文档在此处</a>,有需要的时候可以对比着看.</p>","more":"<hr>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录:\"></a>目录:</h4><ul>\n<li><a href=\"#1\">1. 定义Models - 对应官方文档中Defining models一章</a><ul>\n<li><a href=\"#1.1\">1.1 创建Models</a><ul>\n<li><a href=\"#1.1.1\">1.1.1 使用model generator创建model</a></li>\n<li><a href=\"#1.1.2\">1.1.2 从关系型数据库中发现model</a></li>\n<li><a href=\"#1.1.3\">1.1.3 从非结构化数据中创建model</a></li>\n</ul>\n</li>\n<li><a href=\"#1.2\">1.2 定制Models</a></li>\n<li><a href=\"#1.3\">1.3 将Model附加到数据源</a></li>\n<li><a href=\"#1.4\">1.4 通过REST公开Model</a></li>\n<li><a href=\"#1.5\">1.5 验证Model的数据</a></li>\n<li><a href=\"#1.6\">1.6 创建Model关系</a><ul>\n<li><a href=\"#1.6.1\">1.6.1 开启Model关系之旅</a></li>\n<li><a href=\"#1.6.2\">1.6.2 BelongsTo关系(多对一,一对一)</a></li>\n<li><a href=\"#1.6.3\">1.6.3 HasOne关系(一对一)</a></li>\n<li><a href=\"#1.6.4\">1.6.4 HasMany关系(一对多)</a></li>\n<li><a href=\"#1.6.5\">1.6.5 HasManyThrough关系(多对多)</a></li>\n<li><a href=\"#1.6.6\">1.6.6 HasAndBelongsToMany关系(多对多)</a></li>\n<li><a href=\"#1.6.7\">1.6.7 Polymorphic关系(多态)</a></li>\n<li><a href=\"#1.6.8\">1.6.8 查询相关model</a></li>\n<li><a href=\"#1.6.9\">1.6.9 嵌入式model和关系</a></li>\n<li><a href=\"#1.6.10\">1.6.10 嵌套查询</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#2\">2. 使用内置Models - 对应官方文档Using built-in models一章</a><ul>\n<li><a href=\"#2.1\">2.1 扩展内置Models</a></li>\n<li><a href=\"#2.2\">2.2 为内置Models添加remote methods</a></li>\n<li><a href=\"#2.3\">2.3 为内置Models创建数据库表</a></li>\n<li><a href=\"#2.4\">2.4 Model属性引用</a></li>\n<li><a href=\"#2.5\">2.5 内置Model的REST API</a><ul>\n<li><a href=\"#2.5.1\">2.5.1 PersistedModel REST API</a></li>\n<li><a href=\"#2.5.2\">2.5.2 Access token REST API</a></li>\n<li><a href=\"#2.5.3\">2.5.3 ACL REST API</a></li>\n<li><a href=\"#2.5.4\">2.5.4 Application REST API</a></li>\n<li><a href=\"#2.5.5\">2.5.5 Relation REST API</a></li>\n<li><a href=\"#2.5.6\">2.5.6 Role REST API</a></li>\n<li><a href=\"#2.5.7\">2.5.7 User REST API</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3\">3. 将Model连接到数据源 - 对应官方文档Connecting models to data sources一章</a><ul>\n<li><a href=\"#3.1\">3.1 从Model创建数据库schema</a></li>\n<li><a href=\"#3.2\">3.2 理解数据源</a></li>\n<li><a href=\"#3.3\">3.3 使用数据库事务</a></li>\n<li><a href=\"#3.4\">3.4 执行本地SQL</a></li>\n<li><a href=\"#3.5\">3.5 构建连接器(暂未翻译)</a></li>\n</ul>\n</li>\n<li><a href=\"#4\">4. 使用数据 - 对应官方文档Working with data一章</a><ul>\n<li><a href=\"#4.1\">4.1 创建,更新和删除数据</a></li>\n<li><a href=\"#4.2\">4.2 查询数据</a><ul>\n<li><a href=\"#4.2.1\">4.2.1 Fields filter</a></li>\n<li><a href=\"#4.2.2\">4.2.2 Include filter</a></li>\n<li><a href=\"#4.2.3\">4.2.3 Limit filter</a></li>\n<li><a href=\"#4.2.4\">4.2.4 Order filter</a></li>\n<li><a href=\"#4.2.5\">4.2.5 Skip filter</a></li>\n<li><a href=\"#4.2.6\">4.2.6 Where filter</a></li>\n</ul>\n</li>\n<li><a href=\"#4.3\">4.3 高级主题:数据</a><ul>\n<li><a href=\"#4.3.1\">4.3.1 Realtime server-sent events</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#5\">5. 添加应用程序逻辑 - 对应官方文档Adding application logic一章</a><ul>\n<li><a href=\"#5.1\">5.1 使用LoopBack对象</a></li>\n<li><a href=\"#5.2\">5.2 向model中添加业务逻辑</a><ul>\n<li><a href=\"#5.2.1\">5.2.1 Remote methods(远程方法)</a></li>\n<li><a href=\"#5.2.2\">5.2.2 Remote hooks(远程钩子)</a></li>\n<li><a href=\"#5.2.3\">5.2.3 Operation hooks(操作钩子)</a></li>\n<li><a href=\"#5.2.4\">5.2.4 Connector hooks(连接器钩子)</a></li>\n</ul>\n</li>\n<li><a href=\"#5.3\">5.3 定义引导脚本</a></li>\n<li><a href=\"#5.4\">5.4 定义中间件</a></li>\n<li><a href=\"#5.5\">5.5 使用当前上下文</a></li>\n<li><a href=\"#5.6\">5.6 事件</a></li>\n<li><a href=\"#5.7\">5.7 使用promises</a></li>\n</ul>\n</li>\n<li><a href=\"#6\">6. 管理用户 - 对应官方文档Managing users一章</a><ul>\n<li><a href=\"#6.1\">6.1 注册用户</a></li>\n<li><a href=\"#6.2\">6.2 用户登录</a></li>\n<li><a href=\"#6.3\">6.3 使用领域来分区用户</a></li>\n</ul>\n</li>\n<li><a href=\"#7\">7. 身份验证,授权和权限 - 对应官方文档Authentication, authorization, and permissions一章</a><ul>\n<li><a href=\"#7.1\">7.1 用户模型认证简介</a></li>\n<li><a href=\"#7.2\">7.2 控制数据访问</a></li>\n<li><a href=\"#7.3\">7.3 进行身份验证请求</a></li>\n<li><a href=\"#7.4\">7.4 定义和使用角色</a></li>\n<li><a href=\"#7.5\">7.5 访问相关模型</a></li>\n<li><a href=\"#7.6\">7.6 创建默认管理员账号</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"1\"> 1. 定义Models </h4>\n\n<blockquote>\n<p> <strong>概要:</strong> Models是LoopBack的核心,它代表了后端的数据源,例如: 数据库、或其他各种后端服务(REST、SOAP等).</p>\n</blockquote>\n<p>LoopBack的Model代表了后端系统(如数据库)中的数据,并且默认情况下具有Node API和REST API.此外，您还可以向Model添加验证规则和业务逻辑等功能。</p>\n<p>每个LoopBack应用程序都有一组预定义的内置Model,例如User(用户),Role(角色)和Application(应用程序).您可以扩展这些内置Model以满足应用程序的需要。</p>\n<p>此外,您还可以使用应用程序定义自己的Model：</p>\n<p>使用<code>model generator</code>(模型生成器)创建自定义model.这将创建一个model的定义JSON文件(<em>译注:还有个同名的js文件</em>),在这个JSON文件中您可以定义model的具体细节.</p>\n<p>使用<code>Datasource.buildModelFromInstance()</code>为数据源(如SOAP和REST服务)创建动态无模式的model.有关详细信息，请参阅Creating models from unstructured data.</p>\n<p>对于由关系型数据库支持的数据源,model通常对应于数据库中的表,使用<code>model discovery</code>为基于数据库的数据源创建静态的、模式驱动的模型.有关详细信息，请参阅Discovering models from relational databases.</p>\n<hr>\n<h4 id=\"1.1\"> 1.1 创建Models </h4>\n\n<blockquote>\n<p> <strong>概要:</strong> 您可以通过<code>model generator</code>这种方式来创建model,还可以通过从现有数据库模式进行<code>discovery</code>来创建model,还可以通过<code>实例内省(instance introspection)</code>的方式对非关系型数据源创建model.</p>\n</blockquote>\n<h5 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>您可以通过各种方式来创建model,这取决于model基于何种数据源(<em>译注:这并不意味着关系型数据库只能采用discovery的方式来创建model,使用model generator也可以,但表字段过多的话,这是种折磨</em>).</p>\n<p>您可以通过以下3种方式来创建model:</p>\n<ul>\n<li><p><strong>使用model generator</strong>.(<em>译注:</em> 建议model name使用首字母大写的格式(非大驼峰格式,就是第一个字母大写).经测试,如果名字是小写,生成器会把你的model name转换成首字母大写格式的(但文件名还是小写),如果名字是大驼峰的,生成器会把你的名字加个”-“例如,我输入的名字是coffeeshop,但实际被转成了Coffeeshop(所以我建议直接命名的时候就首字母大写),如果你还在js文件中使用coffeeshop这个名字,StrongLoop会抛出coffeeshop未定义的错误.在例如我输入的名字是CoffeeShop,那么model name虽然还是CoffeeShop,但文件名则被转成coffee-shop.json,看着不美.大家可以自己尝试一下.)</p>\n</li>\n<li><p><strong>使用model discovery创建现有关系型数据的model</strong>: 使用<em>model discovery</em>,然后您可以使用LoopBack’s schema/model synchronization API来使您的model和数据库保持同步.</p>\n</li>\n<li><p><strong>使用instance introspection</strong>为非关系型数据库或REST APIS创建model.</p>\n</li>\n</ul>\n<p>使用上述3个方法创建的model,都会创建一个<code>Model definition JSON</code>文件,这个JSON文件位于<code>common/models</code>目录(<em>译注: 其实还有别的目录</em>,如果你想让model只供server使用,它会在server/models/下,同理,还可以出现在client下.在common里,代表server和client都可以使用),名字是创建时您设置的名字,例如: <code>common/models/account.json</code>.</p>\n<p>您还可以使用<code>LoopBack API</code>以编程的方式来创建和自定义model,您还可以人工编辑那个JSON文件来创建和自定义model,多数情况下,在创建model的时候,不建议采用人工编辑的方式,但是在修改和自定义的model的时候,可以采用人工编辑的形式.</p>\n<h5 id=\"在JavaScript代码中获取对model的引用\"><a href=\"#在JavaScript代码中获取对model的引用\" class=\"headerlink\" title=\"在JavaScript代码中获取对model的引用.\"></a>在JavaScript代码中获取对model的引用.</h5><p>在JavaScript代码中获取对模型的引用(或”句柄”)的方式取决于您JavaScript代码所在的位置.</p>\n<h5 id=\"在model的js文件中-如何编写代码获取对model的引用\"><a href=\"#在model的js文件中-如何编写代码获取对model的引用\" class=\"headerlink\" title=\"在model的js文件中,如何编写代码获取对model的引用?\"></a>在model的js文件中,如何编写代码获取对model的引用?</h5><blockquote>\n<p> <strong>警告:</strong> 例如有一个名为”foo”的model,它的js文件是<code>common/models/foo.js</code>,在这个js文件中,您不能访问model的关系(<em>译注: 访问别的model</em>),因为model还没有被加载,如果您想执行对关系的操作,请在boot scripts中实现它.</p>\n</blockquote>\n<p><em>译注:</em> 上述警告是在告诉你,在某个model对应的js文件中(例如一个名为account的model,它的js文件是account.js),只能把自己的model name传进去.把其他的model name传进去是无效的,不信你可以多传入一个model,然后console.log它,你会发现是undefined.即使你把感觉上是全局对象的<code>app</code>传进来,仍然是undefined.</p>\n<p>在model的js文件中,model的名字作为参数传入进顶层函数(top-level function),于是在代码里就可以直接使用这个model对象了,例如有一个model叫”customer”,它的js文件里的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Customer作为参数传进来,如果你使用生成器生成model的话,生成器自动把model名传进来了</span></span><br><span class=\"line\"><span class=\"comment\">// 你可以试试在Customer后面在多加一个别的已经存在的model,然后console.log它.一定是undefined</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Customer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Customer object is available </span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>LoopBack还支持Promises以及model和其相关model的CRUD方法的回调.</p>\n<h5 id=\"当启动脚本中-如何以代码的形式获取对model的引用\"><a href=\"#当启动脚本中-如何以代码的形式获取对model的引用\" class=\"headerlink\" title=\"当启动脚本中,如何以代码的形式获取对model的引用?\"></a>当启动脚本中,如何以代码的形式获取对model的引用?</h5><p>在启动脚本中使用<code>app.models</code>,你就能获得对所有model的引用.假设你的启动脚本名叫script.js,它位于<code>/server/boot/script.js</code>,代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123; <span class=\"comment\">// 把app传进来</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> User = app.models.user;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Role = app.models.Role;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> RoleMapping = app.models.RoleMapping;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Team = app.models.Team;</span><br><span class=\"line\">  <span class=\"comment\">// 现在可以对上面4个model为所欲为了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.1.1\"> 1.1.1 使用model generator创建model </h4>\n\n<h5 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>使用<code>model generator</code>是创建新model最简单的方式,你可以使用IBM API Connect:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apic create --<span class=\"built_in\">type</span> model</span><br></pre></td></tr></table></figure>\n\n<p>或者使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:model</span><br></pre></td></tr></table></figure>\n\n<p>当执行上述命令创建新model的时候,生成器会提示你若干问题(<em>译注: 7个</em>),这些问题用来确定model的相关<strong>属性</strong>,随后,您还可以使用<code>property generator</code>来增加新的<strong>属性</strong>.(_译注:这句话中出现了2遍属性这个词,但意义却不同,回答7个问题生成的属性是top-level属性,它是属于model的,这种属性有13个.最后一个属性你可以理解成表字段.现在先不用纠结这些,继续往下看就可以了.)</p>\n<p>当您创建model的时候,(例如你创建了一个名为”myModel”的model),生成器会默默的为您:</p>\n<ul>\n<li><p>创建/common/models/myModel.json,这是model的定义JSON文件.(<em>译注: 7个问题中有一个问题是model位置的,如果你选择的”公共”,则放在common下</em>)</p>\n</li>\n<li><p>创建/common/models/myModel.js,在这个文件里,您可以用编程的方式来扩展model.例如添加个<code>remote methods</code>.</p>\n</li>\n<li><p>把你创建的这个model登记(注册)到<code>/server/model-config.json</code>中,登记内容包括名字,数据源等.</p>\n</li>\n</ul>\n<h5 id=\"基本的操作步骤-举例\"><a href=\"#基本的操作步骤-举例\" class=\"headerlink\" title=\"基本的操作步骤(举例)\"></a>基本的操作步骤(举例)</h5><p>在你的application根目录下输入下面的命令,创建一个名为book的新model.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:model book</span><br></pre></td></tr></table></figure>\n\n<p>或者使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apic create --<span class=\"built_in\">type</span> model book</span><br></pre></td></tr></table></figure>\n\n<p>回车后,生成器会提示您这么几个问题:</p>\n<ul>\n<li><p>选择model要连接哪种数据源,默认情况下,只有一个名为db的内存数据源.如果你创建过别的数据源,这里就会以列表的形式列出来供你选择..</p>\n</li>\n<li><p>选择model的基类,生成器会列出一堆内置的model和你曾经定义过的自定义model.</p>\n</li>\n</ul>\n<p><strong>注意:</strong></p>\n<p>通常情况下,如果您想将您的数据保存到数据库中的话(例如mysql,mongodb),基类请选择<code>PersistedModel</code>,如果您选择了<code>Model</code>作为您的基类的话,你这个model就没有CRUD方法</p>\n<ul>\n<li><p>选择是否把你的model公开在REST上,默认值是yes.</p>\n</li>\n<li><p>输入自定义复数后缀,默认是英文的复数规则,例如books,cites等.这个复数是用于API的URL的.</p>\n</li>\n<li><p>为model增加一个属性.生成器会提示您(<strong><em>译注: 这个属性你可以理解为数据库表的字段</em></strong>):</p>\n<ul>\n<li><p>属性名.</p>\n</li>\n<li><p>属性类型.</p>\n</li>\n<li><p>是否为必须属性.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"在创建完model后又想添加新属性怎么办\"><a href=\"#在创建完model后又想添加新属性怎么办\" class=\"headerlink\" title=\"在创建完model后又想添加新属性怎么办\"></a>在创建完model后又想添加新属性怎么办</h5><p>使用<code>property generator</code>即可,如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ [ slc | apic ] loopback:property</span><br></pre></td></tr></table></figure>\n\n<p>回答生成器提出的问题即可完成相关操作.</p>\n<p><strong>译者注:注意标题是添加新属性,所以,修改旧属性是不能用这个的</strong></p>\n<h5 id=\"给属性添加默认值\"><a href=\"#给属性添加默认值\" class=\"headerlink\" title=\"给属性添加默认值\"></a>给属性添加默认值</h5><p>编辑model的JSON文件,给属性添加<code>default</code>关键字,更多内容后续会讲.</p>\n<hr>\n<h4 id=\"1.1.2\"> 1.1.2 从关系型数据库中发现model </h4>\n\n<h5 id=\"译者概述\"><a href=\"#译者概述\" class=\"headerlink\" title=\"译者概述\"></a>译者概述</h5><p>原文标题叫做<em>Discovering models from relational databases</em>.</p>\n<p>你可以这样理解它的含义,假设关系型数据库mysql中有个表叫orders,它有200多个字段(可能是设计失误,或者必须要有这么多字段).如果用<a href=\"#1.1.1\">1.1.1</a>中的生成器来创建model并添加这200多个属性话,不仅特累,而且将来数据库中表结构变化的话,又要手工来维护这个model.</p>\n<p>如果解决这个问题?本节介绍的内容就是解决这个问题的.</p>\n<h5 id=\"原文概述\"><a href=\"#原文概述\" class=\"headerlink\" title=\"原文概述\"></a>原文概述</h5><p>基于已经存在的关系型数据库,LoopBack创建起model来那是轻松加愉快.它支持以下几种连接器(数据库):</p>\n<ul>\n<li><p><strong>MySQL connector</strong></p>\n</li>\n<li><p><strong>PostgreSQL connector</strong></p>\n</li>\n<li><p><strong>Oracle connector</strong></p>\n</li>\n<li><p><strong>SQL Server connector</strong></p>\n</li>\n</ul>\n<p>对于NoSQL数据库(如MongoDB),请改用instance introspection.</p>\n<p>连接到关系型数据库的数据源自动获取异步<code>Database discovery API</code>(<em>译注: 这句话显得很突兀,不明白是啥意思.我的理解是一旦model的数据源是关系型数据库,那model就自动获取了一组discovery API</em>)</p>\n<h5 id=\"基本的操作步骤-举例-1\"><a href=\"#基本的操作步骤-举例-1\" class=\"headerlink\" title=\"基本的操作步骤(举例)\"></a>基本的操作步骤(举例)</h5><ul>\n<li><p><strong>第一步:</strong> 使用脚本(例如下面的代码)来发现模型(原文:discover the schema).</p>\n</li>\n<li><p><strong>第二步:</strong> 使用fs.writeFile()将输出保存为<code>common/models/你的名字.json</code>.</p>\n</li>\n<li><p><strong>第三步:</strong> 别忘了在<code>server/model-config.json</code>登记这个model.</p>\n</li>\n<li><p><strong>第四步:</strong> 启动app(执行: node .)</p>\n</li>\n<li><p><strong>第五步:</strong> 使用<code>LoopBack Explorer</code>来验证你的模型是否已经正确定义.</p>\n</li>\n</ul>\n<p><em>译注:</em> 上面的步骤不要严格效仿,它的核心理念是提醒你要保存json文件,要登记model.在后面的代码中,你会看到该怎么做.</p>\n<h5 id=\"discovery样例代码\"><a href=\"#discovery样例代码\" class=\"headerlink\" title=\"discovery样例代码\"></a>discovery样例代码</h5><p>例如,假设有一个Oracle数据库.首先,我们的代码要设置Oracle数据源.然后调用discoverAndBuildModels()从数据库表中把表结构搂回来并创建模型.别忘了使用<code>associations: true</code>选项来保证能把主/外键关系也搂回来.以下为代码,它位于<code>/server/bin/script.js</code>文件中:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置oracle数据源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = loopback.createDataSource(<span class=\"string\">'oracle'</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">\"host\"</span>: <span class=\"string\">\"oracle-demo.strongloop.com\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"port\"</span>: <span class=\"number\">1521</span>,</span><br><span class=\"line\">  <span class=\"string\">\"database\"</span>: <span class=\"string\">\"XE\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"username\"</span>: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"password\"</span>: <span class=\"string\">\"L00pBack\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从INVENTORY这个表把表结构搂回来并创建models</span></span><br><span class=\"line\"><span class=\"comment\">// dataSource.discoverAndBuildModels有三个参数(modelName, [options], [cb])</span></span><br><span class=\"line\">ds.discoverAndBuildModels(<span class=\"string\">'INVENTORY'</span>, &#123;<span class=\"attr\">visited</span>: &#123;&#125;, <span class=\"attr\">associations</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, models</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Now we have a list of models keyed by the model name</span></span><br><span class=\"line\">  <span class=\"comment\">// Find the first record from the inventory</span></span><br><span class=\"line\">  models.Inventory.findOne(&#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, inv</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nInventory: \"</span>, inv);</span><br><span class=\"line\">    <span class=\"comment\">// Navigate to the product model</span></span><br><span class=\"line\">    <span class=\"comment\">// Assumes inventory table has a foreign key relationship to product table</span></span><br><span class=\"line\">    inv.product(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, prod</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nProduct: \"</span>, prod);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\n ------------- \"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>译注:</em></strong> 如果按照上述的文字顺读下来,你就会以为上述代码可以直接把oracle数据库中的表INVENTORY的表结构给取回来然后在建立model,但实际是错误的,官文的这段代码有误导性.在查阅了API以后可以发现,上述代码中的discoverAndBuildModels()能根据表名创建一个如下的json,它确实是一个model,但与你的表没有关系(假设我的表叫coffeeshop).</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Coffeeshop: </span><br><span class=\"line\">   &#123; [Function: ModelConstructor]</span><br><span class=\"line\">     setMaxListeners: [Function: bound setMaxListeners],</span><br><span class=\"line\">     getMaxListeners: [Function: bound getMaxListeners],</span><br><span class=\"line\">     emit: [Function: bound emit],</span><br><span class=\"line\">     addListener: [Function: bound addListener],</span><br><span class=\"line\">     on: [Function: bound addListener],</span><br><span class=\"line\">     prependListener: [Function: bound prependListener],</span><br><span class=\"line\">     once: [Function: bound once],</span><br><span class=\"line\">     prependOnceListener: [Function: bound prependOnceListener],</span><br><span class=\"line\">     removeListener: [Function: bound removeListener],</span><br><span class=\"line\">     removeAllListeners: [Function: bound removeAllListeners],</span><br><span class=\"line\">     listeners: [Function: bound listeners],</span><br><span class=\"line\">     listenerCount: [Function: bound listenerCount],</span><br><span class=\"line\">     eventNames: [Function: bound eventNames],</span><br><span class=\"line\">     super_: </span><br><span class=\"line\">      &#123; [Function: ModelConstructor]</span><br><span class=\"line\">        setMaxListeners: [Function: bound setMaxListeners],</span><br><span class=\"line\">        getMaxListeners: [Function: bound getMaxListeners],</span><br><span class=\"line\">        emit: [Function: bound emit],</span><br><span class=\"line\">        addListener: [Function: bound addListener],</span><br><span class=\"line\">        on: [Function: bound addListener],</span><br><span class=\"line\">        prependListener: [Function: bound prependListener],</span><br><span class=\"line\">        once: [Function: bound once],</span><br><span class=\"line\">        prependOnceListener: [Function: bound prependOnceListener],</span><br><span class=\"line\">        removeListener: [Function: bound removeListener],</span><br><span class=\"line\">        removeAllListeners: [Function: bound removeAllListeners],</span><br><span class=\"line\">        listeners: [Function: bound listeners],</span><br><span class=\"line\">        listenerCount: [Function: bound listenerCount],</span><br><span class=\"line\">        eventNames: [Function: bound eventNames],</span><br><span class=\"line\">        super_: [Object],</span><br><span class=\"line\">        defineProperty: [Function],</span><br><span class=\"line\">        getPropertyType: [Function],</span><br><span class=\"line\">        isProtectedProperty: [Function],</span><br><span class=\"line\">        isHiddenProperty: [Function],</span><br><span class=\"line\">        mixin: [Function],</span><br><span class=\"line\">        getDataSource: [Function],</span><br><span class=\"line\">        observe: [Function],</span><br><span class=\"line\">        removeObserver: [Function],</span><br><span class=\"line\">        clearObservers: [Function],</span><br><span class=\"line\">        notifyObserversOf: [Function],</span><br><span class=\"line\">        _notifyBaseObservers: [Function],</span><br><span class=\"line\">        notifyObserversAround: [Function],</span><br><span class=\"line\">        afterInitialize: null,</span><br><span class=\"line\">        beforeValidate: null,</span><br><span class=\"line\">        afterValidate: null,</span><br><span class=\"line\">        beforeSave: null,</span><br><span class=\"line\">        afterSave: null,</span><br><span class=\"line\">        beforeCreate: null,</span><br><span class=\"line\">        afterCreate: null,</span><br><span class=\"line\">        beforeUpdate: null,</span><br><span class=\"line\">        afterUpdate: null,</span><br><span class=\"line\">        beforeDestroy: null,</span><br><span class=\"line\">        afterDestroy: null,</span><br><span class=\"line\">        validatesPresenceOf: [Function],</span><br><span class=\"line\">        validatesAbsenceOf: [Function],</span><br><span class=\"line\">        validatesLengthOf: [Function],</span><br><span class=\"line\">        validatesNumericalityOf: [Function],</span><br><span class=\"line\">        validatesInclusionOf: [Function],</span><br><span class=\"line\">        validatesExclusionOf: [Function],</span><br><span class=\"line\">        validatesFormatOf: [Function],</span><br><span class=\"line\">        validate: [Function],</span><br><span class=\"line\">        validateAsync: [Function],</span><br><span class=\"line\">        validatesUniquenessOf: [Function],</span><br><span class=\"line\">        getter: &#123;&#125;,</span><br><span class=\"line\">        setter: &#123;&#125;,</span><br><span class=\"line\">        definition: [Object],</span><br><span class=\"line\">        settings: [Object],</span><br><span class=\"line\">        forEachProperty: [Function],</span><br><span class=\"line\">        attachTo: [Function],</span><br><span class=\"line\">        extend: [Function],</span><br><span class=\"line\">        registerProperty: [Function],</span><br><span class=\"line\">        registry: [Object],</span><br><span class=\"line\">        setup: [Function: setupPersistedModel],</span><br><span class=\"line\">        _ACL: [Function: getACL],</span><br><span class=\"line\">        checkAccess: [Function],</span><br><span class=\"line\">        _getAccessTypeForMethod: [Function],</span><br><span class=\"line\">        getApp: [Function],</span><br><span class=\"line\">        remoteMethod: [Function],</span><br><span class=\"line\">        disableRemoteMethod: [Function],</span><br><span class=\"line\">        disableRemoteMethodByName: [Function],</span><br><span class=\"line\">        belongsToRemoting: [Function],</span><br><span class=\"line\">        hasOneRemoting: [Function],</span><br><span class=\"line\">        hasManyRemoting: [Function],</span><br><span class=\"line\">        scopeRemoting: [Function],</span><br><span class=\"line\">        nestRemoting: [Function],</span><br><span class=\"line\">        ValidationError: [Object],</span><br><span class=\"line\">        sharedClass: [Object],</span><br><span class=\"line\">        sharedCtor: [Object],</span><br><span class=\"line\">        beforeRemote: [Function],</span><br><span class=\"line\">        afterRemote: [Function],</span><br><span class=\"line\">        afterRemoteError: [Function],</span><br><span class=\"line\">        _runWhenAttachedToApp: [Function],</span><br><span class=\"line\">        create: [Object],</span><br><span class=\"line\">        patchOrCreate: [Object],</span><br><span class=\"line\">        updateOrCreate: [Object],</span><br><span class=\"line\">        upsert: [Object],</span><br><span class=\"line\">        patchOrCreateWithWhere: [Object],</span><br><span class=\"line\">        upsertWithWhere: [Object],</span><br><span class=\"line\">        replaceOrCreate: [Object],</span><br><span class=\"line\">        findOrCreate: [Object],</span><br><span class=\"line\">        exists: [Object],</span><br><span class=\"line\">        findById: [Object],</span><br><span class=\"line\">        find: [Object],</span><br><span class=\"line\">        findOne: [Object],</span><br><span class=\"line\">        destroyAll: [Object],</span><br><span class=\"line\">        remove: [Object],</span><br><span class=\"line\">        deleteAll: [Object],</span><br><span class=\"line\">        updateAll: [Object],</span><br><span class=\"line\">        update: [Object],</span><br><span class=\"line\">        destroyById: [Object],</span><br><span class=\"line\">        removeById: [Object],</span><br><span class=\"line\">        deleteById: [Object],</span><br><span class=\"line\">        count: [Object],</span><br><span class=\"line\">        replaceById: [Object],</span><br><span class=\"line\">        getIdName: [Function],</span><br><span class=\"line\">        setupRemoting: [Function],</span><br><span class=\"line\">        diff: [Function],</span><br><span class=\"line\">        changes: [Function],</span><br><span class=\"line\">        checkpoint: [Function],</span><br><span class=\"line\">        currentCheckpoint: [Function],</span><br><span class=\"line\">        replicate: [Function],</span><br><span class=\"line\">        createUpdates: [Function],</span><br><span class=\"line\">        bulkUpdate: [Function],</span><br><span class=\"line\">        getChangeModel: [Function],</span><br><span class=\"line\">        getSourceId: [Function],</span><br><span class=\"line\">        enableChangeTracking: [Function],</span><br><span class=\"line\">        _defineChangeModel: [Function],</span><br><span class=\"line\">        rectifyAllChanges: [Function],</span><br><span class=\"line\">        handleChangeError: [Function],</span><br><span class=\"line\">        rectifyChange: [Function],</span><br><span class=\"line\">        findLastChange: [Function],</span><br><span class=\"line\">        updateLastChange: [Function],</span><br><span class=\"line\">        createChangeStream: [Object] &#125;,</span><br><span class=\"line\">     defineProperty: [Function],</span><br><span class=\"line\">     getPropertyType: [Function],</span><br><span class=\"line\">     isProtectedProperty: [Function],</span><br><span class=\"line\">     isHiddenProperty: [Function],</span><br><span class=\"line\">     mixin: [Function],</span><br><span class=\"line\">     getDataSource: [Function],</span><br><span class=\"line\">     observe: [Function],</span><br><span class=\"line\">     removeObserver: [Function],</span><br><span class=\"line\">     clearObservers: [Function],</span><br><span class=\"line\">     notifyObserversOf: [Function],</span><br><span class=\"line\">     _notifyBaseObservers: [Function],</span><br><span class=\"line\">     notifyObserversAround: [Function],</span><br><span class=\"line\">     afterInitialize: null,</span><br><span class=\"line\">     beforeValidate: null,</span><br><span class=\"line\">     afterValidate: null,</span><br><span class=\"line\">     beforeSave: null,</span><br><span class=\"line\">     afterSave: null,</span><br><span class=\"line\">     beforeCreate: null,</span><br><span class=\"line\">     afterCreate: null,</span><br><span class=\"line\">     beforeUpdate: null,</span><br><span class=\"line\">     afterUpdate: null,</span><br><span class=\"line\">     beforeDestroy: null,</span><br><span class=\"line\">     afterDestroy: null,</span><br><span class=\"line\">     validatesPresenceOf: [Function],</span><br><span class=\"line\">     validatesAbsenceOf: [Function],</span><br><span class=\"line\">     validatesLengthOf: [Function],</span><br><span class=\"line\">     validatesNumericalityOf: [Function],</span><br><span class=\"line\">     validatesInclusionOf: [Function],</span><br><span class=\"line\">     validatesExclusionOf: [Function],</span><br><span class=\"line\">     validatesFormatOf: [Function],</span><br><span class=\"line\">     validate: [Function],</span><br><span class=\"line\">     validateAsync: [Function],</span><br><span class=\"line\">     validatesUniquenessOf: [Function],</span><br><span class=\"line\">     getter: &#123;&#125;,</span><br><span class=\"line\">     setter: &#123;&#125;,</span><br><span class=\"line\">     definition: </span><br><span class=\"line\">      ModelDefinition &#123;</span><br><span class=\"line\">        modelBuilder: [Object],</span><br><span class=\"line\">        name: 'Coffeeshop',</span><br><span class=\"line\">        rawProperties: [Object],</span><br><span class=\"line\">        settings: [Object],</span><br><span class=\"line\">        relations: [],</span><br><span class=\"line\">        properties: [Object],</span><br><span class=\"line\">        _ids: [Object] &#125;,</span><br><span class=\"line\">     settings: </span><br><span class=\"line\">      &#123; strict: false,</span><br><span class=\"line\">        base: [Object],</span><br><span class=\"line\">        replaceOnPUT: true,</span><br><span class=\"line\">        idInjection: false,</span><br><span class=\"line\">        mysql: [Object] &#125;,</span><br><span class=\"line\">     forEachProperty: [Function],</span><br><span class=\"line\">     attachTo: [Function],</span><br><span class=\"line\">     extend: [Function],</span><br><span class=\"line\">     registerProperty: [Function],</span><br><span class=\"line\">     registry: Registry &#123; defaultDataSources: &#123;&#125;, modelBuilder: [Object] &#125;,</span><br><span class=\"line\">     setup: [Function: setupPersistedModel],</span><br><span class=\"line\">     _ACL: [Function: getACL],</span><br><span class=\"line\">     checkAccess: [Function],</span><br><span class=\"line\">     _getAccessTypeForMethod: [Function],</span><br><span class=\"line\">     getApp: [Function],</span><br><span class=\"line\">     remoteMethod: [Function],</span><br><span class=\"line\">     disableRemoteMethod: [Function],</span><br><span class=\"line\">     disableRemoteMethodByName: [Function],</span><br><span class=\"line\">     belongsToRemoting: [Function],</span><br><span class=\"line\">     hasOneRemoting: [Function],</span><br><span class=\"line\">     hasManyRemoting: [Function],</span><br><span class=\"line\">     scopeRemoting: [Function],</span><br><span class=\"line\">     nestRemoting: [Function],</span><br><span class=\"line\">     ValidationError: &#123; [Function: ValidationError] super_: [Object], maxPropertyStringLength: 32 &#125;,</span><br><span class=\"line\">     sharedClass: </span><br><span class=\"line\">      SharedClass &#123;</span><br><span class=\"line\">        name: 'Coffeeshop',</span><br><span class=\"line\">        ctor: [Circular],</span><br><span class=\"line\">        _methods: [Object],</span><br><span class=\"line\">        _resolvers: [Object],</span><br><span class=\"line\">        _disabledMethods: &#123;&#125;,</span><br><span class=\"line\">        http: [Object],</span><br><span class=\"line\">        sharedCtor: [Object] &#125;,</span><br><span class=\"line\">     sharedCtor: &#123; [Function] accepts: [Object], http: [Object], returns: [Object] &#125;,</span><br><span class=\"line\">     beforeRemote: [Function],</span><br><span class=\"line\">     afterRemote: [Function],</span><br><span class=\"line\">     afterRemoteError: [Function],</span><br><span class=\"line\">     _runWhenAttachedToApp: [Function],</span><br><span class=\"line\">     create: [Function],</span><br><span class=\"line\">     patchOrCreate: [Function],</span><br><span class=\"line\">     updateOrCreate: [Function],</span><br><span class=\"line\">     upsert: [Function],</span><br><span class=\"line\">     patchOrCreateWithWhere: [Function],</span><br><span class=\"line\">     upsertWithWhere: [Function],</span><br><span class=\"line\">     replaceOrCreate: [Function: replaceOrCreate],</span><br><span class=\"line\">     findOrCreate: [Function: findOrCreate],</span><br><span class=\"line\">     exists: [Function: exists],</span><br><span class=\"line\">     findById: [Function: findById],</span><br><span class=\"line\">     find: [Function: find],</span><br><span class=\"line\">     findOne: [Function: findOne],</span><br><span class=\"line\">     destroyAll: [Function: destroyAll],</span><br><span class=\"line\">     remove: [Function: destroyAll],</span><br><span class=\"line\">     deleteAll: [Function: destroyAll],</span><br><span class=\"line\">     updateAll: [Function],</span><br><span class=\"line\">     update: [Function],</span><br><span class=\"line\">     destroyById: [Function: deleteById],</span><br><span class=\"line\">     removeById: [Function: deleteById],</span><br><span class=\"line\">     deleteById: [Function: deleteById],</span><br><span class=\"line\">     count: [Function],</span><br><span class=\"line\">     replaceById: [Function],</span><br><span class=\"line\">     getIdName: [Function],</span><br><span class=\"line\">     setupRemoting: [Function],</span><br><span class=\"line\">     diff: [Function],</span><br><span class=\"line\">     changes: [Function],</span><br><span class=\"line\">     checkpoint: [Function],</span><br><span class=\"line\">     currentCheckpoint: [Function],</span><br><span class=\"line\">     replicate: [Function],</span><br><span class=\"line\">     createUpdates: [Function],</span><br><span class=\"line\">     bulkUpdate: [Function],</span><br><span class=\"line\">     getChangeModel: [Function],</span><br><span class=\"line\">     getSourceId: [Function],</span><br><span class=\"line\">     enableChangeTracking: [Function],</span><br><span class=\"line\">     _defineChangeModel: [Function],</span><br><span class=\"line\">     rectifyAllChanges: [Function],</span><br><span class=\"line\">     handleChangeError: [Function],</span><br><span class=\"line\">     rectifyChange: [Function],</span><br><span class=\"line\">     findLastChange: [Function],</span><br><span class=\"line\">     updateLastChange: [Function],</span><br><span class=\"line\">     createChangeStream: &#123; [Function] _delegate: true &#125;,</span><br><span class=\"line\">     _mixins: [ [Object], [Object], [Object], [Object] ],</span><br><span class=\"line\">     _forDB: [Function],</span><br><span class=\"line\">     defaultScope: [Function],</span><br><span class=\"line\">     applyScope: [Function],</span><br><span class=\"line\">     applyProperties: [Function],</span><br><span class=\"line\">     lookupModel: [Function],</span><br><span class=\"line\">     getConnector: [Function],</span><br><span class=\"line\">     findByIds: [Function],</span><br><span class=\"line\">     all: [Function],</span><br><span class=\"line\">     _getSetting: [Function],</span><br><span class=\"line\">     _normalize: [Function],</span><br><span class=\"line\">     _coerce: [Function],</span><br><span class=\"line\">     scope: [Function],</span><br><span class=\"line\">     normalizeInclude: [Function: normalizeInclude],</span><br><span class=\"line\">     include: [Function],</span><br><span class=\"line\">     hasMany: [Function: hasMany],</span><br><span class=\"line\">     belongsTo: [Function],</span><br><span class=\"line\">     hasAndBelongsToMany: [Function: hasAndBelongsToMany],</span><br><span class=\"line\">     hasOne: [Function: hasOne],</span><br><span class=\"line\">     referencesMany: [Function: referencesMany],</span><br><span class=\"line\">     embedsOne: [Function: embedsOne],</span><br><span class=\"line\">     embedsMany: [Function: embedsMany],</span><br><span class=\"line\">     beginTransaction: [Function],</span><br><span class=\"line\">     Transaction: </span><br><span class=\"line\">      &#123; [Function: Transaction]</span><br><span class=\"line\">        super_: [Object],</span><br><span class=\"line\">        SERIALIZABLE: 'SERIALIZABLE',</span><br><span class=\"line\">        REPEATABLE_READ: 'REPEATABLE READ',</span><br><span class=\"line\">        READ_COMMITTED: 'READ COMMITTED',</span><br><span class=\"line\">        READ_UNCOMMITTED: 'READ UNCOMMITTED',</span><br><span class=\"line\">        hookTypes: [Object],</span><br><span class=\"line\">        begin: [Function] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外一个坑就是mac下strongloop配置oracle连接器有点麻烦,我简单尝试了一下没有成功,于是就利用现成的mysql了.</p>\n<p>下面是查阅API文档后写的一段代码(<a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/\" target=\"_blank\" rel=\"noopener\">API链接</a>),可以实现指定表的discovery,然后在创建model的json文件,并登记model.内容如下(已测试):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Discover And Build Model And Expose REST API From Mysql Database Table</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Create By: Yingshf</span></span><br><span class=\"line\"><span class=\"comment\"> * Put this file in the /server/bin/ directory for your application.</span></span><br><span class=\"line\"><span class=\"comment\"> * run: In Your root directory,Execute 'node ./server/bin/discoverAndBuildModel.js'</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Change to the correct path for your folder</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> commonFolder = <span class=\"string\">'../../common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> modelsFolder = commonFolder + <span class=\"string\">'/models'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> modelConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../model-config.json'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dataSources = <span class=\"built_in\">require</span>(<span class=\"string\">'../datasources.json'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dataSourceName must be the name of your datasource in server/datasources.json</span></span><br><span class=\"line\"><span class=\"comment\">// 'mysqlTables' is a array of table name</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataSourceName = <span class=\"string\">'mysqlDb'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mysqlTables = [<span class=\"string\">'coffeeshop'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> lowerModelConfigName = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = loopback.createDataSource(<span class=\"string\">'mysql'</span>, dataSources[dataSourceName]);</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Below is function definitions</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Check if common/models exists</span></span><br><span class=\"line\">  <span class=\"comment\">// If not, create them and build models from database</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs.existsSync(commonFolder)) &#123;</span><br><span class=\"line\">    fs.mkdirSync(commonFolder);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fs.existsSync(modelsFolder)) &#123;</span><br><span class=\"line\">    fs.mkdirSync(modelsFolder);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  discoverAndCreate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">discoverAndCreate</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  mysqlTables.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tableName, index, array</span>) </span>&#123;</span><br><span class=\"line\">    ds.discoverSchema(tableName, <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, schema</span>) </span>&#123;</span><br><span class=\"line\">      lowerModelConfigName = schema.name.toLowerCase();</span><br><span class=\"line\">      fs.writeFile(<span class=\"string\">'common/models/'</span> + lowerModelConfigName + <span class=\"string\">'.json'</span>, prettyJSON(schema), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'It\\'s saved!'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//If last, then save</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === array.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          saveAndExposeSchemas();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      addSchema(schema.name);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addSchema</span>(<span class=\"params\">schema</span>) </span>&#123;</span><br><span class=\"line\">  modelConfig[schema] = &#123;</span><br><span class=\"line\">    dataSource: dataSourceName,</span><br><span class=\"line\">    public: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveAndExposeSchemas</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fs.writeFile(<span class=\"string\">'server/model-config.json'</span>, prettyJSON(modelConfig), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Schemas are exposed!'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'All thing is OK,Bye Bye!'</span>);</span><br><span class=\"line\">    process.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prettyJSON</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 2 means 'Indent with 2 spaces'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(str, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码与官方文档中的差异在于使用的方法不同,这里使用的是discoverSchema().</p>\n<p>更多的与discovery相关的方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List database tables and/or views,把数据库里的表名/视图名都取出来</span></span><br><span class=\"line\">ds.discoverModelDefinitions(&#123;<span class=\"attr\">views</span>: <span class=\"literal\">true</span>, <span class=\"attr\">limit</span>: <span class=\"number\">20</span>&#125;, cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List database columns for a given table/view,把表/视图字段取回来</span></span><br><span class=\"line\">ds.discoverModelProperties(<span class=\"string\">'PRODUCT'</span>, cb);</span><br><span class=\"line\">ds.discoverModelProperties(<span class=\"string\">'INVENTORY_VIEW'</span>, &#123;<span class=\"attr\">owner</span>: <span class=\"string\">'STRONGLOOP'</span>&#125;, cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List primary keys for a given table</span></span><br><span class=\"line\">ds.discoverPrimaryKeys(<span class=\"string\">'INVENTORY'</span>,  cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List foreign keys for a given table</span></span><br><span class=\"line\">ds.discoverForeignKeys(<span class=\"string\">'INVENTORY'</span>,  cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List foreign keys that reference the primary key of the given table</span></span><br><span class=\"line\">ds.discoverExportedForeignKeys(<span class=\"string\">'PRODUCT'</span>,  cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a model definition by discovering the given table</span></span><br><span class=\"line\">ds.discoverSchema(table, &#123;<span class=\"attr\">owner</span>: <span class=\"string\">'STRONGLOOP'</span>&#125;, cb);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.1.3\"> 1.1.3 从非结构化数据中创建model </h4>\n\n<p><strong><em>译注:</em></strong> 如果你是从1.1.2顺读下来的话,也许会以为这节内容跟上节差不多,只不过discovery的对象从关系型数据库变成了mongodb等nosql数据源.但事实不是这样的,LoopBack MongoDB connector不支持discovery.你只能从一个写好的json对象中创建model,所以不要误解了.</p>\n<p>对于非结构化数据(如NoSQL数据库和REST服务中的数据),您可以使用实例内省创建模型.实例内省使用buildModelFromInstance()从单个模型<strong>实例</strong>创建模型(<em>译注:我理解的实例就是一个json,看下面的代码,user就是一个实例,所以, buildModelFromInstance只能从一个json对象去创建model</em>)。</p>\n<p>以下数据源支持实例内省()：</p>\n<ul>\n<li><p><strong>MongoDB data sources</strong></p>\n</li>\n<li><p><strong>REST data sources</strong></p>\n</li>\n<li><p><strong>SOAP data sources</strong></p>\n</li>\n</ul>\n<p>举例如下(/server/boot/script.js):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> db = app.dataSources.db;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Instance JSON document</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Joe'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">30</span>,</span><br><span class=\"line\">    birthday: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    vip: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    address: &#123;</span><br><span class=\"line\">      street: <span class=\"string\">'1 Main St'</span>,</span><br><span class=\"line\">      city: <span class=\"string\">'San Jose'</span>,</span><br><span class=\"line\">      state: <span class=\"string\">'CA'</span>,</span><br><span class=\"line\">      zipcode: <span class=\"string\">'95131'</span>,</span><br><span class=\"line\">      country: <span class=\"string\">'US'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    friends: [<span class=\"string\">'John'</span>, <span class=\"string\">'Mary'</span>],</span><br><span class=\"line\">    emails: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">label</span>: <span class=\"string\">'work'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'x@sample.com'</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">label</span>: <span class=\"string\">'home'</span>, <span class=\"attr\">id</span>: <span class=\"string\">'x@home.com'</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    tags: []</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a model from the user instance</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> User = db.buildModelFromInstance(<span class=\"string\">'User'</span>, user, &#123;<span class=\"attr\">idInjection</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Use the model for create, retrieve, update, and delete</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> User(user);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj.toObject());</span><br><span class=\"line\"></span><br><span class=\"line\">  User.create(user, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, u1</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Created: '</span>, u1.toObject());</span><br><span class=\"line\">    User.findById(u1.id, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, u2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Found: '</span>, u2.toObject());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>译注:</em> 上述代码还是不能实现创建model的json文件,登记注册model,感兴趣的可以自己查查API来实现这一需求,这里就不写了.</p>\n<hr>\n<h4 id=\"1.2\"> 1.2 定制Models </h4>\n\n<p>使用<code>model generator</code>创建一个model后,你就可以开始定制它了.定制的方式有多种,你可以使用<code>command-line tool</code>,或者直接编辑json文件,也可以编写JavaScript代码来实现定制.</p>\n<h5 id=\"使用command-line-tool定制model\"><a href=\"#使用command-line-tool定制model\" class=\"headerlink\" title=\"使用command-line tool定制model\"></a>使用command-line tool定制model</h5><blockquote>\n<p>  注意: 你不能对一个已经存在的model使用model generator来进行修改和定制.但是,您可以使用命令行工具手动和在一定程度上自定义模型,详见下文.</p>\n</blockquote>\n<p>能使用的命令行工具包括:</p>\n<ul>\n<li><p><strong>property generator</strong>.</p>\n</li>\n<li><p><strong>relation generator</strong>.</p>\n</li>\n<li><p><strong>ACL generator</strong>.</p>\n</li>\n</ul>\n<h5 id=\"通过编辑JSON文件来定制model\"><a href=\"#通过编辑JSON文件来定制model\" class=\"headerlink\" title=\"通过编辑JSON文件来定制model\"></a>通过编辑JSON文件来定制model</h5><p>下面是一个model的默认属性(用model generator创建model后自动添加的几个属性),例如这个model的json文件是common/models/model.json,它的内容如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"myModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">     // Properties listed here depend on your responses to the CLI</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"validations\": [],</span><br><span class=\"line\">  \"relations\": &#123;&#125;,</span><br><span class=\"line\">  \"acls\": [],</span><br><span class=\"line\">  \"methods\": []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>LoopBack为model添加了如上这些基本设置,对大多数model来说,这是比较直接的.但是对ACL设置来说,可能会有更复杂的交互,想了解更多关于acl的设置,请看<strong>ACL rule precedence</strong></p>\n<p><strong>从另一个model进行扩展</strong></p>\n<p>你可以让一个model扩展或继承自一个已经存在的model.比如内置的User或者你自定义的model.在model generator中,选择“Select model’s base class”中的model name即可.或者,你可以编辑json文件中的“base”属性来指定你的model是扩展自哪个model.</p>\n<blockquote>\n<p> 注意:如果你的model需要保存数据到mysql或者mongodb等数据库,那么基类需要选择PersistedModel. 如果选择Model作为model的基类,那你的model就不具备CRUD方法.</p>\n</blockquote>\n<p>例如,下面是customer.json的一段摘抄.它的基类是内置的User:</p>\n<p>/common/models/model.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;Customer&quot;,</span><br><span class=\"line\">  &quot;base&quot;: &quot;User&quot;,</span><br><span class=\"line\">  &quot;idInjection&quot;: false,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>强烈注意:千万不要修改内置model的属性,如果你确实想这么做.你需要创建有一个自定义的model,它继承自你想要修改的那个内置model,然后修改你自定义的这个model来代替直接修改内置model.</p>\n</blockquote>\n<p>你可以创建一个自定义model,它扩展自一个单个的、自定义的model.例如,先定义一个model叫做”mMyBaseModel”,然后你就可以定义一个名为”MyModel”的model,他的基类是”mMyBaseModel”,他的json文件的内容如下:</p>\n<p>common/models/MyModel.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"MyBaseModel\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后,你可以为这个model增加一些新的属性,例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">   <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"User\"</span>,</span><br><span class=\"line\">   <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"favoriteMovie\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>了解更多的数据类型信息,请查看<strong>LoopBack types</strong></p>\n<p><strong>定制model的其他设置</strong></p>\n<p>下面是4个你通常要定制的重要设置(<em>译注:</em> 只翻译了原文内容最多的strict,其余自己理解):</p>\n<ul>\n<li><p><strong>plural</strong> - 如果不指定,那默认就是英文规则的复数形式,比如book的复数是books,city的复数是cities.</p>\n</li>\n<li><p><strong>strict</strong> - 这个属性的默认值是false,如果你把它设置为true.那就代表该model仅仅保存具有预定义属性的实例,save或update操作中的任何其他属性都不会保留到数据源.(<em>译注:</em> 我的理解是,假设你的model的json文件中,”properties”属性下面预定义了6个字段,这时你开启这个属性为true,那么在save或update操作时,loopback就只认这6个字段,多余的一概抛弃).</p>\n</li>\n<li><p><strong>idInjection</strong> - Whether to automatically add an id property to the model. True by default.</p>\n</li>\n<li><p><strong>http.path</strong> - customized HTTP path of REST endpoints.</p>\n</li>\n</ul>\n<p>访问<strong>Model definition JSON file</strong>可以了解更多信息.</p>\n<h5 id=\"通过JavaScript代码定制model\"><a href=\"#通过JavaScript代码定制model\" class=\"headerlink\" title=\"通过JavaScript代码定制model\"></a>通过JavaScript代码定制model</h5><p>以编程方式扩展model的基本方法是编辑model对应的js文件,例如，“customer”模型有一个common/ models/customer.js文件（如果使用模型生成器创建模型）.该js脚本在定义模型之后立即执行.<strong>请将脚本视为模型定义的一部分</strong>(使用它进行模型配置和注册).在js文件里,您可以为特定属性添加model关系,复杂验证或默认函数.基本上,您不能在JSON中执行的任何操作都可以在js文件中实现.<strong>但是请注意,此时脚本无权访问app实例</strong>(<strong><em>译注:这点非常重要,切记,切记.要访问的话需要在boot目录下的脚本中实现</em></strong>)</p>\n<p>在这个js文件中,你还可以通过添加remote method或operation hook来扩展model.</p>\n<p>如果不想通过REST公开你的方法,则只需要省略remoteMethod()的调用即可.</p>\n<p><strong>更改内置model的实现</strong></p>\n<p><strong>通过server boot script</strong></p>\n<p>当将model附加到持久数据源时,它将成为扩展PersistedModel的持久化model.还记得前面介绍过的PersistedModel的特性么,那就是LoopBack会自动为你的model添加一组内置的CRUD操作方法.内置的CRUD不一定能完全符合你的要求,在某些情况下,您可能想要更改实现,这时候请使用/server/boot目录中的JavaScript文件执行此操作.例如,以下代码显示了如何重新实现Note.find()以覆盖内置的find()方法.</p>\n<p>/server/boot/script.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Note = app.models.Note;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> find = Note.find;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  Note.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filter, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(filter) &#123;</span><br><span class=\"line\">      key = <span class=\"built_in\">JSON</span>.stringify(filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cachedResults = cache[key];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cachedResults) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'serving from cache'</span>);</span><br><span class=\"line\">      process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, cachedResults);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'serving from db'</span>);</span><br><span class=\"line\">      find.call(Note, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!err) &#123;</span><br><span class=\"line\">          cache[key] = results;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cb(err, results);</span><br><span class=\"line\">      &#125;);;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过你的model’s script</strong></p>\n<p>所谓你的model’s script.就是创建model时配套生成的那个js文件.</p>\n<p>common/models/MyModel.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  MyModel.on(<span class=\"string\">'dataSourceAttached'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> find = MyModel.find;</span><br><span class=\"line\">    MyModel.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filter, cb</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> find.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.3\"> 1.3 将Model附加到数据源 </h4>\n\n<h5 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要:\"></a>概要:</h5><p>数据源使model能够访问和修改后端系统(如关系数据库)中的数据.数据源封装业务逻辑,以在model和各种后端系统(如关系数据库、REST API、SOAP Web服务、存储服务等)之间交换数据.数据源通常提供创建、检索、更新和删除(CRUD)功能.</p>\n<p>model通过可扩展和可定制的<code>connectors</code>访问数据源.一般来说,应用程序代码不直接使用连接器.相反,DataSource类提供了一个API来配置底层连接器,你可以使用这些API。</p>\n<p>内置的内存connectors适合开发环境,要使用其他数据源：</p>\n<ul>\n<li><p>使用data source generator生成器创建新的数据源，并将其添加到应用程序的datasources.json中.</p>\n</li>\n<li><p>编辑datasources.json以为数据源添加适当的凭据.</p>\n</li>\n<li><p>创建model以连接到数据源或修改现有model定义以使用你刚才添加的那个connectors.</p>\n</li>\n</ul>\n<h5 id=\"添加一个数据源\"><a href=\"#添加一个数据源\" class=\"headerlink\" title=\"添加一个数据源\"></a>添加一个数据源</h5><p>使用<code>data source generator</code>添加一个新的数据源:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:datasource</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apic create --<span class=\"built_in\">type</span> datasource</span><br></pre></td></tr></table></figure>\n\n<p>你还可以使用<code>API Designer tool</code>添加数据源.</p>\n<p>tool会提示你输入新数据源的名字以及要使用哪种connectors,例如:MySQL, Oracle, REST等等. 下面是一个datasources.json的例子:</p>\n<p>/server/datasources.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"corp1\": &#123;</span><br><span class=\"line\">  \"name\": \"corp1\",</span><br><span class=\"line\">  \"connector\": \"mysql\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>这个例子创建了一个使用mysql连接器的,名字叫做corp1的数据源.</p>\n<h5 id=\"添加数据源的访问凭证\"><a href=\"#添加数据源的访问凭证\" class=\"headerlink\" title=\"添加数据源的访问凭证\"></a>添加数据源的访问凭证</h5><p>编辑datasources.json来为数据源添加必要的访问权限信息.例如hostname, username,password, database name.</p>\n<p>例如:</p>\n<p>/server/datasources.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"corp1\": &#123;</span><br><span class=\"line\">    \"name\": \"corp1\",</span><br><span class=\"line\">    \"connector\": \"mysql\",</span><br><span class=\"line\">    \"host\": \"your-mysql-server.foo.com\",</span><br><span class=\"line\">    \"user\": \"db-username\",</span><br><span class=\"line\">    \"password\": \"db-password\",</span><br><span class=\"line\">    \"database\": \"your-db-name\"</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置model使用数据源\"><a href=\"#配置model使用数据源\" class=\"headerlink\" title=\"配置model使用数据源\"></a>配置model使用数据源</h5><p>当你使用model generator创建了新的model时.你可以从列表中选择已经添加好的数据源.如果你没添加过数据源,那么列表中只有一个默认的db数据源,这是个内存数据源.</p>\n<p>编辑应用程序的server/model-config.json文件来指定数据源.例如,让myModel使用corp1数据源.</p>\n<p>server/model-config.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"myModel\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"corp1\",</span><br><span class=\"line\">    \"public\": true</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下,model generator创建model时使用db数据源.</p>\n<hr>\n<h4 id=\"1.4\"> 1.4 通过REST公开Model </h4>\n\n<h5 id=\"概要-1\"><a href=\"#概要-1\" class=\"headerlink\" title=\"概要\"></a>概要</h5><p>LoopBack的model自动具有一组标准的<code>HTTP endpoints</code>,它们为model数据上的创建,读取,更新和删除(CRUD)操作提供REST API.要实现这个,只需要设置model-config.json中的public属性来指定是否公开model的REST API,例如:</p>\n<p>/server/model-config.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"MyModel\": &#123;</span><br><span class=\"line\">  \"public\": true,</span><br><span class=\"line\">  \"dataSource\": \"db\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>不想公开REST API,把public属性改为false就妥之.</p>\n<p><strong>REST paths</strong></p>\n<p>默认情况下,你的model的REST API访问路径是你的model名字加复数:</p>\n<p><em>译注:这段我没看明白,因为官文的原文是By default, the REST APIs are mounted to the plural of the model name; specifically:,这个specifically不好翻译.我个人对这段的理解是,下面这3个是个优先级,REST API的访问路径会按照如下的优先级去查找,例如,我的model叫cust,我设置了Model.settings.http.path=/custone,那路径就会变成这个,如果我没设置,那就默认用复数的名字作为路径</em></p>\n<ul>\n<li><p>Model.settings.http.path</p>\n</li>\n<li><p>plural, 自定义的复数形式(在Model definition JSON文件中)</p>\n</li>\n<li><p>默认情况下,自动在model名字后面加复数.例如你有个model叫location,默认情况下它被加载为/locations(后面加个复数s).</p>\n</li>\n</ul>\n<p><strong>使用REST Router</strong> </p>\n<p>如果你使用application generator创建你的应用程序, LoopBack会自动添加REST中间件并且把public属性设为true(公开REST).你不需要做任何其他事情.</p>\n<p>人工公开model的REST方法请使用loopback.rest,例如下面的代码:</p>\n<p>/server/server.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = loopback();</span><br><span class=\"line\">app.use(loopback.rest());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Expose the `Product` model</span></span><br><span class=\"line\">app.model(Product);</span><br></pre></td></tr></table></figure>\n\n<p>添加完上述代码后,名为Product的model将会自动具备了从远程mobile访问的create, read, update, delete方法. 此时,model是无模式的并且数据是未被检查的.</p>\n<p>你可以在<a href=\"http://localhost:3000/explorer查看生成的REST文档\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/explorer查看生成的REST文档</a>. </p>\n<p>LoopBack提供了一组具有REST API的内置model.有关详细信息,请查看<strong>Built-in models REST API</strong>.</p>\n<p><strong>Request format</strong></p>\n<p>对于POST和PUT请求,请求主体可以是JSON,XML或urlencoded格式,这取决于Content-Type头设置为application/json,application/xml或application/x-www-form-urlencoded.</p>\n<blockquote>\n<p> 提示:将请求的Accept头设置为application/vnd.api-json将导致响应的Content-Type头被自动设置为application/vnd.api-json.</p>\n</blockquote>\n<p><strong>使用HTTP查询字符串传递JSON对象或数组</strong></p>\n<p>某些REST API从查询字符串中获取json对象或数组.LoopBack支持2种风格来将json对象/数组编码为查询参数.</p>\n<ul>\n<li><p>Syntax from node-querystring (qs)</p>\n</li>\n<li><p>Stringified JSON</p>\n</li>\n</ul>\n<p>例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000/api/users?filter[where][username]=john&amp;filter[where][email]=callback@strongloop.com</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:3000/api/users?filter=&#123;&quot;where&quot;:&#123;&quot;username&quot;:&quot;john&quot;,&quot;email&quot;:&quot;callback@strongloop.com&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个表格描述了2种风格的编码格式:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>JSON object/array for the filter object</th>\n      <th>qs style</th>\n      <th>Stringified JSON</th>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\nwhere: {\n  username: 'john',\n  email: 'callback@strongloop.com'\n  }\n}</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter[where][username]=john<br>&amp;</code>filter[where][email]=callback@strongloop.com</pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"where\":\n{\"username\":\"john\",\n \"email\":\"callback@strongloop.com\"}\n}</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\nwhere: {\n    username: {inq: ['john', 'mary']}\n  }\n}</code></pre>\n      </td>\n      <td>\n        <pre>?filter[where][username][inq][0]=john<br>&amp;filter[where][username][inq][1]=mary</pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"where\":\n  {\"username\":{\"inq\":[\"john\",\"mary\"]}}\n}</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code>{\n  include: ['a', 'b']\n}</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter[include]=a&amp;filter[include]=b</code></pre>\n      </td>\n      <td>\n        <pre><code>?filter={\"include\":[\"a\",\"b\"]}</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p><em>译注:我个人比较喜欢第二种,即Stringified JSON这种filter格式,尤其在strongloop自带的API Explorer中测试API的时候特别方便,请看下图:</em></p>\n<p>在filter那里填<code>{&quot;where&quot;:{&quot;username&quot;:&quot;john&quot;,&quot;email&quot;:&quot;callback@strongloop.com&quot;}}</code>,然后点击try it out,就可以根据指定的用户名和email查询数据了.</p>\n<p><img src=\"img/filter.jpg\" alt=\"filter\"></p>\n<p><strong>Response format</strong></p>\n<p>所有请求的响应格式通常是一个位于body或headers中的JSON对象/数组.有些响应的body是空的,例如:</p>\n<figure class=\"highlight plain\"><figcaption><span>200 OK</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://localhost:3000</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Content-Type: application/json; charset=utf-8</span><br><span class=\"line\">Content-Length: 59</span><br><span class=\"line\">Vary: Accept-Encoding</span><br><span class=\"line\">Date: Fri, 24 Oct 2014 18:02:34 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;title&quot;:&quot;MyNote&quot;,&quot;content&quot;:&quot;This is my first note&quot;,&quot;id&quot;:1&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HTTP status code表示一个请求是否成功:</p>\n<ul>\n<li>Status code 2xx indicates success</li>\n<li>Status code 4xx indicates request related issues.</li>\n<li>Status code 5xx indicates server-side problems</li>\n</ul>\n<p>对错误的响应采用以下JSON格式:</p>\n<ul>\n<li><p>message: String error message.</p>\n</li>\n<li><p>stack: String stack trace.</p>\n</li>\n<li><p>statusCode: Integer HTTP status code.</p>\n</li>\n</ul>\n<p>例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"error\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"could not find a model with id 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"stack\"</span>: <span class=\"string\">\"Error: could not find a model with id 1\\n ...\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"statusCode\"</span>: <span class=\"number\">404</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>禁用API Explorer</strong></p>\n<p>LoopBack API Explorer在开发应用程序时非常有用,但为了安全起见,您可能不想在生产环境中公开它.</p>\n<p>对于使用loopback-component-explorer的应用程序，在生产环境中中禁它可以这么做：</p>\n<ul>\n<li><p>将NODE_ENV环境变量设置为“production”.</p>\n</li>\n<li><p>然后在server/component-config.production.json中:</p>\n</li>\n</ul>\n<p>server/component-config.production.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"loopback-component-explorer\"</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"预定义remote-methods\"><a href=\"#预定义remote-methods\" class=\"headerlink\" title=\"预定义remote methods\"></a>预定义remote methods</h5><p>默认情况下,对于那种后面是数据源支持的model(<em>译注:有点莫名,有不是数据源支持的model么</em>),LoopBack为他们默认公开了创建,读取,更新和删除(CRUD)操作的REST API.</p>\n<p>例如,有一个model名叫Location,LoopBack会自动创建多个具有相应REST端点的Node方法,如下表所示:</p>\n<table>\n<thead>\n<tr>\n<th>Model (Node) API</th>\n<th>HTTP Method</th>\n<th>Example Path</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-create\" target=\"_blank\" rel=\"noopener\">create()</a></td>\n<td>POST</td>\n<td>/locations</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-replaceorcreate\" target=\"_blank\" rel=\"noopener\">replaceOrCreate()</a></td>\n<td>PUT</td>\n<td>/locations</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-upsert\" target=\"_blank\" rel=\"noopener\">patchOrCreate()</a></td>\n<td>PATCH</td>\n<td>/locations</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-exists\" target=\"_blank\" rel=\"noopener\">exists()</a></td>\n<td>GET</td>\n<td>/locations/:id/exists</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findbyid\" target=\"_blank\" rel=\"noopener\">findById()</a></td>\n<td>GET</td>\n<td>/locations/:id</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-find\" target=\"_blank\" rel=\"noopener\">find()</a></td>\n<td>GET</td>\n<td>/locations</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findone\" target=\"_blank\" rel=\"noopener\">findOne()</a></td>\n<td>GET</td>\n<td>/locations/findOne</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid\" target=\"_blank\" rel=\"noopener\">destroyById() or deleteById()</a></td>\n<td>DELETE</td>\n<td>/locations/:id</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-count\" target=\"_blank\" rel=\"noopener\">count()</a></td>\n<td>GET</td>\n<td>/locations/count</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-replacebyid\" target=\"_blank\" rel=\"noopener\">replaceById()</a></td>\n<td>PUT</td>\n<td>/locations/:id</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattributes\" target=\"_blank\" rel=\"noopener\">prototype.patchAttributes()</a></td>\n<td>PATCH</td>\n<td>/locations/:id</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-createchangestream\" target=\"_blank\" rel=\"noopener\">createChangeStream()</a></td>\n<td>POST</td>\n<td>/locations/change-stream</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-updateall\" target=\"_blank\" rel=\"noopener\">updateAll()</a></td>\n<td>POST</td>\n<td>/locations/update</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-replaceorcreate\" target=\"_blank\" rel=\"noopener\">replaceOrCreate()</a></td>\n<td>POST</td>\n<td>/locations/replaceOrCreate</td>\n</tr>\n<tr>\n<td><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-replacebyid\" target=\"_blank\" rel=\"noopener\">replaceById()</a></td>\n<td>POST</td>\n<td>/locations/:id/replace</td>\n</tr>\n</tbody></table>\n<p>LoopBack 2.0和3.0在默认公开的这些API中唯一不同的是HTTP PUT(both PUT /api/my-models and PUT /api/my-models/:id),在2.x中,默认情况下patch,部分更新.在3.0中,是完全替换更新.</p>\n<p><strong><em>译注:官方文档中这一节就这些内容,如果仅看篇幅很容易忽略这节的重要性!请回想一下,截至目前,我们掌握了创建model,还知道了从REST API上查询数据(HTTP),但在js代码中怎么获取model的数据?这就是remote methods发挥作用的时候.现在可以不必深入了解,心中有数就可以了.</em></strong></p>\n<p><strong>replaceOnPUT flag</strong></p>\n<p>使用model.json中的replaceOnPUT属性来更改mapping replace和update methods的行为.如果replaceOnPUT为true,replaceOrCreate和replaceById使用HTTP PUT方法.如果为false,updateOrCreate和updateAttributes/patchAttributes使用HTTP PUT方法。</p>\n<p>以下示例说明如何在location.json中设置replaceOnPUT：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: \"location\",</span><br><span class=\"line\">  plural: \"locations\",</span><br><span class=\"line\">  relations: &#123;…&#125;,</span><br><span class=\"line\">  acls: […],</span><br><span class=\"line\">  properties: &#123; … &#125;,</span><br><span class=\"line\">  replaceOnPUT: true</span><br><span class=\"line\">&#125;...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"公开和隐藏models-methods-and-endpoints\"><a href=\"#公开和隐藏models-methods-and-endpoints\" class=\"headerlink\" title=\"公开和隐藏models, methods, and endpoints\"></a>公开和隐藏models, methods, and endpoints</h5><p>公开model到REST上,只需设置public属性为true(/server/model-config.json):</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"Role\": &#123;</span><br><span class=\"line\">  \"dataSource\": \"db\",</span><br><span class=\"line\">  \"public\": false</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏methods and REST endpoints</strong></p>\n<p>如果不想公开某些创建,检索,更新和删除操作,可以通过在模型上调用disableRemoteMethod()来轻松隐藏它们.例如在model的js文件中,您将添加以下行以隐藏某个预定义的远程方法:</p>\n<p>common/models/location.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isStatic = <span class=\"literal\">true</span>;</span><br><span class=\"line\">MyModel.disableRemoteMethod(<span class=\"string\">'deleteById'</span>, isStatic);</span><br></pre></td></tr></table></figure>\n\n<p>现在deleteById()操作以及它对应的REST endpoint就被隐藏了.</p>\n<blockquote>\n<p> 重要提醒:确定你是在你自己的model上调用disableRemoteMethod(),而不是在内置model进行调用.</p>\n</blockquote>\n<p>下面这个例子隐藏除了login和logout的其余所有方法:</p>\n<p>In server/model-config.json:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"MyUser\": &#123;</span><br><span class=\"line\">  \"dataSource\": \"db\",</span><br><span class=\"line\">  \"public\": true,</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"remoting\": &#123;</span><br><span class=\"line\">      \"sharedMethods\": &#123;</span><br><span class=\"line\">        \"*\": false,</span><br><span class=\"line\">        \"login\": true,</span><br><span class=\"line\">        \"logout\": true</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了上面那种方法,还可以在<code>config.json</code>的remoting对象是隐藏他们:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"remoting\": &#123;</span><br><span class=\"line\">  \"context\": false,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"sharedMethods\": &#123;</span><br><span class=\"line\">    \"*\": false,</span><br><span class=\"line\">    \"login\": true,</span><br><span class=\"line\">    \"logout\": true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以通过你的model的js文件来禁用remoteMethods:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"create\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"upsert\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"updateAll\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"updateAttributes\"</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"find\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"findById\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"findOne\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"deleteById\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"confirm\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"count\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"exists\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"resetPassword\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__count__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__create__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__delete__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__destroyById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__findById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__get__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__updateById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Read-Only endpoints的例子</strong></p>\n<p>你可能想让你的model只公开read-only操作,隐藏其余所有的POST, PUT, DELETE.请看下面的例子:</p>\n<p>common/models/model.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'create'</span>, <span class=\"literal\">true</span>);\t\t\t\t<span class=\"comment\">// Removes (POST) /products</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'upsert'</span>, <span class=\"literal\">true</span>);\t\t\t\t<span class=\"comment\">// Removes (PUT) /products</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'deleteById'</span>, <span class=\"literal\">true</span>);\t\t\t<span class=\"comment\">// Removes (DELETE) /products/:id</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">\"updateAll\"</span>, <span class=\"literal\">true</span>);\t\t\t\t<span class=\"comment\">// Removes (POST) /products/update</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">\"updateAttributes\"</span>, <span class=\"literal\">false</span>);\t\t<span class=\"comment\">// Removes (PUT) /products/:id</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'createChangeStream'</span>, <span class=\"literal\">true</span>);\t<span class=\"comment\">// removes (GET|POST) /products/change-stream</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏相关model的endpoints</strong></p>\n<p>使用disableRemoteMethod()来禁用相关model的REST endpoints.</p>\n<p>例如,有2个model,分别叫post和tag,他们的关系是post hasMany tags.添加如下代码到/common/models/post.js去禁用相关model(tag)的remote methods和对应的REST endpoints: </p>\n<p>common/models/post.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Post</span>) </span>&#123;</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__get__tags'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__create__tags'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__destroyById__accessTokens'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// DELETE</span></span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__updateById__accessTokens'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// PUT</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏属性</strong></p>\n<p>上面说的都是隐藏REST或方法,如果想隐藏属性(可以理解为表字段)T,那就使用hidden属性就可以了.例如:</p>\n<p>common/models/user.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  \"properties\": &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"password\": &#123;</span><br><span class=\"line\">      \"type\": \"string\",</span><br><span class=\"line\">      \"required\": true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">   \"hidden\": [\"password\"],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>更多细节参看 <a href=\"Model-definition-JSON-file.html#hidden-properties\">Model definition JSON file (Hidden properties)</a>.</p>\n<hr>\n<h4 id=\"1.5\"> 1.5 验证Model的数据 </h4>\n\n<p>模式(schema)对model施加了限制,以确保model将保存与对应的数据库表匹配的数据.</p>\n<p>model可以在将数据传递到数据存储(例如数据库)之前验证数据,以确保其符合后端模式(schema).</p>\n<h5 id=\"为model添加schema-模式\"><a href=\"#为model添加schema-模式\" class=\"headerlink\" title=\"为model添加schema(模式)\"></a>为model添加schema(模式)</h5><p>验证数据的一种方法是创建model schema,LoopBack将确保数据符合该模式定义.</p>\n<p>例如,假设您的应用程序有一个名为product的model.以下代码定义了一个模式并将其分配给model.模式定义了两个属性:name,必需的字符串属性和price,可选的数字属性.</p>\n<p>common/models/product.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> productSchema = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: &#123; <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>, <span class=\"string\">\"required\"</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"price\"</span>: <span class=\"string\">\"number\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 实际上下面这行代码会报错,因为找不到Model,把Model换成Product就可以了.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Product = Model.extend(<span class=\"string\">'product'</span>, productSchema);</span><br></pre></td></tr></table></figure>\n\n<p>如果客户端尝试使用额外属性(例如一个名为description的属性)保存产品,那么在应用将数据保存在模型中之前,会删除这些属性.此外,由于name是必需的值,因此只有在产品包含name属性的值时,才会保存模型.</p>\n<p><strong><em>译注: 以下为实际测试,请仔细阅读</em></strong></p>\n<p><strong>基础准备:</strong></p>\n<p>首先,我在mysql数据库里建了一个表,名为city,有2个字段,分别是city_id(int类型),city_name(字符串类型),其中city_id为主键.</p>\n<p>然后,我在strongloop中建立了一个model,名为City,注意下面的model定义json中的细节.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"City\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  \"idInjection\": true,  //  先看一下这个参数,记住它是true,后面会说.</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"validateUpsert\": true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"properties\": &#123;</span><br><span class=\"line\">    \"city_id\": &#123;</span><br><span class=\"line\">      \"type\": \"number\",</span><br><span class=\"line\">      \"required\": true,</span><br><span class=\"line\">      \"id\": true // 请思考为什么要有这个属性?</span><br><span class=\"line\">      // 答案:如果我不设置这个参数,并且上面的\"idInjection\"参数还是true</span><br><span class=\"line\">      // 那么strongloop这个傻x就会默认的认为你的表主键叫\"id\",而事实上是city_id.</span><br><span class=\"line\">      // 所以在post的时候会报错.</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"city_name\": &#123;</span><br><span class=\"line\">      \"type\": \"string\",</span><br><span class=\"line\">      \"required\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"validations\": [],</span><br><span class=\"line\">  \"relations\": &#123;&#125;,</span><br><span class=\"line\">  \"acls\": [],</span><br><span class=\"line\">  \"methods\": &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来启动服务,到API Explorer中看一下city这个model,并进入到post一节,准备开始测试.如下图所示:</p>\n<p><img src=\"img/validaTest.jpg\" alt=\"model\"></p>\n<p>看一下上图我画红框地方,你会发现我并没有像上面文档要求的,在js文件里定义schema,但是model schema已经存在了,并且就是你json中定义的样子.</p>\n<p><strong>测试一:多加个schema中没有的字段,然后post,看看是什么效果</strong></p>\n<p>我在上图的data区域内输入如下内容:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"city_id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city_name\"</span>: <span class=\"string\">\"Haerbin\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"rem\"</span>:<span class=\"string\">\"我是个多加的字段\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后点击try it out!</p>\n<p>奇迹出现了!!!请看下图,strongloop居然告诉我成功了:</p>\n<p><img src=\"img/postField.jpg\" alt=\"ok\"></p>\n<p>赶紧到数据库里查一眼,确实插入进去了,新增的字段被忽略了.如下图所示:</p>\n<p><img src=\"img/dataOK.jpg\" alt=\"dataok\"></p>\n<p>如此智能和灵活,也不知道是好是坏!并且和我想象中的schema会约束数据有点不符!</p>\n<p><strong>测试二:在js中添加schema,然后多加个schema中没有的字段去post,看看是什么效果</strong></p>\n<p>首先,我在city的js文件中添加如下代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">City</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> citySchema = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"city_id\"</span>: &#123; <span class=\"string\">\"type\"</span>: <span class=\"string\">\"number\"</span>, <span class=\"string\">\"required\"</span>: <span class=\"literal\">true</span>, <span class=\"string\">\"id\"</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"city_name\"</span>: &#123; <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>, <span class=\"string\">\"required\"</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"rem\"</span>: &#123; <span class=\"string\">\"type\"</span>: <span class=\"string\">\"string\"</span>, <span class=\"string\">\"required\"</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> City = City.extend(<span class=\"string\">'City'</span>, citySchema);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>请注意,上面代码中的”rem”在model的json定义中是不存在的.</p>\n<p>然后我重复上面的操作,到API Explorer中进行测试,看下图所示:</p>\n<p><img src=\"img/vaTest2.jpg\" alt=\"vaTest2\"></p>\n<p>请注意:上图中model schema红框那里的内容变成了我在js中定义的内容.作为知识要点回顾,这说明js和json定义model都是一样的.</p>\n<p>同样的,上面的操作又成功了,数据库里新增了一条记录.这和我想象的还不一样,我以为官方文档中的代码一旦添加到js文件中,就会约束数据,但实际还是没限制(不能说没限制,多余数据被抛弃了).</p>\n<p><strong>测试三:增加strict参数</strong></p>\n<p>如果我想实现”model定义了几个属性,post的时候如果有多余属性就让strongloop报错”,应该怎么操作.</p>\n<p>回想一下,上面其实提到过,在mode的json文件中,增加一条参数.”strict”: true,就可以了.</p>\n<p>测试一下,添加完这个参数,在用多余的字段去post就会报错,如下图所示:</p>\n<p><img src=\"img/vaPostErr.jpg\" alt=\"vaPostErr\"></p>\n<p>我还做了个测试,就不贴图了.我测了一下,把city_id输入个字符串(不是数字),然后去post,strongloop会报错(但是报错信息的内容比较恶心,居然提示我city_id不能为空,其实应该提示类型不符).这和下文中要讲的一点一致.那就是model会自动加载后面表格中所列的那些验证方法.</p>\n<p><strong>测试结论:</strong></p>\n<p>其实我主要是想吐槽一下strongloop的官方文档,可能是我智商低,我读到这里的时候,以为按照它要求的,在js文件中添加了schema就可以验证数据了.但实际测试真不是那么回事.所以,不要太相信官文,还是要自己多做测试.</p>\n<p><strong><em>译注: 以上为实际测试,请仔细阅读</em></strong></p>\n<h5 id=\"使用验证方法\"><a href=\"#使用验证方法\" class=\"headerlink\" title=\"使用验证方法\"></a>使用验证方法</h5><p>附加到持久数据源的每个model都具有Validatable中混合的验证方法,如下表所示:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesabsenceof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesAbsenceOf</a></td>\n      <td>验证一个或多个指定属性是否缺失.model不应包括被视为有效的属性,验证字段不为空时失败.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesexclusionof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesExclusionOf</a></td>\n      <td>验证排除.要求属性值不在指定的数组中.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesformatof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesFormatOf</a></td>\n      <td>\n        <p>验证格式.要求模型包含与给定格式匹配的属性.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesinclusionof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesInclusionOf</a></td>\n      <td>验证是否包含在集合中.要求属性的值在指定的数组中.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validateslengthof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesLengthOf</a></td>\n      <td>\n        <p>V验证长度.要求属性长度在指定范围内.三种验证：“min”，“max”和“is”.默认错误消息是：</p>\n        <ul>\n          <li>min: too short</li>\n          <li>max: too long</li>\n          <li>is: length is wrong</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesnumericalityof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesNumericalityOf</a></td>\n      <td>验证数字.需要属性的值为整数或数字.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatespresenceof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesPresenceOf</a></td>\n      <td>验证一个或多个指定属性的存在.需要包含一个被认为有效的属性的模型,验证字段为空时失败.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://apidocs.strongloop.com/loopback-datasource-juggler/#validatable-validatesuniquenessof\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">validatesUniquenessOf</a></td>\n      <td>\n        <p>验证唯一性.确保属性的值对模型是唯一的.不适用于所有连接器.目前支持这些连接器.:</p>\n        <ul>\n          <li>In Memory</li>\n          <li>Oracle</li>\n          <li>MongoDB</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>下面是上述那些方法的使用实例:</p>\n<p><strong>Options object</strong></p>\n<p>大多数验证方法接受一个选项参数,其属性取决于所使用的特定方法.不过,有两个共同的适用于所有方法的属性：</p>\n<ul>\n<li><p>message - Error message to use instead of the default message, if validation fails.</p>\n</li>\n<li><p>allowNull - Whether null values are allowed.</p>\n</li>\n</ul>\n<p>请看下面的例子:</p>\n<p>common/models/user.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  user.validatesPresenceOf(<span class=\"string\">'name'</span>, <span class=\"string\">'email'</span>);</span><br><span class=\"line\">  user.validatesLengthOf(<span class=\"string\">'password'</span>, &#123;<span class=\"attr\">min</span>: <span class=\"number\">5</span>, <span class=\"attr\">message</span>: &#123;<span class=\"attr\">min</span>: <span class=\"string\">'Password is too short'</span>&#125;&#125;);</span><br><span class=\"line\">  user.validatesInclusionOf(<span class=\"string\">'gender'</span>, &#123;<span class=\"attr\">in</span>: [<span class=\"string\">'male'</span>, <span class=\"string\">'female'</span>]&#125;);</span><br><span class=\"line\">  user.validatesExclusionOf(<span class=\"string\">'domain'</span>, &#123;<span class=\"attr\">in</span>: [<span class=\"string\">'www'</span>, <span class=\"string\">'billing'</span>, <span class=\"string\">'admin'</span>]&#125;);</span><br><span class=\"line\">  user.validatesNumericalityOf(<span class=\"string\">'age'</span>, &#123;<span class=\"attr\">int</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  user.validatesUniquenessOf(<span class=\"string\">'email'</span>, &#123;<span class=\"attr\">message</span>: <span class=\"string\">'email is not unique'</span>&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>译注:测试一下,不测不放心</em></strong></p>\n<p>在model的js文件中加一个验证city_id是否为数字并且返回指定错误信息的代码,如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">City</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义一个名为customValidator的验证方法</span></span><br><span class=\"line\">  City.validate(<span class=\"string\">'city_id'</span>, customValidator, &#123; <span class=\"attr\">message</span>: <span class=\"string\">'stop瞎整!'</span> &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 判断city_id是否为数字</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customValidator</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"keyword\">this</span>.city_id)) err();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后在API Explorer中测试一下,效果如下:</p>\n<p><img src=\"img/vaDefErr.jpg\" alt=\"vaDefErr\"></p>\n<p>效果还可以,虽然错误信息那块有点多,将来在收拾它.</p>\n<blockquote>\n<p> 提示: 当您在模型实例上调用isValid()时,将调用验证方法,并在每次创建或更新模型实例时自动调用验证方法.您不必自己去调用isValid()来验证数据.要在调用upsert()时强制执行验证约束,请确保在模型定义JSON文件中将validateUpsert选项设置为true.默认情况下,模型生成器将此属性设置为true.</p>\n</blockquote>\n<p>要显式调用验证约束,请调用isValid(),例如:</p>\n<p><strong><em>译注:实际测试下面代码还是不好使,并且代码后面少了个”)”</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user.isValid(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">valid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!valid) &#123;</span><br><span class=\"line\">    user.errors <span class=\"comment\">// hash of errors &#123;attr: [errmessage, errmessage, ...], attr: ...&#125;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个定义验证约束的示例,这次使用正则表达式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]-(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]-)*)|(\\\".-\\\"))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]-\\.)-[a-zA-Z]&#123;2,&#125;))$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">UserModel.validatesFormatOf(<span class=\"string\">'email'</span>, &#123;<span class=\"attr\">with</span>: re, <span class=\"attr\">message</span>: <span class=\"string\">'Must provide a valid email'</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(UserModel.settings.realmRequired || UserModel.settings.realmDelimiter)) &#123;</span><br><span class=\"line\">  UserModel.validatesUniquenessOf(<span class=\"string\">'email'</span>, &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Email already exists'</span>&#125;);</span><br><span class=\"line\">  UserModel.validatesUniquenessOf(<span class=\"string\">'username'</span>, &#123;<span class=\"attr\">message</span>: <span class=\"string\">'User already exists'</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要为创建新模型实例的模型添加验证,您不需要调用isValid().您可以通过添加验证器调用添加验证:</p>\n<p>common/models/MyModel.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  MyModel.validatesLengthOf(<span class=\"string\">'name'</span>, &#123; <span class=\"attr\">min</span>: <span class=\"number\">5</span>, <span class=\"attr\">message</span>: &#123; <span class=\"attr\">min</span>: <span class=\"string\">'Name should be 5- characters'</span> &#125; &#125;);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"本地化验证信息\"><a href=\"#本地化验证信息\" class=\"headerlink\" title=\"本地化验证信息\"></a>本地化验证信息</h5><p>可以在客户端上本地化验证错误消息,而不是修改服务器返回的错误响应.验证错误响应会包含error.details.codes中的错误代码,使客户端能够将错误映射到本地化消息.这里是一个示例错误响应:</p>\n<p>error.details.codes</p>\n<p><strong><em>译注:这段说的比较空,在哪?怎么设置都没说?我在model的js中试了重定义error对象,res对象都不好使,可能是我的问题.</em></strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ValidationError\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"status\"</span>: <span class=\"number\">422</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"The Model instance is not valid. See error object `details` property for more info.\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"statusCode\"</span>: <span class=\"number\">422</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"details\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"context\"</span>: <span class=\"string\">\"user\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"codes\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"password\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"presence\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"email\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"uniqueness\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"messages\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"password\"</span>: [</span><br><span class=\"line\">       <span class=\"string\">\"can't be blank\"</span></span><br><span class=\"line\">     ],</span><br><span class=\"line\">      <span class=\"attr\">\"email\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"Email already exists\"</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6\"> 1.6 创建Model关系 </h4>\n\n<h5 id=\"概述-2\"><a href=\"#概述-2\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>单个模型虽然易于理解和使用.但在现实中,模型通常是有联系(connected)或相关的.当您使用多个模型构建真实的应用程序时,通常需要定义模型之间的关系。 例如：</p>\n<ul>\n<li><p>客户有很多订单,每个订单都属于一个客户.</p>\n</li>\n<li><p>用户可以被分配一个或多个角色,角色可以有零个或多个用户.</p>\n</li>\n<li><p>医生伺候许多患者,患者也可以看许多医生.</p>\n</li>\n</ul>\n<p>对于有联系的模型,LoopBack为每个有联系的model公开了一组API以实现每个<strong>模型实例</strong>之间的交互,而且还可以根据客户端的需要在这些有联系的model上查询和过滤信息.</p>\n<p>您可以在模型之间定义以下关系：</p>\n<ul>\n<li><p>BelongsTo relations</p>\n</li>\n<li><p>HasOne relations</p>\n</li>\n<li><p>HasMany relations</p>\n</li>\n<li><p>HasManyThrough relations</p>\n</li>\n<li><p>HasAndBelongsToMany relations</p>\n</li>\n<li><p>Polymorphic relations(多态关系)</p>\n</li>\n<li><p>Embedded relations(嵌入关系) (embedsOne and embedsMany)</p>\n</li>\n</ul>\n<p>您可以在模型定义JSON文件或JavaScript代码中定义模型关系,最终结果是一样的(<em>译注:但是后面不建议使用js代码</em>).</p>\n<p>当为model定义关系时,LoopBack会向model中添加一组方法,详见每种关系类型的章节.</p>\n<h5 id=\"使用关系生成器relation-generator\"><a href=\"#使用关系生成器relation-generator\" class=\"headerlink\" title=\"使用关系生成器relation generator\"></a>使用关系生成器relation generator</h5><p>对于已经存在的model创建新的关系是非常简单的.使用<code>slc loopback:relation</code>, 或者<code>apic loopback:relation</code>这2个命令即可.</p>\n<p>生成器会提示你输入关系类型(belongsTo, hasMany等)和与之相关联的model name.</p>\n<h5 id=\"Relation-options-关系选项\"><a href=\"#Relation-options-关系选项\" class=\"headerlink\" title=\"Relation options(关系选项)\"></a>Relation options(关系选项)</h5><p>大多数关系类型有3个选项:</p>\n<ul>\n<li><p>Scope (<em>译注:scope可以理解为查询条件或过滤器或者model的实例,可能不太准确</em>)</p>\n</li>\n<li><p>Properties(属性)</p>\n</li>\n<li><p>Custom scope methods(自定义scope方法)</p>\n</li>\n</ul>\n<p><strong>Scope</strong></p>\n<p>scope可以是object或函数,它接受<strong>所有关联scope</strong>上的过滤器/查询条件.</p>\n<p>当scope是object时,它有常见的过滤器选项,例如:where, order, include, limit, offset等</p>\n<p>这些选项会被合并到默认过滤器中,这意味着where部分将进行AND运算(<em>译注:我理解,大概意思就是你定义的where会和原来默认过滤器的where进行AND,而其他的则会覆盖默认过滤器的选项</em>).其他选项通常会覆盖默认值(标准mergeQuery行为).</p>\n<p>当scope是函数时,它将接收当前实例,以及默认过滤器对象(<em>译注:函数入参</em>).</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// only allow products of type: 'shoe', always include products</span></span><br><span class=\"line\">Category.hasMany(Product, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">as</span>: <span class=\"string\">'shoes'</span>, </span><br><span class=\"line\">    <span class=\"comment\">// scope是object</span></span><br><span class=\"line\">    scope: &#123; </span><br><span class=\"line\">        where: &#123; <span class=\"attr\">type</span>: <span class=\"string\">'shoe'</span> &#125;, </span><br><span class=\"line\">        include: <span class=\"string\">'products'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Product.hasMany(Image, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// scope是函数,inst是当前实例,filter是默认过滤器对象.</span></span><br><span class=\"line\">    <span class=\"comment\">// 但inst到底是谁,官文的注释说这里的inst是category,不太理解.</span></span><br><span class=\"line\">    scope: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">inst, filter</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: inst.type &#125;; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);  <span class=\"comment\">// inst is a category - match category type with product type.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Properties</strong></p>\n<p>与scope类似,Properties也可以是object或者函数.</p>\n<p><strong><em>译注,下面两句我保留了原文,因为我翻译的不太好</em></strong></p>\n<p>当Properties是object时,the keys refer to the instance, the value will be the attribute key on the related model (mapping).这个意思大概是说Properties对象的key是<strong>当前实例</strong>的属性引用,而Properties对象的value是它<strong>相关model</strong>的属性映射.</p>\n<p>当Properties是函数时,the resulting object (key/values) are merged into the related model directly.意思大概是说生成的对象直接被合并进它的<strong>关系model</strong>中.</p>\n<p>例如,以下关系将<code>type</code>转换到product这个model,并且在创建时将<code>category name</code>取消规范化为categoryName</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Category.hasMany(Product, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">as</span>: <span class=\"string\">'shoes'</span>, </span><br><span class=\"line\">    properties: &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'type'</span>,</span><br><span class=\"line\">        category: <span class=\"string\">'categoryName'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述是Properties为object时的例子,如果要以函数的形式完成同样的操作,例子如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.hasMany(Image, &#123;</span><br><span class=\"line\">    properties: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">inst</span>) </span>&#123; <span class=\"comment\">// inst is a category</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">type</span>: inst.type, <span class=\"attr\">categoryName</span>: inst.name&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>译注:截至到目前,”// inst is a category”这个注释已经出现了好几次,我没太看懂inst为什么会代表category这个model,按字面理解,它好像更应该代表Product这个model.先这样吧,以后再说.</em></strong></p>\n<p><strong>invertProperties(反转属性)</strong></p>\n<p>通常情况下,属性从父对象传递到子对象,但是有时可以做相反的操作.要启用此选项,请使用invertProperties选项.可以参见<strong>Embedded models (embed with belongsTo)</strong>里面的例子.</p>\n<p><strong>Custom scope methods</strong></p>\n<p>最后,您可以使用scopeMethods属性添加自定义scope method.同样,该选项可以是对象或函数.</p>\n<blockquote>\n<p> 重要提示: 默认情况下,自定义的scope method不会作为remote methods公开,你必须手工设置functionName.shared = true才可以.</p>\n</blockquote>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reorderFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ids, cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// `this` refers to the RelationDefinition  - `images` (relation name) </span></span><br><span class=\"line\">  <span class=\"comment\">// Do some reordering here &amp; save cb(null, [3, 2, 1]); &#125;; </span></span><br><span class=\"line\">  <span class=\"comment\">// Manually declare remoting params </span></span><br><span class=\"line\">  reorderFn.shared = <span class=\"literal\">true</span>; </span><br><span class=\"line\">  reorderFn.accepts = &#123; <span class=\"attr\">arg</span>: <span class=\"string\">'ids'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'array'</span>, <span class=\"attr\">http</span>: &#123; <span class=\"attr\">source</span>: <span class=\"string\">'body'</span> &#125; &#125;; </span><br><span class=\"line\">  reorderFn.returns = &#123; <span class=\"attr\">arg</span>: <span class=\"string\">'ids'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'array'</span>, <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;; </span><br><span class=\"line\">  reorderFn.http = &#123; <span class=\"attr\">verb</span>: <span class=\"string\">'put'</span>, <span class=\"attr\">path</span>: <span class=\"string\">'/images/reorder'</span> &#125;; </span><br><span class=\"line\">  Product.hasMany(Image, &#123; <span class=\"attr\">scopeMethods</span>: &#123; <span class=\"attr\">reorder</span>: reorderFn &#125; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Exposing REST APIs for related models</strong></p>\n<p>以下示例演示如何通过REST API访问连接的模型:</p>\n<p>/server/script.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> db = loopback.createDataSource(&#123;<span class=\"attr\">connector</span>: <span class=\"string\">'memory'</span>&#125;);</span><br><span class=\"line\">  Customer = db.createModel(<span class=\"string\">'customer'</span>, &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Review = db.createModel(<span class=\"string\">'review'</span>, &#123;</span><br><span class=\"line\">    product: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    star: <span class=\"built_in\">Number</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Order = db.createModel(<span class=\"string\">'order'</span>, &#123;</span><br><span class=\"line\">    description: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    total: <span class=\"built_in\">Number</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  Customer.scope(<span class=\"string\">\"youngFolks\"</span>, &#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">age</span>: &#123;<span class=\"attr\">lte</span>: <span class=\"number\">22</span>&#125;&#125;&#125;);</span><br><span class=\"line\">  Review.belongsTo(Customer, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'authorId'</span>, <span class=\"attr\">as</span>: <span class=\"string\">'author'</span>&#125;);</span><br><span class=\"line\">  Customer.hasMany(Review, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'authorId'</span>, <span class=\"attr\">as</span>: <span class=\"string\">'reviews'</span>&#125;);</span><br><span class=\"line\">  Customer.hasMany(Order, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'customerId'</span>, <span class=\"attr\">as</span>: <span class=\"string\">'orders'</span>&#125;);</span><br><span class=\"line\">  Order.belongsTo(Customer, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'customerId'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.1\"> 1.6.1 开启Model关系之旅 </h4>\n\n<blockquote>\n<p> 一个简要的教程,说明如何设置model关系</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/strongloop/loopback-example-relations.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> loopback-example-relations</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ node .</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>译注:原文接下来一堆内容,都是介绍这个git的详细结构和内容的,我省略了大部分内容,只保留了model定义这几个与后续文档紧密相关的内容</em></strong> </p>\n<p><strong>创建models</strong></p>\n<ul>\n<li><p>Name: <code>Customer</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: Yes</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>age<ul>\n<li>number</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Order</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: Yes</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>description<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>date<ul>\n<li>date</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Account</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>date<ul>\n<li>date</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Address</code></p>\n<ul>\n<li>Data source: transient</li>\n<li>Base class: Model</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>street<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>city<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>state<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>zipCode<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Author</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Book</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: Yes</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>EmailAddress</code></p>\n<ul>\n<li>Data source: transient</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>label<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>address<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Link</code></p>\n<ul>\n<li>Data source: transient</li>\n<li>Base class: Model</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>id<ul>\n<li>number</li>\n<li>Required &gt; Please set “id”: true manually for this property, like link.json</li>\n</ul>\n</li>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n<li>notes<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Name: <code>Reader</code></p>\n<ul>\n<li>Data source: db (memory)</li>\n<li>Base class: PersistedModel</li>\n<li>Expose over REST: No</li>\n<li>Custom plural form: Leave blank</li>\n<li>Properties:<ul>\n<li>name<ul>\n<li>String</li>\n<li>Not Required</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>定义model关系</strong></p>\n<ul>\n<li><code>Customer</code><ul>\n<li>has many<ul>\n<li><code>Order</code><ul>\n<li>Property name for the relation: <code>orders</code></li>\n<li>Custom foreign key: <code>customerId</code></li>\n<li>Require a through model: No</li>\n</ul>\n</li>\n<li><code>Other Relations:</code> (please add them manually)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"address\": &#123;</span><br><span class=\"line\">  \"type\": \"embedsOne\",</span><br><span class=\"line\">  \"model\": \"Address\",</span><br><span class=\"line\">  \"property\": \"billingAddress\",</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"validate\": true,</span><br><span class=\"line\">    \"forceId\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"emails\": &#123;</span><br><span class=\"line\">  \"type\": \"embedsMany\",</span><br><span class=\"line\">  \"model\": \"EmailAddress\",</span><br><span class=\"line\">  \"property\": \"emailList\",</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"validate\": true,</span><br><span class=\"line\">    \"forceId\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"accounts\": &#123;</span><br><span class=\"line\">  \"type\": \"referencesMany\",</span><br><span class=\"line\">  \"model\": \"Account\",</span><br><span class=\"line\">  \"property\": \"accountIds\",</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"validate\": true,</span><br><span class=\"line\">    \"forceId\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Book</code>(please add them manually)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"people\": &#123;</span><br><span class=\"line\">    \"type\": \"embedsMany\",</span><br><span class=\"line\">    \"model\": \"Link\",</span><br><span class=\"line\">    \"scope\": &#123;</span><br><span class=\"line\">      \"include\": \"linked\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><code>Link</code>(please add them manually)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"linked\": &#123;</span><br><span class=\"line\">  \"type\": \"belongsTo\",</span><br><span class=\"line\">  \"polymorphic\": &#123;</span><br><span class=\"line\">    \"idType\": \"number\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"properties\": &#123;</span><br><span class=\"line\">    \"name\": \"name\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"invertProperties\": true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Order</code><ul>\n<li>belongs to<ul>\n<li><code>Customer</code><ul>\n<li>Property name for the relation: Leave blank - defaults to customer</li>\n<li>Custom foreign key: Leave blank</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"1.6.2\"> 1.6.2 BelongsTo关系(多对一,或一对一) </h4>\n\n<h5 id=\"概述-3\"><a href=\"#概述-3\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>belongsTo关系是指一个model与另一个model建立多对一(many-to-one)或一对一(one-to-one)的连接.在多对一关系中,声明model的每个实例”属于”另一个model的至多一个实例,而目标model可以具有许多声明model.</p>\n<p>例如,假设应用程序有customers和orders两个model:</p>\n<ul>\n<li><p>每个订单只能由一个客户设置: ”Order belongsTo (one) Customer”.</p>\n</li>\n<li><p>一个客户可以有多个订单: ”Customer hasMany Orders”.</p>\n</li>\n</ul>\n<p>这种belongsTo关系是hasMany关系的逻辑反射.</p>\n<p>声明模型(Order)具有引用目标模型(Customer)的主键属性的外键属性.如果主键不存在,LoopBack将自动添加一个(<em>译注:这句话是说order有个外键,内容是customer的主键</em>).</p>\n<p>另一种belongsTo关系是一对一的关系,它类似于many-to-one,但不同的是,一对一关系要求拥有模型的每个实例只能有一个声明模型的实例.</p>\n<p>例如,假设应用程序有customers和adress两个model：</p>\n<ul>\n<li><p>每个地址只能与一个客户相关联：“地址belongsTo一个客户”。</p>\n</li>\n<li><p>客户只能有一个地址：“客户hasOne一个地址”。</p>\n</li>\n</ul>\n<p>这种belongsTo关系是hasOne关系的逻辑反射.</p>\n<h5 id=\"定义belongsTo关系\"><a href=\"#定义belongsTo关系\" class=\"headerlink\" title=\"定义belongsTo关系\"></a>定义belongsTo关系</h5><p>使用关系生成器<code>relation generator</code>创建两个model之间的关系.该工具将提示您输入model的名称,相关model的名称和其他必需的信息.该工具将相应地修改model定义JSON文件(例如,common/models/customer.json).</p>\n<p>例如，下面是loopback-example-relation中的订单模型的JSON文件：</p>\n<p><strong>common/models/order.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \"name\": \"Order\",          // 这个就是前面说的\"声明模型(model)\"</span><br><span class=\"line\">  \"base\": \"PersistedModel\",</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"customer\": &#123;           // 关系名</span><br><span class=\"line\">      \"type\": \"belongsTo\",  // 关系类型</span><br><span class=\"line\">      \"model\": \"Customer\",  // 关联的model,也就是前面说的\"目标模型(model)\"</span><br><span class=\"line\">      \"foreignKey\": \"\"      // 为空,所以loopback自动指定customer的customerId为外键</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>或者,你还可以通过js代码来定义“belongsTo”关系, <strong>虽然一般不推荐这么做</strong>:</p>\n<p><strong>common/models/order.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Order.belongsTo(Customer, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'customerId'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果声明model没有外键属性,LoopBack将添加一个具有相同名称的属性.属性的类型将与目标模型的<code>id</code>属性的类型相同(<em>译注:id属性是永远存在的,如果你没指定,loopback默认也指定</em>).</p>\n<p>如果不指定它们,那么LoopBack指定关系名称和外键如下：</p>\n<ul>\n<li>关系名称：驼峰式的模型名称,例如,对于“Customer”模型,关系是“customer”.</li>\n<li>外键：附加了<code>Id</code>的关系名称,例如,对于关系名称“customer”,默认外键是“customerId”.</li>\n</ul>\n<h5 id=\"添加method到model\"><a href=\"#添加method到model\" class=\"headerlink\" title=\"添加method到model\"></a>添加method到model</h5><p>一旦定义belongsTo关系,LoopBack会自动添加一个带有关系名称的方法到声明模型类的原型,例如:<code>Order.prototype.customer(...)</code></p>\n<p>根据参数,该方法可用于get或set所属模型实例.方法调用的结果在内部缓存,并通过对方法的后续同步调用提供.</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>order.customer(function(err, customer) {<br>  ...<br>});</pre>\n      </td>\n      <td>Get the customer for the order asynchronously(异步获取定单的客户)</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var customer = order.customer();</pre>\n      </td>\n      <td>\n        <p>Synchronously get the results of a previous get call to <span>customer(...)(同步获取之前的get调用结果给客户)</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre>order.customer(customer);</pre>\n      </td>\n      <td>Set the customer for the order(设置定单的客户)</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"1.6.3\"> 1.6.3 HasOne关系(一对一) </h4>\n\n<h5 id=\"概述-4\"><a href=\"#概述-4\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>hasOne关系与另一个model建立了一对一的连接,这使得声明模型的每个实例具有另一个模型的”has one”实例.hasOne关系是hasMany关系的退化.</p>\n<h5 id=\"定义hasOne关系\"><a href=\"#定义hasOne关系\" class=\"headerlink\" title=\"定义hasOne关系\"></a>定义hasOne关系</h5><p>使用关系生成器<code>relation generator</code>创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).</p>\n<p>例如,假设有两个model:supplier和account</p>\n<p><strong>common/models/supplier.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"supplier\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"supplier_acct\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasOne\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"account\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"supplierId\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>supplier(供应商)有一个account(帐号), 在声明模型上有个外键:account.supplierId -&gt; supplier.id.</p>\n<p><em>译注: 观察上面supplier的json,你会发现,它自身的model定义中只有一个名为name的字段.这时,在它的关系中定义的foreignKey会不会合并到supplier的model中,大家可以试一下.</em></p>\n<p><strong>common/models/account.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"account\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"number\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"required\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"acctmgr\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"supplierId\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"number\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"required\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者,你可以通过模型的js代码来定义“hasOne”关系, <strong>虽然通常情况下不建议在和么做</strong>:</p>\n<p><strong>common/models/supplier.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Supplier.hasOne(Account, &#123;<span class=\"attr\">foreignKey</span>: <span class=\"string\">'supplierId'</span>, <span class=\"attr\">as</span>: <span class=\"string\">'account'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果目标模型没有外键属性,LoopBack将添加一个具有相同名称的属性.属性的类型将与目标模型的id属性的类型相同.<strong>请注意,外键属性是在目标模型上定义的(例如,Account)</strong>.</p>\n<p>如果不指定它们,那么LoopBack生成关系名称和外键如下:</p>\n<ul>\n<li>关系名称:驼峰式模型名称,例如,对于”supplier”模型，关系是”supplier”.(<em>译注:你看出驼峰了么,我是没看出来</em>)</li>\n<li>外键:附有Id的关系名称,例如,对于关系名称”supplier”,默认外键是”supplierId”.</li>\n</ul>\n<h5 id=\"添加method到model-1\"><a href=\"#添加method到model-1\" class=\"headerlink\" title=\"添加method到model\"></a>添加method到model</h5><p>一旦定义了hasOne关系,LoopBack会自动添加一个带有关系名称的方法到声明模型类的原型.例如:supplier.prototype.account(…).</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account(function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>\n        <p>Find the supplier's account model.</p>\n        <div class=\"sl-hidden\"><strong>REVIEW COMMENT from Rand</strong><br>You cannot supply a filter, as you can for hasMany right?</div>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var supplier = supplier.account.build(data);</pre>\n        <p>Or equivalently:</p>\n        <pre>var account = new account({supplierId: supplier.id, ...});</pre>\n      </td>\n      <td>Build a new account for the supplier with the supplierId to be set to the id of the supplier. No persistence is involved.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.create(data, function(err, account) {<br>  ...<br>});</pre>\n        <p>Or, equivalently:</p>\n        <pre>account.create({supplierId: supplier.id, ...}, function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new account for the supplier. If there is already an account, an error will be reported.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.destroy(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove the account for the supplier.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>supplier.account.update({balance: 100}, function(err, account) {<br>  ...<br>});</pre>\n      </td>\n      <td>Update the associated account.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"1.6.4\"> 1.6.4 HasMany关系(一对多) </h4>\n\n<h5 id=\"概述-5\"><a href=\"#概述-5\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>hasMany关系与另一个模型建立一对多连接.你经常在belongsTo关系的“另一边”找到这个关系.此关系指示模型的每个实例具有另一个模型的零个或多个实例.例如,在具有客户和订单两个模型的应用程序中,客户可以有许多订单.</p>\n<h5 id=\"定义hasMany关系\"><a href=\"#定义hasMany关系\" class=\"headerlink\" title=\"定义hasMany关系\"></a>定义hasMany关系</h5><p>使用关系生成器<code>relation generator</code>创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).</p>\n<p>例如,下面是一个model的json定义文件:</p>\n<p><strong>common/models/customer.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"reviews\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Review\",</span><br><span class=\"line\">      \"foreignKey\": \"authorId\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>或者,你可以通过模型的js代码来定义“hasOne”关系, <strong>虽然通常情况下不建议在和么做</strong>:</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer.hasMany(Review, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'reviews'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'authorId'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果不指定它们,那么LoopBack生成关系名称和外键如下:</p>\n<ul>\n<li>关系名称:驼峰式的模型复数名称,例如,对于”Order”模型，关系是”orders”.</li>\n<li>外键:附有Id的关系名称,例如,对于关系名称”Customer”,默认外键是”customerId”.</li>\n</ul>\n<h5 id=\"添加method到model-2\"><a href=\"#添加method到model-2\" class=\"headerlink\" title=\"添加method到model\"></a>添加method到model</h5><p>一旦你定义了一个“hasMany”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:Customer.prototype.orders(…).</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders([filter],\n  function(err, orders) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find orders for the customer, optionally using provided [filter](Querying-data.html)</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var order = customer.orders.build(data);</pre>\n        <p>Or equivalently:</p>\n        <pre>var order = new Order({customerId: customer.id, ...});</pre>\n      </td>\n      <td>Build a new order for the customer with the customerId to be set to the id of the customer. No persistence is involved.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.create(data,\n  function(err, order) {<br>  ...<br>});</pre>\n        <p>Or, equivalently:</p>\n        <pre>Order.create({customerId: customer.id, ...},\n  function(err, order) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new order for the customer.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.destroyAll(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove all orders for the customer.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.findById(orderId,\n  function(err, order) {<br>   ...<br>});</pre>\n      </td>\n      <td>Find an order by ID.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>customer.orders.destroy(orderId,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Delete an order by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"1.6.5\"> 1.6.5 HasManyThrough关系(多对多) </h4>\n\n<h5 id=\"概述-6\"><a href=\"#概述-6\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>hasManyThrough关系设置了与另一个模型的多对多连接.此关系表示<code>通过第三(中介)模型，声明模型可以与另一模型的零个或多个实例匹配</code>(_译注:这句不太好理解,但是看下面的图就能理解了).例如,在医生的申请中,如果病人预约见医生,有关的关系声明可能是:</p>\n<p><img src=\"img/hasManyThrough.jpg\" alt=\"hasManyThrough\"></p>\n<p>第三(中介)模型(Appointment),有2个外键属性(physicianId和patientId),这2个外键分别引用声明模型(Physician)的主键,以及目标模型(Patient)的主键.</p>\n<h5 id=\"定义hasManyThrough关系\"><a href=\"#定义hasManyThrough关系\" class=\"headerlink\" title=\"定义hasManyThrough关系\"></a>定义hasManyThrough关系</h5><p>使用关系生成器<code>relation generator</code>创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).</p>\n<p>创建hasManyThrough关系时,对”Require a through model”这个问题回答<strong>Yes</strong>,然后指定model即可,如下所示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[?] Require a through model? Yes</span><br><span class=\"line\">[?] Choose a through model: Appointment</span><br></pre></td></tr></table></figure>\n\n<p>例如:</p>\n<p><strong>common/models/physician.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Physician\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"patients\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Patient\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"physicianId\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"through\"</span>: <span class=\"string\">\"Appointment\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/patient.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Patient\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"physicans\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Physician\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"patientId\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"through\"</span>: <span class=\"string\">\"Appointment\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/appointment.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Appointment\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appointmentDate\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"date\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"physician\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"belongsTo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Physician\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"physicianId\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"patient\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"belongsTo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Patient\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"patientId\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>你还可以通过js代码来设置hasManyThrough关系,<strong>虽然通常情况下不建议在和么做</strong>:</p>\n<p><strong>common/models/physician.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">Appointment.belongsTo(Patient);</span><br><span class=\"line\">Appointment.belongsTo(Physician);</span><br><span class=\"line\"></span><br><span class=\"line\">Physician.hasMany(Patient, &#123;<span class=\"attr\">through</span>: Appointment&#125;);</span><br><span class=\"line\">Patient.hasMany(Physician, &#123;<span class=\"attr\">through</span>: Appointment&#125;);</span><br><span class=\"line\">                                                   <span class=\"comment\">// Now the Physician model has a virtual property called patients:</span></span><br><span class=\"line\">Physician.patients(filter, callback);              <span class=\"comment\">// Find patients for the physician</span></span><br><span class=\"line\">Physician.patients.build(data);                    <span class=\"comment\">// Build a new patient</span></span><br><span class=\"line\">Physician.patients.create(data, callback);         <span class=\"comment\">// Create a new patient for the physician</span></span><br><span class=\"line\">Physician.patients.destroyAll(callback);           <span class=\"comment\">// Remove all patients for the physician</span></span><br><span class=\"line\">Physician.patients.add(patient, callback);         <span class=\"comment\">// Add an patient to the physician</span></span><br><span class=\"line\">Physician.patients.remove(patient, callback);      <span class=\"comment\">// Remove an patient from the physician</span></span><br><span class=\"line\">Physician.patients.findById(patientId, callback);  <span class=\"comment\">// Find an patient by id</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>定义外键属性</strong></p>\n<p>hasManyThrough关系具有指示外键属性(字段)名称的keyThrough属性.如果未指定,它将默认为带有附加ID的toModelName.例如:</p>\n<ul>\n<li>Physician.hasMany(Patient, {through: Appointment}) - keyThrough defaults to patientId.</li>\n<li>Patient.hasMany(Physician, {through: Appointment})- keyThrough defaults to physicianId.</li>\n</ul>\n<p>上面的keyThrough属性将用于匹配这些foreignKeys：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Appointment.belongsTo(Physician, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'foo'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'physicianId'</span>&#125;);</span><br><span class=\"line\">Appointment.belongsTo(Patient, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'patientId'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>你可以显式指定keyThrough属性:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Physician.hasMany(Patient, &#123;<span class=\"attr\">through</span>: Appointment, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'fooId'</span>, <span class=\"attr\">keyThrough</span>: <span class=\"string\">'barId'</span>&#125;);</span><br><span class=\"line\">Patient.hasMany(Physician, &#123;<span class=\"attr\">through</span>: Appointment, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'barId'</span>, <span class=\"attr\">keyThrough</span>: <span class=\"string\">'fooId'</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// keyThroughs above will be used to match foreignKeys below</span></span><br><span class=\"line\">Appointment.belongsTo(Physician, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'foo'</span>&#125;); <span class=\"comment\">// foreignKey defaults to 'fooId'</span></span><br><span class=\"line\">Appointment.belongsTo(Patient, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'bar'</span>&#125;);   <span class=\"comment\">// foreignKey defaults to 'barId'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在JSON中定义keyThrough</strong></p>\n<p>下面是使用外键定义hasManyThrough关系的示例.考虑下面的表:</p>\n<ul>\n<li>STUDENTS(ID,STUNAME): student information</li>\n<li>COURSES(ID,COURNAME): course information</li>\n<li>COURSTU(COURID,STUID): table with foreign keys that handle the many-to-many mapping</li>\n</ul>\n<p>你可以按照如下所示在JSON文件中定义关系:</p>\n<p><strong>common/models/courses.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"students\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Students\",</span><br><span class=\"line\">      \"foreignKey\": \"courid\",</span><br><span class=\"line\">      \"through\": \"Courstu\",</span><br><span class=\"line\">      \"keyThrough\": \"stuid\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/students.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"relations\": &#123;</span><br><span class=\"line\">    \"courses\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Courses\",</span><br><span class=\"line\">      \"foreignKey\": \"stuid\",</span><br><span class=\"line\">      \"through\": \"Courstu\",</span><br><span class=\"line\">      \"keyThrough\": \"courid\"</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Self throug)</strong></p>\n<p>在某些情况下,您可能想要定义从模型到其自身的关系.例如,考虑一个社交媒体应用程序,用户可以follow其他用户.在这种情况下,用户可以follow许多其他用户并且可以被其他用户follow.下面的代码显示了如何定义,以及相应的keyThrough属性:</p>\n<p><strong>common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.hasMany(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'followers'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'followeeId'</span>, <span class=\"attr\">keyThrough</span>: <span class=\"string\">'followerId'</span>, <span class=\"attr\">through</span>: Follow&#125;);</span><br><span class=\"line\">User.hasMany(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'following'</span>, <span class=\"attr\">foreignKey</span>: <span class=\"string\">'followerId'</span>, <span class=\"attr\">keyThrough</span>: <span class=\"string\">'followeeId'</span>, <span class=\"attr\">through</span>: Follow&#125;);</span><br><span class=\"line\">Follow.belongsTo(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'follower'</span>&#125;);</span><br><span class=\"line\">Follow.belongsTo(User, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'followee'</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加method到model-3\"><a href=\"#添加method到model-3\" class=\"headerlink\" title=\"添加method到model\"></a>添加method到model</h5><p>一旦你定义了一个“hasManyThrough”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:physician.patients.create(…).</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients(filter,\n  function(err, patients) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find patients for the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var patient = physician.patients.build(data);</pre>\n      </td>\n      <td>Create a new patient.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.create(data,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new patient for the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.destroyAll(function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove all patients for the physician</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.add(patient,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Add a patient to the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.remove(patient,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove a patient from the physician.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>physician.patients.findById(patientId,\n  function(err, patient) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find an patient by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>这些关系方法提供了用于与相关对象(上述示例中的患者)一起工作的API.但是,它们不允许您在单个调用中访问相关对象(Patient)和“through”记录(Appointment).</p>\n<p>例如,如果要添加新患者并在特定日期创建预约,则必须进行两次调用(REST请求):</p>\n<p>1.通过Patient.create创建</p>\n<p><code>POST /patients</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Jane Smith\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.通过Appointment.create创建appointment,将patientId属性设置为Patient.create返回的id.</p>\n<p><code>POST /appointments</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"patientId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"physicianId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"appointmentDate\"</span>: <span class=\"string\">\"2014-06-01\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下查询可用于列出给定医生的所有患者,包括其约会日期:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /appointments?filter=&#123;&quot;include&quot;:[&quot;patient&quot;],&quot;where&quot;:&#123;&quot;physicianId&quot;:2&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>响应返回:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"appointmentDate\"</span>: <span class=\"string\">\"2014-06-01\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"patientId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"physicianId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"patient\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Jane Smith\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.6\"> 1.6.6 HasAndBelongsToMany关系(多对多) </h4>\n\n<h5 id=\"概述-7\"><a href=\"#概述-7\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>hasAndBelongsToMany关系创建了与另一个模型的<strong>直接</strong>多对多连接,没有中间模型.例如,某个应用程序具有名为组件(assembly)和部件(part)的2个model,其中每个组件具有许多部件,并且每个部件出现在许多组件中,您可以这样声明模型:</p>\n<h5 id=\"定义hasAndBelongsToMany关系\"><a href=\"#定义hasAndBelongsToMany关系\" class=\"headerlink\" title=\"定义hasAndBelongsToMany关系\"></a>定义hasAndBelongsToMany关系</h5><p>使用关系生成器<code>relation generator</code>创建两个模型之间的关系.该工具将提示您输入模型的名称,相关模型的名称和其他必需的信息.该工具将相应地修改模型定义JSON文件(例如,common/models/customer.json).</p>\n<p><img src=\"img/assembly.jpg\" alt=\"assembly\"></p>\n<p>例如,下面是assembly模型的JSON文件的摘录,表示了assembly(组件)和part(部件)模型之间的hasAndBelongsToMany关系:</p>\n<p><strong>/common/models/assembly.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Assembly\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"plural\"</span>: <span class=\"string\">\"Assemblies\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"parts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasAndBelongsToMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Part\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>你还可以通过js代码定义hasAndBelongsToMany关系,虽然通常情况下不建议这么做:</p>\n<p><strong>/common/models/assembly.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Part.hasAndBelongsToMany(Assembly);</span><br><span class=\"line\">Assembly.hasAndBelongsToMany(Part);</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过REST API添加关系</strong></p>\n<p>通过REST API添加关系时,连接模型必须存在才能添加关系.例如,在上面的“Assembly”和“Part”模型示例中,要通过REST API接口将“Part”的实例添加到“Assembly”中,必须存在一个“AssemblyPart”模型才能工作.</p>\n<p><strong>大多数时候,你应该使用method(方法)添加“hasAndBelongToMany”关系</strong>到服务器端的模型:</p>\n<p><strong>Example method</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assembly.parts.add(part, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果您需要使用REST添加关系,首先检查是否首先存在“AssemblyPart”模型.然后使用此代码添加关系:</p>\n<p><strong>Rest Example Method</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assembly.Parts.link(&#123;<span class=\"attr\">id</span>:assemblyId, <span class=\"attr\">fk</span>: partId&#125;, partInstance,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, header</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//success</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"为model添加method\"><a href=\"#为model添加method\" class=\"headerlink\" title=\"为model添加method\"></a>为model添加method</h5><p>一旦你定义了一个“hasAndBelongsToMany”关系,LoopBack会自动将一个带有关系名称的方法添加到声明模型类的原型.例如:assembly.parts.create(…).</p>\n<table>\n  <tbody>\n    <tr>\n      <th style=\"width: 400px;\">Example method</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts(filter,\n  function(err, parts) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find parts for the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>var part = assembly.parts.build(data);</pre>\n      </td>\n      <td>Build a new part.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.create(data,\n  function(err, part) {<br>  ...<br>});</pre>\n      </td>\n      <td>Create a new part for the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.add(part,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Add a part to the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.remove(part,\n  function(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Remove a part from the assembly.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.findById(partId,\n  function(err, part) {<br>  ...<br>});</pre>\n      </td>\n      <td>Find a part by ID.</td>\n    </tr>\n    <tr>\n      <td>\n        <pre>assembly.parts.destroy(partId,\nfunction(err) {<br>  ...<br>});</pre>\n      </td>\n      <td>Delete a part by ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"1.6.7\"> 1.6.7 Polymorphic关系(多态) </h4>\n\n<h5 id=\"概述-8\"><a href=\"#概述-8\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack支持多态关系(polymorphic relations),其中模型可以属于多个其他模型,在单个关联上。 例如,您可能具有属于作者模型或读者模型的图片模型.</p>\n<p><em>译注: 上面翻译的不好,原文在这里,自己理解LoopBack supports polymorphic relations in which a model can belong to more than one other model, on a single association. For example, you might have a Picture model that belongs to either an Author model or a Reader model</em></p>\n<p>下面的示例使用三个示例模型:Picture,Author,和Reader,其中Picture可以属于Author或Reader.</p>\n<h5 id=\"HasMany的polymorphic关系实现\"><a href=\"#HasMany的polymorphic关系实现\" class=\"headerlink\" title=\"HasMany的polymorphic关系实现\"></a>HasMany的polymorphic关系实现</h5><p>常用的选项都被支持,例如:’photos’指定一个不同的relation name/accessor(关系名称/访问器).</p>\n<p><strong>common/models/author.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Author\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"pictures\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Picture\",</span><br><span class=\"line\">      &#123; <span class=\"attr\">\"polymorphic\"</span>: <span class=\"string\">\"imageable\"</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>和:</p>\n<p><strong>common/models/reader.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Reader\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"pictures\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Picture\",</span><br><span class=\"line\">      \"polymorphic\": &#123;</span><br><span class=\"line\">        \"as\": \"imageable\",</span><br><span class=\"line\">        \"foreignKey\": \"imageableId\",</span><br><span class=\"line\">        \"discriminator\": \"imageableType\"</span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者,你可以在js代码中定义关系:</p>\n<p><strong>common/models/author.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Author.hasMany(Picture, &#123; <span class=\"attr\">polymorphic</span>: <span class=\"string\">'imageable'</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>和:</p>\n<p><strong>common/models/reader.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reader.hasMany(Picture, &#123; <span class=\"attr\">polymorphic</span>: &#123; <span class=\"comment\">// alternative syntax  </span></span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'imageable'</span>, <span class=\"comment\">// if not set, default to: reference</span></span><br><span class=\"line\">  foreignKey: <span class=\"string\">'imageableId'</span>, <span class=\"comment\">// defaults to 'as - Id'</span></span><br><span class=\"line\">  discriminator: <span class=\"string\">'imageableType'</span> <span class=\"comment\">// defaults to 'as - Type'</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"HasManyThrough的polymorphic关系实现\"><a href=\"#HasManyThrough的polymorphic关系实现\" class=\"headerlink\" title=\"HasManyThrough的polymorphic关系实现\"></a>HasManyThrough的polymorphic关系实现</h5><p>要定义hasMany多态关系,必须有一个“through”模型,类似于标准的HasManyThrough关系.</p>\n<p>例如,”ImageLink”:</p>\n<p><strong>/common/models/ImageLink.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ImageLink\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"author\": &#123;</span><br><span class=\"line\">      \"type\": \"belongsTo\",</span><br><span class=\"line\">      \"model\": \"Author\",</span><br><span class=\"line\">      \"foreignKey\": \"authorId\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"pictures\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Picture\",</span><br><span class=\"line\">      \"polymorphic\": &#123;</span><br><span class=\"line\">        \"foreignKey\": \"imageableId\",</span><br><span class=\"line\">        \"discriminator\": \"imageableType\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个例子就是polymorphic hasManyThrough关系:</p>\n<p><strong>/common/models/Author.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Author\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"pictures\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Picture\",</span><br><span class=\"line\">      \"polymorphic\": &#123;</span><br><span class=\"line\">        \"foreignKey\": \"imageableId\",</span><br><span class=\"line\">        \"discriminator\": \"imageableType\"</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      \"through\": \"ImageLink\",</span><br><span class=\"line\">      \"keyThrough\": \"authorId\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的,用js实现也可以,例子是下面这个:</p>\n<p><strong>/common/models/Author.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Author.hasMany(Picture, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'pictures'</span>,</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  through: ImageLink,</span><br><span class=\"line\">  keyThrough: <span class=\"string\">'authorId'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"BelongsTo的polymorphic关系实现\"><a href=\"#BelongsTo的polymorphic关系实现\" class=\"headerlink\" title=\"BelongsTo的polymorphic关系实现\"></a>BelongsTo的polymorphic关系实现</h5><p>因为你动态地定义了相关的模型,所以你不能在前面声明它(<em>译注:原文是you cannot declare it up front,我翻译的好像不准</em>). 因此,不是传入相关模型(名称),而是指定多态关系的名称.</p>\n<p><strong>common/models/picture.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Picture\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"author\": &#123;</span><br><span class=\"line\">      \"type\": \"belongsTo\",</span><br><span class=\"line\">      \"model\": \"Author\",</span><br><span class=\"line\">      \"polymorphic\": &#123;</span><br><span class=\"line\">        \"foreignKey\": \"imageableId\",</span><br><span class=\"line\">        \"discriminator\": \"imageableType\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者,使用js代码:</p>\n<p><strong>common/models/picture.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Picture.belongsTo(<span class=\"string\">'imageable'</span>, &#123;</span><br><span class=\"line\">  polymorphic: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"comment\">// Alternatively, use an object for setup</span></span><br><span class=\"line\">Picture.belongsTo(<span class=\"string\">'imageable'</span>, &#123;</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"HasAndBelongsToMany的polymorphic关系实现\"><a href=\"#HasAndBelongsToMany的polymorphic关系实现\" class=\"headerlink\" title=\"HasAndBelongsToMany的polymorphic关系实现\"></a>HasAndBelongsToMany的polymorphic关系实现</h5><p>这需要一个明确的“through”模型,例如:PictureLink.</p>\n<p>关系<code>Picture.belongsTo(PictureLink)</code>和<code>Picture.belongsTo(&#39;imageable&#39;,{polymorphic：true})</code>将自动设置.</p>\n<p>对于PictureLink所需的属性也是如此(true).</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Author.hasAndBelongsToMany(Picture, &#123;</span><br><span class=\"line\">  through: PictureLink,</span><br><span class=\"line\">  polymorphic: <span class=\"string\">'imageable'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Reader.hasAndBelongsToMany(Picture, &#123;</span><br><span class=\"line\">  through: PictureLink,</span><br><span class=\"line\">  polymorphic: <span class=\"string\">'imageable'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Optionally, define inverse hasMany relations with '(invert: true)'</span></span><br><span class=\"line\">Picture.hasMany(Author, &#123;</span><br><span class=\"line\">  through: PictureLink,</span><br><span class=\"line\">  polymorphic: <span class=\"string\">'imageable'</span>,</span><br><span class=\"line\">  invert: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Picture.hasMany(Reader, &#123;</span><br><span class=\"line\">  through: PictureLink,</span><br><span class=\"line\">  polymorphic: <span class=\"string\">'imageable'</span>,</span><br><span class=\"line\">  invert: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"HasOne的polymorphic关系实现\"><a href=\"#HasOne的polymorphic关系实现\" class=\"headerlink\" title=\"HasOne的polymorphic关系实现\"></a>HasOne的polymorphic关系实现</h5><p>如下所示,您可以指定’avatar’来显式设置关系的名称.如果未设置,它将默认为多态名称.</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Picture.belongsTo(<span class=\"string\">'imageable'</span>, &#123;<span class=\"attr\">polymorphic</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">Author.hasOne(Picture, &#123;<span class=\"attr\">as</span>: <span class=\"string\">'avatar'</span>, <span class=\"attr\">polymorphic</span>: <span class=\"string\">'imageable'</span>&#125;);</span><br><span class=\"line\">Reader.hasOne(Picture, &#123;<span class=\"attr\">polymorphic</span>: &#123;<span class=\"attr\">as</span>: <span class=\"string\">'imageable'</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"处理polymorphic-idType\"><a href=\"#处理polymorphic-idType\" class=\"headerlink\" title=\"处理polymorphic.idType\"></a>处理polymorphic.idType</h5><p>因为modelTo在前面是未知的(它是多态的),你不能依靠<code>modelTo</code>来获得<code>foreignKey</code>类型.您可以显式声明<code>idType</code>,如下所示.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">  url: 'john.jpg',</span><br><span class=\"line\">  imageableType: 'Author',</span><br><span class=\"line\">  imageableId: '1',</span><br><span class=\"line\">  id: 1</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  url: 'joe.jpg',</span><br><span class=\"line\">  imageableType: 'Reader',</span><br><span class=\"line\">  imageableId: '1',</span><br><span class=\"line\">  id: 2</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">Authors: [&#123;</span><br><span class=\"line\">  username: 'John',</span><br><span class=\"line\">  id: 1</span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">Readers: [&#123;</span><br><span class=\"line\">  name: 'Joe',</span><br><span class=\"line\">  id: 1</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Author = app.models.Author;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Reader = app.models.Reader;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Picture = app.models.Picture;</span><br><span class=\"line\"></span><br><span class=\"line\">Author.hasOne(Picture, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'avatar'</span>,</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Reader.hasOne(Picture, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'imageable'</span>,</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Picture.belongsTo(<span class=\"string\">'owner'</span>, &#123;</span><br><span class=\"line\">  idName: <span class=\"string\">'username'</span>,</span><br><span class=\"line\">  polymorphic: &#123;</span><br><span class=\"line\">    idType: Author.definition.properties.username.type,</span><br><span class=\"line\">    foreignKey: <span class=\"string\">'imageableId'</span>,</span><br><span class=\"line\">    discriminator: <span class=\"string\">'imageableType'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Creating demo author, reader pictures then listing them</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAuthor</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  Author.create(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">\"John\"</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">author</span>) </span>&#123;</span><br><span class=\"line\">    author.avatar.create(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">\"john.jpg\"</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createReader</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  Reader.create(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Joe\"</span></span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reader</span>) </span>&#123;</span><br><span class=\"line\">    reader.imageable.create(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">\"joe.jpg\"</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listPictures</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Picture.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nPictures:\\n\"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listReaders</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Reader.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nReaders:\\n\"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listAuthors</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Author.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\nAuthors:\\n\"</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//executing the demo</span></span><br><span class=\"line\">createAuthor(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  createReader(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    listPictures();</span><br><span class=\"line\">    listAuthors();</span><br><span class=\"line\">    listReaders();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.8\"> 1.6.8 查询相关model </h4>\n\n<h5 id=\"概述-9\"><a href=\"#概述-9\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>关系通过将外键属性连接到主键属性来定义两个模型之间的连接.对于每种关系类型,LoopBack自动将辅助方法混合到模型类中,以帮助导航和关联模型实例以加载或构建数据图.</p>\n<p>通常,客户端应用程序想要从图中选择相关数据,例如获得用户信息和最近放置的订单.LoopBack提供了几种方法来在查询中表达这些要求.</p>\n<h5 id=\"Inclusion\"><a href=\"#Inclusion\" class=\"headerlink\" title=\"Inclusion\"></a>Inclusion</h5><p>要在查询的响应中包括相关模型,请使用查询对象的<code>include</code>属性或在模型类上使用include()方法. <code>include</code>可以是字符串,数组或对象.有关详细信息,请参阅<code>Include filter</code>.</p>\n<p>以下示例说明有效的格式.</p>\n<p>Load all user posts with only one additional request:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: <span class=\"string\">'posts'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者用js代码:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: [<span class=\"string\">'posts'</span>]&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Load all user posts and orders with two additional requests:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: [<span class=\"string\">'posts'</span>, <span class=\"string\">'orders'</span>]&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Load all post owners (users), and all orders of each owner:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: <span class=\"string\">'orders'</span>&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Load all post owners (users), and all friends and orders of each owner:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [<span class=\"string\">'friends'</span>, <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Load all post owners (users), all posts (including images), and orders of each owner:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [&#123;<span class=\"attr\">posts</span>: <span class=\"string\">'images'</span>&#125; , <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The model class also has an include() method. For example, the code snippet below will populate the list of user instances with posts:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.include(users, <span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h5><p>使用Scoping可以将查询定义为目标模型类或原型的方法.例如:</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.scope(<span class=\"string\">'top10Vips'</span>, &#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">vip</span>: <span class=\"literal\">true</span>&#125;, <span class=\"attr\">limit</span>: <span class=\"number\">10</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">User.top10Vips(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, vips</span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You can create the same function using a custom method too:</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.top10Vips = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">vip</span>: <span class=\"literal\">true</span>&#125;, <span class=\"attr\">limit</span>: <span class=\"number\">10</span>&#125;, cb);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用包含关系的过滤器参数\"><a href=\"#使用包含关系的过滤器参数\" class=\"headerlink\" title=\"使用包含关系的过滤器参数\"></a>使用包含关系的过滤器参数</h5><p>在查询相关模型以从相关模型返回数据时,可以在过滤器(例如,where,order,fields,include过滤器)上使用参数.</p>\n<p>例如:考虑Student,Class和Teacher模型，其中Student有多个Class,并且Teacher有多个Class.</p>\n<p>查找所有学生,并返回所有他们的课程与教这些课的教师,以及所有的学生注册的这些课,诸如此类,等等.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.find(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"filter\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"relation\"</span>: <span class=\"string\">\"classes\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"scope\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"include\"</span>: [<span class=\"string\">\"teachers\"</span>, <span class=\"string\">\"students\"</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>另一个例子:找到一个特定的老师,也返回所有他们的课程,以及所有学生注册的这些课.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher.find(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"filter\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"where\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: $state.params.id</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"relation\"</span>: <span class=\"string\">\"classes\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"scope\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"include\"</span>: [<span class=\"string\">\"students\"</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.9\"> 1.6.9 嵌入式model和关系 </h4>\n\n<blockquote>\n<p> LoopBack支持如下这几种(5种)嵌入关系：embedsOne，embedsMany，embedsMany with belongsTo和referencesMany。</p>\n</blockquote>\n<h5 id=\"概述-10\"><a href=\"#概述-10\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack的relations使您能够在模型之间创建连接,并提供导航/聚合API来处理模型实例的图形(graph).除了传统的以外,LoopBack还支持以下嵌入关系:</p>\n<ul>\n<li><p><strong>EmbedsOne</strong> - 一个model嵌入了另一个model.例如:Customer里面迁入了billingAddress.</p>\n</li>\n<li><p><strong>EmbedsMany</strong> - 一个model嵌入许多其他model的实例.例如:Customer可以有很多个email地址,并且每一个email都是一个复合对象,它包括标签和地址等.</p>\n</li>\n<li><p><strong>EmbedsMany</strong> with belongsTo - a model that embeds many links to related people, such as an author or a reader. </p>\n</li>\n<li><p><strong>ReferencesMany</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>Important: 您可以使用关系数据库的嵌入关系,但数据将始终以字符化JSON格式存储.</p>\n</blockquote>\n<h5 id=\"EmbedsOne\"><a href=\"#EmbedsOne\" class=\"headerlink\" title=\"EmbedsOne\"></a>EmbedsOne</h5><p>EmbedsOne用于表示嵌入其他模型的模型,例如,Customer嵌入一个billingAddress.</p>\n<p><strong>Sample embedded model</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  id: 1,</span><br><span class=\"line\">  name: 'John Smith',</span><br><span class=\"line\">  billingAddress: &#123;</span><br><span class=\"line\">    street: '123 Main St',</span><br><span class=\"line\">    city: 'San Jose',</span><br><span class=\"line\">    state: 'CA',</span><br><span class=\"line\">    zipCode: '95124'</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在js代码中定义关系</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer.embedsOne(Address, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'address'</span>, <span class=\"comment\">// default to the relation name - address</span></span><br><span class=\"line\">  property: <span class=\"string\">'billingAddress'</span> <span class=\"comment\">// default to addressItem</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Parameters for the definition</p>\n<ul>\n<li><strong>methods</strong> - Scoped methods for the given relation</li>\n<li><strong>properties</strong> - Properties taken from the parent object</li>\n<li><strong>scope</strong> - Default scope</li>\n<li><strong>options</strong> - Options</li>\n<li><strong>default</strong> - Default value</li>\n<li><strong>property</strong> - Name of the property for the embedded item</li>\n<li><strong>as</strong> - Name of the relation</li>\n</ul>\n<p>Options</p>\n<ul>\n<li><strong>forceId</strong> - force generation of ida for embedded items, default to false(强制生成嵌入项的ida,默认为false)</li>\n<li><strong>validate</strong> - denote if the embedded items should be validated, default to true(表示是否应该验证嵌入的项目,默认为true)</li>\n<li><strong>persistent</strong> - denote if the embedded items should be persisted, default to false(表示嵌入的项目是否应该持久化,默认为false)</li>\n</ul>\n<p>在json中定义关系</p>\n<p><strong>common/models/customer.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"address\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"embedsOne\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Address\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"billingAddress\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"validate\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"forceId\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Helper methods(辅助方法)</p>\n<ul>\n<li>customer.address()</li>\n<li>customer.address.build()</li>\n<li>customer.address.create()</li>\n<li>customer.address.update()</li>\n<li>customer.address.destroy()</li>\n<li>customer.address.value()</li>\n</ul>\n<p>Operation hooks</p>\n<p>您可以在embedsOne关系中,为嵌入模型定义<code>before save</code>和<code>after save</code>的<code>operation hooks</code>. 然后,更新或创建容器模型的实例将触发嵌入式模型上的operation hook.发生这种情况时,ctx.isNewInstance为false,因为只创建容器模型的新实例.</p>\n<p>例如,如果<code>Customer embedsOne Address</code>,并且您在地址模型上定义了一个’before save’hook,则创建新的Customer实例将触发操作挂钩.</p>\n<h5 id=\"EmbedsMany\"><a href=\"#EmbedsMany\" class=\"headerlink\" title=\"EmbedsMany\"></a>EmbedsMany</h5><p>使用embedsMany关系来指示模型可以嵌入另一个模型的许多实例.例如,客户可以有多个电子邮件地址,每个电子邮件地址是一个包含标签和地址的复合对象.</p>\n<p><strong>Sample model instance with many embedded models</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  id: 1,</span><br><span class=\"line\">  name: 'John Smith',</span><br><span class=\"line\">  emails: [&#123;</span><br><span class=\"line\">    label: 'work',</span><br><span class=\"line\">    address: 'john@xyz.com'</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    label: 'home',</span><br><span class=\"line\">    address: 'john@gmail.com'</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> Important:把embedsMany作为一个实际的关系,和hasMany关系相比,没有任何不同.例如:这意味着,您不能只是通过嵌入/嵌套数据来POST完整对象,从而一次创建所有内容.因此,使用上面的示例添加一个客户和多个电子邮件地址将需要两个POST操作,一个用于客户记录,一个用于多个电子邮件地址数据.</p>\n</blockquote>\n<p>在js代码中定义关系</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer.embedsOne(EmailAddress, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">as</span>: <span class=\"string\">'emails'</span>, <span class=\"comment\">// default to the relation name - emailAddresses</span></span><br><span class=\"line\">  property: <span class=\"string\">'emailList'</span> <span class=\"comment\">// default to emailAddressItems</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Parameters for the definition</p>\n<ul>\n<li>methods</li>\n<li>properties</li>\n<li>scope</li>\n<li>options</li>\n<li>default</li>\n<li>property</li>\n<li>as</li>\n</ul>\n<p>Options</p>\n<ul>\n<li>forceId</li>\n<li>validate</li>\n<li>persistent</li>\n</ul>\n<p>在json中定义关系</p>\n<p><strong>common/models/customer.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"emails\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"embedsMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"EmailAddress\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"emailList\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"validate\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"forceId\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Helper methods(辅助方法)</p>\n<ul>\n<li>customer.emails()</li>\n<li>customer.emails.create()</li>\n<li>customer.emails.build()</li>\n<li>customer.emails.findById()</li>\n<li>customer.emails.destroyById()</li>\n<li>customer.emails.updateById()</li>\n<li>customer.emails.exists()</li>\n<li>customer.emails.add()</li>\n<li>customer.emails.remove()</li>\n<li>customer.emails.get() - alias to findById</li>\n<li>customer.emails.set() - alias to updateById</li>\n<li>customer.emails.unset() - alias to destroyById</li>\n<li>customer.emails.at()</li>\n<li>customer.emails.value()</li>\n</ul>\n<p>Operation hooks</p>\n<p>您可以在embedsMany关系中为嵌入模型定义<code>before save</code>和<code>after save</code>的operation hooks.然后m更新或创建容器模型的实例将触发嵌入式模型上的operation hook.发生这种情况时,ctx.isNewInstance为false,因为只创建容器模型的新实例.</p>\n<p>例如,如果<code>Customer embedsOne Address</code>,并且您在地址模型上定义了一个<code>before save</code>hook,则创建一个新的Customer实例将触发operation hook.</p>\n<h5 id=\"EmbedsMany-with-belongsTo\"><a href=\"#EmbedsMany-with-belongsTo\" class=\"headerlink\" title=\"EmbedsMany with belongsTo\"></a>EmbedsMany with belongsTo</h5><p>使用embedsMany with belongsTo关系来表示可以嵌入许多链接到其他模型的模型.例如一个book模型嵌入许多相关人物的链接(例如作者或读者).每个链接属于一个人,它是多态的,因为一个人可以是一个作者或一个读者.</p>\n<p><strong>Exampel embedsMany with belongsTo model instance</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  id: 1</span><br><span class=\"line\">  name: 'Book 1',</span><br><span class=\"line\">  links: [&#123;</span><br><span class=\"line\">    notes: 'Note 1',</span><br><span class=\"line\">    id: 1,</span><br><span class=\"line\">    linkedId: 1,</span><br><span class=\"line\">    linkedType: 'Author',</span><br><span class=\"line\">    name: 'Author 1'</span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">  notes: 'Note 2',</span><br><span class=\"line\">    id: 2,</span><br><span class=\"line\">    linkedId: 1,</span><br><span class=\"line\">    linkedType: 'Reader',</span><br><span class=\"line\">    name: 'Reader 1'</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Define the embedsMany relation for Book</p>\n<p><strong>common/models/book.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Book\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"people\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"embedsMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Link\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"scope\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"include\"</span>: <span class=\"string\">\"linked\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Define the polymorphic belongsTo relation for Link</p>\n<p><strong>common/models/link.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Link\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"Model\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"number\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"notes\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"linked\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"belongsTo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"polymorphic\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"idType\"</span>: <span class=\"string\">\"number\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"name\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"invertProperties\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ReferencesMany\"><a href=\"#ReferencesMany\" class=\"headerlink\" title=\"ReferencesMany\"></a>ReferencesMany</h5><p>Sample referencesMany model instance</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  id: 1,</span><br><span class=\"line\">  name: 'John Smith',</span><br><span class=\"line\">  accounts: [</span><br><span class=\"line\">    \"saving-01\", \"checking-01\",</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Parameters for the definition</p>\n<ul>\n<li>methods</li>\n<li>properties</li>\n<li>foreignKey</li>\n<li>scope</li>\n<li>options</li>\n<li>default</li>\n<li>as</li>\n</ul>\n<p>Options</p>\n<ul>\n<li>forceId</li>\n<li>validate</li>\n<li>persistent</li>\n</ul>\n<p>Define the relation in code</p>\n<p><strong>common/models/customer.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Customer\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"accounts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"referencesMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Account\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"accountIds\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"validate\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"forceId\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Helper methods</p>\n<ul>\n<li>customer.accounts()</li>\n<li>customer.accounts.create()</li>\n<li>customer.accounts.build()</li>\n<li>customer.accounts.findById()</li>\n<li>customer.accounts.destroy()</li>\n<li>customer.accounts.updateById()</li>\n<li>customer.accounts.exists()</li>\n<li>customer.accounts.add()</li>\n<li>customer.accounts.remove()</li>\n<li>customer.accounts.at()</li>\n</ul>\n<h5 id=\"Transient-versus-persistent-for-the-embedded-model-嵌入模型的瞬态与永久\"><a href=\"#Transient-versus-persistent-for-the-embedded-model-嵌入模型的瞬态与永久\" class=\"headerlink\" title=\"Transient versus persistent for the embedded model(嵌入模型的瞬态与永久)\"></a>Transient versus persistent for the embedded model(嵌入模型的瞬态与永久)</h5><p>Define a transient data source</p>\n<p><strong>server/datasources.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"transient\": &#123;</span><br><span class=\"line\">    \"name\": \"transient\",</span><br><span class=\"line\">    \"connector\": \"transient\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Use the transient data source for embedded models</p>\n<p><strong>server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"Customer\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"db\",</span><br><span class=\"line\">    \"public\": true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"Address\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"transient\",</span><br><span class=\"line\">    \"public\": false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"EmailAddress\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"transient\",</span><br><span class=\"line\">    \"public\": false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"Account\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"db\",</span><br><span class=\"line\">    \"public\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"1.6.10\"> 1.6.10 嵌套查询 </h4>\n\n<p>除了使用LoopBack API直接查询数据,嵌套模型可以是API endpoints(端点).为此,必须使用nestRemoting函数.</p>\n<blockquote>\n<p> Important:通常,最好在引导脚本(boot script)中执行嵌套查询,以确保所有模型都已加载.虽然可以在模型定义JSON文件中执行嵌套查询,但必须使用事件来确保已加载相关模型.</p>\n</blockquote>\n<p>了解嵌套查询的最简单的方法是通过一个例子.</p>\n<p>假设应用程序有 book, chapter, page, and image models模型,和:</p>\n<ul>\n<li>Each book can have many pages and chapters.</li>\n<li>Each chapter and page can have many notes.</li>\n<li>Each book has an image.</li>\n</ul>\n<p>以下JSON块显示了和page和chapter模型有关系的的Book模型.</p>\n<p><strong>common/models/book.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Book\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"idInjection\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"validateUpsert\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"string\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"validations\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"relations\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"pages\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Page\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"through\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"chapters\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"hasMany\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Chapter\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"foreignKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"through\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"acls\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"methods\"</span>: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/chapter.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Chapter\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"notes\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Note\",</span><br><span class=\"line\">      \"foreignKey\": \"\",</span><br><span class=\"line\">      \"through\": \"\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/page.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Page\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"notes\": &#123;</span><br><span class=\"line\">      \"type\": \"hasMany\",</span><br><span class=\"line\">      \"model\": \"Note\",</span><br><span class=\"line\">      \"foreignKey\": \"\",</span><br><span class=\"line\">      \"through\": \"\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>common/models/image.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Image\"</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"relations\": &#123;</span><br><span class=\"line\">    \"book\": &#123;</span><br><span class=\"line\">      \"type\": \"belongsTo\",</span><br><span class=\"line\">      \"model\": \"Book\",</span><br><span class=\"line\">      \"foreignKey\": \"\",</span><br><span class=\"line\">      \"required\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>您可以通过常规关系查询特定图书的页面,如以下API端点所示:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages</td>\n      <td>An array of pages data</td>\n      <td>Queries pages of a specific book</td>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456</td>\n      <td>An object of a page data</td>\n      <td>Queries a page data of a specific page under a specific book</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>但是,要更深入地查询嵌套模型并将它们作为API端点,您需要使用模型nestRemoting()函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.nestRemoting(<span class=\"string\">'pages'</span>);</span><br><span class=\"line\">Book.nestRemoting(<span class=\"string\">'chapters'</span>);</span><br><span class=\"line\">Image.nestRemoting(<span class=\"string\">'book'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码启用以下嵌套查询:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456/notes</td>\n      <td>An array of notes objects</td>\n      <td>Queries all of the notes associated with a specific page under a specific book</td>\n    </tr>\n    <tr>\n      <td>/api/books/123/pages/456/notes/567</td>\n      <td>An object of a note data</td>\n      <td>Queries a specific note associated with a specific page under a specific book</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>或者,由于图像属于书实例,所以,您可以通过他们的图像查询他们的网页:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Endpoint</th>\n      <th>Output</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>/api/images/345/book/pages</td>\n      <td>An array of pages of a book</td>\n      <td>Queries all of the pages of the book, whose associated image id is 345</td>\n    </tr>\n    <tr>\n      <td>/api/images/345/book/pages/456</td>\n      <td>An object of a page data</td>\n      <td>Queries page with the id of 456 under the book, whose associated image id is 345</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2\"> 2. 使用内置Models </h4>\n\n<h5 id=\"概述-11\"><a href=\"#概述-11\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack为常见使用场景提供了有用的内置models:</p>\n<ul>\n<li><p><strong>Application model</strong> - 包含具有自己的标识和与LoopBack服务关联配置的客户端应用程序的元数据.</p>\n</li>\n<li><p><strong>User model</strong> - 注册和验证本地或第三方服务的用户.</p>\n</li>\n<li><p><strong>Access control models</strong> - 包括ACL,AccessToken,Scope,Role和RoleMapping模型,用于控制对应用程序,资源和方法的访问.</p>\n</li>\n<li><p><strong>Email model</strong> - 使用SMTP或第三方服务向您的应用用户发送电子邮件.</p>\n</li>\n</ul>\n<p>内置模型（电子邮件除外）扩展自PersistedModel,因此它们自动具有完整的创建,更新和删除(CRUD)操作.</p>\n<blockquote>\n<p> 注意:默认情况下,只有User model通过REST公开.要暴露其他内置模型,请在server/model-config.json中将模型的public属性更改为true.使用警告:将某些模型暴露于公共API可能是一种安全风险.</p>\n</blockquote>\n<h5 id=\"Access-control-models\"><a href=\"#Access-control-models\" class=\"headerlink\" title=\"Access control models\"></a>Access control models</h5><p>使用访问控制模型来控制对应用程序,资源和方法的访问.这些模型包括:</p>\n<ul>\n<li>ACL</li>\n<li>AccessToken</li>\n<li>Scope</li>\n<li>Role</li>\n<li>RoleMapping</li>\n</ul>\n<p><strong><em>ACL model</em></strong></p>\n<p>ACL模型将主体连接到受保护的资源.系统向主体(用户或应用程序,以及那些可以被分组为角色的主体)授予权限.</p>\n<ul>\n<li>保护资源：模型数据和操作(模型/属性/方法/关系)</li>\n<li>是否允许给定的客户端应用程序或用户访问(读取,写入或执行)受保护的资源.</li>\n</ul>\n<p>创建新的ACL实例.</p>\n<p><strong>server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACL.create(&#123;</span><br><span class=\"line\">    principalType: ACL.USER, </span><br><span class=\"line\">    principalId: <span class=\"string\">'u001'</span>, </span><br><span class=\"line\">    model: <span class=\"string\">'User'</span>, </span><br><span class=\"line\">    property: ACL.ALL,</span><br><span class=\"line\">    accessType: ACL.ALL, </span><br><span class=\"line\">    permission: ACL.ALLOW&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, acl</span>) </span>&#123;</span><br><span class=\"line\">        ACL.create(&#123;</span><br><span class=\"line\">            principalType: ACL.USER, </span><br><span class=\"line\">            principalId: <span class=\"string\">'u001'</span>, </span><br><span class=\"line\">            model: <span class=\"string\">'User'</span>, </span><br><span class=\"line\">            property: ACL.ALL,</span><br><span class=\"line\">            accessType: ACL.READ, </span><br><span class=\"line\">            permission: ACL.DENY&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, acl</span>) </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2.1\"> 2.1 扩展内置Models </h4>\n\n<h5 id=\"使用JSON来扩展内置model\"><a href=\"#使用JSON来扩展内置model\" class=\"headerlink\" title=\"使用JSON来扩展内置model\"></a>使用JSON来扩展内置model</h5><p>当使用模型生成器创建模型时,选择基本模型,即模型将“扩展”的模型,并从中继承方法和属性.该工具将相应地在模型定义JSON文件中设置基本属性.例如,对于扩展PersistedModel的模型:</p>\n<p><strong>/common/models/model.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Order\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"base\"</span>: <span class=\"string\">\"PersistedModel\"</span>,</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p>要更改基本模型,只需编辑JSON文件并更改基本属性.</p>\n<p>一般来说,当您想要使用连接器(如MySQL或MongoDB)将数据存储在数据库中时,请使用<code>PersistedModel</code>作为基本模型.使用<code>Model</code>作为不具有CRUD语义的模型的基础,例如,使用诸如SOAP和REST之类的连接器.</p>\n<blockquote>\n<p> 提示:扩展内置的User模型以创建表示用户或客户的自己的模型.此模型提供注册,登录和恢复密码的功能.扩展内置User模型时,请使用除”User”以外的模型名称,例如”customer”或”client”.不要将其命名为”User”,因为这将与内置User模型冲突.为了避免混淆,最好避免使用小写字母”u”的”user”.</p>\n</blockquote>\n<h5 id=\"使用js代码来扩展内置model\"><a href=\"#使用js代码来扩展内置model\" class=\"headerlink\" title=\"使用js代码来扩展内置model\"></a>使用js代码来扩展内置model</h5><p>您还可以使用模型JavaScript文件/common/models/<em>modelName</em>.js中的JavaScript文件扩展模型(其中,modelName是模型的名称),例如:</p>\n<p><strong>/common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> properties = &#123;</span><br><span class=\"line\">  firstName: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    required: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  relations: &#123;</span><br><span class=\"line\">    accessTokens: &#123;</span><br><span class=\"line\">      model: accessToken,</span><br><span class=\"line\">      type: hasMany,</span><br><span class=\"line\">      foreignKey: userId</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    account: &#123;</span><br><span class=\"line\">      model: account,</span><br><span class=\"line\">      type: belongsTo</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transactions: &#123;</span><br><span class=\"line\">      model: transaction,</span><br><span class=\"line\">      type: hasMany</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  acls: [&#123;</span><br><span class=\"line\">    permission: ALLOW,</span><br><span class=\"line\">    principalType: ROLE,</span><br><span class=\"line\">    principalId: $everyone,</span><br><span class=\"line\">    property: myMethod</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = loopback.Model.extend(<span class=\"string\">'user'</span>, properties, options);</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>Mixing in model definitions</em></strong></p>\n<p>您可能需要创建共享一组公共属性和逻辑的模型.LoopBack使您能够将一个或多个其他模型“混合(mix-in)”到单个模型中.例如:</p>\n<p><strong>common/models/myModel.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> TimeStamp = modelBuilder.define(<span class=\"string\">'TimeStamp'</span>, &#123;</span><br><span class=\"line\">  created: <span class=\"built_in\">Date</span>,</span><br><span class=\"line\">  modified: <span class=\"built_in\">Date</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Group = modelBuilder.define(<span class=\"string\">'Group'</span>, &#123;</span><br><span class=\"line\">  groups: [<span class=\"built_in\">String</span>]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">User.mixin(Group, TimeStamp);</span><br></pre></td></tr></table></figure>\n\n<p><em>设置自定义model</em></p>\n<p>您可能需要为自定义模型执行其他设置,例如添加另一个模型的远程方法.要实现这些,请在新模型上实施setup()方法.loopback.Model.extend()函数调用setup(),因此在setup()中输入的代码将在创建模型时自动执行.</p>\n<p>例如:</p>\n<p><strong>common/models/myModel.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel = Model.extend(<span class=\"string\">'MyModel'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.on(<span class=\"string\">'myEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'meep meep!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyExtendedModel = MyModel.extend(<span class=\"string\">'MyExtendedModel'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.emit(<span class=\"string\">'myEvent'</span>); <span class=\"comment\">// nothing happens (no event listener)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this is where `setup()` becomes handy</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.setup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> MyModel = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// since setup is called for every extended model</span></span><br><span class=\"line\">  <span class=\"comment\">// the extended model will also have the event listener</span></span><br><span class=\"line\">  MyModel.on(<span class=\"string\">'myEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    MyModel.printModelName();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2.2\"> 2.2 为内置Models添加remote methods </h4>\n\n<p>要向内置模型添加远程方法.您可以扩展模型,然后将远程方法添加到新模型,或将其添加到引导脚本中.如此处示例所述:</p>\n<p>此示例将为内置的User模型添加”greet”方法.</p>\n<h5 id=\"Boot-script\"><a href=\"#Boot-script\" class=\"headerlink\" title=\"Boot script\"></a>Boot script</h5><p>通常,要向User模型添加远程方法,您需要将其添加到/common/models/user.js中.然而,对于内置模型,这个文件将覆盖内置的模型定义,所以你必须在启动脚本中创建和附加我们的远程方法,例如:</p>\n<p><strong>server/boot/userRemoteMethods.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> User = app.models.User;</span><br><span class=\"line\"></span><br><span class=\"line\">  User.greet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg, cb</span>) </span>&#123;</span><br><span class=\"line\">    cb(<span class=\"literal\">null</span>, <span class=\"string\">'Greetings... '</span> - msg);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  User.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'greet'</span>, &#123;</span><br><span class=\"line\">      accepts: &#123;</span><br><span class=\"line\">        arg: <span class=\"string\">'msg'</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'string'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      returns: &#123;</span><br><span class=\"line\">        arg: <span class=\"string\">'greeting'</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'string'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ACLs\"><a href=\"#ACLs\" class=\"headerlink\" title=\"ACLs\"></a>ACLs</h5><p>默认情况下,User模型的ACL拒绝除了明确列入白名单的所有请求,因此您必须为远程方法添加ACL记录. 最常见的做法是编辑/common/models/user.json这样的文件,但是这个文件会覆盖内置的版本,所以这是不可能的.相反,您可以在model-config.json中定义ACL.</p>\n<p>例如:</p>\n<p><strong>server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"User\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"dataSource\"</span>: <span class=\"string\">\"db\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"acls\"</span>: [&#123;</span><br><span class=\"line\">      <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"$everyone\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"greet\"</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在,所有用户都可以向/Users/greet发送POST请求,并访问此内置模型上的新自定义方法.</p>\n<h5 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h5><ul>\n<li>以这种方式添加远程方法<strong>不会将它们添加到Swagger JSON</strong>.这意味着您不会在API Explorer中看到“Users/greet”方法.</li>\n<li>通过设计,您可以通过<code>environment specific configurations</code>覆盖model-config.json中的设置.记住在定义ACL时,如上所示.</li>\n</ul>\n<hr>\n<h4 id=\"2.3\"> 2.3 为内置Models创建数据库表 </h4>\n\n<p>LoopBack应用程序附带一小组内置模型.要为这些内置模型创建数据库表,请使用<code>auto-migration</code>.</p>\n<blockquote>\n<p> 重要:如果数据库具有现有表,则运行automigrate()将删除并重新创建表,从而可能导致数据丢失.要避免此问题,请使用autoupdate().</p>\n</blockquote>\n<p>为LoopBack内置model创建数据库表情遵循以下步骤:</p>\n<ol>\n<li>按照<a href=\"#1.3\">1.3 将Model附加到数据源</a>的操作来指定数据源.</li>\n<li>创建<code>server/create-lb-tables.js</code>,代码如下:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'./server'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = server.dataSources.db;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lbTables = [<span class=\"string\">'User'</span>, <span class=\"string\">'AccessToken'</span>, <span class=\"string\">'ACL'</span>, <span class=\"string\">'RoleMapping'</span>, <span class=\"string\">'Role'</span>];</span><br><span class=\"line\">ds.automigrate(lbTables, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">er</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (er) <span class=\"keyword\">throw</span> er;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Loopback tables ['</span> - lbTables - <span class=\"string\">'] created in '</span>, ds.adapter.name);</span><br><span class=\"line\">  ds.disconnect();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后,人工执行这个脚本:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> server</span><br><span class=\"line\">$ node create-lb-tables.js</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2.4\"> 2.4 Model属性引用 </h4>\n\n<blockquote>\n<p> 重要:此参考信息正在移至API文档.直到完成才在这里提供.</p>\n</blockquote>\n<p>原文比较少,所以就不翻译了.可以自己去看一下.<a href=\"#http://loopback.io/doc/en/lb3/Model-property-reference.html\">链接在这</a></p>\n<hr>\n<h4 id=\"2.5\"> 2.5 内置Model的REST API </h4>\n\n<p>LoopBack提供了一些具有REST API的内置模型.其中许多都从通用PersistedModel REST API继承端点.</p>\n<p>默认情况下,LoopBack使用<code>/api</code>作为应用程序REST API的URI根.要更改它,请在应用程序app.js文件中设置<code>apiPath</code>变量.</p>\n<p>内置model有:</p>\n<ul>\n<li>PersistedModel REST API</li>\n<li>Access token REST API</li>\n<li>ACL REST API</li>\n<li>Application REST API</li>\n<li>Email (See the email connector page)</li>\n<li>Relation REST API</li>\n<li>Role REST API</li>\n<li>User REST API</li>\n</ul>\n<hr>\n<h4 id=\"2.5.1\"> 2.5.1 PersistedModel REST API </h4>\n\n<blockquote>\n<p> 概要:PersistedModel是连接到持久数据源(如数据库)的模型的基类,也是所有内置模型(电子邮件除外)的基类.</p>\n</blockquote>\n<h5 id=\"概述-12\"><a href=\"#概述-12\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>PersistedModel是连接到持久数据源(如数据库)的模型的基类,也是所有内置模型(电子邮件除外)的基类.它提供所有标准的创建,读取,更新和删除(CRUD)操作,并为它们公开REST端点.</p>\n<p>默认情况下,LoopBack使用<code>/api</code>作为REST API的URI根.您可以通过更改应用程序<code>/server/config.json</code>文件中的restApiRoot属性来更改此属性.有关详细信息,请参阅config.json.</p>\n<p>Model REST API的端点通常是模型名称的复数形式.默认情况下,这只是带有”s”的名称.例如,如果模型是”car”,则”cars”是复数形式.您可以在模型定义JSON文件中自定义复数形式.</p>\n<blockquote>\n<p> 注意:您不能自定义到PersistedModel REST API端点的路由.但是,您可以使用server/ config.json中的rest.normalizeHttpPath属性来控制如何从自定义模型构造REST API端点.有关更多信息,请参阅config.json (Remoting properties).</p>\n</blockquote>\n<h5 id=\"创建model实例\"><a href=\"#创建model实例\" class=\"headerlink\" title=\"创建model实例\"></a>创建model实例</h5><p>创建模型的新实例并将其持久保存到数据源.</p>\n<p><code>POST /_modelName_</code></p>\n<p>参数:</p>\n<ul>\n<li>表单数据 - 模型实例数据.可以是表示单个模型实例或模型实例数组的JSON.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: POST  <a href=\"http://localhost:3000/api/locations\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations</a></p>\n<p><strong>Request body</strong>: {“name”: “L1”, “street”: “107 S B St”, “city”: “San Mateo”, “zipcode”: “94401”}</p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"96\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"107 S B St\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"San Mateo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94401</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L1\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Update-insert实例\"><a href=\"#Update-insert实例\" class=\"headerlink\" title=\"Update / insert实例\"></a>Update / insert实例</h5><p>更新现有模型实例或将新实例插入数据源.更新将覆盖请求数据对象中的任何指定的属性.它不会删除现有的,除非该值设置为null.</p>\n<p>执行upsertto检测是否有匹配的实例.如果没有,则插入(创建)一个新实例.如果有匹配的实例,则更新它.</p>\n<p><code>PUT /_modelName_</code></p>\n<p>参数:</p>\n<ul>\n<li>表单数据 - JSON格式的model实例数据</li>\n</ul>\n<p>例子:</p>\n<p><em>Insert</em></p>\n<p><strong>Request URL</strong>: PUT  <a href=\"http://localhost:3000/api/locations\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations</a></p>\n<p><strong>Request body</strong>: {“name”: “L1”, “street”: “107 S B St”, “city”: “San Mateo”, “zipcode”: “94401”}</p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"107 S B St\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"San Mateo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94401</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L1\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Update</em></p>\n<p><strong>Request URL</strong>: PUT  <a href=\"http://localhost:3000/api/locations\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations</a></p>\n<p><strong>Request body</strong>: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"98\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L4\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"107 S B St\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"San Mateo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"string\">\"94401\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"107 S B St\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"San Mateo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94401</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L4\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"检查实例存在\"><a href=\"#检查实例存在\" class=\"headerlink\" title=\"检查实例存在\"></a>检查实例存在</h5><p>在数据源中根据ID检查实例是否存在</p>\n<p><code>GET /_modelName_/_modelID_/exists</code></p>\n<p>参数:</p>\n<ul>\n<li>modelID - model instance ID</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: GET <a href=\"http://localhost:3000/api/locations/88/exists\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/88/exists</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>: javascript {“exists”: true}</p>\n<h5 id=\"根据ID查找实例\"><a href=\"#根据ID查找实例\" class=\"headerlink\" title=\"根据ID查找实例\"></a>根据ID查找实例</h5><p>从数据源中根据ID查找一个model实例</p>\n<p><code>GET /modelName/modelID?filter=[filterType1]=&lt;val1&gt;&amp;filter[filterType2]=&lt;val2&gt;...</code></p>\n<p>参数:</p>\n<ul>\n<li><p><strong>modelID</strong> - Model instance ID</p>\n</li>\n<li><p><em>filterType1, filterType2</em>, and so on, are the filter types. This operation supports only include and fields filters. See Include filter and Fields filter for more information.</p>\n</li>\n<li><p><em>val1, val2</em> are the corresponding values.</p>\n</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations/88\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/88</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"390 Lang Road\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Burlingame\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94010</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Bay Area Firearms\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查找匹配实例\"><a href=\"#查找匹配实例\" class=\"headerlink\" title=\"查找匹配实例\"></a>查找匹配实例</h5><p>从数据源中,根据过滤器,查找所有匹配的实例.</p>\n<p><code>GET /modelName?filter=[filterType1]=&lt;val1&gt;&amp;filter[filterType2]=&lt;val2&gt;...</code></p>\n<p>参数:</p>\n<p>将参数作为过滤器的HTTP查询参数的值传递,其中:</p>\n<ul>\n<li><p><em>filterType1, filterType2</em>, and so on, are the filter types.</p>\n</li>\n<li><p><em>val1, val2</em> are the corresponding values.</p>\n</li>\n</ul>\n<p>例子:</p>\n<p>Request without filter:</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations</a></p>\n<p>Request with a filter to limit response to two records:</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations?filter[limit]=2\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations?filter[limit]=2</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"87\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"7153 East Thomas Road\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Scottsdale\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">85251</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Phoenix Equipment Rentals\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"88\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"390 Lang Road\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Burlingame\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94010</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Bay Area Firearms\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查找第一个实例\"><a href=\"#查找第一个实例\" class=\"headerlink\" title=\"查找第一个实例\"></a>查找第一个实例</h5><p>从数据源中,根据过滤器,查找第一个匹配的实例.</p>\n<p><code>GET /modelName/findOne?filter=[filterType1]=&lt;val1&gt;&amp;filter[filterType2]=&lt;val2&gt;...</code></p>\n<p>参数:</p>\n<p>查询参数:</p>\n<ul>\n<li>filter - 定义位置,顺序,字段,跳过和限制的过滤器.它和find的filter参数一样.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations/findOne?filter[where][city]=Scottsdale\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/findOne?filter[where][city]=Scottsdale</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"87\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"7153 East Thomas Road\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Scottsdale\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">85251</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Phoenix Equipment Rentals\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除model实例\"><a href=\"#删除model实例\" class=\"headerlink\" title=\"删除model实例\"></a>删除model实例</h5><p>从数据源根据ID删除model实例.</p>\n<p><code>DELETE /modelName/modelID</code></p>\n<p>参数:</p>\n<ul>\n<li>modelID  - model instance ID</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: DELETE  <a href=\"http://localhost:3000/api/locations/88\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/88</a></p>\n<p><strong>Response status code</strong>: 204</p>\n<h5 id=\"删除所有匹配的实例\"><a href=\"#删除所有匹配的实例\" class=\"headerlink\" title=\"删除所有匹配的实例\"></a>删除所有匹配的实例</h5><blockquote>\n<p> 警告:默认情况下,此操作不会通过REST公开,以防止无意中删除数据.</p>\n</blockquote>\n<p>从与指定的where子句匹配的数据源中删除model的实例.</p>\n<p><code>DELETE /modelName?filter=[filterType1]=&lt;val1&gt;&amp;filter[filterType2]=&lt;val2&gt;...</code></p>\n<p>参数:</p>\n<ul>\n<li>filter - 用于定义位置,顺序,字段,跳过和限制的过滤器.它和find的filter参数一样.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: DELETE  <a href=\"http://localhost:3000/api/locations?[where][city]=Dallas\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations?[where][city]=Dallas</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<h5 id=\"获取匹配的实例数量-译注-可以理解为count\"><a href=\"#获取匹配的实例数量-译注-可以理解为count\" class=\"headerlink\" title=\"获取匹配的实例数量(译注:可以理解为count(*))\"></a>获取匹配的实例数量(<em>译注:可以理解为count(*)</em>)</h5><p>从与指定的where子句匹配的数据源中count model的实例.</p>\n<p><code>GET /modelName/count?where[property]=value</code></p>\n<p>参数:</p>\n<ul>\n<li>where - 匹配模型实例的条件.</li>\n</ul>\n<p>例子:</p>\n<p>Count without “where” filter</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations/count\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/count</a></p>\n<p>Count with a “where” filter</p>\n<p><strong>Request URL</strong>: GET  <a href=\"http://localhost:3000/api/locations/count?where[city]=Burlingame\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/count?where[city]=Burlingame</a></p>\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<p>{count: 6}</p>\n<h5 id=\"更新model实例属性\"><a href=\"#更新model实例属性\" class=\"headerlink\" title=\"更新model实例属性\"></a>更新model实例属性</h5><p>更新model实例属性并持久化进数据源.</p>\n<p><code>PUT /model/modelID</code></p>\n<p>参数:</p>\n<ul>\n<li>data - An object containing property name/value pairs</li>\n<li>modelID - The model instance ID</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: PUT  <a href=\"http://localhost:3000/api/locations/88\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/88</a></p>\n<p><strong>Request body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L2\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"88\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"390 Lang Road\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Burlingame\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"zipcode\"</span>: <span class=\"number\">94010</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"L2\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"更新匹配的model实例\"><a href=\"#更新匹配的model实例\" class=\"headerlink\" title=\"更新匹配的model实例\"></a>更新匹配的model实例</h5><p>更新匹配model实例的属性,并持久化到数据源.</p>\n<p><code>POST /modelName/update?where[property]=value</code></p>\n<p>参数:</p>\n<ul>\n<li>data - An object containing property name/value pairs.</li>\n<li>where - The where object to select matching instances. See Where filter for more information.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: POST  <a href=\"http://localhost:3000/api/locations/update?where[city]=Burlingame\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/update?where[city]=Burlingame</a></p>\n<p><strong>Request body</strong>: {“city”: “San Jose”}</p>\n<p><strong>Response status code</strong>: 200</p>\n<h5 id=\"创建更改流-Create-Change-Stream\"><a href=\"#创建更改流-Create-Change-Stream\" class=\"headerlink\" title=\"创建更改流(Create Change Stream)\"></a>创建更改流(Create Change Stream)</h5><p>创建一个新的更改流:</p>\n<p><code>POST /modelName/change-stream?format=event-stream</code></p>\n<p>参数:</p>\n<ul>\n<li>表单数据 - 模型实例数据.表示单个模型实例的JSON或模型实例的数组.</li>\n</ul>\n<p>例子:</p>\n<p><strong>Request URL</strong>: POST  <a href=\"http://localhost:3000/api/locations/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/locations/</a></p>\n<p><strong>Request body</strong>: {“city”: “San Jose”}</p>\n<h5 id=\"获取更改流\"><a href=\"#获取更改流\" class=\"headerlink\" title=\"获取更改流\"></a>获取更改流</h5><p><code>GET /modelName/change-stream?format=event-stream</code></p>\n<hr>\n<h4 id=\"2.5.2\"> 2.5.2 Access token REST API </h4>\n\n<p>访问令牌REST API中的所有端点都是从通用PersistedModel REST API继承.为方便起见,此处提供了参考.</p>\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>URI Pattern</th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th width=\"200\">Description</th>\n      <th width=\"300\">Arguments</th>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#create-model-instance\">Add access token instance</a> and persist to data source.\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of accessTokens that match specified filter.</td>\n      <td>\n        One or more filters in query parameters:\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert access token instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find access token by ID</a>: Return data for the specified access token instance ID.</td>\n      <td><em>id</em>, the access token instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified access token ID and persist.</td>\n      <td>\n        Query parameters:\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete access token</a> with specified instance ID.</td>\n      <td><em>id</em>, access token ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified access token ID exists.\n      </td>\n      <td>\n        URI path:\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of access token instances</a>&nbsp;that matches specified where clause.\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/accessTokens/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first access token instance</a> that matches specified filter.\n      </td>\n      <td>Same as <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2.5.3\"> 2.5.3 ACL REST API </h4>\n\n<p>ACL REST API中的所有端点都继承自PersistedModel REST API.为方便起见,此处提供了参考.</p>\n<p>默认情况下,不显示ACL REST API.要公开它,请将以下内容添加到models.json中:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"acl\": &#123;</span><br><span class=\"line\">  \"public\": true,</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"base\": \"ACL\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"dataSource\": \"db\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/acls</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add ACL instance</a><span> and persist to data source.</span></p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/acls</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a><span> of ACLs that match specified filter.</span></td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert ACL instance</a><span> and persist to data source.</span></td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find ACL by ID</a><span>: Return data for the specified ACL instance ID.</span></td>\n      <td><em>id</em>, the ACL instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a><span> for specified ACL ID and persist.</span></td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete ACL</a><span> with specified instance ID.</span></td>\n      <td><em>id</em>, acls ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/acls/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a><span>: Return true if specified ACL ID exists.</span></p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/acls/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of ACL instances</a><span>&nbsp;that matches specified where clause.</span></p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/acls/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first ACL instance</a><span> that matches specified filter.</span></p>\n      </td>\n      <td>Same as <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2.5.4\"> 2.5.4 Application REST API </h4>\n\n<p>Application  REST API中的所有端点都继承自PersistedModel REST API.为方便起见.此处提供了参考.</p>\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/applications</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add application instance</a> and persist to data source.</p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/applications</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of applications that match specified filter.</td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert application instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find application by ID</a>: Return data for the specified application instance ID.</td>\n      <td><em>id</em>, the application instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified application ID and persist.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete application</a> with specified instance ID.</td>\n      <td><em>id</em>, application ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/applications/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified application ID exists.</p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/applications/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of application instances</a>&nbsp;that matches specified where clause.</p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/applications/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first application instance</a> that matches specified filter.</p>\n      </td>\n      <td>Same as&nbsp;<a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2.5.5\"> 2.5.5 Relation REST API </h4>\n\n<p>这些端点是PersistedModel REST API的一部分,但是为了方便参考,这里提供.</p>\n<h5 id=\"获取相关model实例\"><a href=\"#获取相关model实例\" class=\"headerlink\" title=\"获取相关model实例\"></a>获取相关model实例</h5><p><code>GET /&lt;model1-name&gt;/&lt;instanceID&gt;/&lt;model2-name&gt;</code></p>\n<p>参数:</p>\n<ul>\n<li><code>&lt;instanceID&gt;</code> - ID of instance in model1.</li>\n<li><code>&lt;model1-name&gt;</code> - name of first model. </li>\n<li><code>&lt;model2-name&gt;</code> - name of second related model.</li>\n</ul>\n<p>例子:</p>\n<p>Request:</p>\n<p><code>GET http://localhost:3000/locations/88/inventory</code></p>\n<p>Response:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"productId\"</span>: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"locationId\"</span>: <span class=\"string\">\"88\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"available\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"total\"</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"productId\"</span>: <span class=\"string\">\"3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"locationId\"</span>: <span class=\"string\">\"88\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"available\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"total\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Get-hasMany-related-model-instances\"><a href=\"#Get-hasMany-related-model-instances\" class=\"headerlink\" title=\"Get hasMany related model instances\"></a>Get hasMany related model instances</h5><p>列出由instance-ID标识指定的<code>&lt;model-name&gt;</code>的hasMany关系的相关模型实例.</p>\n<p><code>GET /&lt;model-name&gt;/&lt;instance-ID&gt;/&lt;hasManyRelationName&gt;</code></p>\n<h5 id=\"Create-hasMany-related-model-instance\"><a href=\"#Create-hasMany-related-model-instance\" class=\"headerlink\" title=\"Create hasMany related model instance\"></a>Create hasMany related model instance</h5><p>为hasMany关系的<code>&lt;instance-ID&gt;</code>标识的指定<code>&lt;model-name&gt;</code>创建相关模型实例.(<em>译注:原文在这里,以下不翻译了,容易造成误解,Create a related model instance for specified <model-name> identified by <instance-id>, for hasMany relationship.</instance-id></model-name></em>)</p>\n<p><code>POST /&lt;model1-name&gt;/&lt;instance-ID&gt;/&lt;hasMany-Relation-Name&gt;</code></p>\n<h5 id=\"Delete-hasMany-related-model-instances\"><a href=\"#Delete-hasMany-related-model-instances\" class=\"headerlink\" title=\"Delete hasMany related model instances\"></a>Delete hasMany related model instances</h5><p>Delete related model instances for specified <code>&lt;model-name&gt;</code> identified by <code>&lt;instance-ID&gt;</code>, for hasMany relationship.</p>\n<p><code>DELETE /&lt;model1-name&gt;/&lt;instance-ID&gt;/&lt;hasMany-relation-name&gt;</code></p>\n<h5 id=\"List-belongsTo-related-model-instances\"><a href=\"#List-belongsTo-related-model-instances\" class=\"headerlink\" title=\"List belongsTo related model instances\"></a>List belongsTo related model instances</h5><p>List the related model instances for the given model identified by <code>&lt;instance-ID&gt;</code>, for hasMany relationship.</p>\n<p><code>GET /model-name/&lt;instance-ID&gt;/&lt;belongsTo-relation-name&gt;</code></p>\n<h5 id=\"Aggregate-models-following-relations\"><a href=\"#Aggregate-models-following-relations\" class=\"headerlink\" title=\"Aggregate models following relations\"></a>Aggregate models following relations</h5><p>通常期望在对查询的响应中包含相关模型的实例,以使得客户端不必进行多个调用.</p>\n<p><code>GET /&lt;model1-name&gt;?filter[include]=...</code></p>\n<p>参数:</p>\n<ul>\n<li>include - The object that describes a hierarchy of relations to be included(描述要包含的关系的层次结构的对象)</li>\n</ul>\n<p>例子:</p>\n<p><code>GET /api/members?filter[include]=posts</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post D\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>The following request retrieves all members, including the posts, which further includes the author:</p>\n<p><code>GET /api/members?filter[include][posts]=author</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post D\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>The following request retrieves all members who are 21 years old, including the posts, which further includes the author:</p>\n<p><code>GET /api/members?filter[include][posts]=author&amp;filter[where][age]=21</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>The following request retrieves two members, including the posts, which further includes the author: </p>\n<p><code>GET /api/members?filter[include][posts]=author&amp;filter[limit]=2</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post D\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>The following request retrieves all members, including the posts and passports.</p>\n<p><code>GET /api/members?filter[include]=posts&amp;filter[include]=passports</code></p>\n<p>The API returns the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member A\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post A\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post B\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post C\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"passports\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"number\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ownerId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Member B\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"posts\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"Post D\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"memberId\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"passports\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"number\"</span>: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ownerId\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;, ... ]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"2.5.6\"> 2.5.6 Role REST API </h4>\n\n<p>Role REST API中的所有端点都从通用PersistedModel REST API继承.为方便起见,此处提供了参考.</p>\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>URI Pattern</p>\n      </th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th>Arguments</th>\n    </tr>\n    <tr>\n      <td>\n        <p><code>/roles</code></p>\n        <div style=\"width:120px;\">\n          <p>&nbsp;</p>\n        </div>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add role instance</a> and persist to data source.</p>\n      </td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/roles</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find instances</a> of roles that match specified filter.</td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert role instance</a> and persist to data source.</td>\n      <td>JSON object (in request body)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find role by ID</a>: Return data for the specified role instance ID.</td>\n      <td><em>id</em>, the role instance ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update attributes</a> for specified role ID and persist.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;- An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;- The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete role</a> with specified instance ID.</td>\n      <td><em>id</em>, role ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/roles/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#check-instance-existence\">Check instance existence</a>: Return true if specified role ID exists.</p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/roles/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#get-instance-count\">Return the number of role instances</a>&nbsp;that matches specified where clause.</p>\n      </td>\n      <td>Where filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/roles/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#find-first-instance\">Find first role instance</a> that matches specified filter.</p>\n      </td>\n      <td>Same as&nbsp;<a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a>.</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"2.5.7\"> 2.5.7 User REST API </h4>\n\n<p>下面表格中的所有端点都继承自PersistedModel REST API,但以下情况除外：</p>\n<ul>\n<li>Log in user - <code>POST /users/login</code></li>\n<li>Log out user - <code>POST /users/logout</code></li>\n<li>Confirm email address - <code>GET /users/confirm</code></li>\n<li>Reset password - <code>POST /users/reset</code></li>\n</ul>\n<p><strong>Quick reference</strong></p>\n<table>\n  <tbody>\n    <tr>\n      <th>URI Pattern</th>\n      <th>HTTP Verb</th>\n      <th>Default Permission</th>\n      <th>Description</th>\n      <th style=\"width:300px;\">Arguments</th>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">Add user instance</a> and persist to data source. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.</p>\n      </td>\n      <td>\n        <p>JSON object (in request body) providing <a href=\"http://apidocs.strongloop.com/loopback/#user\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">User object properties</a>: <code>username</code>, <code>password</code>, <code>email</code>. LoopBack sets values for <code>emailVerified</code> and <code>verificationToken</code>.</p>\n        <p>NOTE: A value for <code>username</code> is not required, but a value for <code>email</code> is. LoopBack validates a unique value for <code>password</code> is provided. LoopBack does not automatically maintain values of the <code>created</code> and <code>lastUpdated</code> properties; you can set them manually if you wish.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">Find matching instances</a> of users that match specified filter. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>One or more filters in query parameters:</p>\n        <ul>\n          <li>where</li>\n          <li>include</li>\n          <li>order</li>\n          <li>limit</li>\n          <li>skip / offset</li>\n          <li>fields</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users</code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update--insert-instance\">Update / insert user instance</a> and persist to data source. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>JSON object (in request body)</p>\n        <p>Same as for <code>POST /users</code></p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Find user by ID</a>: Return data for the specified user ID. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td><em>id</em>, the user ID (in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>PUT</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">Update user attributes</a> for specified user ID and persist. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>data&nbsp;An object containing property name/value pairs</li>\n          <li><em>id</em>&nbsp;The model id</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em></code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">Delete user</a> with specified instance ID. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n      </td>\n      <td><em>id</em>, user ID<em> </em>(in URI path)</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>Returns access token for specified user ID.</td>\n      <td>\n        <ul>\n          <li><em>id</em>, user ID, in URI path</li>\n          <li>where in query parameters</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>POST</td>\n      <td>Deny</td>\n      <td>Create access token for specified user ID.</td>\n      <td>\n        <p><em>id</em>, user ID, in URI path</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/accessTokens</code></td>\n      <td>DELETE</td>\n      <td>Deny</td>\n      <td>Delete access token for specified user ID.</td>\n      <td>\n        <p><em>id</em>, user ID, in URI path</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/confirm</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td><a href=\"#confirm-email-address\">Confirm email address</a> for specified user.</td>\n      <td>\n        <p>Query parameters:</p>\n        <ul>\n          <li>uid</li>\n          <li>token</li>\n          <li>redirect</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/count</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-count\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">Return number of user instances</a>&nbsp;that match specified where clause. Inherited from <a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel\" target=\"_blank\" rel=\"noopener\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\"Where\" filter specified in query parameter</td>\n    </tr>\n    <tr>\n      <td><code>/users/<em>id</em>/exists</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p>Check instance existence: Return true if specified user ID exists. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\n        <p>URI path:</p>\n        <ul>\n          <li><em>users</em> - Model name</li>\n          <li><em>id</em> - Model instance ID</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/findOne</code></td>\n      <td>GET</td>\n      <td>Deny</td>\n      <td>\n        <p>Find first user instance that matches specified filter. Inherited from <a href=\"PersistedModel-REST-API.html\">PersistedModel API</a>.\n        </p>\n      </td>\n      <td>\n      <p>One or more filters in query parameters:</p>\n      <ul>\n        <li>where</li>\n        <li>include</li>\n        <li>order</li>\n        <li>limit</li>\n        <li>skip / offset</li>\n        <li>fields</li>\n      </ul>\n      </td>\n    </tr>\n    <tr>\n      <td><code>/users/login[?include=user]</code></td>\n      <td>\n        <p>POST</p>\n      </td>\n      <td>Allow</td>\n      <td>\n        <p><a href=\"#log-in-user\">Log in</a> the specified user.</p>\n      </td>\n      <td>\n        <p>Username and password in POST body.</p>\n        <p>If query parameter is <code>include=user</code>, then returns the user object.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>/users/logout</code>\n      </td>\n      <td>POST</td>\n      <td>Allow</td>\n      <td><a href=\"#log-out-user\">Log out</a> the specified user.</td>\n      <td>Access token in POST body.</td>\n    </tr>\n    <tr>\n      <td><code>/users/reset</code></td>\n      <td>POST</td>\n      <td>&nbsp;</td>\n      <td><a href=\"#reset-password\">Reset password</a> for the specified user.</td>\n      <td>In POST body</td>\n    </tr>\n  </tbody>\n</table>\n\n<h5 id=\"Log-in-user\"><a href=\"#Log-in-user\" class=\"headerlink\" title=\"Log in user\"></a>Log in user</h5><p><code>POST /users/login</code></p>\n<p>您必须在请求正文中提供用户名或电子邮件以及密码.为了确保这些值被加密,请将它们作为正文的一部分,并确保通过HTTPS提供应用程序.</p>\n<p>您还可以通过提供具有秒值的ttl(存活时间)属性来指定访问令牌有效的有效期.</p>\n<p>例子:</p>\n<p><strong>Request URL</strong>: POST  <a href=\"http://localhost:3000/users/login\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/users/login</a></p>\n<p><strong>Request body</strong>: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"foo@bar.com\"</span>, <span class=\"attr\">\"password\"</span>: <span class=\"string\">\"bar\"</span>, <span class=\"attr\">\"ttl\"</span>: <span class=\"number\">86400</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Response status code</strong>: 200</p>\n<p><strong>Response body</strong>: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"ttl\"</span>: <span class=\"number\">86400</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"created\"</span>: <span class=\"string\">\"2014-12-23T08:31:33.464Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"userId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用户会话的访问令牌存储在在响应的id键中.它必须在查询参数<code>access_token</code>中为需要用户登录的所有API指定,例如:</p>\n<p><code>http://localhost:3000/api/Users/logout?access_token=PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE</code></p>\n<h5 id=\"Log-out-user\"><a href=\"#Log-out-user\" class=\"headerlink\" title=\"Log out user\"></a>Log out user</h5><p><code>POST /users/logout</code></p>\n<p>例子:</p>\n<p><strong>Request URL</strong>: <code>POST  http://localhost:3000/api/Users/logout?access_token=PqosmmPCdQgwerDYwQcVCxMakGQV0BSUwG4iGVLvD3XUYZRQky1cmG8ocmzsVpEE</code></p>\n<p><strong>Response status code</strong>: 204</p>\n<h5 id=\"确认邮件地址\"><a href=\"#确认邮件地址\" class=\"headerlink\" title=\"确认邮件地址\"></a>确认邮件地址</h5><p>要求用户在登录前验证其电子邮件地址,这将向用户发送一封电子邮件,其中包含用于验证其地址的链接.一旦用户点击链接,他们将被重定向到web根(“/“),并将能够正常登录.</p>\n<p><code>GET /users/confirm</code></p>\n<p>参数:</p>\n<p>Query parameters:</p>\n<ul>\n<li>uid</li>\n<li>token</li>\n<li>redirect</li>\n</ul>\n<p>返回值:</p>\n<p>If token invalid: HTTP 400</p>\n<p>If user not found: HTTP 404</p>\n<p>If successful: HTTP 204</p>\n<h5 id=\"重置密码\"><a href=\"#重置密码\" class=\"headerlink\" title=\"重置密码\"></a>重置密码</h5><p><code>POST /users/reset</code></p>\n<p>参数:</p>\n<p>POST payload:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"foo@bar.com\"</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Return value</p>\n<p><code>200 OK</code></p>\n<p>您必须处理”resetPasswordRequest”事件才能向正确的用户发送包含访问令牌的重置电子邮件.</p>\n<p>下面的示例显示了如何获取用户可以用来重置密码的访问令牌:</p>\n<p><strong>common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.on(<span class=\"string\">'resetPasswordRequest'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">info</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(info.email); <span class=\"comment\">// the email of the requested user</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(info.accessToken.id); <span class=\"comment\">// the temp access token to allow password reset</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// requires AccessToken.belongsTo(User)</span></span><br><span class=\"line\">  info.accessToken.user(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(user); <span class=\"comment\">// the actual user</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3\"> 3. 将Model连接到数据源 </h4>\n\n<h5 id=\"概要-2\"><a href=\"#概要-2\" class=\"headerlink\" title=\"概要\"></a>概要</h5><p><img src=\"img/dsModel.jpg\" alt=\"dsModel\"></p>\n<p>LoopBack模型通过提供创建,检索,更新和删除(CRUD)功能的数据源连接到后端系统,如数据库.LoopBack还将其他后端服务(例如REST API,SOAP Web服务和存储服务等)概括为数据源.</p>\n<p>数据源由使用数据库驱动程序或其他客户端API实现数据交换逻辑的连接器支持.一般来说,应用程序不直接使用连接器,而是使用DataSource和PersistedModel API访问数据源.</p>\n<h5 id=\"基础步骤\"><a href=\"#基础步骤\" class=\"headerlink\" title=\"基础步骤\"></a>基础步骤</h5><ol>\n<li><p>使用<code>data source generator</code>创建新数据源.</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:datasource</span><br><span class=\"line\">? Enter the data-source name: mysql-corp</span><br><span class=\"line\">? Select the connector <span class=\"keyword\">for</span> mysql: MySQL (supported by StrongLoop)</span><br></pre></td></tr></table></figure>\n\n<p>按照提示命名数据源并选择要使用的连接器.这将新数据源添加到datasources.json中.</p>\n</li>\n<li><p>编辑<code>server/datasources.json</code>以添加必要的身份验证凭据:通常为主机名,用户名,密码和数据库名称.</p>\n<p>例如:</p>\n<p><strong>server/datasources.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \"mysql-corp\": &#123;</span><br><span class=\"line\"> \"name\": \"mysql-corp\",</span><br><span class=\"line\"> \"connector\": \"mysql\",</span><br><span class=\"line\"> \"host\": \"your-mysql-server.foo.com\",</span><br><span class=\"line\"> \"user\": \"db-username\",</span><br><span class=\"line\"> \"password\": \"db-password\",</span><br><span class=\"line\"> \"database\": \"your-db-name\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用npm安装连接器</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;your-app&gt;</span><br><span class=\"line\">$ npm install --save loopback-connector-mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用model generator创建model</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:model</span><br><span class=\"line\">? Enter the model name: myModel</span><br><span class=\"line\">? Select the data-source to attach myModel to: mysql (mysql)</span><br><span class=\"line\">? Select model<span class=\"string\">'s base class: PersistedModel</span></span><br><span class=\"line\"><span class=\"string\">? Expose myModel via the REST API? Yes</span></span><br><span class=\"line\"><span class=\"string\">? Custom plural form (used to build REST URL):</span></span><br><span class=\"line\"><span class=\"string\">Let'</span>s add some test2 properties now.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h5><p>下表列出了商业支持的LoopBack连接器.</p>\n<table>\n  <thead>\n    <tr>\n      <td colspan=\"3\" data-highlight-colour=\"red\" style=\"text-align: center;\"><strong>Database connectors</strong></td>\n    </tr>\n    <tr>\n      <th style=\"text-align: center;\">Connector</th>\n      <th>Module</th>\n      <th>Installation</th>\n    </tr>\n    <tr>\n      <td><a href=\"https://cloudant.com/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM Cloudant</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-cloudant\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-cloudant</a></td>\n      <td><code>npm install --save loopback-connector-cloudant</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"http://www.ibm.com/analytics/us/en/technology/cloud-data-services/dashdb/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM DashDB</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-dashdb\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-dashdb</a></td>\n      <td><code>npm install --save loopback-connector-dashdb</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"http://www.ibm.com/analytics/us/en/technology/db2/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM DB2</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-db2z\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-db2</a></td>\n      <td><code>npm install --save loopback-connector-db2</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www-01.ibm.com/software/data/db2/zos/family/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM DB2 for z/OS</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-db2z\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-db2z</a></td>\n      <td><code>npm install --save loopback-connector-db2z</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www-01.ibm.com/software/data/informix/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">IBM Informix</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-informix\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-informix</a></td>\n      <td><code>npm&nbsp;install&nbsp;loopback-connector-informix&nbsp;--save</code></td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"Memory-connector.html\">Memory connector</a></td>\n      <td>Built in to LoopBack</td>\n      <td>Not required; suitable for development and debugging only.</td>\n    </tr>\n    <tr>\n      <td><a href=\"MongoDB-connector.html\">MongoDB</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mongodb\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-mongodb</a></td>\n      <td><code>npm install --save loopback-connector-mongodb</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"MySQL-connector.html\">MySQL</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mysql\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-mysql</a></td>\n      <td><code>npm install --save loopback-connector-mysql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Oracle-connector.html\">Oracle</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-oracle\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-oracle</a></td>\n      <td><code>npm install --save loopback-connector-oracle</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"PostgreSQL-connector.html\">PostgreSQL</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mysql\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-postgresql</a></td>\n      <td><code>npm install --save loopback-connector-postgresql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"SQL-Server-connector.html\">SQL Server</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-mssql\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-mssql</a></td>\n      <td><code>npm install --save loopback-connector-mssql</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.sqlite.org/\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">SQLite 3.x</a></td>\n      <td><a href=\"https://www.npmjs.com/package/loopback-connector-sqlite3\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-sqlite3</a></td>\n      <td><code>npm install --save loopback-connector-sqlite3</code></td>\n    </tr>\n    <tr>\n      <td colspan=\"3\"><strong>Other connectors</strong></td>\n    </tr>\n    <tr>\n      <td><a href=\"Email-connector.html\">Email connector</a></td>\n      <td>Built in to LoopBack</td>\n      <td>\n        <p>Not required</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"Push-connector.html\">Push connector</a>  </td>\n      <td><a href=\"https://github.com/strongloop/loopback-component-push\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-component-push</a></td>\n      <td><code>npm install --save loopback-component-push</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Remote-connector.html\">Remote connector</a></td>\n      <td><a href=\"https://github.com/strongloop/loopback-connector-remote\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-remote</a></td>\n      <td><code>npm install --save loopback-connector-remote</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"REST-connector.html\">REST</a></td>\n      <td><a href=\"http://github.com/strongloop/loopback-connector-rest\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-rest</a></td>\n      <td><code>npm install --save loopback-connector-rest</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"SOAP-connector.html\">SOAP</a></td>\n      <td><a href=\"http://github.com/strongloop/loopback-connector-soap\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-connector-soap</a></td>\n      <td><code>npm install --save loopback-connector-soap</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"Storage-connector.html\">Storage connector</a></td>\n      <td><a href=\"https://github.com/strongloop/loopback-component-storage\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">loopback-component-storage</a>    </td>\n      <td><code>npm install --save loopback-component-storage</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h5 id=\"安装连接器\"><a href=\"#安装连接器\" class=\"headerlink\" title=\"安装连接器\"></a>安装连接器</h5><p>在你的应用程序根目录运行<code>npm install --save &lt;_connector-module_&gt;</code> ,然后它会把相关依赖保存到<code>package.json</code>文件中,例如安装Oracle database connector:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;your-app&gt;</span><br><span class=\"line\">$ npm install --save loopback-connector-oracle</span><br></pre></td></tr></table></figure>\n\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"loopback-connector-oracle\": \"latest\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建数据源\"><a href=\"#创建数据源\" class=\"headerlink\" title=\"创建数据源\"></a>创建数据源</h5><p>使用<code>data source generator</code>创建数据源.</p>\n<p>数据源属性:</p>\n<p>数据源属性取决于所使用的特定数据源.但是,数据库连接器(Oracle,MySQL,PostgreSQL,MongoDB等)的数据源共享一组公用属性,如下表所述:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>connector</td>\n      <td>String</td>\n      <td>\n        <p>Connector name; for example:</p>\n        <ul>\n          <li>\"memory\"</li>\n          <li>\"loopback-connector-mongodb\" or \"mongodb\"</li>\n          <li>\"loopback-connector-mysql\" or \"mysql\"</li>\n          <li>\"loopback-connector-oracle\" or \"oracle\"</li>\n          <li>\"loopback-connector-postgresql\" or \"postgresql\"</li>\n          <li>\"loopback-connector-rest\" or \"rest\"</li>\n          <li>\"loopback-connector-mssql\" or \"mssql\"</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>database</td>\n      <td>String</td>\n      <td>Database name</td>\n    </tr>\n    <tr>\n      <td>debug</td>\n      <td>Boolean</td>\n      <td>If true, turn on verbose mode to debug database queries and lifecycle.</td>\n    </tr>\n    <tr>\n      <td>host</td>\n      <td>String</td>\n      <td>Database host name</td>\n    </tr>\n    <tr>\n      <td>password</td>\n      <td>String</td>\n      <td>Password to connect to database</td>\n    </tr>\n    <tr>\n      <td>port</td>\n      <td>Number</td>\n      <td>Database TCP port</td>\n    </tr>\n    <tr>\n      <td>url</td>\n      <td>String</td>\n      <td>\n        <p>Combines and overrides <code>host</code>,&nbsp;<code>port</code>,&nbsp;<code>user</code>,&nbsp;<code>password</code>, and&nbsp;<code>database</code>&nbsp;properties.</p>\n        <p>Only valid with <a href=\"MongoDB-connector.html\">MongoDB connector</a>, <a href=\"PostgreSQL-connector.html\">PostgreSQL connector</a>, and <a href=\"SQL-Server-connector.html\">SQL Server connector</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>username</td>\n      <td>String</td>\n      <td>Username to connect to database</td>\n    </tr>\n  </tbody>\n</table>\n\n<hr>\n<h4 id=\"3.1\"> 3.1 从Model创建数据库schema </h4>\n\n<p>LoopBack _auto-migration_根据应用程序的模型创建数据库模式.在关系数据库中,auto-migration为每个模型创建一个表,并为模型中的每个属性在表中创建一个列.auto-migration为附加到数据源的所有模型创建表,包括内置模型.</p>\n<p>一旦定义了模型,如果需要调整数据库以匹配模型,LoopBack可以相应地创建或更新(同步0数据库模式. LoopBack提供了两种方法来将模型定义与表模式同步:</p>\n<ul>\n<li><p><strong>Auto-migrate</strong>: 基于模型定义自动创建或重新创建表模式. </p>\n</li>\n<li><p><strong>Auto-update</strong>: 根据模型定义自动更改表模式.</p>\n</li>\n</ul>\n<blockquote>\n<p> 警告:如果现有表的名称与模型名称匹配,Auto-migration将删除现有表.当表里有数据时,请使用自动更新以避免数据丢失.</p>\n</blockquote>\n<h5 id=\"Auto-migrate\"><a href=\"#Auto-migrate\" class=\"headerlink\" title=\"Auto-migrate\"></a>Auto-migrate</h5><p>下面的数据源支持auto-migration:</p>\n<ul>\n<li>Oracle</li>\n<li>PostgreSQL</li>\n<li>MySQL</li>\n<li>SQL Server</li>\n<li>MongoDB</li>\n</ul>\n<p>下面是个auto-migration的例子.</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema_v1 = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"CustomerTest\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"idInjection\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"oracle\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"schema\"</span>: <span class=\"string\">\"LOOPBACK\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"table\"</span>: <span class=\"string\">\"CUSTOMER_TEST\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">40</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"email\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">40</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Number\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>假设模型在Oracle数据库中没有相应的表,您可以使用autoMigrate()创建相应的模式对象以反映模型定义.</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ds = Model.app.dataSources.oracle;</span><br><span class=\"line\"></span><br><span class=\"line\">ds.createModel(schema_v1.name, schema_v1.properties, schema_v1.options);</span><br><span class=\"line\"></span><br><span class=\"line\">ds.automigrate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ds.discoverModelProperties(<span class=\"string\">'CUSTOMER_TEST'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(props);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码将在oracle数据库中创建如下对象:</p>\n<ul>\n<li>A table CUSTOMER_TEST.</li>\n<li>A sequence CUSTOMER_TEST_ID_SEQUENCE for keeping sequential IDs.</li>\n<li>A trigger CUSTOMER_ID_TRIGGER that sets values for the primary key.</li>\n</ul>\n<p>现在假设你打算对你的model做一些改变.下面是它的代码:</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> schema_v2 = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"CustomerTest\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"idInjection\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"oracle\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"schema\"</span>: <span class=\"string\">\"LOOPBACK\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"table\"</span>: <span class=\"string\">\"CUSTOMER_TEST\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"email\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">      <span class=\"string\">\"oracle\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"columnName\"</span>: <span class=\"string\">\"EMAIL\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dataType\"</span>: <span class=\"string\">\"VARCHAR\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dataLength\"</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">        <span class=\"string\">\"nullable\"</span>: <span class=\"string\">\"Y\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"firstName\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">40</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"lastName\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"String\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"required\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"length\"</span>: <span class=\"number\">40</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"MongoDB-indexes\"><a href=\"#MongoDB-indexes\" class=\"headerlink\" title=\"MongoDB indexes\"></a>MongoDB indexes</h5><p>运行autoMigrate()创建缺少的索引,但是如果它们的定义更改,则autoMigrate()不会修改它们.如果模型的索引定义更改,您必须通过MongoDB shell修改它们,或删除它们并重新创建它们.有关详细信息请参阅MongoDB文档.</p>\n<h5 id=\"Auto-update\"><a href=\"#Auto-update\" class=\"headerlink\" title=\"Auto-update\"></a>Auto-update</h5><p>如果数据库中存在现有表,则运行autoMigrate()将删除并重新创建表.这意味着数据将丢失.要避免此问题,请使用auto-update(). autoupdate()计算LoopBack模型和数据库表定义之间的差异,并相应地更改表,而不是删除表并重新创建它们.这样,只要属性未从模型中删除.列数据就会保留.</p>\n<p>例如:</p>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ds.createModel(schema_v2.name, schema_v2.properties, schema_v2.options);</span><br><span class=\"line\">ds.autoupdate(schema_v2.name, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">  ds.discoverModelProperties(<span class=\"string\">'CUSTOMER_TEST'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(props);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要检查是否需要数据库更改,请使用isActual()方法.它接受一个回调参数,该参数根据数据库状态接收一个布尔值:</p>\n<ul>\n<li>如果数据库结构过时则为False</li>\n<li>数据源和数据库同步时为True</li>\n</ul>\n<p><strong>/server/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.isActual(models, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, actual</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!actual) &#123;</span><br><span class=\"line\">    dataSource.autoupdate(models, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"3.2\"> 3.2 理解数据源 </h4>\n\n<p><img src=\"img/dsIntr.jpg\" alt=\"dsIntr\"></p>\n<h5 id=\"概述-13\"><a href=\"#概述-13\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>上图说明了LoopBack模型,DataSource和连接器之间的关系.</p>\n<ol>\n<li><p>定义模型.</p>\n</li>\n<li><p>创建ModelBuilder或DataSource的实例.DataSource从ModelBuilder扩展.ModelBuilder负责将模型定义编译为表示模型类的JavaScript构造函数.DataSource从ModelBuilder继承该函数.</p>\n</li>\n<li><p>使用ModelBuilder或DataSource从模型定义构建一个JavaScript构造函数(即模型类).从ModelBuilder构建的模型类可以稍后附加到DataSource,以接收混合的数据访问函数.</p>\n</li>\n<li><p>作为步骤2的一部分,DataSource使用设置对象初始化底层连接器,该对象为连接器实例提供配置.连接器与DataSource协作将函数定义为要混合到模型类中的DataAccessObject.DataAccessObject包括静态和原型方法的列表.它可以根据连接器的功能实现创建,检索,更新和删除操作或其他特定功能.</p>\n</li>\n</ol>\n<p>DataSource对象是LoopBack应用程序与后端系统集成的统一接口.它是围绕模型类的数据访问逻辑的工厂.通过各种连接器的能力,DataSource提供了与数据库或服务交互的必要抽象,以将业务逻辑与管道技术分离.</p>\n<h5 id=\"以编程方式创建DataSource\"><a href=\"#以编程方式创建DataSource\" class=\"headerlink\" title=\"以编程方式创建DataSource\"></a>以编程方式创建DataSource</h5><p><code>DataSource constructor</code>接受下面的参数:</p>\n<ul>\n<li><p><strong>name</strong>: Optional name of the data source instance being created. </p>\n</li>\n<li><p><strong>settings</strong>: An object of properties to configure the connector. Must include a connector property, specifying the connector to use. See Connecting models to data sources (Connectors).</p>\n</li>\n</ul>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DataSource = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataSource = <span class=\"keyword\">new</span> DataSource(&#123;</span><br><span class=\"line\">    connector: <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-connector-mongodb'</span>),</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">27017</span>,</span><br><span class=\"line\">    database: <span class=\"string\">'mydb'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>传递给DataSource构造函数的连接器参数可以是以下之一:</p>\n<ul>\n<li>The connector module from require(connectorName)</li>\n<li>The full name of the connector module, such as ‘loopback-connector-oracle’</li>\n<li>The short name of the connector module, such as ‘oracle’, which will be converted to ‘loopback-connector-‘</li>\n<li>A local module under ./connectors/ folder</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ds1 = <span class=\"keyword\">new</span> DataSource(<span class=\"string\">'memory'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds2 = <span class=\"keyword\">new</span> DataSource(<span class=\"string\">'loopback-connector-mongodb'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds3 = <span class=\"keyword\">new</span> DataSource(<span class=\"built_in\">require</span>(<span class=\"string\">'loopback-connector-oracle'</span>));</span><br></pre></td></tr></table></figure>\n\n<p>LoopBack提供了内置内存连接器,它使用内存存储来进行创建,检索,更新和删除操作.</p>\n<p><code>Settings</code>参数用来配置连接器.<code>Settings</code>对象的格式和默认值取决于特定连接器,但常用字段包括:</p>\n<ul>\n<li>host: Database host</li>\n<li>port: Database port</li>\n<li>username: Username to connect to database</li>\n<li>password: Password to connect to database</li>\n<li>database: Database name</li>\n<li>debug: Turn on verbose mode to debug db queries and lifecycle</li>\n</ul>\n<h5 id=\"从数据源创建model\"><a href=\"#从数据源创建model\" class=\"headerlink\" title=\"从数据源创建model\"></a>从数据源创建model</h5><p>DataSource从ModelBuilder扩展,ModelBuilder是一个只有属性的纯模型类的工厂.DataSource使用Connector连接到数据库和其他后端系统.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DataSource = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).DataSource;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = <span class=\"keyword\">new</span> DataSource(<span class=\"string\">'memory'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> User = ds.define(<span class=\"string\">'User'</span>, &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  bio: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  approved: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">  joinedAt: <span class=\"built_in\">Date</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>单个数据源中的所有模型类共享相同的连接器类型和一个数据库连接或连接池.但是可以使用多个数据源连接到不同的数据库.</p>\n<p>或者，您可以将从ModelBuilder创建的plain model构造函数附加到DataSource.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ModelBuilder = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).ModelBuilder;</span><br><span class=\"line\"><span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ModelBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> User = builder.define(<span class=\"string\">'User'</span>, &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  bio: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  approved: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">  joinedAt: <span class=\"built_in\">Date</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> DataSource = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).DataSource;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = <span class=\"keyword\">new</span> DataSource(<span class=\"string\">'memory'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">User.attachTo(ds); <span class=\"comment\">// The create, retrieve, update, and delete</span></span><br><span class=\"line\">                   <span class=\"comment\">// methods will be mixed into the User constructor</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"为连接器创建数据源\"><a href=\"#为连接器创建数据源\" class=\"headerlink\" title=\"为连接器创建数据源\"></a>为连接器创建数据源</h5><p>应用程序代码不直接使用连接器.相反,您可以创建一个DataSource来与连接器交互.</p>\n<p>下面是个使用内存连接器的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> memory = loopback.createDataSource(&#123;</span><br><span class=\"line\">  connector: loopback.Memory</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>下面是使用oracle连接器的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DataSource = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-datasource-juggler'</span>).DataSource;</span><br><span class=\"line\"><span class=\"keyword\">var</span> oracleConnector = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-connector-oracle'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ds = <span class=\"keyword\">new</span> DataSource(oracleConnector, &#123;</span><br><span class=\"line\">  host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">  database: <span class=\"string\">'XE'</span>,</span><br><span class=\"line\">  username: <span class=\"string\">'username'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'password'</span>,</span><br><span class=\"line\">  debug: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>传递给DataSource构造函数的连接器参数可以是以下之一:</p>\n<ul>\n<li>The connector module from require(‘connectorName’)</li>\n<li>The full name of the connector module, such as ‘loopback-connector-oracle’.</li>\n<li>The short name of the connector module, such as ‘oracle’, that LoopBack converts to ‘loopback-connector-oracle’ (for example).</li>\n<li>A local module in the /connectors folder</li>\n</ul>\n<h5 id=\"初始化连接器\"><a href=\"#初始化连接器\" class=\"headerlink\" title=\"初始化连接器\"></a>初始化连接器</h5><p>连接器模块可以导出为初始化函数,这个初始化函数可供拥有DataSource的实例调用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.initialize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dataSource, postInit</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> settings = dataSource.settings || &#123;&#125;;   <span class=\"comment\">// The settings is passed in from the dataSource</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> connector = <span class=\"keyword\">new</span> MyConnector(settings);  <span class=\"comment\">// Construct the connector instance</span></span><br><span class=\"line\">  dataSource.connector = connector;           <span class=\"comment\">// Attach connector to dataSource</span></span><br><span class=\"line\">  connector.dataSource = dataSource;          <span class=\"comment\">// Hold a reference to dataSource</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>DataSource使用自身和一个可选的<code>postInit</code>回调函数作为参数来调用<code>initialize</code>方法.连接器从<code>dataSource(自身)</code>参数接收设置,并使用它配置与后端系统的连接.</p>\n<p>请注意connector和dataSource设置了对方的引用(<em>译注:相互引用</em>).</p>\n<p>初始化时,连接器可能会自动连接到数据库.一旦连接建立,dataSource对象发出’connected’事件,并设置<code>connected</code>标志为true，但没有必要等待’connected’事件,因为所有的查询缓存和执行时会在收到dataSource的’connected’事件后自动执行.</p>\n<p>要断开与数据库服务器的连接,请调用dataSource.disconnect方法.如果连接器具有连接/断开连接的能力，则此调用将转发到连接器.</p>\n<hr>\n<h4 id=\"3.3\"> 3.3 使用数据库事务 </h4>\n\n<h5 id=\"概要-3\"><a href=\"#概要-3\" class=\"headerlink\" title=\"概要\"></a>概要</h5><p>事务是单个逻辑工作单元执行的数据操作序列.许多关系数据库支持事务以帮助实现数据一致性和业务逻辑需求.</p>\n<p>当模型连接到以下连接器之一时,LoopBack模型可以在事务中执行操作.</p>\n<ul>\n<li>MySQL connector (IMPORTANT: Only with InnoDB as the storage engine).</li>\n<li>PostgreSQL connector</li>\n<li>SQL Server connector</li>\n<li>Oracle connector</li>\n</ul>\n<h5 id=\"事务API\"><a href=\"#事务API\" class=\"headerlink\" title=\"事务API\"></a>事务API</h5><p>在事务中执行操作通常包括以下步骤:</p>\n<ul>\n<li>Start a new transaction.</li>\n<li>Perform create, read, update, and delete operations in the transaction.</li>\n<li>Commit or rollback the transaction.</li>\n</ul>\n<h5 id=\"Start-transaction\"><a href=\"#Start-transaction\" class=\"headerlink\" title=\"Start transaction\"></a>Start transaction</h5><p>使用<code>beginTransaction</code>方法来开始一个事务.</p>\n<p>例如, for a Post model:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.beginTransaction(&#123;<span class=\"attr\">isolationLevel</span>: Post.Transaction.READ_COMMITTED&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, tx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Now we have a transaction (tx)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><em>Isolation levels</em></p>\n<p>调用beginTransaction()时可以选择指定事务隔离级别.LoopBack事务支持以下隔离级别:</p>\n<ul>\n<li>Transaction.READ_UNCOMMITTED</li>\n<li>Transaction.READ_COMMITTED (default)</li>\n<li>Transaction.REPEATABLE_READ</li>\n<li>Transaction.SERIALIZABLE</li>\n</ul>\n<p>如果你没指定,则默认的事务隔离级别是<code>READ_COMMITTED</code>.</p>\n<blockquote>\n<p> 提示: Oracle only supports READ_COMMITTED and SERIALIZABLE</p>\n</blockquote>\n<h5 id=\"Perform-operations-in-a-transaction\"><a href=\"#Perform-operations-in-a-transaction\" class=\"headerlink\" title=\"Perform operations in a transaction\"></a>Perform operations in a transaction</h5><p>在事务中执行创建,检索,更新和删除操作.将由事务对象组成的第二个参数添加到标准的create(),upsert(),destroyAll()等方法.</p>\n<p>例如,again assuming a Post model:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.create(&#123;<span class=\"attr\">title</span>: <span class=\"string\">'t1'</span>, <span class=\"attr\">content</span>: <span class=\"string\">'c1'</span>&#125;, &#123;<span class=\"attr\">transaction</span>: tx&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, post</span>) </span>&#123;</span><br><span class=\"line\">  post.updateAttributes(&#123;<span class=\"attr\">content</span>: <span class=\"string\">'c2'</span>, &#123;<span class=\"attr\">transaction</span>: tx&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, newPost</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    newPost.reviews.create(&#123;<span class=\"attr\">content</span>: <span class=\"string\">'r1'</span>&#125;, &#123;<span class=\"attr\">transaction</span>: tx&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, newPost</span>) </span>&#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Commit-or-rollback\"><a href=\"#Commit-or-rollback\" class=\"headerlink\" title=\"Commit or rollback\"></a>Commit or rollback</h5><p>Commit the transaction:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transaction.commit(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Or to rollback the transaction:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transaction.rollback(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Please note all three APIs support the Promise flavor. See an example at <a href=\"https://github.com/strongloop/loopback-connector-mysql/blob/master/test/transaction.promise.test.js\" target=\"_blank\" rel=\"noopener\">https://github.com/strongloop/loopback-connector-mysql/blob/master/test/transaction.promise.test.js</a>.</p>\n<h5 id=\"Set-up-timeout\"><a href=\"#Set-up-timeout\" class=\"headerlink\" title=\"Set up timeout\"></a>Set up timeout</h5><p>您可以指定事务的超时时间(以毫秒为单位).如果事务在超时之前未完成(提交或回滚),则默认情况下会在超时后自动回滚.可以使用timeout hook捕获超时事件.</p>\n<p>For example, again assuming a Post model:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.beginTransaction(&#123;</span><br><span class=\"line\">    isolationLevel: Transaction.READ_COMMITTED,</span><br><span class=\"line\">    timeout: <span class=\"number\">30000</span> <span class=\"comment\">// 30000ms = 30s</span></span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, tx</span>) </span>&#123;</span><br><span class=\"line\">    tx.observe(<span class=\"string\">'timeout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// handle timeout</span></span><br><span class=\"line\">      next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"传播事务\"><a href=\"#传播事务\" class=\"headerlink\" title=\"传播事务\"></a>传播事务</h5><p>传播事务是指显示的为CRUD和relation methods的options参数传递一个transaction对象.</p>\n<p>For example, again assuming a Post model:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;<span class=\"attr\">transaction</span>: tx&#125;;</span><br><span class=\"line\">Post.create(&#123;<span class=\"attr\">title</span>: <span class=\"string\">'t1'</span>, <span class=\"attr\">content</span>: <span class=\"string\">'c1'</span>&#125;, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, post</span>) </span>&#123;</span><br><span class=\"line\">  post.updateAttributes(&#123;<span class=\"attr\">content</span>: <span class=\"string\">'c2'</span>, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, newPost</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    newPost.reviews.create(&#123;<span class=\"attr\">content</span>: <span class=\"string\">'r1'</span>&#125;, options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, newPost</span>) </span>&#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Set-up-transaction-hooks\"><a href=\"#Set-up-transaction-hooks\" class=\"headerlink\" title=\"Set up transaction hooks\"></a>Set up transaction hooks</h5><p>事务有四种(<em>译注:眼瞅着是5种</em>)类型的可观察事件:</p>\n<ul>\n<li>before commit</li>\n<li>after commit</li>\n<li>before rollback</li>\n<li>after rollback</li>\n<li>timeout</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tx.observe(<span class=\"string\">'before commit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">tx.observe(<span class=\"string\">'after commit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">tx.observe(<span class=\"string\">'before rollback'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">tx.observe(<span class=\"string\">'after rollback'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"避免长时间等待或死锁\"><a href=\"#避免长时间等待或死锁\" class=\"headerlink\" title=\"避免长时间等待或死锁\"></a>避免长时间等待或死锁</h5><p>请注意,具有特定隔离级别的事务将锁定数据库对象.在事务内异步执行多个方法具有阻止其他事务(显式或隐式)的巨大可能性.为了避免长时间等待甚至死锁，您应该:</p>\n<ul>\n<li>让事务尽可能短暂.</li>\n<li>不要在多个事务中序列化方法的执行.</li>\n</ul>\n<hr>\n<h4 id=\"3.4\"> 3.4 执行本地SQL </h4>\n\n<blockquote>\n<p> 警告:此功能尚未完全测试,并且未正式支持,API可能会在将来的版本中更改.</p>\n</blockquote>\n<p>To execute SQL directly against your data-connected model, use the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.connector.execute(_sql_, _params_, _cb_);</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.connector.query(_sql_, _params_, _cb_); <span class=\"comment\">// For 1.x connectors</span></span><br></pre></td></tr></table></figure>\n\n<p>Where:</p>\n<ul>\n<li>sql - The SQL string.</li>\n<li>params - parameters to the SQL statement.</li>\n<li>cb - callback function</li>\n</ul>\n<hr>\n<h4 id=\"3.5\"> 3.5 构建连接器 </h4>\n\n<h5 id=\"概述-14\"><a href=\"#概述-14\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>本文适用于想要创建新连接器类型以连接到当前不支持的数据源的开发人员.它将引导您完成MySQL连接器的实施,以教您如何为关系数据库开发连接器.但是,许多概念也适用于创建到其他类型的数据源的连接器</p>\n<p><strong><em>译注:iworks暂时用不到这里,暂时先不翻译了</em></strong></p>\n<hr>\n<h4 id=\"4\"> 4. 使用数据 </h4>\n\n<p>一旦定义了模型,就可以使用创建,读取,更新和删除(CRUD)操作向模型添加数据,处理数据并进行查询. 所有连接到持久性数据存储(如数据库)的LoopBack模型都会自动拥有PersistedModel类的创建,检索,更新和删除操作.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>REST</th>\n      <th>LoopBack model method<br>(Node API)*</th>\n      <th>Corresponding SQL<br>Operation</th>\n    </tr>\n    <tr>\n      <td>Create</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#create-model-instance\">PUT /<em>modelName</em></a></p>\n        <p><a href=\"PersistedModel-REST-API.html#update--insert-instance\">POST /<em>modelName</em></a></p>\n      </td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-create\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">create()</a><sup>*</sup></code></td>\n      <td>INSERT</td>\n    </tr>\n    <tr>\n      <td>Read (Retrieve)</td>\n      <td><a href=\"PersistedModel-REST-API.html#find-matching-instances\">GET /modelName?filter=...</a></td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-find\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">find()</a><sup>*</sup></code></td>\n      <td>SELECT</td>\n    </tr>\n    <tr>\n      <td>Update (Modify)</td>\n      <td>\n        <p><a href=\"PersistedModel-REST-API.html#update--insert-instance\">POST /<em>modelName</em></a>&nbsp;</p>\n        <p><a href=\"PersistedModel-REST-API.html#update-model-instance-attributes\">PUT /modelName</a></p>\n      </td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-updateall\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">updateAll()</a><sup>*</sup></code></td>\n      <td>UPDATE</td>\n    </tr>\n    <tr>\n      <td>Delete (Destroy)</td>\n      <td><a href=\"PersistedModel-REST-API.html#delete-model-instance\">DELETE /<em>modelName</em>/<em>modelID</em></a></td>\n      <td><code><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">destroyById()</a><sup>*</sup></code></td>\n      <td>DELETE</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>(*)列出的方法只是比较常用的例子,其他方法也可以提供类似的功能.例如:findById(),findOne()和findOrCreate().有关更多信息,请参阅PersistedModel API文档.</p>\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API.</p>\n</blockquote>\n<hr>\n<h4 id=\"4.1\"> 4.1 创建,更新和删除数据 </h4>\n\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<p>PersistedModel有一套方法用于创建,更新和删除数据.</p>\n<p>模型数据也称为模型实例.在数据库术语中,从概念上理解,模型对应于表,并且模型实例对应于表中的行或记录.</p>\n<h5 id=\"Creating-data-model-instances\"><a href=\"#Creating-data-model-instances\" class=\"headerlink\" title=\"Creating data (model instances)\"></a>Creating data (model instances)</h5><p>使用以下PersistedModel方法添加数据,即插入或创建实例:</p>\n<ul>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-create\" target=\"_blank\" rel=\"noopener\">create</a> - 创建一个新的模型实例(记录).</p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-upsert\" target=\"_blank\" rel=\"noopener\">upsert</a> - 根据指定的<a href=\"http://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#id-properties\" target=\"_blank\" rel=\"noopener\">ID property</a>属性检查实例(记录)是否存在,该属性必须具有唯一值.如果实例已存在,则方法将更新该实例.否则,它插入一个新实例.</p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-findorcreate\" target=\"_blank\" rel=\"noopener\">findOrCreate</a> - 查找与第一个参数提供的过滤器对象匹配的一个实例.如果找到,则返回对象.如果未找到,则创建一个新实例(记录).</p>\n<blockquote>\n<p> 重要: 请确保在过滤器对象中包含where子句.没有where,findOrCreate会查找并返回集合中的第一条记录,这可能导致意外的行为.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-save\" target=\"_blank\" rel=\"noopener\">save</a> - 保存模型实例.如果实例没有ID,则调用<a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-create\" target=\"_blank\" rel=\"noopener\">create</a>.触发器:验证,保存,更新或创建.</p>\n</li>\n</ul>\n<h5 id=\"Updating-data-model-instances\"><a href=\"#Updating-data-model-instances\" class=\"headerlink\" title=\"Updating data (model instances)\"></a>Updating data (model instances)</h5><p>静态方法(在Model对象上调用):</p>\n<ul>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-updateall\" target=\"_blank\" rel=\"noopener\">updateAll</a> - 更新与指定的where子句匹配的多个实例(记录)<a href=\"http://loopback.io/doc/en/lb3/Where-filter.html\" target=\"_blank\" rel=\"noopener\">where clause</a>. </li>\n</ul>\n<blockquote>\n<p> 要点: 与updateAll()一起使用的where子句与查询的where子句略有不同.从where子句中省略{where：…},只需提供条件作为第一个参数.有关详细信息，请参阅<a href=\"http://loopback.io/doc/en/lb3/Where-filter.html\" target=\"_blank\" rel=\"noopener\">where clause</a></p>\n</blockquote>\n<p>实例方法(在单个模型实例上调用):</p>\n<ul>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattribute\" target=\"_blank\" rel=\"noopener\">updateAttribute</a> - 更新单个属性(property).</p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-prototype-updateattributes\" target=\"_blank\" rel=\"noopener\">updateAttributes</a> - 更新属性集(properties).在更新前执行验证.</p>\n</li>\n</ul>\n<h5 id=\"Performing-bulk-updates-执行批量更新\"><a href=\"#Performing-bulk-updates-执行批量更新\" class=\"headerlink\" title=\"Performing bulk updates(执行批量更新)\"></a>Performing bulk updates(执行批量更新)</h5><ul>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-createupdates\" target=\"_blank\" rel=\"noopener\">createUpdates</a></p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-bulkupdate\" target=\"_blank\" rel=\"noopener\">bulkUpdate</a></p>\n</li>\n</ul>\n<h5 id=\"Deleting-data\"><a href=\"#Deleting-data\" class=\"headerlink\" title=\"Deleting data\"></a>Deleting data</h5><p>静态方法(在Model对象上调用):</p>\n<ul>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-destroyall\" target=\"_blank\" rel=\"noopener\">destroyAll</a> - 删除与可选Where过滤器匹配的所有模型实例<a href=\"http://loopback.io/doc/en/lb3/Where-filter.html\" target=\"_blank\" rel=\"noopener\">Where filter</a>.</p>\n</li>\n<li><p><a href=\"http://apidocs.strongloop.com/loopback/#persistedmodel-destroybyid\" target=\"_blank\" rel=\"noopener\">destroyById</a> - 删除指定ID的模型实例.</p>\n</li>\n</ul>\n<blockquote>\n<p> 重要:destroyAll()的where子句与查询的where子句略有不同.从where子句中省略{where：…}.只需提供条件作为第一个参数</p>\n</blockquote>\n<p>浏览更多信息,请访问<a href=\"http://loopback.io/doc/en/lb3/Where-filter.html\" target=\"_blank\" rel=\"noopener\">Where filter</a>.</p>\n<hr>\n<h4 id=\"4.2\"> 4.2 查询数据 </h4>\n\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<h5 id=\"概述-15\"><a href=\"#概述-15\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>查询是对返回一组数据或结果的模型的读取操作.您可以使用过滤器,使用Node API和REST API查询LoopBack模型,如下表所示.过滤器指定返回的数据集的条件,两个API的功能和选项是相同的,唯一的区别是在HTTP请求中使用的语法与Node 函数调用.在这两种情况下,LoopBack模型都返回JSON.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Query</th>\n      <th>Model API (Node)</th>\n      <th>REST API</th>\n    </tr>\n    <tr>\n      <td>\n        <p>Find all model instances using specified filters.&nbsp;</p>\n        <p>&nbsp;</p>\n      </td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-find\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">find(filter, callback)</a></code></p>\n        <p>Where filter is a JSON object containing the query filters.</p>\n        <p>See <a href=\"Querying-data.html\">Filters</a> below.</p>\n      </td>\n      <td>\n        <p> <code>GET /<em>modelName</em>?filter...</code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-matching-instances\">Model REST API - Find matching instances</a>.</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>Find first model instance using specified filters.</td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findone\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">findOne(filter, callback)</a></code></p>\n        <p>Where filter is a JSON object containing the query filters.</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n      <td>\n        <p><code><span>GET /<em>modelName</em>/findOne?filter...</span></code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-first-instance\">Model REST API - Find first instance</a>.&nbsp;</p>\n        <p><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></p>\n      </td>\n    </tr>\n    <tr>\n      <td>Find instance by ID.</td>\n      <td>\n        <p><code><a href=\"https://apidocs.strongloop.com/loopback/#persistedmodel-findbyid\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">findById(id, [filter,] callback)</a></code></p>\n        <p>Where optional filter is a JSON object <span>containing the query filters.</span></p>\n        <p><span><span>See </span><a href=\"Querying-data.html\">Filters</a> <span> below.</span></span>\n        </p>\n      </td>\n      <td>\n        <p><code><span>GET /</span><em>modelName</em><span>/</span><em>modelID</em></code></p>\n        <p>See <a href=\"PersistedModel-REST-API.html#find-instance-by-id\">Model REST API - Find instance by ID</a>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<blockquote>\n<p> 重要:REST查询必须在URL查询字符串中包含字符串”filter”.而Node API调用则在JSON中不包括字符串”filter”.LoopBack API Explorer将”过滤器”添加到查询字符串,但必须在filter字段中输入<a href=\"http://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries\" target=\"_blank\" rel=\"noopener\">Stringified JSON</a>.还要确保您使用的引号是正确的直引号(“)(<em>译注:半角引号</em>),而不是弯曲或印刷引号(”或“).这些通常很难在视觉上区分.</p>\n</blockquote>\n<p>LoopBack支持以下几种过滤器:</p>\n<ul>\n<li>Fields filter</li>\n<li>Include filter</li>\n<li>Limit filter</li>\n<li>Order filter</li>\n<li>Skip filter</li>\n<li>Where filter</li>\n</ul>\n<p>使用带有where和limit限制过滤器的find()方法的示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Account.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>&#125;, <span class=\"attr\">limit</span>: <span class=\"number\">3</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, accounts</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>用REST实现则是:</p>\n<p><code>/accounts?filter[where][name]=John&amp;filter[limit]=3</code></p>\n<h5 id=\"过滤器-Filters\"><a href=\"#过滤器-Filters\" class=\"headerlink\" title=\"过滤器(Filters)\"></a>过滤器(Filters)</h5><p>在REST和Node API中,您可以使用任意数量的过滤器来定义查询.</p>\n<p>LoopBack支持特定的过滤器语法:它很像SQL,但是专门用于安全地序列化,无需注入和本地JavaScript.以前，只有PersistedModel.find()方法(和相关方法)支持此语法.</p>\n<p>下表描述了LoopBack的过滤器类型:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Filter type</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>fields</td>\n      <td>Object, Array, or String</td>\n      <td>\n        <p>Specify fields to include in or exclude from the response.</p>\n        <p>See <a href=\"Fields-filter.html\">Fields filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>include</td>\n      <td>String, Object, or Array</td>\n      <td>\n        <p>Include results from related models, for relations such as&nbsp;<em>belongsTo</em>&nbsp;and&nbsp;<em>hasMany</em>.</p>\n        <p>See <a href=\"Include-filter.html\">Include filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>limit</td>\n      <td>Number</td>\n      <td>\n        <p>Limit the number of instances to return.</p>\n        <p>See <a href=\"Limit-filter.html\">Limit filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>order</td>\n      <td>String</td>\n      <td>\n        <p>Specify sort order: ascending or descending.</p>\n        <p>See <a href=\"Order-filter.html\">Order filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>skip (offset)</td>\n      <td>Number</td>\n      <td>\n        <p>Skip the specified number of instances.</p>\n        <p>See <a href=\"Skip-filter.html\">Skip filter</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>where</td>\n      <td>Object</td>\n      <td>\n        <p>Specify search criteria; similar to a WHERE clause in SQL.</p>\n        <p>See <a href=\"Where-filter.html\">Where filter</a>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>REST语法:</p>\n<p><code>?filter_filterType_=_spec_&amp;_filterType_=_spec_....</code></p>\n<p>您可以应用于单个请求的过滤器数量仅受最大网址长度限制,后者通常取决于所使用的客户端.</p>\n<blockquote>\n<p> 重要: 在查询字符串中?filter后没有等号.例如:<a href=\"http://localhost:3000/api/books?filter[where][id]=1\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/api/books?filter[where][id]=1</a></p>\n</blockquote>\n<p>Node语法:</p>\n<p>指定filters作为find()和findOne()的第一个参数: </p>\n<p><code>{ filterType: spec, filterType: spec, ... }</code></p>\n<p>您可以应用的过滤器数量理论上没有限制.</p>\n<ul>\n<li><p>filterType是:where,include,order,limit,skip或fields.</p>\n</li>\n<li><p>spec是过滤器的规范:例如对于where过滤器,这是结果必须匹配的逻辑条件.对于include过滤器,它指定要包括的相关字段.</p>\n</li>\n</ul>\n<h5 id=\"在REST查询中使用”stringified”JSON\"><a href=\"#在REST查询中使用”stringified”JSON\" class=\"headerlink\" title=\"在REST查询中使用”stringified”JSON\"></a>在REST查询中使用”stringified”JSON</h5><p>除了上述标准REST语法之外,您还可以在REST查询中使用”stringified JSON”.为此,只需使用为Node语法指定的JSON,如下所示:</p>\n<p><code>?filter={ Stringified-JSON }</code></p>\n<p>其中Stringified-JSON是来自Node语法的字符串化JSON.但是在JSON中,所有keys/strings必须用引号(“)括起来.</p>\n<blockquote>\n<p> 重要:当使用带字符的JSON时,必须在查询字符串中的?filter后使用等号.例如:http：// localhost：3000 / api / books？filter = {％22where％22：{％22id％22：2}}</p>\n</blockquote>\n<p>例如: <code>GET /api/activities/findOne?filter={&quot;where&quot;:{&quot;id&quot;:1234}}</code></p>\n<h4 id=\"过滤对象数组\"><a href=\"#过滤对象数组\" class=\"headerlink\" title=\"过滤对象数组\"></a>过滤对象数组</h4><p><a href=\"https://github.com/strongloop/loopback-filters\" target=\"_blank\" rel=\"noopener\">Loopback-filters</a>模块实现了LoopBack的过滤器语法.使用此模块,可以使用MyModel.find(filter)支持的相同语法过滤对象数组.</p>\n<blockquote>\n<p> 提示:我们计划将所有模块转换为使用loopback-filter,所以它将成为LoopBack常见的内置过滤机制.</p>\n</blockquote>\n<p>下面是几个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [&#123;<span class=\"attr\">n</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">n</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">n</span>: <span class=\"number\">3</span>, <span class=\"attr\">id</span>: <span class=\"number\">123</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> filter = &#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">n</span>: &#123;<span class=\"attr\">gt</span>: <span class=\"number\">1</span>&#125;&#125;, <span class=\"attr\">skip</span>: <span class=\"number\">1</span>, <span class=\"attr\">fields</span>: [<span class=\"string\">'n'</span>]&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> filtered = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-filters'</span>)(data, filter);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(filtered); <span class=\"comment\">// =&gt; [&#123;n: 3&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>有关更多细节,假设您正在解析逗号分隔值的(CSV)文件,并且您需要输出价格在10到100之间的所有值.要使用LoopBack过滤器语法,您需要创建您自己的CSV连接器或使用内存连接器,这两者都需要一些额外的与您的实际目标无关的工作.</p>\n<p>解析CSV(使用像node-csv这样的模块)后,您将拥有一个类似这样的对象数组(例如,带有10,000个唯一项):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;price: 85, id: 79&#125;,</span><br><span class=\"line\">  &#123;price: 10, id: 380&#125;,</span><br><span class=\"line\">  //...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>要过滤行,你可以使用类似这样的通用JavaScript:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.price &lt; <span class=\"number\">100</span> &amp;&amp; item.price &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这对于过滤来说非常简单,但是排序,字段选择和更高级的操作则变得有点困难.除此之外,你通常还要接受参数作为输入.例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userInput = &#123;<span class=\"attr\">min</span>: <span class=\"number\">10</span>, <span class=\"attr\">max</span>: <span class=\"number\">100</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.price &lt; userInput.min &amp;&amp; item.price &gt;= userInput.max</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码用LoopBack filter重写是very easy的:</p>\n<p><code>filter(data, {where: {input: {gt: userInput.min, lt: userInput.max}}})</code></p>\n<p>或者,如果你只是采用过滤器对象语法作为用户输入:</p>\n<p><code>filter(data, userInput)</code></p>\n<p>但是<code>loopback-filters</code>支持的不仅仅是排除和包括.它还支持字段选择(包括/排除字段),排序,地理/距离排序,限制和跳过(<em>译注:原文如下(including / excluding fields), sorting, geo/distance sorting, limiting and skipping.</em>).所有这些都是通过用户输入轻松创建的声明性语法.</p>\n<p>作为LoopBack用户,这是一个非常强大的东西.通常,您将学习如何使用find()过滤器语法编写一些复杂的查询.在这之前你需要弄清楚,如何在JavaScript中做同样的事情（可能使用一个库,如underscore）.现在使用<code>loopback-filters</code>模块,在您的客户端应用程序中,您可以重复使用您发送到服务器的,相同的过滤器对象来过滤数据库,而不必与LoopBack服务器进行任何交互.</p>\n<hr>\n<h4 id=\"4.2.1\"> 4.2.1 Fields filter </h4>\n\n<p>_fields filter_指定要在结果中包括或排除的属性(字段).</p>\n<h5 id=\"REST-API\"><a href=\"#REST-API\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p><code>filter[fields][_propertyName_]=&lt;true|false&gt;&amp;filter[fields][propertyName]=&lt;true|false&gt;...</code></p>\n<p>请注意,要在REST中包含多个字段,请使用多个过滤器.</p>\n<p>您还可以在REST查询中使用stringified JSON format(<em>译注:看上一节</em>).</p>\n<h5 id=\"Node-API\"><a href=\"#Node-API\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<p><code>{ fields: {_propertyName_: &lt;true|false&gt;, _propertyName_: &lt;true|false&gt;, ... } }</code></p>\n<p>其中:</p>\n<ul>\n<li><p><em>propertyName</em> is the name of the property (field) to include or exclude.</p>\n</li>\n<li><p>Use <em>true</em> to include the property or <em>false</em> to exclude it from results.</p>\n</li>\n</ul>\n<p>默认情况下,查询返回结果中的所有模型属性.但是,如果您指定至少一个值为true的字段过滤器,则默认情况下查询将只包括您特别指定要包含的过滤器字段.</p>\n<p>例子:</p>\n<p>只返回id, make, and model properties:</p>\n<p>REST</p>\n<p><code>?filter[fields][id]=true&amp;filter[fields][make]=true&amp;filter[fields][model]=true</code></p>\n<p>Node API</p>\n<p><code>{ fields: {id: true, make: true, model: true} }</code></p>\n<p>返回:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"make\"</span>: <span class=\"string\">\"Nissan\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Titan\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"make\"</span>: <span class=\"string\">\"Nissan\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"Avalon\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>排除vin属性的例子:</p>\n<p>REST</p>\n<p><code>?filter[fields][vin]=false</code></p>\n<p>Node API</p>\n<p><code>{ fields: {vin: false} }</code></p>\n<hr>\n<h4 id=\"4.2.2\"> 4.2.2 Include filter </h4>\n\n<p>_ include filter_使您能够在查询中包括相关模型的结果,例如具有belongsTo或hasMany关系的模型.</p>\n<p>include filter的值可以是字符串,数组或对象.</p>\n<blockquote>\n<p> 重要:You can use an include filter with find(), findOne() and findById().</p>\n</blockquote>\n<h5 id=\"REST-API-1\"><a href=\"#REST-API-1\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p><code>filter[include][relatedModel]=propertyName</code></p>\n<p>您还可以在REST查询中使用stringified JSON format.</p>\n<h5 id=\"Node-API-1\"><a href=\"#Node-API-1\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;include: &apos;relatedModel&apos;&#125;</span><br><span class=\"line\">&#123;include: [&apos;relatedModel1&apos;, &apos;relatedModel2&apos;, ...]&#125;</span><br><span class=\"line\">&#123;include: &#123;relatedModel1: [&#123;relatedModel2: &apos;relationName&apos;&#125; , &apos;relatedModel&apos;]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><p><em>relatedModel, relatedModel1, and relatedModel2</em> are the names (pluralized) of related models.</p>\n</li>\n<li><p><em>relationName</em> is the name of a relation in the related model. </p>\n</li>\n</ul>\n<p>例子:</p>\n<p>Include relations without filtering:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: <span class=\"string\">'posts'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Return all user posts and orders with two additional requests:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">include</span>: [<span class=\"string\">'posts'</span>, <span class=\"string\">'orders'</span>]&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Return all post owners (users), and all orders of each owner:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: <span class=\"string\">'orders'</span>&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Return all post owners (users), and all friends and orders of each owner:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [<span class=\"string\">'friends'</span>, <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Return all post owners (users), and all posts and orders of each owner. The posts also include images.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [&#123;<span class=\"attr\">posts</span>: <span class=\"string\">'images'</span>&#125; , <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Include with filters</p>\n<p>在某些情况下,您可能要对包含的相关模型应用过滤器.</p>\n<blockquote>\n<p> 注意:将过滤器应用于相关模型时,查询将返回第一个模型的结果以及包含过滤器查询的相关模型的任何结果,类似于SQL中的”左连接”</p>\n</blockquote>\n<p>LoopBack支持使用以下语法(例如):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;</span><br><span class=\"line\">  include: &#123;</span><br><span class=\"line\">    relation: <span class=\"string\">'owner'</span>, <span class=\"comment\">// include the owner object</span></span><br><span class=\"line\">    scope: &#123; <span class=\"comment\">// further filter the owner object</span></span><br><span class=\"line\">      fields: [<span class=\"string\">'username'</span>, <span class=\"string\">'email'</span>], <span class=\"comment\">// only show two fields</span></span><br><span class=\"line\">      include: &#123; <span class=\"comment\">// include orders for the owner</span></span><br><span class=\"line\">        relation: <span class=\"string\">'orders'</span>, </span><br><span class=\"line\">        scope: &#123;</span><br><span class=\"line\">          where: &#123;<span class=\"attr\">orderId</span>: <span class=\"number\">5</span>&#125; <span class=\"comment\">// only select order with id 5</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于只有<code>$authenticated</code>或<code>$owner</code>角色的用户,在访问权限的真实场景里,请使用findById().例如,以下示例使用过滤器执行分页.(<em>译注:翻译的不准,原文如下For real-world scenarios where only users in $authenticated or $owner roles should have access, use findById(). For example, the following example uses filters to perform pagination:</em>)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.findById(<span class=\"string\">'123'</span>, &#123;</span><br><span class=\"line\">  include: &#123;</span><br><span class=\"line\">    relation: <span class=\"string\">'orders'</span>,</span><br><span class=\"line\">    scope: &#123; <span class=\"comment\">// fetch 1st \"page\" with 5 entries in it</span></span><br><span class=\"line\">      skip:<span class=\"number\">0</span>,</span><br><span class=\"line\">      limit:<span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Access included objects</p>\n<p>在Node.js API中,调用toJSON()将带有相关项的返回模型实例转换为纯JSON对象.例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">include</span>: &#123;<span class=\"attr\">owner</span>: [&#123;<span class=\"attr\">posts</span>: <span class=\"string\">'images'</span>&#125; , <span class=\"string\">'orders'</span>]&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, posts</span>) </span>&#123;</span><br><span class=\"line\"> posts.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// post.owner points to the relation method instead of the owner instance</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> p = post.toJSON();</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(p.owner.posts, p.owner.orders);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> <span class=\"comment\">//... </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>请注意关系属性,例如<code>post.owner</code>引用关系方法的JavaScript函数.</p>\n<p>REST examples</p>\n<p>这些示例假定customer模型与reviews模型具有hasMany关系. </p>\n<p>Return all customers including their reviews:</p>\n<p><code>/customers?filter[include]=reviews</code></p>\n<p>Return all customers including their reviews which also includes the author:</p>\n<p><code>/customers?filter[include][reviews]=author</code></p>\n<p>Return all customers whose age is 21, including their reviews which also includes the author:</p>\n<p><code>/customers?filter[include][reviews]=author&amp;filter[where][age]=21</code></p>\n<p>Return first two customers including their reviews which also includes the author</p>\n<p><code>/customers?filter[include][reviews]=author&amp;filter[limit]=2</code></p>\n<p>Return all customers including their reviews and orders</p>\n<p><code>/customers?filter[include]=reviews&amp;filter[include]=orders</code></p>\n<hr>\n<h4 id=\"4.2.3\"> 4.2.3 Limit filter </h4>\n\n<p>_limit filter_限制返回的记录数.</p>\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<h5 id=\"REST-API-2\"><a href=\"#REST-API-2\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p><code>filter[limit]=_n_</code></p>\n<p>You can also use stringified JSON format in a REST query.</p>\n<h5 id=\"Node-API-2\"><a href=\"#Node-API-2\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><p><code>{limit: _n_}</code></p>\n<p>其中n是要返回的结果(记录)的最大数目.</p>\n<p>例子:</p>\n<p>仅返回前五个查询结果:</p>\n<p>REST</p>\n<p><code>/cars?filter[limit]=5</code></p>\n<p>Node API</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find(&#123;<span class=\"attr\">limit</span>: <span class=\"number\">5</span>&#125;,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4.2.4\"> 4.2.4 Order filter </h4>\n\n<p>_order filter_指定如何对结果进行排序:根据指定的属性升序(ASC)或降序(DESC).</p>\n<h5 id=\"REST-API-3\"><a href=\"#REST-API-3\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p>根据一个属性排序: </p>\n<p><code>filter[order]=propertyName &lt;ASC|DESC&gt;</code></p>\n<p>根据2个或更多属性排序:</p>\n<p><code>filter[order][0]=propertyName &lt;ASC|DESC&gt;&amp;filter[order][1]propertyName]=&lt;ASC|DESC&gt;...</code></p>\n<p>You can also use stringified JSON format in a REST query.</p>\n<blockquote>\n<p> 注意:默认排序可以在<a href=\"http://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#default-scope\" target=\"_blank\" rel=\"noopener\">default scope.</a>配置</p>\n</blockquote>\n<h5 id=\"Node-API-3\"><a href=\"#Node-API-3\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<p>根据一个属性排序: </p>\n<p><code>{ order: &#39;propertyName &lt;ASC|DESC&gt;&#39; }</code></p>\n<p>根据2个或更多属性排序:</p>\n<p><code>{ order: [&#39;propertyName &lt;ASC|DESC&gt;&#39;, &#39;propertyName &lt;ASC|DESC&gt;&#39;,...] }</code></p>\n<p>其中:</p>\n<ul>\n<li><p><em>propertyName</em> is the name of the property (field) to sort by. </p>\n</li>\n<li><p><code>&lt;ASC|DESC&gt;</code> signifies either ASC for ascending order or DESC for descending order.</p>\n</li>\n</ul>\n<p>例子:</p>\n<p>返回三个最响的武器,按audibleRange属性排序</p>\n<p>REST</p>\n<p><code>/weapons?filter[order]=audibleRange%20DESC&amp;filter[limit]=3</code></p>\n<p>Node API</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weapons.find(&#123;</span><br><span class=\"line\">  order: <span class=\"string\">'price DESC'</span>,</span><br><span class=\"line\">  limit: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4.2.5\"> 4.2.5 Skip filter </h4>\n\n<p>_skip filter_省略指定的返回记录数.这是有用的,例如,分页响应.</p>\n<p>使用<code>offset</code>作为<code>skip</code>的别名.</p>\n<blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<h5 id=\"REST-API-4\"><a href=\"#REST-API-4\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p><code>?filter=[skip]=n</code></p>\n<p>You can also use stringified JSON format in a REST query.</p>\n<h5 id=\"Node-API-4\"><a href=\"#Node-API-4\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><p><code>{skip: n}</code></p>\n<p>n是被跳过的最大记录数.</p>\n<p>例子:</p>\n<p>此REST请求将跳过返回的前50条记录:</p>\n<p><code>/cars?filter[skip]=50</code></p>\n<p>等价的Node API是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find( &#123;<span class=\"attr\">skip</span>: <span class=\"number\">50</span>&#125;,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125; )</span><br></pre></td></tr></table></figure>\n\n<p>分页例子:</p>\n<p>以下REST请求说明如何对查询结果进行分页.每个request请求返回十条记录,第一个返回前十个,第二个返回第11个到第20个,依此类推…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/cars?filter[limit]=10&amp;filter[skip]=0</span><br><span class=\"line\">/cars?filter[limit]=10&amp;filter[skip]=10</span><br><span class=\"line\">/cars?filter[limit]=10&amp;filter[skip]=20</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>使用Node API实现上述效果:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find(&#123;<span class=\"attr\">limit</span>: <span class=\"number\">10</span>, <span class=\"attr\">skip</span>: <span class=\"number\">0</span>&#125;,  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br><span class=\"line\">Cars.find(&#123;<span class=\"attr\">limit</span>: <span class=\"number\">10</span>, <span class=\"attr\">skip</span>: <span class=\"number\">10</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br><span class=\"line\">Cars.find(&#123;<span class=\"attr\">limit</span>: <span class=\"number\">10</span>, <span class=\"attr\">skip</span>: <span class=\"number\">20</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4.2.6\"> 4.2.6 Where filter </h4>\n\n<p>where过滤器指定要匹配的一组逻辑条件,类似于SQL查询中的WHERE子句.</p>\n<h5 id=\"REST-API-5\"><a href=\"#REST-API-5\" class=\"headerlink\" title=\"REST API\"></a>REST API</h5><p>在下面的第一种形式中,条件是等价的,也就是说,它测试属性是否等于value.下面的第二种形式适用于所有其他条件.</p>\n<p><code>filter[where][property]=value</code></p>\n<p><code>filter[where][property][op]=value</code></p>\n<p>例如,如果存在具有odo属性的cars模型,则以下查询将查找odo大于5000的实例:</p>\n<p><code>/cars?filter[where][odo][gt]=5000</code></p>\n<p>找到cars与odo小于30,000的实例:</p>\n<p><code>/cars?filter[where][odo][lt]=30000</code></p>\n<h5 id=\"过滤器限制\"><a href=\"#过滤器限制\" class=\"headerlink\" title=\"过滤器限制\"></a>过滤器限制</h5><blockquote>\n<p> 重要：<em>译注:不好翻,直接上原文.There is a limit of twenty filters (combined with AND or OR) using this format, due to the use of qs. When there are more than twenty, the filter is converted into an Object where it is expecting an Array. See LoopBack issue #2824 for more details.</em></p>\n</blockquote>\n<p>有两种方法可以解决过滤器限制：</p>\n<ul>\n<li>将大过滤器对象编码为”stringified JSON”.</li>\n<li>在调用引导之前(before boot is called),在server/server.js中手动覆盖限制.</li>\n</ul>\n<p><strong>Encode filter object as JSON</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000/api/Books</span><br><span class=\"line\">?filter=&#123;&quot;where&quot;:&#123;&quot;or&quot;:[&#123;&quot;id&quot;:1&#125;,&#123;&quot;id&quot;:2&#125;,...,&#123;&quot;id&quot;:20&quot;&#125;,&#123;&quot;id&quot;:21&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Override limit in server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In `server/server.js`, before boot is called</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> boot = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-boot'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'qs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">module</span>.exports = loopback();</span><br><span class=\"line\">app.set(<span class=\"string\">'query parser'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, option</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> qs.parse(value, &#123;<span class=\"attr\">arrayLimit</span>: <span class=\"number\">500</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Node-API-5\"><a href=\"#Node-API-5\" class=\"headerlink\" title=\"Node API\"></a>Node API</h5><blockquote>\n<p> 警告:AngularJS客户端中的模型方法具有与Node API不同的签名(signature).有关详细信息请参阅AngularJS SDK API</p>\n</blockquote>\n<p><strong>where子句</strong></p>\n<p>对于查询方法,如find(),findOrCreate()或findOne(),使用下面的第一个表单来测试等价性,也就是说property是否等于value.对于所有其他条件,请使用下面的第二个表单.</p>\n<p><code>{where: {property: value}}</code></p>\n<p><code>{where: {property: {op: value}}}</code></p>\n<p>其中:</p>\n<ul>\n<li><p><em>property</em> is the name of a property (field) in the model being queried.</p>\n</li>\n<li><p><em>value</em> is a literal value. </p>\n</li>\n<li><p><em>op</em> is one of the operators listed below.</p>\n</li>\n</ul>\n<p><code>Cars.find({where: {carClass:&#39;fullsize&#39;}});</code></p>\n<p>等价的REST查询是:</p>\n<p><code>/api/cars?filter[where][carClass]=fullsize</code></p>\n<blockquote>\n<p> 提示:上面的where子句语法是查询,而不是count().对于所有其他方法,包括count(),省略{where : … }包装器.请参阅下面的<code>Where clause for other methods</code></p>\n</blockquote>\n<p><strong>Where clause for other methods</strong></p>\n<blockquote>\n<p> 重要:当为查询以外的方法调用Node API时,即对于更新和删除(和<code>count()</code>)的方法,不要在{where：…}对象中包装where子句,只需使用条件作为参数.参见下面的例子</p>\n</blockquote>\n<p>在下面的第一种形式中,条件是等价的,也就是说它测试属性是否等于value.第二种形式适用于所有其他条件.</p>\n<p><code>{property: value}</code></p>\n<p><code>{property: {op: value}}</code></p>\n<p>其中:</p>\n<ul>\n<li><p><em>property</em> is the name of a property (field) in the model being queried.</p>\n</li>\n<li><p><em>value</em> is a literal value. </p>\n</li>\n<li><p><em>op</em> is one of the operators listed below.</p>\n</li>\n</ul>\n<p>例如,下面显示了对模型的updateAll()方法的一个where子句.注意在参数中缺少{where：…}.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myModel = req.app.models.Thing;</span><br><span class=\"line\"><span class=\"keyword\">var</span> theId = <span class=\"number\">12</span>;</span><br><span class=\"line\">myModel.updateAll( &#123;<span class=\"attr\">id</span>: theId&#125;, &#123;<span class=\"attr\">regionId</span>: <span class=\"literal\">null</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> callback(err, results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>更多的例子,例如调用destroyAll():</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> RoleMapping = app.models.RoleMapping;</span><br><span class=\"line\">RoleMapping.destroyAll( &#123; <span class=\"attr\">principalId</span>: userId &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123; ... &#125; );</span><br></pre></td></tr></table></figure>\n\n<p>要删除cost属性大于100的所有记录:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">productModel.destroyAll(&#123;<span class=\"attr\">cost</span>: &#123;<span class=\"attr\">gt</span>: <span class=\"number\">100</span>&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, obj</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>带过滤器的默认scopes</strong></p>\n<p>将<code>scope</code>添加到模型定义(在model.json文件中)会自动向名为defaultScope()的模型添加一个方法.当创建,更新或查询模型时,LoopBack将调用此方法.</p>\n<blockquote>\n<p> 提示:带有where过滤器的默认scopes可能无法正常工作！</p>\n</blockquote>\n<p>每次创建或更新模型实例时,生成的defaultScope()方法将修改与where过滤器匹配的模型属性,以强制执行指定的值.</p>\n<p>如果不希望以此方式应用默认scope,请尽可能使用命名的scope.</p>\n<p>如果必须使用默认scope,但不希望它影响upsert(),那么,在调用upsert()之前,可以覆盖模型的defaultScope()方法.</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> defaultScope = Report.defaultScope;</span><br><span class=\"line\">  Report.defaultScope = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">  Report.upsert(&#123;<span class=\"attr\">id</span>: reportId, <span class=\"string\">'deleted'</span>: <span class=\"literal\">true</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...</span>) </span>&#123;</span><br><span class=\"line\">    Report.defaultScope = defaultScope;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"操作-运算-符\"><a href=\"#操作-运算-符\" class=\"headerlink\" title=\"操作(运算)符\"></a>操作(运算)符</h5><p>此表描述”where”过滤器中可用的操作符,参见下面的示例.</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>Equivalence. See <a href=\"#equivalence\">examples</a> below.</td>\n</tr>\n<tr>\n<td>and</td>\n<td>Logical AND operator. See <a href=\"#and-and-or-operators\">AND and OR operators</a> and <a href=\"#and--or\">examples</a> below.</td>\n</tr>\n<tr>\n<td>or</td>\n<td>Logical OR operator. See <a href=\"#and-and-or-operators\">AND and OR operators</a> and <a href=\"#and--or\">examples</a> below.</td>\n</tr>\n<tr>\n<td>gt, gte</td>\n<td>Numerical greater than (&gt;); greater than or equal (&gt;=). Valid only for numerical and date values. See <a href=\"#gt-and-lt\">examples</a> below. <br><br>  For Geopoint values, the units are in miles by default. See <a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint\" target=\"_blank\" rel=\"noopener\">Geopoint</a> for more information.</td>\n</tr>\n<tr>\n<td>lt, lte</td>\n<td>Numerical less than (&lt;); less than or equal (&lt;=). Valid only for numerical and date values. <br><br>For geolocation values, the units are in miles by default. See <a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint\" target=\"_blank\" rel=\"noopener\">Geopoint</a> for more information.</td>\n</tr>\n<tr>\n<td>between</td>\n<td>True if the value is between the two specified values: greater than or equal to first value and less than or equal to second value. See <a href=\"#gt-and-lt\">examples</a> below. <br><br> For geolocation values, the units are in miles by default. See <a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint\" target=\"_blank\" rel=\"noopener\">Geopoint</a> for more information.</td>\n</tr>\n<tr>\n<td>inq, nin</td>\n<td>In / not in an array of values. See <a href=\"#inq\">examples</a> below.</td>\n</tr>\n<tr>\n<td>near</td>\n<td>For geolocations, return the closest points, sorted in order of distance. Use with <code>limit</code> to return the <em>n</em> closest points. See <a href=\"#near\">examples</a> below.</td>\n</tr>\n<tr>\n<td>neq</td>\n<td>Not equal (!=)</td>\n</tr>\n<tr>\n<td>like, nlike</td>\n<td>LIKE / NOT LIKE operators for use with regular expressions. The regular expression format depends on the backend data source.  See <a href=\"#like-and-nlike\">examples</a> below.</td>\n</tr>\n<tr>\n<td>ilike, nilike</td>\n<td>ILIKE / NOT ILIKE operators for use with regular expressions. The regular expression format depends on the backend data source. See <a href=\"#ilike-and-nilike\">examples</a> below.</td>\n</tr>\n<tr>\n<td>regexp</td>\n<td>Regular expression. See <a href=\"#regular-expressions\">examples</a> below.</td>\n</tr>\n</tbody></table>\n<p><strong>AND和OR操作符</strong></p>\n<p>使用AND和OR运算符可以基于简单的过滤条件(使用以下语法)创建复合逻辑过滤器.</p>\n<p>Node API</p>\n<p><code>{where: {&lt;and|or&gt;: [condition1, condition2, ...]}}</code></p>\n<p>REST API</p>\n<p><code>[where][&lt;and|or&gt;][0]condition1&amp;[where][&lt;and|or&gt;]condition2...</code></p>\n<p>其中_condition1_和_condition2_是过滤器条件.</p>\n<p><strong>正则表达式</strong></p>\n<p>您可以在where过滤器中使用正则表达式,并使用以下语法.您可以在where子句中使用正则表达式进行更新和删除,以及查询.</p>\n<p>基本上,regexp就像一个运算符,其中提供正则表达式值作为比较值.</p>\n<blockquote>\n<p> 提示：正则表达式值还可以包括一个或多个标志.例如,将/i附加到正则表达式以执行不区分大小写的匹配.</p>\n</blockquote>\n<p>Node API</p>\n<p><code>{where: {property: {regexp: &lt;expression&gt;}}}</code></p>\n<p>其中_<expression>_:</expression></p>\n<ul>\n<li>String defining a regular expression (for example, ‘^foo’ ).</li>\n<li>Regular expression literal (for example, /^foo/ ).</li>\n<li>Regular expression object (for example, new RegExp(/John/)).</li>\n</ul>\n<p>简写格式:</p>\n<p><code>{where: {property: &lt;expression&gt;}}}</code></p>\n<p>其中_<expression>_:</expression></p>\n<ul>\n<li>Regular expression literal (for example, /^foo/ ).</li>\n<li>Regular expression object (for example, new RegExp(/John/)).</li>\n</ul>\n<blockquote>\n<p> 提示:上述where子句语法用于查询.对于更新和删除,请忽略{where：…}包装器.</p>\n</blockquote>\n<p>例如,此查询返回模型以大写字母”T”开头的所有汽车:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find( &#123;<span class=\"string\">\"where\"</span>: &#123;<span class=\"string\">\"model\"</span>: &#123;<span class=\"string\">\"regexp\"</span>: <span class=\"string\">\"^T\"</span>&#125;&#125;&#125; );</span><br></pre></td></tr></table></figure>\n\n<p>或者使用简写格式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find( &#123;<span class=\"string\">\"where\"</span>: &#123;<span class=\"string\">\"model\"</span>: <span class=\"regexp\">/^T/</span>&#125; &#125; );</span><br></pre></td></tr></table></figure>\n\n<p>REST</p>\n<p><code>filter[where][property][regexp]=expression</code></p>\n<p>其中:</p>\n<ul>\n<li>property is the name of a property (field) in the model being queried.</li>\n<li>expression is the JavaScript regular expression string. </li>\n</ul>\n<p>正则表达式值还可以包括一个或多个标志.例如,将/i附加到正则表达式以执行不区分大小写的匹配.</p>\n<blockquote>\n<p> 提示:在REST API中使用正则表达式标志时，必须在正则表达式前面使用斜杠字符(/).</p>\n</blockquote>\n<p>以下REST查询返回模型以大写”T”开头的所有汽车:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/api/cars?filter[where][model][regexp]=^T</span><br></pre></td></tr></table></figure>\n\n<p>以下REST查询返回以大写”T”或小写”t”开头的所有模型:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/api/cars?filter[where][model][regexp]=/^t/i</span><br></pre></td></tr></table></figure>\n\n<p>注意,由于正则表达式包括一个标志,所以它前面是一个斜杠(/).</p>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p><strong>Equivalence(等于)</strong></p>\n<p>查询名为M1911的武器:</p>\n<p><strong>REST</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/weapons?filter[where][name]=M1911</span><br></pre></td></tr></table></figure>\n\n<p>carClass是”fullsize”的汽车:</p>\n<p><strong>REST</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/api/cars?filter[where][carClass]=fullsize</span><br></pre></td></tr></table></figure>\n\n<p><strong>Node实现</strong>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cars.find(&#123; <span class=\"attr\">where</span>: &#123;<span class=\"attr\">carClass</span>:<span class=\"string\">'fullsize'</span>&#125; &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>gt and lt</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ONE_MONTH = <span class=\"number\">30</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;  <span class=\"comment\">// Month in milliseconds</span></span><br><span class=\"line\">transaction.find(&#123;</span><br><span class=\"line\">      where: &#123;</span><br><span class=\"line\">        userId: user.id,</span><br><span class=\"line\">        time: &#123;<span class=\"attr\">gt</span>: <span class=\"built_in\">Date</span>.now() - ONE_MONTH&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如,以下查询使用_where_过滤器返回雇员模型的所有实例,该过滤器指定要大于某个日期(大于): </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/employees?filter[where][date][gt]=2014-04-01T18:30:00.000Z</span><br></pre></td></tr></table></figure>\n\n<p>Node实现:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employees.find(&#123;</span><br><span class=\"line\">  where: &#123; </span><br><span class=\"line\">    date: &#123;<span class=\"attr\">gt</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2014-04-01T18:30:00.000Z'</span>)&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>射程超过900米的前三个武器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/weapons?filter[where][effectiveRange][gt]=900&amp;filter[limit]=3</span><br></pre></td></tr></table></figure>\n\n<p>Weapons的audibleRange属性小于10:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/weapons?filter[where][audibleRange][lt]=10</span><br></pre></td></tr></table></figure>\n\n<p><strong>and / or</strong></p>\n<p>以下代码是使用”and”运算符查找标题为”我的帖子”且内容为”Hello”的帖子的示例.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">and</span>: [&#123;<span class=\"attr\">title</span>: <span class=\"string\">'My Post'</span>&#125;, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'Hello'</span>&#125;]&#125;&#125;, </span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>REST实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?filter[where][and][0][title]=My%20Post&amp;filter[where][and][1][content]=Hello</span><br></pre></td></tr></table></figure>\n\n<p>使用”or”运算符查找标题为”我的帖子”或内容为”Hello”的帖子的示例.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">or</span>: [&#123;<span class=\"attr\">title</span>: <span class=\"string\">'My Post'</span>&#125;, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'Hello'</span>&#125;]&#125;&#125;, </span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>更复杂的例子. 请看这个表达式<code>(field1= foo and field2=bar) OR field1=morefoo</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   or: [</span><br><span class=\"line\">     &#123; <span class=\"attr\">and</span>: [&#123; <span class=\"attr\">field1</span>: <span class=\"string\">'foo'</span> &#125;, &#123; <span class=\"attr\">field2</span>: <span class=\"string\">'bar'</span> &#125;] &#125;,</span><br><span class=\"line\">     &#123; <span class=\"attr\">field1</span>: <span class=\"string\">'morefoo'</span> &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>between</strong></p>\n<p>例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter[where][price][between][0]=0&amp;filter[where][price][between][1]=7</span><br></pre></td></tr></table></figure>\n\n<p>Node实现:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shirts.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">size</span>: &#123;<span class=\"attr\">between</span>: [<span class=\"number\">0</span>,<span class=\"number\">7</span>]&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125; )</span><br></pre></td></tr></table></figure>\n\n<p><strong>near</strong></p>\n<p>The <code>where.&lt;field&gt;.near</code> 不同于其他过滤器:大多数where过滤器限制返回的记录数,而<code>near</code>则是对返回结果进行排序.这很像SQL order by子句.通过将其与limit组合,可以创建诸如这样的查询,这个查询根据跟定经纬度获取最接近的三个记录.</p>\n<p>例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/locations?filter[where][geo][near]=153.536,-28.1&amp;filter[limit]=3</span><br></pre></td></tr></table></figure>\n\n<p>GeoPoints可以是以下任意一种形式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = <span class=\"keyword\">new</span> GeoPoint(&#123;<span class=\"attr\">lat</span>: <span class=\"number\">42.266271</span>, <span class=\"attr\">lng</span>: <span class=\"number\">-72.6700016</span>&#125;); <span class=\"comment\">// GeoPoint</span></span><br><span class=\"line\">location = <span class=\"string\">'42.266271,-72.6700016'</span>;                          <span class=\"comment\">// String</span></span><br><span class=\"line\">location = [<span class=\"number\">42.266271</span>, <span class=\"number\">-72.6700016</span>];                         <span class=\"comment\">// Array</span></span><br><span class=\"line\">location = &#123;<span class=\"attr\">lat</span>: <span class=\"number\">42.266271</span>, <span class=\"attr\">lng</span>: <span class=\"number\">-72.6700016</span>&#125;;               <span class=\"comment\">// Object Literal</span></span><br><span class=\"line\"></span><br><span class=\"line\">Restaurants.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">geo</span>: &#123;<span class=\"attr\">near</span>: location &#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">...</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>near (ordering <em>and limiting by distance</em>)</strong></p>\n<p>near过滤器可以接受2个额外属性:</p>\n<ul>\n<li><code>maxDistance</code></li>\n<li><code>unit</code></li>\n</ul>\n<p>当<code>maxDistance</code>包含在过滤器中时,near表现得更像典型的where过滤器,将结果限制在到某个位置的给定距离内的结果.默认情况下,maxDistance以英里为单位测量距离.</p>\n<p>例如,查找给定地理位置两英里内的所有餐馆:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userLocation = <span class=\"keyword\">new</span> GeoPoint(&#123;</span><br><span class=\"line\">  lat: <span class=\"number\">42.266271</span>,</span><br><span class=\"line\">  lng: <span class=\"number\">-72.6700016</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> resultsPromise = Restaurants.find(&#123;</span><br><span class=\"line\">  where: &#123;</span><br><span class=\"line\">    location: &#123;</span><br><span class=\"line\">      near: userLocation,</span><br><span class=\"line\">      maxDistance: <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要更改距离(测量)单位,请指定<code>unit</code>的值为以下一种:</p>\n<ul>\n<li><code>kilometers</code></li>\n<li><code>meters</code></li>\n<li><code>miles</code></li>\n<li><code>feet</code></li>\n<li><code>radians</code></li>\n<li><code>degrees</code></li>\n</ul>\n<p>例如,要使用公里而不是英里:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> resultsPromise = Restaurants.find(&#123;</span><br><span class=\"line\">  where: &#123;</span><br><span class=\"line\">    location: &#123;</span><br><span class=\"line\">      near: userLocation,</span><br><span class=\"line\">      maxDistance: <span class=\"number\">2</span>,</span><br><span class=\"line\">      unit: <span class=\"string\">'kilometers'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 注意:如果单位值错误,例如”mile”而不是”miles”,LoopBack将默认忽略过滤器！</p>\n</blockquote>\n<p><strong>like and nlike</strong></p>\n<p>like和nlike(not like)运算符使您能够匹配SQL正则表达式.正则表达式格式取决于后端数据源.</p>\n<p>like的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: &#123;<span class=\"attr\">like</span>: <span class=\"string\">'M.-st'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>nlike的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: &#123;<span class=\"attr\">nlike</span>: <span class=\"string\">'M.-XY'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>使用memory connector时:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: &#123;<span class=\"attr\">like</span>: <span class=\"string\">'%St%'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br><span class=\"line\">User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: &#123;<span class=\"attr\">nlike</span>: <span class=\"string\">'M%XY'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>ilike and nilike</strong></p>\n<p>ilike和nilike(不是ilike)运算符使您能够匹配不区分大小写的SQL正则表达式.正则表达式格式取决于后端数据源.</p>\n<p>ilike例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: &#123;<span class=\"attr\">ilike</span>: <span class=\"string\">'m.-st'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>nilike例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">title</span>: &#123;<span class=\"attr\">nilike</span>: <span class=\"string\">'m.-xy'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123;</span><br></pre></td></tr></table></figure>\n\n<p>使用memory connector时:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: &#123;<span class=\"attr\">ilike</span>: <span class=\"string\">'%st%'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br><span class=\"line\">User.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">name</span>: &#123;<span class=\"attr\">nilike</span>: <span class=\"string\">'s%xy'</span>&#125;&#125;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, posts</span>) </span>&#123; ... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>inq</strong></p>\n<p>inq运算符检查指定的属性值是否与数组中提供的任何值匹配.一般的语法是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">where</span>: &#123; <span class=\"attr\">property</span>: &#123; <span class=\"attr\">inq</span>: [val1, val2, ...]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><em>property</em> is the name of a property (field) in the model being queried.</li>\n<li><em>val1, val2</em>, and so on, are literal values in an array.</li>\n</ul>\n<p>inq例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Posts.find(&#123;<span class=\"attr\">where</span>: &#123;<span class=\"attr\">id</span>: &#123;<span class=\"attr\">inq</span>: [<span class=\"number\">123</span>, <span class=\"number\">234</span>]&#125;&#125;&#125;, </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, p</span>)</span>&#123;... &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>REST:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/medias?filter[where][keywords][inq]=foo&amp;filter[where][keywords][inq]=bar</span><br></pre></td></tr></table></figure>\n\n<p>Or </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?filter=&#123;&quot;where&quot;: &#123;&quot;keywords&quot;: &#123;&quot;inq&quot;: [&quot;foo&quot;, &quot;bar&quot;]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4.3\"> 4.3 高级主题:数据 </h4>\n\n<p><em>译注:这里只翻译一处,因为其他的3个主题与angularjs有关,目前不涉及</em></p>\n<hr>\n<h4 id=\"4.3.1\"> 4.3.1 Realtime server-sent events </h4>\n\n<h5 id=\"概述-16\"><a href=\"#概述-16\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>PersistedModel API支持使用CRUD方法和createChangeStream()方法的组合,实现从服务器到客户端的流式更改.</p>\n<p>ChangeStream使服务器能够向客户端发送模型更改.客户端向初始请求通知更改,然后服务器将这些更改推送到客户端.</p>\n<h5 id=\"Creating-ChangeStreams-on-the-server\"><a href=\"#Creating-ChangeStreams-on-the-server\" class=\"headerlink\" title=\"Creating ChangeStreams on the server\"></a>Creating ChangeStreams on the server</h5><p><strong>设置</strong></p>\n<p>首先,添加event-stream到你的Node app:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -save event-stream</span><br></pre></td></tr></table></figure>\n\n<p><strong>禁用压缩</strong></p>\n<p>事件流不适用于Node compression.要禁用npm compression,请从server/middleware.json中删除条目,如下所示:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"compression\": &#123;</span><br><span class=\"line\">  \"enabled\":false</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>脚本</strong></p>\n<p>下面是一个在LoopBack应用程序中使用createChangeStream()方法的基本示例:</p>\n<p><strong>server/boot/realtime.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> es = <span class=\"built_in\">require</span>(<span class=\"string\">'event-stream'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> MyModel = app.models.MyModel;</span><br><span class=\"line\">  MyModel.createChangeStream(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, changes</span>) </span>&#123;</span><br><span class=\"line\">    changes.pipe(es.stringify()).pipe(process.stdout);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  MyModel.create(&#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此示例将打印以下内容到控制台:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"target\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"data\"</span>:&#123;<span class=\"attr\">\"foo\"</span>:<span class=\"string\">\"bar\"</span>,<span class=\"attr\">\"id\"</span>:<span class=\"number\">1</span>&#125;,<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"create\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Pushing-data-to-clients\"><a href=\"#Pushing-data-to-clients\" class=\"headerlink\" title=\"Pushing data to clients\"></a>Pushing data to clients</h5><p>此示例显示如何使用EventSource API从浏览器使用ChangeStream,该API是内置于大多数浏览器中的.下面的示例代码假设一个名为MyModel的模型,并将响应记录到浏览器JavaScript控制台.</p>\n<p><strong>Browser script</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> urlToChangeStream = <span class=\"string\">'/api/MyModels/change-stream?_format=event-stream'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> src = <span class=\"keyword\">new</span> EventSource(urlToChangeStream);</span><br><span class=\"line\">src.addEventListener(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(msg.data);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// the change object</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要推送数据,服务器上的模型必须更改.例如,如果添加新记录(模型实例).</p>\n<p>发生这种情况时,在浏览器JavaScript控制台中,您将看到:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object &#123;target: 2, data: Object, type: \"create\"&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5\"> 5. 添加应用程序逻辑 </h4>\n\n<p>在构建应用程序时,通常需要实现自定义逻辑以处理数据并在响应客户端请求之前执行其他操作.在LoopBack中,有三种方法：</p>\n<ul>\n<li>向模型添加逻辑 - 添加远程方法,远程钩子和操作钩子(adding <code>remote methods</code>, <code>remote hooks</code> and <code>operation hooks</code>).</li>\n<li>定义引导脚本 - 编写在应用程序启动时运行的脚本(在/server/boot目录中).</li>\n<li>定义中间件 - 向应用程序添加自定义中间件.</li>\n</ul>\n<hr>\n<h4 id=\"5.1\"> 5.1 使用LoopBack对象 </h4>\n\n<h5 id=\"概述-17\"><a href=\"#概述-17\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack中主要的javascript对象包括:</p>\n<ul>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#var-app-loopback\" target=\"_blank\" rel=\"noopener\">App</a></li>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#model\" target=\"_blank\" rel=\"noopener\">Models</a></li>\n<li><a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#define-new-datasource\" target=\"_blank\" rel=\"noopener\">Data sources</a></li>\n</ul>\n<p>如何获取对这些对象的引用取决于代码的位置以及要引用的对象(<em>译注:代码位置例如boot script,model的js文件等位置</em>).</p>\n<h5 id=\"获取App对象的引用\"><a href=\"#获取App对象的引用\" class=\"headerlink\" title=\"获取App对象的引用\"></a>获取App对象的引用</h5><p>获取对App对象的引用是至关重要的,因为从App中可以获得对其他对象(如model和data source)的引用.通常你可以在以下几种方式中获取app对象的句柄：</p>\n<ul>\n<li><p>Model scripts: /common/models/<em>modelName</em>.js(其中modelName是模型的名称).</p>\n</li>\n<li><p>/server/boot中的引导脚本.</p>\n</li>\n<li><p>Middleware(在boot scripts中和/server/server.js中注册的中间件）</p>\n</li>\n<li><p>您自己的自定义脚本</p>\n</li>\n</ul>\n<p>App对象为典型的LoopBack应用程序的各个部分提供上下文.</p>\n<p><strong>在boot script中获取对App对象的引用</strong></p>\n<p>要在引导脚本中获取对<code>app</code>对象的引用,请将其作为导出函数的第一个参数传递进去.</p>\n<p>下面是个带有回调函数的异步启动脚本的例子:</p>\n<p><strong>Asynchronous boot script - /server/boot/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app, cb</span>) </span>&#123; <span class=\"comment\">//app is injected by LoopBack</span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下面是个不带回调函数的异步脚本的例子:</p>\n<p><strong>Synchronous boot script - /server/boot/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123; <span class=\"comment\">//app is injected by loopback</span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在middleware中获取对App对象的引用</strong></p>\n<p>LoopBack在中间件的<code>request</code>对象中自动设置app了对象(实际上,在底层是Express在做它).您可以在server/server.js中访问,如下所示:</p>\n<p><strong>Middleware - /server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = req.app;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>在自定义脚本中获取对App对象的引用</strong></p>\n<p>如果您需要在自己的自定义脚本中引用应用程序,只需要<code>require</code>它(如示例中所示):</p>\n<p><strong>A custom script - /server/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'/server/server'</span>);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>你只需要require<code>/server/server.js</code>,就像任何Node模块一样.</p>\n<p><strong>在model的js文件中获取对App对象的引用</strong></p>\n<p>要在模型生成器(Model generator)支持的模型中获取<code>app</code>对象的句柄,仍然是使用”require”,就像任何Node模块一样:</p>\n<p><strong>Model - /common/models/book.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'../../server/server'</span>); <span class=\"comment\">//require `server.js` as in any node.js app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>对于model,有一个特殊情况.从除了/common/models/model.js之外的任何地方,你实际上可以通过使用<code>model.app</code>的模型获得对<code>app</code>的引用.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Book.app</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>但是,需要注意的是,您不能在/common/model/model.js中引用model.app,因为此文件在引导完成之前不会添加<code>app</code>属性.这意味着您不能在/common/models/model.js中执行以下操作:</p>\n<p><strong>CANNOT do this in a model script</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  Book.app... <span class=\"comment\">//won't work because `.app` has not been added to the Book object yet</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>但是,您可以获得对app INSIDE remote methods, remote hooks和model hooks的引用,因为这些是在应用程序完成加载后触发的(即在loopback.boot运行之后|/在server/server.js调用boot(…)之后）.</p>\n<p>这意味着你可以:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  Book.read(cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> app = Book.app;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(app.models...)</span><br><span class=\"line\">    cb();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Book.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'read'</span>, <span class=\"comment\">// read里有对app的引用</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当然,你可以在remote hooks和remote methods中做同样的事情,但要注意加载时序.简单地说,<code>model.app</code>将不可用,直到应用程序完成引导,即在/server/server.js中运行boot().这里的想法是,在我们的模型被添加到应用程序之前定义它们.应用程序完成引导后,您就可以访问模型的<code>app</code>属性.</p>\n<p>访问应用程序对象的最简单的方法是通过Model.on(‘attached’)事件.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app;</span><br><span class=\"line\">  MyModel.on(<span class=\"string\">'attached'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    app = a;</span><br><span class=\"line\">    <span class=\"comment\">// perform any setup that requires the app object</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用app对象\"><a href=\"#使用app对象\" class=\"headerlink\" title=\"使用app对象\"></a>使用app对象</h5><p>LoopBack的app对象在主脚本中定义,如下:</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = loopback();</span><br></pre></td></tr></table></figure>\n\n<p>app对象扩展自<code>Express app obejct</code>,继承了它的所有属性和方法,以及LoopBack app obejct的所有其他属性和方法.</p>\n<blockquote>\n<p> 重要:在某些地方,如启动脚本中,app可能不叫app,而叫做server.</p>\n</blockquote>\n<h5 id=\"使用model对象\"><a href=\"#使用model对象\" class=\"headerlink\" title=\"使用model对象\"></a>使用model对象</h5><p><strong>获取对model对象的引用</strong></p>\n<p>一旦你获得了<code>app</code>对象的句柄,你就可以通过app对象上的models属性来获得对特定model的引用.</p>\n<p><strong>Boot script - /server/boot/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = app.models.Book;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在你自己的脚本中:</p>\n<p><strong>A custom script - /server/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'/server/server'</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取对不相关模型的引用</strong></p>\n<p>您可以使用诸如<code>MyModel.app.models.MyRelatedModel</code>这样的表达式轻松的引用相关模型(<em>译注:相关模型是指建立了关系的model</em>).但是如果与其他模型没有关系,这将不起作用.在这种情况下,您需要像下面这样获取对应用程序对象的引用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../../server/server'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例如,假设您想要在observer (hook)中引用User模型,如下:</p>\n<p><strong>common/models/my-model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'../../server/server'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  MyModel.observe(<span class=\"string\">'loaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ctx, next</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> User = app.models.User;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   User.create(...);</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用data-source对象\"><a href=\"#使用data-source对象\" class=\"headerlink\" title=\"使用data source对象\"></a>使用data source对象</h5><p><strong>获取对data sources的引用</strong></p>\n<p>类似于在模型上获取句柄,您需要首先获取<code>app</code>对象的句柄,然后访问<code>app.datasources</code>属性即可:</p>\n<p><strong>Boot script - /server/boot/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dataSource = app.datasources.db; <span class=\"comment\">//db can be any registered datasource in `/server/datasources.json`</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>或者在你自己的脚本中:</p>\n<p><strong>A custom script - /server/your-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'./server/server'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> datasource = app.datasources.db;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者在中间件中:</p>\n<p><strong>Middleware - /server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dataSource = app.datasources.db;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>或者在model的js文件中:</p>\n<p><strong>Model - /common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  Book.read = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataSource = Book.app.datasources.db;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Book.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'read'</span>,</span><br><span class=\"line\">     ...</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在model的js文件中要注意,因为诸如下面这样的代码是不会起作用的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model - <span class=\"regexp\">/common/m</span>odels/model.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Book</span>) </span>&#123;</span><br><span class=\"line\">  Book.app... <span class=\"comment\">//`Book` is not registered yet! This WON'T WORK.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5.2\"> 5.2 向model中添加业务逻辑 </h4>\n\n<p>有三种方法可以向模型添加自定义逻辑:</p>\n<p><strong><em>译注:下面三个极其重要,要记住他们的作用场景</em></strong></p>\n<ul>\n<li><strong>Remote methods</strong>(远程方法) - REST端点映射到Node函数.</li>\n<li><strong>Remote hooks</strong>(远程钩子) - 在执行<code>remote method</code>时触发的逻辑(之前或之后).</li>\n<li><strong>Operation hooks</strong>(操作钩子) - 当模型对数据源执行创建,读取,更新和删除操作时触发的逻辑.</li>\n</ul>\n<p>您可以通过配置如何调用每个方法来进一步优化自定义逻辑的时序.在任何情况下,你都需要编写自己的逻辑,因为LoopBack只提供了触发逻辑的机制.</p>\n<hr>\n<h4 id=\"5.2.1\"> 5.2.1 Remote methods(远程方法) </h4>\n\n<blockquote>\n<p> 概要:远程方法是模型的静态方法,它通过自定义REST端点来公开.</p>\n</blockquote>\n<h5 id=\"概述-18\"><a href=\"#概述-18\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>远程方法是模型的静态方法,它通过自定义的REST端点公开.使用远程方法可以实现:LoopBack标准模型REST API不提供的操作.</p>\n<blockquote>\n<p> 注意:定义远程方法的最简单的方法是使用远程方法生成器(remote method generator)</p>\n</blockquote>\n<h5 id=\"如何定义远程方法\"><a href=\"#如何定义远程方法\" class=\"headerlink\" title=\"如何定义远程方法\"></a>如何定义远程方法</h5><p>要定义远程方法:</p>\n<ol>\n<li><p>在/common/models目录中编辑模型定义JSON文件,例如,要将远程方法附加到Person模型,请编辑/common/models/person.js.</p>\n</li>\n<li><p>定义处理request请求的方法(<em>译注:函数定义</em>).请注意,方法的名称将确定远程方法是静态的还是实例的方法.如果方法名称从<code>prototype.</code>开始,说明它是实例方法,否则,它是一个静态方法.</p>\n</li>\n<li><p>调用<code>remoteMethod()</code>注册该方法,使用两个参数调用它:</p>\n<ul>\n<li>第一个参数是一个字符串,它是您在步骤2中定义的方法的名称.</li>\n<li>第二个参数(可选)为REST端点提供了额外的配置.</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p> 重要：LoopBack模型生成器会自动将驼峰形式的模型名称(例如MyModel)转换为小写横线名称(my-model).例如,如果您使用模型生成器创建名为”FooBar”的模型,它将在common/models中创建文件foo-bar.json和foo-bar.js.但是,模型名称FooBar将通过模型的name属性保留.</p>\n</blockquote>\n<p><strong>例子</strong></p>\n<p>假设您有一个Person模型,并且您要在REST端点中添加一个<code>/greet</code>端点,该端点返回一个带有请求中提供的名称的问候语(greeting).请您将此代码添加到/common/models/person.js来实现它:</p>\n<p><strong>/common/models/person.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Person</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.greet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg, cb</span>) </span>&#123;</span><br><span class=\"line\">      cb(<span class=\"literal\">null</span>, <span class=\"string\">'Greetings... '</span> - msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person.remoteMethod(<span class=\"string\">'greet'</span>, &#123;</span><br><span class=\"line\">          accepts: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'msg'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;,</span><br><span class=\"line\">          returns: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'greeting'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在,您发起一个post请求到<code>/api/people/greet</code>端点,携带的数据是<code>{&quot;msg&quot;: &quot;John&quot;}</code>.您将会在shell中收到如下结果:<code>Greetings... John!</code>.</p>\n<blockquote>\n<p> 注意:上面的REST API请求使用复数形式”people”而不是“person”.</p>\n</blockquote>\n<h5 id=\"注册远程方法\"><a href=\"#注册远程方法\" class=\"headerlink\" title=\"注册远程方法\"></a>注册远程方法</h5><p>所有的LoopBack模型都有一个<code>remoteMethod()</code>静态方法,使用这个方法来注册一个<code>remote method(远程方法)</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.remoteMethod(requestHandlerFunctionName, [options])</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li>model是要添加远程方法的模型对象,在我们的示例中是Person.</li>\n<li>requestHandlerFunctionName是一个字符串,指定远程方法的名称,例如”greet”.</li>\n<li>options是指定配置REST端点的参数对象,见下文.</li>\n</ul>\n<p><strong>Options</strong></p>\n<p>options参数是一个包含用于配置远程方法REST端点的键/值对的Javascript对象.</p>\n<blockquote>\n<p> 重要:所有的options属性都是可选的.但是,如果远程方法需要参数,则必须指定accept.如果remote方法返回一个值,则必须指定returns.</p>\n</blockquote>\n<table>\n  <thead>\n    <tr>\n      <th width=\"50\">Option</th>\n      <th>Description</th>\n      <th width=\"260\">Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>accepts</td>\n      <td>\n        Defines arguments that the remote method accepts that map to the static method you define. For the example above, the function signature is <pre>Person.greet(name, age, callback)...</pre> so\n        <code>name</code> is the first argument, <code>age</code> is the second argument and callback is automatically provided by LoopBack (do not specify it in your <code>accepts</code> array). For more information, see <a href=\"Remote-methods.html#argument-descriptions\">Argument descriptions</a>.<br><br>\n        The default value is the empty array, <code>[ ]</code>.\n      </td>\n      <td>\n        <pre style=\"font-size: 80%;\">{  ...\n  accepts: [\n   {arg: 'name',\n    type: 'string'},\n   {arg: 'age',\n    type: 'number'}, ...],\n  ... }</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>\n        Text description of the method, used by API documentation generators such as Swagger.\n        You can put long strings in an array if needed (see note below).\n      </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>http.path</td>\n      <td>\n        HTTP path (relative to the model) at which the method is exposed.\n      </td>\n      <td>\n        <pre>http: {path: '/sayhi'}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.verb</td>\n      <td>\n        HTTP method (verb) at which the method is available. One of:\n        <ul>\n          <li>get</li>\n          <li>post (default)</li>\n          <li>patch</li>\n          <li>put</li>\n          <li>del</li>\n          <li>all</li>\n        </ul>\n      </td>\n      <td>\n     <pre>http: {path: '/sayhi',\nverb: 'get'}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.status</td>\n      <td>Default HTTP status set when the callback is called without an error.</td>\n      <td>\n      <pre>http: {status: 201}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>http.errorStatus</td>\n      <td>Default HTTP status set when the callback is called with an error.</td>\n      <td>\n        <pre>http: {errorStatus: 400}</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>notes</td>\n      <td>\n        Additional notes, used by API documentation generators like Swagger.\n        You can put long strings in an array if needed (see note below).\n      </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>returns</td>\n      <td>\n        Describes the remote method's callback arguments; See <a href=\"Remote-methods.html#argument-descriptions\">Argument descriptions</a>. The <code>err </code>argument is assumed; do not specify.\n        Default if not provided is the empty array,  <code>[]</code>.\n      </td>\n      <td>\n        <pre>returns: {arg: 'greeting',\ntype: 'string'}</pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>参数描述</strong></p>\n<p><code>accept</code>和<code>returns</code>这2个可选属性,可以是单个参数的对象,或者是个数组,数组的内容是有序的参数集.下表描述了每个单独参数的属性.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Property (key)</th>\n      <th width=\"100\">Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>arg</td>\n      <td>String</td>\n      <td>Argument name</td>\n    </tr>\n    <tr>\n      <td>description</td>\n      <td>String or Array</td>\n      <td>\n        A text description of the argument. This is used by API documentation generators like Swagger.\n        You can put long strings in an array if needed (see note above).\n      </td>\n    </tr>\n    <tr>\n      <td>http</td>\n      <td>Object or Function</td>\n      <td>For input arguments: a function or an object describing mapping from HTTP request to the argument value. See <a href=\"Remote-methods.html\">HTTP mapping of input arguments</a> below.</td>\n    </tr>\n    <tr>\n      <td>http.target</td>\n      <td>String</td>\n      <td>\n        Map the callback argument value to the HTTP response object. The following values are supported.\n        <ul>\n          <li><code>status</code> sets the <code>res.statusCode</code> to the provided value</li>\n          <li><code>header</code> sets the <code>http.header</code> or <code>arg</code> named header to the value</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>required</td>\n      <td>Boolean</td>\n      <td>True if argument is required; false otherwise.</td>\n    </tr>\n    <tr>\n      <td>root</td>\n      <td>Boolean</td>\n      <td>For callback arguments: set this property to <code>true</code>\n         if your function has a single callback argument to use as the root object returned to remote caller.\n        Otherwise the root object returned is a map (argument-name to argument-value).\n      </td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td>String</td>\n      <td>Argument datatype; must be a <a href=\"LoopBack-types.html\">Loopback type</a>. Additionally, callback arguments allow a special type \"file\"; see below.</td>\n    </tr>\n    <tr>\n      <td>default</td>\n      <td>String</td>\n      <td>Default value that will be used to populate loopback-explorer input fields and swagger documentation.\n        <strong>Note</strong>: This value will not be passed into remote methods function if argument is not present.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>例如,单个参数,指定其为对象:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;arg: 'myArg', type: 'number'&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多个参数,则需要数组来存放:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;arg: 'arg1', type: 'number', required: true&#125;,</span><br><span class=\"line\">  &#123;arg: 'arg2', type: 'array'&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><strong>返回文件(流)响应</strong></p>\n<p>您可以为回调参数指定{type：’file’，root：true},它会被直接发送给response body.file参数可以设置为以下值之一:</p>\n<ul>\n<li>String</li>\n<li>Buffer</li>\n<li>ReadableStream (anything that exposes .pipe() method)</li>\n</ul>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">MyModel</span>) </span>&#123;</span><br><span class=\"line\">  MyModel.download = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// getTheStreamBody() can be implemented by calling http.request() or fs.readFile() for example</span></span><br><span class=\"line\">    getTheStreamBody(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stream</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> cb(err);</span><br><span class=\"line\">      <span class=\"comment\">// stream can be any of: string, buffer, ReadableStream (e.g. http.IncomingMessage)</span></span><br><span class=\"line\">      cb(<span class=\"literal\">null</span>, stream, <span class=\"string\">'application/octet-stream'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  MyModel.remoteMethod(<span class=\"string\">'download'</span>, &#123;</span><br><span class=\"line\">    returns: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'body'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'file'</span>, <span class=\"attr\">root</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'Content-Type'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>, <span class=\"attr\">http</span>: &#123; <span class=\"attr\">target</span>: <span class=\"string\">'header'</span> &#125;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入参数的HTTP映射</strong></p>\n<p>有两种方法可以为输入参数指定HTTP映射:</p>\n<ul>\n<li>提供一个具有<code>source</code>属性的对象.</li>\n<li>指定一个自定义映射函数</li>\n</ul>\n<p><strong>使用具有source属性的对象</strong></p>\n<p>要使用第一种方法为输入参数指定HTTP映射,请提供具有<code>source</code>属性的对象,该属性具有下表中所示的值之一.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Value of source property</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>body</td>\n      <td>The whole request body is used as the value.</td>\n    </tr>\n    <tr>\n      <td>form<br>query<br>path </td>\n      <td>\n        The value is looked up using <code>req.param</code>, which searches route arguments, the request body and the query string.\n        Note that <code>query</code> and <code>path</code> are aliases for <code>form</code>.\n      </td>\n    </tr>\n    <tr>\n      <td>req</td>\n      <td>The <a href=\"http://expressjs.com/4x/api.html#req\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">Express HTTP request object</a>.</td>\n    </tr>\n    <tr>\n      <td>res</td>\n      <td>The <a href=\"http://expressjs.com/4x/api.html#res\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">Express HTTP response object</a>.</td>\n    </tr>\n    <tr>\n      <td>context</td>\n      <td>The whole context object, which holds request and response objects.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>例如,将整个请求正文作为值的参数:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; arg: 'data', type: 'object', http: &#123; source: 'body' &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个显示Express HTTP请求和响应对象的示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\"> &#123;arg: 'req', type: 'object', 'http': &#123;source: 'req'&#125;&#125;,</span><br><span class=\"line\"> &#123;arg: 'res', type: 'object', 'http': &#123;source: 'res'&#125;&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用自定义映射函数</strong></p>\n<p>指定输入参数的HTTP映射的第二种方法是指定自定义映射函数,例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  arg: <span class=\"string\">'custom'</span>,</span><br><span class=\"line\">  type: <span class=\"string\">'number'</span>,</span><br><span class=\"line\">  http: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ctx is LoopBack Context object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1\\. Get the HTTP request object as provided by Express</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> req = ctx.req;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2\\. Get 'a' and 'b' from query string or form data and return their sum.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -req.param(<span class=\"string\">'a'</span>) - req.param(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不指定映射,LoopBack将像下面这样确定值(假设<code>name</code>为要解析的输入参数的名称):</p>\n<ol>\n<li>如果有JSON格式的请求参数args,则它使用<code>args[&#39;name&#39;]</code>的值.</li>\n<li>否则,它使用req.param(‘name’).</li>\n</ol>\n<p><strong>将返回指定为非JSON格式(<em>译注:原文Returning data outside of a JSON field</em>)</strong></p>\n<p>使用arg属性指定返回参数将自动返回一个JSON对象,您的数据存储在同名的字段中.</p>\n<p>如果要将数据作为主响应返回,例如数组,可以通过在returns对象中设置root属性并省略arg来实现.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">returns: &#123;type: 'array', root: true&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置远程方法的路由\"><a href=\"#设置远程方法的路由\" class=\"headerlink\" title=\"设置远程方法的路由\"></a>设置远程方法的路由</h5><p>默认情况下,远程方法公开在：</p>\n<p><code>POST http://apiRoot/modelName/methodName</code></p>\n<p>其中:</p>\n<ul>\n<li>apiRoot是应用程序的API根路径.</li>\n<li>modelName是模型的复数名称.</li>\n<li>methodName是函数名.</li>\n</ul>\n<p>回想之前的greet例子,远程方法公开在：</p>\n<p><code>POST /api/people/greet</code></p>\n<p>要更改路由,请使用remoteMethod()方法的options参数的http.path和http.verb属性,例如:</p>\n<p><strong>/common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.remoteMethod(<span class=\"string\">'greet'</span>,&#123;</span><br><span class=\"line\">  accepts: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'msg'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;,</span><br><span class=\"line\">  returns: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'greeting'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;,</span><br><span class=\"line\">  http: &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/sayhi'</span>, <span class=\"attr\">verb</span>: <span class=\"string\">'get'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码将默认路由改变到:</p>\n<p><code>GET /api/people/sayhi</code></p>\n<p>于是,一个到<code>http://localhost:3000/api/people/sayhi?msg=LoopBack%20developer</code>的GET请求将返回:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"greeting\"</span>: <span class=\"string\">\"Greetings... LoopBack developer\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"向远程方法添加ACLs\"><a href=\"#向远程方法添加ACLs\" class=\"headerlink\" title=\"向远程方法添加ACLs\"></a>向远程方法添加ACLs</h5><p>要限制对自定义远程方法的访问,请以控制对任何模型API的访问的相同方式使用ACL生成器(ACL generator).自定义远程方法的访问类型为Execute.</p>\n<p><strong>基础应用</strong></p>\n<p>例如,要拒绝调用上面示例中使用的greet方法:</p>\n<p>shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:acl</span><br><span class=\"line\">[?] Select the model to apply the ACL entry to: Person</span><br><span class=\"line\">[?] Select the ACL scope: A single method</span><br><span class=\"line\">[?] Enter the method name: greet</span><br><span class=\"line\">[?] Select the access <span class=\"built_in\">type</span>: Execute</span><br><span class=\"line\">[?] Select the role: All users</span><br><span class=\"line\">[?] Select the permission to apply: Explicitly deny access</span><br></pre></td></tr></table></figure>\n\n<p>shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:acl</span><br><span class=\"line\">[?] Select the model to apply the ACL entry to: Person</span><br><span class=\"line\">[?] Select the ACL scope: A single method</span><br><span class=\"line\">[?] Enter the method name: greet</span><br><span class=\"line\">[?] Select the access <span class=\"built_in\">type</span>: Execute</span><br><span class=\"line\">[?] Select the role: All users</span><br><span class=\"line\">[?] Select the permission to apply: Explicitly deny access</span><br></pre></td></tr></table></figure>\n\n<p>然后,该工具创建以下访问控制规范:</p>\n<p><strong>/common/models/person.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"acls\": [&#123;</span><br><span class=\"line\">  \"principalType\": \"ROLE\",</span><br><span class=\"line\">  \"principalId\": \"$everyone\",  // apply the ACL to everyone</span><br><span class=\"line\">  \"permission\": \"DENY\",        // DENY attempts to invoke this method</span><br><span class=\"line\">  \"property\": \"greet\"          // applies the access control to the greet() method</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>高级应用</strong></p>\n<p>另一个例子,允许只为该模型对象的<code>$owner</code>调用一个远程方法:</p>\n<p><strong>/common/models/YourModel.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">YourModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  YourModel.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'someRemoteMethod'</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      accepts: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'id'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'number'</span>, <span class=\"attr\">required</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"comment\">// mixing ':id' into the rest url allows $owner to be determined and used for access control</span></span><br><span class=\"line\">      http: &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/:id/some-remote-method'</span>, <span class=\"attr\">verb</span>: <span class=\"string\">'get'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"格式化远程方法的响应\"><a href=\"#格式化远程方法的响应\" class=\"headerlink\" title=\"格式化远程方法的响应\"></a>格式化远程方法的响应</h5><p>您可以通过添加引导脚本来重新格式化所有远程方法返回的响应,该引导脚本修改app.remotes()返回的对象,如下所示:</p>\n<p><strong>/server/boot/hook.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> remotes = app.remotes();</span><br><span class=\"line\">  <span class=\"comment\">// modify all returned values</span></span><br><span class=\"line\">  remotes.after(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    ctx.result = &#123;</span><br><span class=\"line\">      data: ctx.result</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"禁用远程方法\"><a href=\"#禁用远程方法\" class=\"headerlink\" title=\"禁用远程方法\"></a>禁用远程方法</h5><p>使用<code>Model.disableRemoteMethod(name, isStatic)</code>和<code>Model.disableRemoteMethodByName(name)</code>来禁用远程方法.更多的信息请访问:</p>\n<ul>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#model-disableremotemethod\" target=\"_blank\" rel=\"noopener\">Model.disableRemoteMethod</a></li>\n<li><a href=\"http://apidocs.strongloop.com/loopback/#model-disableremotemethodbyname\" target=\"_blank\" rel=\"noopener\">Model.disableRemoteMethodByName</a></li>\n</ul>\n<hr>\n<h4 id=\"5.2.2\"> 5.2.2 Remote hooks(远程钩子) </h4>\n\n<h5 id=\"概述-19\"><a href=\"#概述-19\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack提供了两种钩子:</p>\n<ul>\n<li>远程钩子(Remote hooks),在调用远程方法之前或之后执行.它可以是自定义的远程方法或继承自PersistedModel的标准创建,检索,更新和删除方法.</li>\n<li>当模型执行创建,检索,更新和删除操作时执行的操作钩子(Operation hooks).</li>\n</ul>\n<p>远程钩子(remote hook)使您能够在客户端调用远程方法之前或之后执行函数:</p>\n<ul>\n<li><strong>beforeRemote()</strong>,在远程方法之前运行.</li>\n<li><strong>afterRemote()</strong>,在远程方法成功完成后运行.</li>\n<li><strong>afterRemoteError()</strong>,在远程方法发生error后运行.</li>\n</ul>\n<blockquote>\n<p> 提示: 使用beforeRemote钩子可以验证和清除远程方法的输入.因为beforeRemote钩子在执行远程方法之前运行,所以它可以访问远程方法的输入,但不能访问结果.在将远程方法的结果发送到远程客户端之前,可以使用afterRemote钩子来进行修改,记录或其他操作.因为afterRemote钩子在执行远程方法之后运行,它可以访问远程方法的结果,但是不能修改输入参数.</p>\n</blockquote>\n<p><strong>Signature</strong></p>\n<p>beforeRemote()和afterRemote()具有相同的Signature,下面的语法使用beforeRemote,但是afterRemote是相同的.</p>\n<p>对于静态自定义远程方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_modelName_.beforeRemote( _methodName_, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>实例方法和静态内置方法(如upsert()或create())需要回调中的第三个参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_modelName_.beforeRemote( _methodName_, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ctx, _modelInstance_, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>afterRemoteError()的signature有一点点不同:它只有2个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_modelName_.afterRemoteError( _methodName_, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><code>_modelName_</code>是远程钩子附加到的模型的名称.</li>\n<li><code>_methodName_</code>是触发远程钩子的方法的名称.可以是自定义远程方法或从PersistedModel继承的标准创建,检索,更新和删除方法.它可以包括匹配多个方法的通配符(见下文).</li>\n<li><code>ctx</code>是上下文对象.</li>\n<li><code>_modelInstance_</code>是受影响的模型实例.</li>\n</ul>\n<p>上面的语法包括对next()的调用,要提醒您,您必须在远程钩子的回调函数中的某一点调用next().它不一定必须在函数结束时出现,但必须在函数完成之前的某个点调用.</p>\n<p><strong>通配符</strong></p>\n<p>您可以在<code>_methodName_</code>中使用以下通配符：</p>\n<ul>\n<li>星号’*‘匹配任何字符,直到第一次出现分隔符字符’.’</li>\n<li>双星号匹配任何字符,包括分隔符字符’.’</li>\n</ul>\n<p>例如，使用”<em>.</em>“匹配任何静态方法,使用’prototype.*’来匹配任何实例方法.</p>\n<h5 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p>以下示例为revEngine()远程方法定义beforeRemote和afterRemote钩子:</p>\n<p><strong>common/models/car.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Car</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// remote method</span></span><br><span class=\"line\">  Car.revEngine = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sound, cb</span>) </span>&#123;</span><br><span class=\"line\">    cb(<span class=\"literal\">null</span>, sound - <span class=\"string\">' '</span> - sound - <span class=\"string\">' '</span> - sound);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  Car.remoteMethod(</span><br><span class=\"line\">    <span class=\"string\">'revEngine'</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      accepts: [&#123;<span class=\"attr\">arg</span>: <span class=\"string\">'sound'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;],</span><br><span class=\"line\">      returns: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'engineSound'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;,</span><br><span class=\"line\">      http: &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/rev-engine'</span>, <span class=\"attr\">verb</span>: <span class=\"string\">'post'</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// remote method before hook</span></span><br><span class=\"line\">  Car.beforeRemote(<span class=\"string\">'revEngine'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, unused, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Putting in the car key, starting the engine.'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// remote method after hook</span></span><br><span class=\"line\">  Car.afterRemote(<span class=\"string\">'revEngine'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, remoteMethodOutput, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Turning off the engine, removing the key.'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下示例在远程方法名称中使用通配符.当执行名称以”save”结尾的任何远程方法时,将调用此远程钩子:</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer.beforeRemote(<span class=\"string\">'*.save'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, unused, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ctx.req.accessToken) &#123;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'must be logged in to update'</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Customer.afterRemote(<span class=\"string\">'*.save'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, user, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'user has been saved'</span>, user);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 重要: 钩子的第二个参数(上例中的user)是ctx.result,它不总是可用</p>\n</blockquote>\n<p>下面是更多使用通配符的远程钩子的示例,以便在调用任何远程方法之前运行函数.</p>\n<p><strong>common/models/customer.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ** will match both prototype.* and *.*</span></span><br><span class=\"line\">Customer.beforeRemote(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, user, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(ctx.methodString, <span class=\"string\">'was invoked remotely'</span>); <span class=\"comment\">// customers.prototype.save was invoked remotely</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Other wildcard examples</span><br><span class=\"line\"><span class=\"comment\">// run before any static method eg. User.find</span></span><br><span class=\"line\">Customer.beforeRemote(<span class=\"string\">'*'</span>, ...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// run before any instance method eg. User.prototype.save</span></span><br><span class=\"line\">Customer.beforeRemote(<span class=\"string\">'prototype.*'</span>, ...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prevent password hashes from being sent to clients</span></span><br><span class=\"line\">Customer.afterRemote(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx, user, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ctx.result) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(ctx.result)) &#123;</span><br><span class=\"line\">      ctx.result.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> result.password;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> ctx.result.password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>A safer means of effectively white-listing the fields to be returned by copying the values into new objects(<em>译注:这句翻译不好,保留原文</em>):</p>\n<p><strong>common/models/account.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> WHITE_LIST_FIELDS = [<span class=\"string\">'account_id'</span>, <span class=\"string\">'account_name'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">Account.afterRemote(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, modelInstance, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.result) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(modelInstance)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> answer = [];</span><br><span class=\"line\">      ctx.result.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> replacement =&#123;&#125;;</span><br><span class=\"line\">        WHITE_LIST_FIELDS.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">field</span>) </span>&#123;</span><br><span class=\"line\">          replacement[field] = result[field];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        answer.push(replacement);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> answer =&#123;&#125;;</span><br><span class=\"line\">      WHITE_LIST_FIELDS.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">field</span>) </span>&#123;</span><br><span class=\"line\">        answer[field] = ctx.result[field];</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.result = answer;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>afterRemoteError的例子</strong></p>\n<p>当实例方法speak()失败时执行附加操作:</p>\n<p><strong>common/models/dog.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.afterRemoteError(<span class=\"string\">'prototype.speak'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Cannot speak!'</span>, ctx.error);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>将额外的元数据附加到error对象:</p>\n<p><strong>common/models/dog.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.afterRemoteError(<span class=\"string\">'**'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ctx.error.details) ctx.result.details = &#123;&#125;;</span><br><span class=\"line\">  ctx.error.details.info = <span class=\"string\">'intercepted by a hook'</span>;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>向调用者报告不同的error:</p>\n<p><strong>common/models/dog.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.afterRemoteError(<span class=\"string\">'prototype.speak'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(ctx.error);</span><br><span class=\"line\">  next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'See server console log for details.'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上下文对象-Context-object\"><a href=\"#上下文对象-Context-object\" class=\"headerlink\" title=\"上下文对象(Context object)\"></a>上下文对象(Context object)</h5><p>远程钩子提供了一个包含传输特定数据(例如HTTP的req和res)的Context<code>ctx</code>对象.<code>ctx</code>对象还具有跨传输的一组一致的API.</p>\n<p>应用程序使用loopback.rest()中间件来提供以下额外的ctx属性:</p>\n<ul>\n<li><p><code>ctx.req</code>:Express Request对象.</p>\n</li>\n<li><p><code>ctx.result</code>:Express Response对象.</p>\n</li>\n</ul>\n<p>传递给afterRemoteError()钩子的上下文对象具有一个附加属性<code>ctx.error</code>,设置为由远程方法报告的错误.</p>\n<p>其他属性：</p>\n<ul>\n<li><p><code>ctx.args</code> - 是指包含HTTP请求参数定义的对象,可以使用arg定义从请求中查找值.这些是远程方法的输入值.</p>\n</li>\n<li><p><code>ctx.result</code> - An object keyed by the argument names. Exception: If the root property is true, then it’s the value of the argument that has root set to true(<em>译注:这句暂时保留原文,等做完实验再说</em>).</p>\n</li>\n</ul>\n<p><strong>ctx.req.accessToken</strong></p>\n<p>调用远程方法的用户的<code>accessToken</code>.</p>\n<blockquote>\n<p> 重要: 如果远程方法未由登录用户(或其他主体)调用,则ctx.req.accessToken未定义.</p>\n</blockquote>\n<p><strong>ctx.result</strong></p>\n<p>在<code>afterRemote</code>钩子期间,<code>ctx.result</code>将包含要发送到客户端的数据.所以,可以修改此对象以在发送数据之前对其进行转换.</p>\n<blockquote>\n<p> 重要: ctx.result的值可能不会始终可用</p>\n</blockquote>\n<p>如果远程方法显式的指定了返回值,那么只有<code>ctx.result</code>才会被设置.因此,您的远程方法必须执行以下操作:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.remoteMethod(<span class=\"string\">'doSomething'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  returns: &#123;<span class=\"attr\">arg</span>: <span class=\"string\">'redirectUrl'</span>, <span class=\"attr\">type</span>: <span class=\"string\">'string'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5.2.3\"> 5.2.3 Operation hooks(操作钩子) </h4>\n\n<blockquote>\n<p> 概要:操作钩子由执行特定高级创建,读取,更新或删除操作的所有方法触发.在LoopBack版本3.0中对操作钩子进行了大量更改.</p>\n</blockquote>\n<h5 id=\"概述-20\"><a href=\"#概述-20\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>Operation hooks不与特定方法绑定,而是被执行特定高级创建,读取,更新或删除操作的所有方法触发. 使用操作钩子使您能够拦截修改数据的操作,而与调用它们的特定方法无关(例如,<code>create</code>,<code>save</code>或<code>updateOrCreate</code>).</p>\n<p>API很简单：使用<code>Model.observe(_name_，_observer_)</code>,其中name是操作钩子的字符串名称,例如”before save”,observer是<code>function observer(context, callback)</code>.子模型继承observers(观察者),您可以为一个钩子注册多个observers(观察者).</p>\n<p>下表总结了PersistedModel创建,检索,更新和删除方法调用的操作钩子.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>\n        <p>Method&nbsp;→<br>&nbsp;</p>\n        <p>Operation hook ↓</p>\n      </th>\n      <th>find<br>findOne<br>findById</th>\n      <th>exists</th>\n      <th>count</th>\n      <th>create</th>\n      <th>upsert</th>\n      <th>findOrCreate</th>\n      <th>deleteAll<br>deleteById </th>\n      <th>updateAll</th>\n      <th>prototype<br>.save</th>\n      <th>prototype<br>.delete</th>\n      <th>prototype<br>.updateAttributes</th>\n      <th>\n        prototype<br>.replaceAttributes\n      </th>\n      <th>replaceById</th>\n      <th>replaceOrCreate</th>\n      <th>upsertWithWhere</th>\n    </tr>\n    <tr>\n      <th>access</th>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>before save</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>after save</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>before delete</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <th>after delete</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <th>loaded</th>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n    <tr>\n      <th>persist</th>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>&nbsp;</td>\n      <td style=\"text-align: center;\">X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>Operation hook上下文对象</strong></p>\n<p>上下文对象特定于操作钩子,并且与传递到通过Model.beforeRemote和Model.afterRemote注册的远程钩子的上下文对象没有任何关系.请注意，上下文对象与loopback.getCurrentContext()提供的”当前上下文”无关.</p>\n<p><strong>所有钩子和操作的公共属性</strong></p>\n<p>目标模型</p>\n<p>属性<code>context.Model</code>设置为作为操作目标的模型的构造函数.例如<code>Product.find()</code>设置<code>context.Model = Product</code>.</p>\n<p>操作选项</p>\n<p>上下文对象有一个options属性,它允许钩子访问由特定模型方法(操作)的调用者提供的任何选项.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> FILTERED_PROPERTIES = [<span class=\"string\">'immutable'</span>, <span class=\"string\">'birthday'</span>];</span><br><span class=\"line\">MyModel.observe(<span class=\"string\">'before save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterProperties</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.options &amp;&amp; ctx.options.skipPropertyFilter) <span class=\"keyword\">return</span> next();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    FILTERED_PROPERTIES.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">      ctx.instance.unsetAttribute(p);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    FILTERED_PROPERTIES.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">p</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> ctx.data[p];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// immutable is not updated</span></span><br><span class=\"line\">MyModel.updateOrCreate(&#123;</span><br><span class=\"line\">  id: <span class=\"number\">1</span>,</span><br><span class=\"line\">  immutable: <span class=\"string\">'new value'</span></span><br><span class=\"line\">&#125;, cb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// immutable is changed</span></span><br><span class=\"line\">MyModel.updateOrCreate(&#123;</span><br><span class=\"line\">  id: <span class=\"number\">2</span>,</span><br><span class=\"line\">  immutable: <span class=\"string\">'new value'</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  skipPropertyFilter: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;, cb);</span><br></pre></td></tr></table></figure>\n\n<p><strong>共享hookState属性</strong></p>\n<p>单个操作调用的所有钩子都保存<code>ctx.hookState</code>属性.</p>\n<p>例如,对于<code>Model.create()</code>调用的“access”, “before save”和“after save”都在<code>ctx.hookState</code>中传递的相同对象.</p>\n<p>这样钩子可以在”before”和”after”钩子之间传递状态日期.</p>\n<p><strong>钩子和操作的具体属性</strong></p>\n<p>除了上面列出的公共属性,每个钩子都提供了附加属性来标识受操作和变化影响的模型实例.一般规则是上下文提供<code>instance</code>属性或一对<code>data</code>和<code>where</code>属性.</p>\n<p><strong>instance</strong></p>\n<p>当操作影响单个实例并执行所有模型属性的完全update/create/delete(例如<code>PersistedModel.create()</code>)时,将提供此属性.</p>\n<p><strong>where + data</strong></p>\n<p>当操作影响多个实例(例如<code>PersistedModel.updateAll()</code>)或执行模型属性子集的部分更新(例如<code>PersistedModel.prototype.updateAttributes()</code>）时,上下文提供了一个where过滤器用于查找受影响的记录和包含要进行的更改的plain<code>data</code>对象.</p>\n<p><strong>isNewInstance</strong></p>\n<p>一些操作提供用于区分CREATE操作和UPDATE操作的标志.有关详细信息请参阅单个钩子的文档.</p>\n<blockquote>\n<p> 重要: 只有某些连接器支持ctx.isNewInstance.其他连接器则是未定义的.请参阅检查ctx.isNewInstance的支持(<em>译注:官方文档上此处给的链接打不开</em>).</p>\n</blockquote>\n<p><strong>currentInstance</strong></p>\n<p>此属性由执行单个实例的部分更改的钩子提供.它包含受影响的模型实例,您应该将值视为只读(不可变).</p>\n<p><strong>检查ctx.isNewInstance的支持情况</strong></p>\n<p><code>ctx.isNewInstance</code>的初始实现仅包括对内存,MongoDB和MySQL连接器的支持.您可以通过测试“after save”返回的值来检查连接器是否支持此功能.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'after save'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'supports isNewInstance?'</span>, ctx.isNewInstance !== <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// It's important to provide a value for the id property</span></span><br><span class=\"line\"><span class=\"comment\">// Include also values for any required properties</span></span><br><span class=\"line\">MyModel.updateOrCreate(&#123;</span><br><span class=\"line\">  id: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;, <span class=\"built_in\">console</span>.log);</span><br></pre></td></tr></table></figure>\n\n<p><strong>访问受影响的实例</strong></p>\n<p>仅影响单个实例的操作(所有创建,检索,更新和删除操作,除了<code>PersistedModel.deleteAll</code>和<code>PersistedModel.updateAll</code>）通常在上下文对象中提供受影响的实例.但是,根据操作,此实例可以是可修改的<code>ctx.instance</code>或只读的<code>ctx.currentInstance</code>:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>&nbsp;</th>\n      <th>before save</th>\n      <th>persist</th>\n      <th>after save</th>\n      <th>before delete</th>\n      <th>after delete</th>\n    </tr>\n    <tr>\n      <td><code>create</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>findOrCreate</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>updateOrCreate</code></td>\n      <td><em>n/a*</em></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>upsertWithWhere</code></td>\n      <td><em>n/a*</em></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>updateAll</code></td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>prototype.save</code></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td><code>prototype.updateAttributes</code></td>\n      <td><code><span>ctx.currentInstance</span></code></td>\n      <td><code><span>ctx.currentInstance</span></code></td>\n      <td><code><span>ctx.instance</span></code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n    </tr>\n    <tr>\n      <td>\n        <p><code>prototype.delete</code></p>\n      </td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td><code><span>ctx.where.id</span></code></td>\n      <td><code><span>ctx.where.id</span></code></td>\n    </tr>\n    <tr>\n      <td><code>deleteAll</code></td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td style=\"text-align: center;\">---</td>\n      <td><em>n/a</em></td>\n      <td><em>n/a</em></td>\n    </tr>\n    <tr>\n      <td><span>replaceOrCreate</span></td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td>---</td>\n      <td>---</td>\n    </tr>\n    <tr>\n      <td>\n        <p><span>prototype.replaceAttributes/</span></p>\n        <p><span>replaceById</span></p>\n      </td>\n      <td><code>ctx.instance</code></td>\n      <td><code>ctx.currentInstance</code></td>\n      <td><code>ctx.instance</code></td>\n      <td>---</td>\n      <td>---</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>(*)操作<code>updateOrCreate</code>和<code>upsertWithWhered</code>在“before save”钩子中不提供任何实例.因为我们不能预先告诉操作是否会导致UPDATE或CREATE,我们不能确定是否有任何存在的”currentInstance”受操作影响.</p>\n<p>有关详细信息,请参阅以下部分.</p>\n<h5 id=\"Hooks-钩子\"><a href=\"#Hooks-钩子\" class=\"headerlink\" title=\"Hooks(钩子)\"></a>Hooks(钩子)</h5><p>LoopBack提供如下这些操作钩子:</p>\n<ul>\n<li>access</li>\n<li>before save</li>\n<li>after save</li>\n<li>before delete</li>\n<li>after delete</li>\n<li>loaded</li>\n<li>persist</li>\n</ul>\n<p>下表列出了PersistedModel方法调用的钩子:</p>\n<table>\n  <tbody>\n    <tr>\n      <th width=\"160\">Method name</th>\n      <th>Hooks invoked</th>\n    </tr>\n    <tr>\n      <td>\n        <p>all<br>find<br>findOne <br>findById  <br>exists<br>count </p>\n      </td>\n      <td>access, loaded</td>\n    </tr>\n    <tr>\n      <td>create</td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>upsert (aka updateOrCreate)</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>upsertWithWhere</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>findOrCreate</td>\n      <td>access, before save*, after save*, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>deleteAll (destroyAll)<br>deleteById (destroyById)</td>\n      <td>access, before delete, after delete</td>\n    </tr>\n    <tr>\n      <td>updateAll</td>\n      <td>access, before save, after save, persist</td>\n    </tr>\n    <tr>\n      <td>prototype.save</td>\n      <td>before save, after save, persist, loaded</td>\n    </tr>\n    <tr>\n      <td>prototype.delete</td>\n      <td>before delete, after delete</td>\n    </tr>\n    <tr>\n      <td>prototype.<br>updateAttributes</td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>replaceOrCreate</td>\n      <td>access, before save, after save, loaded, persist</td>\n    </tr>\n    <tr>\n      <td>prototype.<br>replaceAttributes\n        <br>replaceById<\n      </td>\n      <td>before save, after save, loaded, persist</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>(*)当<code>findOrCreate</code>找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发<code>before save</code>钩子,即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.</p>\n<p><strong>access</strong></p>\n<p>每当为模型查询数据库时,即调用PersistedModel的任何create,retrieve,update和delete方法时,都会触发<code>access</code>钩子. Observers(观察者)可以修改查询,例如添加额外的限制.</p>\n<blockquote>\n<p> 注意:原型方法不会触发access钩子,因为钩子已经被从数据库加载模型实例的方法触发了.例如,当您通过REST API调用原型方法时,会进行两个模型调用:static findById()(触发”access”钩子),然后根据请求创建原型方法.</p>\n</blockquote>\n<p>上下文属性</p>\n<ul>\n<li><code>model</code> - 将被查询的模型的构造函数</li>\n<li><code>query</code> - 包含字段的查询,<code>where</code>,<code>include</code>,<code>order</code>等等.</li>\n</ul>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'access'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logQuery</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing %s matching %s'</span>, ctx.Model.modelName, ctx.query.where);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.observe(<span class=\"string\">'access'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">limitToTenant</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  ctx.query.where.tenantId = loopback.getCurrentContext().tenantId;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>before save</strong></p>\n<p>在修改(创建,更新)模型实例之前触发<code>before save</code>钩子,特别是当调用PersistedModel的以下方法时:</p>\n<ul>\n<li>create()</li>\n<li>upsert()</li>\n<li>upsertWithWhere()</li>\n<li>findOrCreate()*</li>\n<li>updateAll()</li>\n<li>prototype.save()</li>\n<li>prototype.updateAttributes()</li>\n<li>replaceOrCreate()</li>\n<li>prototype.replaceById() / replaceAttributes()</li>\n</ul>\n<p>(*)当<code>findOrCreate</code>找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发<code>before save</code>钩子,即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.</p>\n<p>钩子在调用模型验证函数之前触发.</p>\n<p>由于在调用验证器之前触发<code>before save</code>钩子,因此可以使用它来确保空值或使用缺省值填充缺少值.</p>\n<p>根据触发此钩子的方法,上下文将具有以下属性集之一:</p>\n<ul>\n<li><p>完全保存单个模型</p>\n<ul>\n<li><code>Model</code> - 将被保存的模型的构造函数</li>\n<li><code>instance</code> - 要保存的模型实例,该值是Model类的一个实例.</li>\n</ul>\n</li>\n<li><p>多个模型的部分更新</p>\n<ul>\n<li><code>Model</code> - 将被保存的模型的构造函数</li>\n<li><code>where</code> - where过滤器描述将影响哪些实例</li>\n<li><code>data</code> - 更新期间应用的（部分）数据</li>\n<li><code>currentInstance</code> - 受影响的实例,请参见下面的prototype.updateAttributes触发.</li>\n</ul>\n</li>\n</ul>\n<p><strong><em>ctx.isNewInstance</em></strong></p>\n<p>在设置ctx.instance时,<code>before save</code>钩子提供<code>ctx.isNewInstance</code>属性,并具有以下值:</p>\n<ul>\n<li>所有CREATE操作均为真</li>\n<li>所有UPDATE和REPLACE操作均为False</li>\n<li>updateOrCreate,upsertWithWhere,replaceOrCreate,prototype.save,prototype.updateAttributes和updateAll操作的值都是Undefined(未定义).</li>\n</ul>\n<p><strong><em>嵌入关系(Embedded relations)</em></strong></p>\n<p>您可以为嵌入在另一个模型中的模型定义<code>before save</code>钩子.然后,更新或创建包含模型的实例将触发嵌入模型上的操作钩子.发生这种情况时,<code>ctx.isNewInstance</code>为false,因为只创建容器模型的新实例.</p>\n<p>例如,如果<code>Customer embedsOne Address</code>,并且您在地址模型上定义了一个<code>before save</code>钩子,则创建一个新的Customer实例将触发操作钩子.</p>\n<p><strong><em>在before save钩子中操作模型数据</em></strong></p>\n<p>如上所述,上下文提供<code>instance</code>属性或一对<code>data</code>以及<code>where</code>属性.在<code>ctx.instance</code>中公开一个完整的模型实例允许钩子调用自定义模型的实例方法(例如,当地址等订单数据改变时,钩子可以调用<code>order.recalculateShippingAndTaxes()</code>）.这就是为什么LoopBack创建,检索,更新和删除操作会提供实例(如果可能).</p>\n<p>当提供实例对象不可行时.有两个异常值得注意:</p>\n<ol>\n<li><p><code>PersistedModel.updateAll</code>更新与提供的查询匹配的多个实例.LoopBack甚至不从数据库加载它们的数据,它是由数据库来查找这些实例并应用必要的更改.</p>\n</li>\n<li><p><code>PersistedModel.updateAttributes</code>执行部分更新，只修改模型属性的子集.虽然LoopBack具有可用的模型实例,但它还需要知道应该在数据库中更改哪些模型属性.在<code>ctx.data</code>中传递操作有效内容 - 一个仅包含应该修改的属性的纯对象 - 使钩子实现可以轻松地添加/删除要修改的属性.您仍然可以通过<code>ctx.currentInstance</code>访问要修改的模型实例,只要将其视为不可变(只读)即可.</p>\n</li>\n</ol>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'before save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateTimestamp</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    ctx.instance.updated = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ctx.data.updated = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.observe(<span class=\"string\">'before save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computePercentage</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    ctx.instance.percentage = <span class=\"number\">100</span> * ctx.instance.part / ctx.instance.total;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ctx.data.part &amp;&amp; ctx.data.total) &#123;</span><br><span class=\"line\">    ctx.data.percentage = <span class=\"number\">100</span> * ctx.data.part / ctx.data.total;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ctx.data.part || ctx.data.total) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// either report an error or fetch the missing properties from DB</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>移除不需要的属性</em></strong></p>\n<p>要删除(取消设置)模型实例中的属性,将其值设置为undefined或删除属性是不够的.必须调用<code>unsetAttribute(name)</code>. 但是,不要忘记处理上下文具有数据属性的情况!由于数据对象是普通对象,因此可以通过delete操作符以常规方式删除属性.</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'before save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeUnwantedField</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    ctx.instance.unsetAttribute(<span class=\"string\">'unwantedField'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ctx.data.unwantedField;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这将完全删除字段,并防止将伪数据插入数据库.</p>\n<p><strong>after save</strong></p>\n<p>在模型更改成功地保持到数据源之后调用<code>after save</code>钩子,特别是当调用PersistedModel的以下方法时:</p>\n<ul>\n<li>create()</li>\n<li>upsert()</li>\n<li>upsertWithWhere()</li>\n<li>findOrCreate()*</li>\n<li>updateAll()</li>\n<li>prototype.save()</li>\n<li>prototype.updateAttributes()</li>\n<li>prototye.replaceAttributes() / replaceById()</li>\n<li>replaceOrCreate()</li>\n</ul>\n<p>(*)当<code>findOrCreate</code>找到现有模型时,不会触发save钩子.然而,提供原子实现的连接器可能触发<code>before save</code>钩子(<em>译注:这里原文是不是有问题?应该是after save吧</em>),即使在没有创建模型时也是如此,因为它们不能预先确定是否将创建模型.</p>\n<p>根据触发此钩子的方法,上下文将具有以下属性集之一:</p>\n<ul>\n<li><p>单个模型被更新：</p>\n<ul>\n<li><p><code>Model</code> - 将被保存的模型的构造函数.</p>\n</li>\n<li><p><code>instance</code> - 保存的模型实例.该值是Model类的实例,并包含由数据存储计算的更新值(例如,自动生成的ID).</p>\n<blockquote>\n<p>注意： after save钩子将对ctx.instance的更改返回给调用者(REST客户端),但不会将它们持久保存到数据库!</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>通过<code>Model.updateAll</code>对更多模型实例进行部分更新：</p>\n<ul>\n<li><p><code>Model</code> - 将被保存的模型的构造函数.</p>\n</li>\n<li><p><code>where</code> - where过滤器描述查询哪些实例.请参阅下面的警告.</p>\n</li>\n<li><p>‘data` - 在更新期间应用的(部分)数据.</p>\n<blockquote>\n<p> 注意：您不能可靠地使用”after save”的”where”查询来查找受影响的模型.考虑下面的调用:</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.updateAll(&#123; <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;, &#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;, cb);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>此时,&quot;after save&quot;钩子是运行的,但是没有记录会匹配这个查询条件{ color: &apos;yellow&apos; }.</code></pre><p><code>after save</code>在设置<code>ctx.instance</code>时提供<code>ctx.isNewInstance</code>属性,并具有以下值:</p>\n<ul>\n<li>所有CREATE操作后为true.</li>\n<li>所有UPDATE/REPLACE操作后为False.</li>\n<li><code>updateOrCreate</code>,<code>prototype.save</code>和<code>prototype.updateAttributes</code>需要连接器来报告是创建了新实例还是更新了现有实例.当连接器提供此信息时,<code>ctx.isNewInstance</code>为True或False. 当连接器不支持此功能(见下文)时,该值为undefined.</li>\n</ul>\n<blockquote>\n<p> 重要:只有某些连接器支持ctx.isNewInstace.其他连接器是未定义的.请参阅检查ctx.isNewInstance的支持.</p>\n</blockquote>\n<p><strong><em>Embedded relations(嵌入关系)</em></strong></p>\n<p>您可以为嵌入在另一个模型中的模型定义<code>after save</code>钩子.然后,更新或创建包含模型的实例将触发嵌入模型上的操作钩子.发生这种情况时,<code>ctx.isNewInstance为false</code>,因为只创建容器模型的新实例.</p>\n<p>例如,如果<code>Customer embedsOne Address</code>,并且您在地址模型上定义了一个<code>after save</code>钩子,则创建一个新的Customer实例将触发操作钩子.</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'after save'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.instance) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Saved %s#%s'</span>, ctx.Model.modelName, ctx.instance.id);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Updated %s matching %j'</span>,</span><br><span class=\"line\">      ctx.Model.pluralModelName,</span><br><span class=\"line\">      ctx.where);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>before delete</strong></p>\n<p>在从数据源中删除模型之前触发<code>before delete</code>钩子,特别是当调用PersistedModel的以下方法时:</p>\n<ul>\n<li><code>destroyAll()</code> (same as <code>deleteAll()</code>)</li>\n<li><code>destroyById()</code>(same as <code>deleteById()</code>)</li>\n<li><code>prototype.destroy()</code> (same as <code>prototype.delete()</code>)</li>\n</ul>\n<blockquote>\n<p> 重要: <code>before delete</code>钩子不接收删除的模型实例ID的列表,因为后端数据存储器(例如关系数据库或NoSQL数据库)不提供此信息.但是,当删除单个模型实例时,钩子接收包含要删除的实例的id的ctx.where.</p>\n</blockquote>\n<p><em>Context properties(上下文属性)</em></p>\n<ul>\n<li><code>Model</code> - 将被查询的模型的构造函数</li>\n<li><code>where</code> - where过滤器描述将删除哪些实例</li>\n</ul>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'before delete'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Going to delete %s matching %j'</span>,</span><br><span class=\"line\">    ctx.Model.pluralModelName,</span><br><span class=\"line\">    ctx.where);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要拒绝基于某些条件删除模型,请调用带有错误的next()以中止删除操作.</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (subscriptions.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//Stop the deletion of this Client</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Client has an active subscription, cannot delete\"</span>);</span><br><span class=\"line\">  err.statusCode = <span class=\"number\">400</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err.toString());</span><br><span class=\"line\">  next(err);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>after delete</strong></p>\n<blockquote>\n<p> 重要:<code>after delete</code>钩子不接收已删除模型实例ID的列表,因为后端数据存储(如关系数据库或NoSQL数据库)不提供此信息.但是,当删除单个模型实例时,钩子接收包含要删除的实例的id的ctx.where.</p>\n</blockquote>\n<p>在从数据源中删除一些模型之后触发<code>after delete</code>钩子,特别是当调用PersistedModel的以下方法时:</p>\n<ul>\n<li><code>destroyAll()</code> (same as <code>deleteAll()</code>)</li>\n<li><code>destroyById()</code>(same as <code>deleteById()</code>)</li>\n<li><code>prototype.destroy()</code> (same as <code>prototype.delete()</code>)</li>\n</ul>\n<p><em>Context properties(上下文属性)</em></p>\n<ul>\n<li><code>Model</code> - 将被查询的模型的构造函数</li>\n<li><code>where</code> - where过滤器描述哪些实例被删除</li>\n</ul>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.observe(<span class=\"string\">'after delete'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Deleted %s matching %j'</span>,</span><br><span class=\"line\">    ctx.Model.pluralModelName,</span><br><span class=\"line\">    ctx.where);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>loaded</strong></p>\n<p>这个钩子由PersistedModel的以下方法触发:</p>\n<ul>\n<li>find()</li>\n<li>findOne()</li>\n<li>findById()</li>\n<li>exists()</li>\n<li>count()</li>\n<li>create()</li>\n<li>upsert() (same as updateOrCreate())</li>\n<li>upsertWithWhere()</li>\n<li>findOrCreate()*</li>\n<li>prototype.save()</li>\n<li>prototype.updateAttributes()</li>\n<li>replaceOrCreate()</li>\n<li>prototype.replaceAttributes() / replaceById()</li>\n</ul>\n<blockquote>\n<p> 重要:默认情况下,create和updateAttributes不会将数据库更新应用于返回到回调的模型实例,因此”loaded”挂钩所做的任何更改都将被丢弃.要更改此行为,请设置每个模型选项updateOnLoad：true.</p>\n</blockquote>\n<p>LoopBack在连接器获取数据之后,在从该数据创建模型实例之前调用此钩子.这使钩子能够解密数据.注意:此钩子使用原始数据库数据调用,而不是完整的模型实例.</p>\n<p><em>Context properties(上下文属性)</em></p>\n<ul>\n<li><code>data</code> - 连接器返回的数据(从数据库加载)</li>\n</ul>\n<p><strong>persist</strong></p>\n<p>此钩子由将数据保存到数据源的操作触发,具体来说,是PersistedModel的以下方法:</p>\n<ul>\n<li>create()</li>\n<li>upsert() (same as updateOrCreate())</li>\n<li>upsertWithWhere()</li>\n<li>findOrCreate()*</li>\n<li>prototype.save()</li>\n<li>prototype.updateAttributes()</li>\n<li>updateAll()</li>\n<li>replaceOrCreate()</li>\n<li>prototype.replaceAttributes() / replaceById()</li>\n</ul>\n<p>不要将此钩子与”before save”钩子混淆:</p>\n<ul>\n<li><p><strong>before save</strong> - 使用此钩子观察(并操作)将要保存的模型实例(例如,设置国家代码并且国家名称未填写时,填写国家/地区名称).</p>\n</li>\n<li><p><strong>persist</strong> - 使用此钩子在数据被持久化到数据源(例如,加密数据库中的值)之前观察(和操作)数据.</p>\n</li>\n</ul>\n<p>在<code>create</code>期间通过persist钩子将应用的更新反映到数据库中,但是相同的更新不会反映在create回调里获得的实例对象中.</p>\n<p>其次,对于实现原子<code>findOrCreate</code>的连接器,每次都会创建对象的新实例,即使稍后在数据库中找到现有记录也是如此.所以:</p>\n<ul>\n<li>ctx.data.id和ctx.currentInstance.id都设置为新ID.</li>\n<li>ctx.isNewInstance为true</li>\n</ul>\n<p><em>上下文属性(Context properties)</em></p>\n<ul>\n<li><code>data</code> - 将发送到连接器的数据保存到数据库</li>\n<li><code>currentInstance</code> - 受影响的模型实例</li>\n<li><code>isNewInstance</code> - 见下文</li>\n</ul>\n<p>对于这个钩子来说,<code>ctx.isNewInstance</code>是:</p>\n<ul>\n<li>True for all CREATE operations</li>\n<li>False for all UPDATE operations</li>\n<li>Undefined for updateOrCreate, , upsertWithWhere, replaceOrCreate, prototype.save, prototype.updateAttributes, and updateAll operations.</li>\n</ul>\n<p><strong>afterInitialize hook</strong></p>\n<blockquote>\n<p> 重要:afterInitialize不是严格的操作钩子,它实际上是唯一没有被弃用的模型钩子.<br>它是一个同步方法,没有回调函数,在钩子中执行逻辑后,不需要调用next().</p>\n</blockquote>\n<p>在模型初始化后调用此钩子.例如:</p>\n<p><strong>/common/models/coffee-shop.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">CoffeeShop.afterInitialize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//your logic goes here</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>大多数操作需要在实际执行操作之前初始化模型,但是有一些情况下不会触发initialize事件,例如对exists,count或批量更新REST端点的HTTP请求.</p>\n<hr>\n<h4 id=\"5.2.4\"> 5.2.4 Connector hooks(连接器钩子) </h4>\n\n<blockquote>\n<p> 概要:连接器钩子由连接器操作触发</p>\n</blockquote>\n<h5 id=\"概述-21\"><a href=\"#概述-21\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>连接器负责在模型方法上与后端系统交互,连接器钩子使应用程序能够拦截连接器执行.</p>\n<h5 id=\"Hooks-钩子-1\"><a href=\"#Hooks-钩子-1\" class=\"headerlink\" title=\"Hooks(钩子)\"></a>Hooks(钩子)</h5><p><strong>before execute</strong></p>\n<p>在连接器向后端发送请求之前,调用”before execute”钩子.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connector = MyModel.getDataSource().connector;</span><br><span class=\"line\">connector.observe(<span class=\"string\">'before execute'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>要终止调用,请调用<code>ctx.end(err, result)</code>,例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connector = MyModel.getDataSource().connector;</span><br><span class=\"line\">connector.observe(<span class=\"string\">'before execute'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ctx.end(<span class=\"literal\">null</span>, cachedResponse);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>after execute</strong></p>\n<p>在连接器从后端接收到响应之后,调用”after execute”钩子.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connector.observe(<span class=\"string\">'after execute'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Context-上下文\"><a href=\"#Context-上下文\" class=\"headerlink\" title=\"Context(上下文)\"></a>Context(上下文)</h5><p>上下文对象包含要操作的钩子的信息.它根据连接器的类型而变化.</p>\n<p><em>SQL based connectors (MySQL, PostgreSQL, SQL Server, Oracle)</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before: &#123;req: &#123;sql: 'SELECT ...', params: [1, 2]&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after: &#123;req: &#123;sql: 'SELECT ...', params: [1, 2]&#125;, res: ..., end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>MongoDB connector</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before: &#123;req: &#123;command: ..., params: ...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after: &#123;req: &#123;...&#125;, res: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>req.command is the command for the mongodb collection.<br>req.params is the parameters passing to the mongodb driver.<br>res is the object received from the mongodb driver.</p>\n<p><em>REST connector</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before: &#123;req: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after: &#123;req: &#123;...&#125;, res: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>req is the object passing to request module.<br>res is the object received from request module.</p>\n<p><em>SOAP connector</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before: &#123;req: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">after: &#123;req: &#123;...&#125;, res: &#123;...&#125;, end: ...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>req is the object passing to request module.<br>res is the object received from request module.</p>\n<hr>\n<h4 id=\"5.3\"> 5.3 定义引导脚本 </h4>\n\n<h5 id=\"概述-22\"><a href=\"#概述-22\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack引导程序,<code>loopback-boot</code>执行应用程序初始化(也称为引导).当应用程序启动时,引导程序:</p>\n<ul>\n<li>配置数据源.</li>\n<li>定义自定义模型.</li>\n<li>配置模型并将模型附加到数据源.</li>\n<li>配置应用程序设置.</li>\n<li>运行/server/boot目录中的引导脚本.</li>\n</ul>\n<p>loopback-boot模块导出一个初始化应用程序的<code>boot()</code>函数.例如,从标准的scaffolded server.js脚本:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> boot = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-boot'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">module</span>.exports = loopback();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">boot(app, __dirname, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"comment\">// start the server if `$ node server.js`</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">require</span>.main === <span class=\"built_in\">module</span>)</span><br><span class=\"line\">    app.start();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 注意:如果您使用应用程序生成器创建应用程序,那么您不需要执行任何操作来引导应用程序 - 上述代码会自动为您架设脚本.</p>\n</blockquote>\n<p><strong>使用引导脚本</strong></p>\n<p>除了由LoopBack引导程序执行的操作之外,还可以使用引导脚本执行自定义初始化.当应用程序启动时,LoopBack加载<code>server/boot</code>目录中的所有脚本.默认情况下,LoopBack按字母顺序加载启动脚本. 您可以使用boot()的options参数自定义引导脚本加载顺序.有关详细信息,请参阅引导脚本加载顺序.</p>\n<h5 id=\"预定义的引导脚本\"><a href=\"#预定义的引导脚本\" class=\"headerlink\" title=\"预定义的引导脚本\"></a>预定义的引导脚本</h5><p>应用程序生成器将创建以下引导脚本:</p>\n<ul>\n<li><code>/server/boot/root.js</code>在根端点(“/“)绑定loopback.status()中间件以提供基本状态信息.</li>\n<li><code>/server/boot/authentication.js</code> - 通过调用app.enableAuth()为应用程序启用身份验证.</li>\n</ul>\n<p><strong>API连接</strong></p>\n<p>API Connect LoopBack生成器不会创建启用身份验证的authentication.js启动脚本.要启用用户模型身份验证,您必须自己添加此脚本.</p>\n<h5 id=\"使用boot-script-generator\"><a href=\"#使用boot-script-generator\" class=\"headerlink\" title=\"使用boot script generator\"></a>使用boot script generator</h5><p>除了预定义的引导脚本之外,还可以自定义引导脚本,以在应用程序启动时执行自己的逻辑.</p>\n<p>使用引导脚本生成器快速生成引导脚本模板.根据对生成器提示的响应方式,它将为同步或异步引导脚本生成模板:</p>\n<p><strong>Synchronous boot script template</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Asynchronous boot script template</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app, cb</span>) </span>&#123;</span><br><span class=\"line\">  process.nextTick(cb); <span class=\"comment\">// Remove if you pass `cb` to an async function yourself</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"同步和异步引导脚本\"><a href=\"#同步和异步引导脚本\" class=\"headerlink\" title=\"同步和异步引导脚本\"></a>同步和异步引导脚本</h5><p>LoopBack支持同步和异步引导脚本.使用的类型取决于任务的性质.对于不想阻止程序执行的任务(如数据库请求或网络操作),请使用异步启动脚本.</p>\n<p>两种类型的引导脚本都必须导出包含脚本操作的函数.对于两种类型的引导脚本,此函数的签名是类似的,但是异步引导脚本函数需要一个额外的回调参数.</p>\n<p><strong>Bootstrap function arguments</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app, [callback]</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n  <tbody>\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Required</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>app</td>\n      <td>Object</td>\n      <td>Yes</td>\n      <td>\n        <p>The application context object. Provides a handle the the application, so (for example) you can get model objects:</p>\n        <pre>var User = app.models.User;</pre>\n      </td>\n    </tr>\n    <tr>\n      <td>callback</td>\n      <td>Function</td>\n      <td>Only for asynchronous boot scripts</td>\n      <td>Call the callback function when your application logic is done.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>异步引导脚本</strong></p>\n<p>异步引导脚本必须导出具有两个参数的函数:</p>\n<ul>\n<li>应用程序对象<code>app</code>.此对象使您能够访问系统定义的变量和配置.</li>\n<li>回调函数,使您能够根据应用程序逻辑来计算响应时间.</li>\n</ul>\n<blockquote>\n<p> 重要:当脚本完成时,必须调用回调函数将控制权传回应用程序.</p>\n</blockquote>\n<p>例如,此引导脚本打印”hello world”并在三秒(3000毫秒)后触发回调函数.</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app, callback</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello world'</span>);</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>同步引导脚本</strong></p>\n<p>同步启动脚本必须导出一个函数,它接受一个参数,应用程序对象<code>app</code>.此对象使您能够访问系统定义的变量和配置.</p>\n<p>例如,此引导脚本检索在应用程序中注册的所有模型的名称,并将它们显示到控制台.</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> modelNames = <span class=\"built_in\">Object</span>.keys(app.models);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> models = [];</span><br><span class=\"line\">  modelNames.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> modelName = app.models[m].modelName;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (models.indexOf(modelName) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      models.push(modelName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Models:'</span>, models);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"引导脚本加载顺序\"><a href=\"#引导脚本加载顺序\" class=\"headerlink\" title=\"引导脚本加载顺序\"></a>引导脚本加载顺序</h5><p>LoopBack按文件名的字母顺序执行启动脚本,因此指定启动脚本加载顺序的最简单方法是按照文件名.例如,您可以命名引导脚本01-your-first-script.js,02-your-second-script.js等.这确保LoopBack按照您想要的顺序加载脚本.例如在/server/boot中的默认引导脚本之前.</p>\n<blockquote>\n<p> 注意: LoopBack按字母顺序处理引导脚本,一次一个(不并行).这适用于同步和异步引导脚本</p>\n</blockquote>\n<p>您还可以在/server/server.js中为boot()函数调用指定加载顺序选项.替换默认的scaffolded函数调用:</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">boot(app, __dirname);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>With something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">bootOptions = &#123; <span class=\"string\">\"appRootDir\"</span>: __dirname, </span><br><span class=\"line\">                <span class=\"string\">\"bootScripts\"</span> : [ <span class=\"string\">\"/full/path/to/boot/script/first.js\"</span>, <span class=\"string\">\"//full/path/to/boot/script/second.js\"</span>, ... ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">boot(app, bootOptions);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>然后应用程序将按照bootScripts数组中指定的顺序执行脚本,指定每个脚本的完整目录路径.您还可以指定相对目录路径.</p>\n<blockquote>\n<p> 重要: 使用上面的技术,在bootScripts中指定的自定义引导脚本运行完之后,应用程序将仍然按照字母顺序运行/server/boot中的所有引导脚本(除非您移动或删除它们).</p>\n</blockquote>\n<p>如果需要,您还可以在<code>bootDirs</code>属性中指定一个或多个目录,应用程序将在<code>bootScripts</code>中指定的那些字符之后,然后在<code>/server/boot</code>目录中指定的字母顺序之前,在该目录中运行脚本.</p>\n<hr>\n<h4 id=\"5.4\"> 5.4 定义中间件 </h4>\n\n<h5 id=\"概述-23\"><a href=\"#概述-23\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>中间件是指向REST端点发出HTTP请求时执行的函数.由于LoopBack基于Express,所以LoopBack中间件与Express中间件相同.但是,LoopBack添加了中间件阶段的概念,以清楚地定义中间件被调用的顺序.使用阶段有助于避免标准Express中间件可能出现的顺序问题.</p>\n<p>LoopBack支持以下类型的中间件:</p>\n<ul>\n<li><strong>Pre-processing middleware</strong> - 自定义应用程序逻辑的预处理中间件.请参阅静态中间件的示例.</li>\n<li><strong>Dynamic request handling middleware</strong> - 动态请求处理中间件提供动态生成的响应,例如从模板呈现的HTML页面和对REST API请求的JSON响应.请参阅预处理中间件的示例.</li>\n<li><strong>Static middleware</strong> - 静态中间件用于提供静态客户端资源.请参阅静态中间件的示例.</li>\n<li><strong>Error-handling middleware</strong> - 错误处理中间件处理请求错误.请参见错误处理中间件的示例.</li>\n</ul>\n<p><strong>如何添加中间件</strong></p>\n<p>要向应用程序添加中间件:</p>\n<ol>\n<li><p>指定中间件功能:</p>\n<ul>\n<li>如果使用现有的函数或包,请将代码添加到应用程序或安装包.</li>\n<li>如果要创建新的中间件函数,请编一个.请参阅定义新的中间件处理程序函数.</li>\n</ul>\n</li>\n<li><p>注册中间件:</p>\n<ul>\n<li>编辑服务器/middleware.json.这是注册中间件的推荐方法.请参阅在middleware.json中注册中间件.</li>\n<li>或者,在应用程序代码中注册中间件.请参阅在JavaScript中注册中间件.</li>\n</ul>\n</li>\n</ol>\n<p><strong>中间件阶段</strong></p>\n<p>LoopBack定义了许多阶段,对应于应用程序执行的不同方面.注册中间件时,您可以指定应用程序调用它的阶段.请参阅在middleware.json中注册中间件和使用LoopBack API.如果您使用Express API注册中间件(或路由),则它会在路由阶段开始时执行.</p>\n<p>预定义的阶段是:</p>\n<ol>\n<li><code>initial</code> - 中间件可以运行的第一个点.</li>\n<li><code>session</code> - 准备会话对象.</li>\n<li><code>auth</code> - 处理身份验证和授权.</li>\n<li><code>parse</code> - 解析请求体.</li>\n<li><code>routes</code> - 实现应用程序逻辑的HTTP路由.通过Express API <code>app.use</code>,<code>app.route</code>,<code>app.get</code>(和其他HTTP动词)注册的中间件在此阶段开始运行.对于子应用程序(如loopback/server/middleware/rest或loopback-explorer)也使用此阶段.</li>\n<li><code>files</code> - 服务静态资源.</li>\n<li><code>final</code> - 处理错误和未知网址的请求.</li>\n</ol>\n<p>每个阶段除了主阶段之外还具有”before”和”after”子阶段,在阶段名称后面编码,以冒号分隔.例如,对于”initial”阶段,中间件按此顺序执行:</p>\n<ol>\n<li>initial:before </li>\n<li>initial</li>\n<li>initial:after</li>\n</ol>\n<p>单个子阶段中的中间件按注册顺序执行.但是,你不应该依赖这样的顺序.当顺序重要时,始终使用适当的阶段显式地订购中间件.</p>\n<h5 id=\"指定中间件函数\"><a href=\"#指定中间件函数\" class=\"headerlink\" title=\"指定中间件函数\"></a>指定中间件函数</h5><p><strong>使用Express中间件</strong></p>\n<p>您可以使用任何与Express兼容的中间件,请参阅Express文档以获取部分列表.</p>\n<p>只需安装:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save &lt;module-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后简单地注册它,使其根据需要被调用.请参阅在middleware.json中注册中间件和在JavaScript中注册中间件.</p>\n<p><strong>定义一个新的中间件处理函数</strong></p>\n<p>如果没有现有的中间件是你所需要的,你可以轻松地编写自己的中间件处理函数.要在middleware.json中注册中间件函数,需要创建一个返回中间件函数的构造函数(factory)函数.</p>\n<p>按照惯例,将中间件函数放在server/middleware目录中.</p>\n<p>中间件处理程序函数接受三个参数,或四个参数,如果它是错误处理中间件.一般形式是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myMiddlewareFunc</span>(<span class=\"params\">[err,] req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n  <tbody>\n    <tr>\n      <th width=\"60\">Name</th>\n      <th width=\"100\">Type</th>\n      <th>Optional?</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>err</td>\n      <td>Object</td>\n      <td>Required for error-handling middleware.</td>\n      <td>\n        <p>Use <em>only</em> for error-handling middleware.</p>\n        <p>Error object, usually an instance or <code>Error</code>; for more information, see <a href=\"Error-object.html\">Error object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>req</td>\n      <td>Object</td>\n      <td>No</td>\n      <td>\n        <p>The Express <a href=\"http://expressjs.com/4x/api.html#request\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">request object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>res</td>\n      <td>Object</td>\n      <td>No</td>\n      <td>\n        <p>The Express <a href=\"http://expressjs.com/4x/api.html#response\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">response object</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>next</td>\n      <td>Function</td>\n      <td>No</td>\n      <td>Call <code>next()</code> after your application logic runs to pass control to the next middleware handler.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>具有三个参数的中间件函数的示例,调用以在先前处理程序未报告错误时处理请求:</p>\n<p><strong>Regular middleware</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myMiddleware</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里是这个函数的构造函数(工厂)在middleware.json中注册时使用此表单.</p>\n<p><strong>Regular middleware</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myMiddleware</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>一个具有四个参数的中间件函数的示例,仅当遇到错误时调用.</p>\n<p><strong>Error handler middleware</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myErrorHandler</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>打包中间件函数</strong></p>\n<p>要跨多个项目共享中间件,请创建一个包,用于导出中间件构造函数(factory)函数,该函数接受配置选项并返回中间件处理函数,例如,如下所示.</p>\n<p>如果您使用应用程序生成器创建的现有项目,要实现可与其他项目共享的新中间件处理程序,请将中间件构造函数放在server/middleware目录中,例如server/middleware/myhandler.js.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customHandler</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// use options to control handler's behavior</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在middleware-json注册中间件\"><a href=\"#在middleware-json注册中间件\" class=\"headerlink\" title=\"在middleware.json注册中间件\"></a>在middleware.json注册中间件</h5><p>注册中间件的最简单的方法是在server/middleware.json中.此文件指定所有应用程序的中间件函数及其调用阶段.</p>\n<p>当使用应用程序生成器创建应用程序时,它会创建一个默认的middleware.json文件,如下所示:</p>\n<p><strong>server/middleware.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"initial:before\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loopback#favicon\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"initial\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"compression\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"session\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"auth\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"parse\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"routes\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"files\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"final\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loopback#urlNotFound\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"final:after\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"errorhandler\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>middleware.json中的每个顶级键定义了一个中间件阶段或子阶段,例如”initial”,”session:before”或”final”.阶段按照它们在文件中出现的顺序运行.</p>\n<p>每个阶段都是一个JSON对象,其中包含要在该阶段中调用的每个中间件函数的键.例如,”loopback/server/middleware/favicon”或”compression”.</p>\n<p>一般来说,每个阶段都有以下语法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phase[:sub-phase] : &#123;</span><br><span class=\"line\"> middlewarePath : &#123;</span><br><span class=\"line\">   [ enabled: [<span class=\"literal\">true</span> | <span class=\"literal\">false</span>] ]</span><br><span class=\"line\">   [, <span class=\"attr\">name</span>: nameString ]</span><br><span class=\"line\">   [, <span class=\"attr\">params</span> : paramSpec ]</span><br><span class=\"line\">   [, <span class=\"attr\">methods</span>: methodSpec ]</span><br><span class=\"line\">   [ paths : routeSpec ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中:</p>\n<ul>\n<li><em>phase</em>:是上面列出的预定义阶段之一(初始,会话,auth等)或自定义阶段,请参阅添加自定义阶段.</li>\n<li><em>sub-phase</em>:(可选)可以在<code>before</code>或<code>after</code>.</li>\n<li><em>name</em>:可选中间件名称.请参阅下面的中间件配置属性.</li>\n<li><em>middlewarePath</em>:中间件函数的路径.请参阅下面的中间件功能路径.</li>\n<li><em>paramSpec</em>:中间件参数的值,通常为JSON对象.请参阅下面的中间件配置属性.</li>\n<li><em>methodSpec</em>:HTTP方法,例如’GET’,’POST’和’PUT’.如果不存在,则适用于所有方法.</li>\n<li><em>routeSpec</em>:触发中间件的REST端点.</li>\n</ul>\n<p><strong>中间件函数的路径</strong></p>\n<p>通过以下方式指定中间件函数(middlewarePath)的路径:</p>\n<ul>\n<li>对于安装在项目中的外部中间件模块,只需使用模块的名称,例如<code>compression</code>.</li>\n<li>对于安装在项目中的模块中的脚本,请使用模块的路径,例如loopback/server/middleware/rest.</li>\n<li>对于具有自定义中间件函数的脚本,请使用相对于middleware.json的路径,例如<code>./middleware/custom</code>.</li>\n<li>脚本文件的绝对路径(不推荐).</li>\n</ul>\n<p>此外,您可以使用速记格式<code>{_module _}＃{_ fragment_}</code>,其中fragment是:</p>\n<ul>\n<li>由模块导出的属性,例如<code>loopback＃favicon</code>解析为<code>require(&#39;loopback&#39;).favicon</code>.</li>\n<li>模块的<code>server/middleware</code>目录中的文件,例如<code>require(&#39;loopback/server/middleware/ favicon&#39;)</code>.</li>\n<li>模块中间件目录中的文件,例如<code>require(&#39;loopback/middleware/favicon&#39;)</code>.</li>\n</ul>\n<p><strong>中间件配置属性</strong></p>\n<p>您可以在每个中间件部分指定以下属性.它们都是可选的:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n    <tr>\n      <td>name</td>\n      <td>String</td>\n      <td>An optional name for the entry. It can be used to identify an entry within the same phase/path for the purpose of merging</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>enabled</td>\n      <td>Boolean</td>\n      <td>\n        <p>Whether to register or enable the middleware. You can override this property in environment-specific files, for example to disable certain middleware when running in production. For more information, see <a href=\"Defining-middleware.html\">Environment-specific configuration</a></p>\n      </td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td>params</td>\n      <td>Object or Array</td>\n      <td>\n        <p>Parameters to pass to the middleware handler (constructor) function. Most middleware constructors take a single \"options\" object parameter; in that case the&nbsp;<code>params</code>&nbsp;value is that object.</p>\n        <p>To specify a project-relative path (for example, to a directory containing static assets), start the string with the prefix&nbsp;<code>$!</code>. Such values are interpreted as paths relative to the file&nbsp;<code>middleware.json</code>. &nbsp;</p>\n        <p>See examples below.</p>\n      </td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>methods</td>\n      <td>String[]</td>\n      <td>Specifies the HTTP methods, such as 'GET', 'POST', and 'PUT'. If not present, it will apply to all methods.</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <td>paths</td>\n      <td>String[]</td>\n      <td>Specifies the REST endpoint(s) that trigger the middleware. In addition to a literal string, route can be a path matching pattern, a regular expression, or an array including all these types. For more information, see the&nbsp;<a href=\"http://expressjs.com/4x/api.html#app.use\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">app.use (Express documentation)</a>.&nbsp;</td>\n      <td>Triggers on all routes</td>\n    </tr>\n    <tr>\n      <td>optional</td>\n      <td>Boolean</td>\n      <td>Specify whether the middleware is optional. Optional middleware do not throw, even if they are not installed or cannot be resolved in the file system.</td>\n      <td>N/A</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>采用单个”options”对象参数的典型中间件函数示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"compression\": &#123;</span><br><span class=\"line\">   \"params\": &#123;</span><br><span class=\"line\">     \"threshold\": 512</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要多个参数的中间件函数示例,其中使用参数数组:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"morgan\": &#123;</span><br><span class=\"line\">   \"params\": [\"dev\", &#123;</span><br><span class=\"line\">     \"buffer\": true</span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态中间件的条目,用于从项目根目录中的客户端目录提供内容:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//...</span><br><span class=\"line\">\"files\": &#123;</span><br><span class=\"line\">  \"loopback#static\": &#123;</span><br><span class=\"line\">    \"params\": \"$!../client\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//...</span><br></pre></td></tr></table></figure>\n\n<p>静态中间件的条目,用于从项目根目录中的多个目录提供内容:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//...</span><br><span class=\"line\">\"files\": &#123;</span><br><span class=\"line\">  \"loopback#static\": [&#123;</span><br><span class=\"line\">    \"name\": \"x\",</span><br><span class=\"line\">    \"paths\": [\"/x\"],</span><br><span class=\"line\">    \"params\": \"$!../client/x\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"y\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"paths\"</span>: [<span class=\"string\">\"/y\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"params\"</span>: <span class=\"string\">\"$!../client/y\"</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//...</span><br></pre></td></tr></table></figure>\n\n<p><strong>在值中使用变量</strong></p>\n<p>对于任何中间件配置属性,可以使用以下语法在值中指定变量:</p>\n<p><code>${_ var_}</code></p>\n<p>其中var是app对象的属性.这些属性包括:</p>\n<ul>\n<li>应用程序范围属性,如config.json中定义的属性.</li>\n<li>Express应用程序对象属性.</li>\n</ul>\n<p>For example, the following middleware.json configuration will load LoopBack’s built-in rest middleware (loopback.rest) during the routes phase at the path resolved by app.get(‘restApiRoot’), which defaults to /api.(<em>译注:暂时保留原文,翻译不好</em>)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"routes\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loopback#rest\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"paths\"</span>: [<span class=\"string\">\"$&#123;restApiRoot&#125;\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The following example loads hypothetical middleware named environmental during the routes phase at the return value of app.get(env), typically either /development or /production.(<em>译注:暂时保留原文,翻译不好</em>)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"routes\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"environmental\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"paths\"</span>: <span class=\"string\">\"$&#123;env&#125;\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加自定义阶段</strong></p>\n<p>除了middleware.json中的预定义阶段之外,您还可以通过添加新的顶级键来添加自己的自定义阶段.</p>\n<p>例如,下面是一个middleware.json文件,定义了”parse”之后和”routes”之前的一个新阶段”log”:</p>\n<p><strong>server/middleware.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"parse\": &#123;&#125;,</span><br><span class=\"line\">  \"log\": &#123; ... &#125;,</span><br><span class=\"line\">  \"routes\": &#123;&#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>环境特定配置</strong></p>\n<p>您可以通过<code>middleware.local.js,middleware.local.json和middleware.env_.js或middleware.env_.json</code>进一步自定义配置,其中env是NODE_ENV环境变量(通常是开发或生产)的值.</p>\n<h5 id=\"用javascript注册中间件\"><a href=\"#用javascript注册中间件\" class=\"headerlink\" title=\"用javascript注册中间件\"></a>用javascript注册中间件</h5><p>您可以在JavaScript代码中注册中间件:</p>\n<ul>\n<li>LoopBack API,您可以指定希望中间件执行的阶段.</li>\n<li>Express API,中间件在路由阶段的开始处执行.</li>\n</ul>\n<p><strong>使用LoopBack API</strong></p>\n<p>要使用LoopBack阶段API注册中间件,请使用以下应用程序方法:</p>\n<ul>\n<li>middleware()</li>\n<li>middlewareFromConfig()</li>\n<li>defineMiddlewarePhases()</li>\n</ul>\n<p>例如:</p>\n<p><strong>server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> morgan = <span class=\"built_in\">require</span>(<span class=\"string\">'morgan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> errorhandler = <span class=\"built_in\">require</span>(<span class=\"string\">'error-handler'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = loopback();</span><br><span class=\"line\"></span><br><span class=\"line\">app.middleware(<span class=\"string\">'routes:before'</span>, morgan(<span class=\"string\">'dev'</span>));</span><br><span class=\"line\">app.middleware(<span class=\"string\">'final'</span>, errorhandler());</span><br><span class=\"line\">app.middleware(<span class=\"string\">'routes'</span>, loopback.rest());</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用Express API</strong></p>\n<blockquote>\n<p> 重要: 当您使用Express API注册中间件时,它始终在路由阶段开始时执行.</p>\n</blockquote>\n<p>您可以通过调用app.use()为指定路由的所有HTTP请求指定中间件,在主应用程序脚本文件/server/server.js中使用Express定义中间件的”常规方式”.您还可以使用app.get()仅指定GET请求中间件,使用app.post()指定仅针对POST请求的中间件,等等.有关更多信息,请参阅Express.ini文档中的app.METHOD.</p>\n<p>这里是app.use()的一般签名:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use([route], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">[err,] req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>像往常一样,app是LoopBack应用程序对象: app = loopback（）.</p>\n<p>参数为:</p>\n<ul>\n<li>route,一个可选参数,指定中间件绑定到的URI路由或”装载路径”.当应用程序在此路由接收到HTTP请求时,它调用(或触发)处理函数.</li>\n<li>中间件处理函数(或只是”中间件函数”).请参阅定义新的中间件处理程序函数.</li>\n</ul>\n<p>例如：</p>\n<p><strong>server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> boot = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-boot'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">module</span>.exports = loopback();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Bootstrap the application, configure models, datasources and middleware.</span></span><br><span class=\"line\"><span class=\"comment\">// Sub-apps like REST API are mounted via boot scripts.</span></span><br><span class=\"line\">boot(app, __dirname);</span><br><span class=\"line\"><span class=\"comment\">// this middleware is invoked in the \"routes\" phase</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/status'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.json(&#123; <span class=\"attr\">running</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>指定路由</strong></p>\n<p><code>_route_</code>参数是一个字符串,指定将触发中间件的REST端点.如果不提供参数,那么中间件将在所有路由上触发.除了字符串,<code>_route_</code>可以是路径匹配模式,正则表达式或包含所有这些类型的数组.有关更多信息,请参阅app.use()的Express文档.</p>\n<p>例如，要为以”/greet”开头的所有端点注册中间件:</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/greet'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next </span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上述中间件由以”/greet”开头的所有路由触发,因此”/greet/you”,”greet/me/and/you”将触发它.</p>\n<p>要为所有端点注册中间件:</p>\n<p><strong>server/server.js or server/boot/scripts.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Caveats(警告)</strong></p>\n<p>使用中间件时有一些事情要注意,主要是中间件声明顺序.使用”全部”路由时,请注意中间件注册的顺序.</p>\n<p>例如:</p>\n<p><strong>server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'hello from `get` route'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world from \"catch-all\" route'</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'hello from `post` route'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下,由于GET /中间件结束响应链,所以在发出get请求时,不会触发”catch-all”中间件.但是,当向/发出POST请求时,”catch-all”路由会被触发,因为它在post路由之前被声明.执行POST将显示来自”catch-all”路由和POST /路由的控制台消息.</p>\n<h5 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p><strong>静态中间件</strong></p>\n<p>静态中间件,用于从项目根目录中的client目录提供内容:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//...</span><br><span class=\"line\">\"files\": &#123;</span><br><span class=\"line\">  \"loopback#static\": &#123;</span><br><span class=\"line\">    \"params\": \"$!../client\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//...</span><br></pre></td></tr></table></figure>\n\n<p><strong>预处理中间件</strong></p>\n<p>使用预处理中间件为应用程序中的各种端点应用自定义逻辑.通过注册处理程序函数以在对特定端点或多个端点发出HTTP请求时执行某些操作来执行此操作.</p>\n<blockquote>\n<p> 重要：始终在路由之前的阶段注册预处理中间件,例如初始或解析.</p>\n</blockquote>\n<p>预处理中间件必须在处理程序函数的结尾调用next(),以将控制权传递给下一个中间件.如果你不这样做,你的应用程序将基本上”冻结”.从技术上讲,next()不必发生在函数的结尾(例如,它可能发生在if / else块),但是处理函数必须最终调用它.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tracker</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request tracking middleware triggered on %s'</span>, req.url);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = process.hrtime();</span><br><span class=\"line\">    res.once(<span class=\"string\">'finish'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> diff = process.hrtime(start);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ms = diff[<span class=\"number\">0</span>] * <span class=\"number\">1e3</span> + diff[<span class=\"number\">1</span>] * <span class=\"number\">1e-6</span>;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'The request processing time is %d ms.'</span>, ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>此中间件通知服务器显示在所有应用程序路由上处理传入HTTP请求所花费的时间.</p>\n<p>你可以看到这个中间件在使用LoopBack入门的基本LoopBack应用程序(或任何标准的LoopBack应用程序):</p>\n<ol>\n<li><p>将上面的代码添加到server/middleware/tracker.js.</p>\n</li>\n<li><p>编辑(或创建)server/middleware.json并在”初始”阶段注册新的中间件.</p>\n<p><strong>server/middleware.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"initial\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">\"./middleware/tracker\"</span>: &#123;&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动应用程序:<code>node .</code></p>\n</li>\n<li><p>访问<code>http://localhost:3000</code>.</p>\n</li>\n</ol>\n<p>In the console, you will see (for example):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Request tracking middleware triggered on /.</span><br><span class=\"line\">The request processing time is 4.281957 ms. //your results will vary</span><br></pre></td></tr></table></figure>\n\n<p><strong>路由中间件</strong></p>\n<p>对于提供JSON的路由,最佳实践是创建一个新模型并将路由实现为远程方法.对于提供非JSON响应的路由,最佳实践是在server.js或引导脚本中为它们定义标准的”Express方式”.有关详细信息,请参阅路由和路由(Express文档).</p>\n<blockquote>\n<p> 注意: 如果在路由或路由上添加中间件,在阶段之后,它将不会在路由匹配后执行.相反,它将被忽略,因为路由已经匹配.</p>\n</blockquote>\n<p><strong>错误处理中间件</strong></p>\n<p>使用错误处理中间件处理请求错误.虽然您可以自由注册任何数量的错误处理中间件,但请务必在”final”阶段注册它们.LoopBack默认注册两个错误处理中间件:</p>\n<ul>\n<li><code>urlNotFound</code>中间件将所有到达中间件的请求转换为状态为404的错误对象,以使404错误响应与”通常”错误响应一致.</li>\n<li><code>errorhandler</code>中间件来自errorhandler模块,以前在Express v.3中作为<code>express.errorHandler</code>可用.有关自定义此错误处理程序的信息.请参阅自定义REST错误处理.</li>\n</ul>\n<p>自定义错误处理中间件的示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logError</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ERR'</span>, req.url, err); </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>要注册这个中间件:</p>\n<ol>\n<li><p>Add the code above to /server/middleware/log-error.js.</p>\n</li>\n<li><p>Edit /server/middleware.json and register the new middleware in the “final” phase: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"final\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"./middleware/log-error\"</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Start the application.</p>\n</li>\n<li><p>Load <a href=\"http://localhost:3000/url-does-not-exist\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/url-does-not-exist</a> in your browser.</p>\n</li>\n</ol>\n<hr>\n<h4 id=\"5.5\"> 5.5 使用当前上下文 </h4>\n\n<blockquote>\n<p> 警告: 不推荐使用当前上下文功能!loopback-context的当前实现基于已知存在许多问题的模块continuation-local-storage(例如,参见issue＃59).因此,loopback-context在许多情况下不工作,从LoopBack的问题跟踪器中报告的问题可以看出.参见loopback issue＃1495更新和一个替代解决方案.</p>\n</blockquote>\n<p>LoopBack应用程序有时需要访问上下文信息来实现业务逻辑,例如:</p>\n<ul>\n<li>访问当前登录的用户.</li>\n<li>访问HTTP请求(如URL和标头).</li>\n</ul>\n<p>调用LoopBack模型方法的典型请求通过具有异步回调链的多个层传递.并不总是可以通过方法参数传递所有信息.</p>\n<h5 id=\"Error-messages\"><a href=\"#Error-messages\" class=\"headerlink\" title=\"Error messages\"></a>Error messages</h5><p>LoopBack 3.0删除了当前上下文API.使用当前上下文的应用程序在收到其第一个HTTP请求时将打印以下错误消息:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unhandled error for request GET /api/Users:</span><br><span class=\"line\">Error: remoting.context option was removed in version 3.0.</span><br><span class=\"line\">For more information, see https://loopback.io/doc/en/lb3/Using-current-context.html</span><br><span class=\"line\">for more details.</span><br><span class=\"line\">    at restApiHandler (.../node_modules/loopback/server/middleware/rest.js:44:15)</span><br><span class=\"line\">    at Layer.handle [as handle_request] (.../node_modules/express/lib/router/layer.js:95:5)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>要删除此警告,请禁用由内置REST处理程序添加的上下文中间件.将server/config.json中的remoting.context属性设置为false,例如:</p>\n<p><strong>server/config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"remoting\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"context\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果您的应用程序依赖于loopback.getCurrentContext,请按照以下说明重新使用您的代码直接使用loopback-context.</p>\n<h5 id=\"安装loopback-context\"><a href=\"#安装loopback-context\" class=\"headerlink\" title=\"安装loopback-context\"></a>安装loopback-context</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save loopback-context</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置上下文传播\"><a href=\"#配置上下文传播\" class=\"headerlink\" title=\"配置上下文传播\"></a>配置上下文传播</h5><p>要设置LoopBack应用程序为每个传入的HTTP请求创建一个新的上下文,请在server/middleware.json中配置per-context中间件,如下所示:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"initial\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loopback-context#per-request\"</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 重要:默认情况下,HTTP req/res对象不会设置到当前上下文.您需要将enableHttpContext设置为true以启用req/res对象的自动填充.</p>\n</blockquote>\n<h5 id=\"使用当前上下文\"><a href=\"#使用当前上下文\" class=\"headerlink\" title=\"使用当前上下文\"></a>使用当前上下文</h5><p>一旦启用上下文传播,就可以使用LoopBackContext.getCurrentContext()访问当前上下文对象.上下文将在中间件(如果它在上下文中间件之后加载),远程钩子,模型钩子和自定义方法中可用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> LoopBackContext = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-context'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModel.myMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = LoopBackContext.getCurrentContext();</span><br><span class=\"line\">  <span class=\"comment\">// Get the current access token</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> accessToken = ctx &amp;&amp; ctx.get(<span class=\"string\">'accessToken'</span>);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// Set more information on current context</span></span><br><span class=\"line\">  ctx.set(<span class=\"string\">'foo'</span>, &#123; <span class=\"attr\">bar</span>: <span class=\"string\">'val'</span> &#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在远程方法中使用当前授权用户\"><a href=\"#在远程方法中使用当前授权用户\" class=\"headerlink\" title=\"在远程方法中使用当前授权用户\"></a>在远程方法中使用当前授权用户</h5><p>在高级用例中,例如,当您想要添加自定义中间件时,必须在中间件链中的正确位置(在依赖于LoopBackContext.getCurrentContext的中间件之前)添加上下文中间件.</p>\n<blockquote>\n<p> 重要: LoopBackContext.perRequest()检测在相同请求上多次调用时的情况,并在后续运行中立即返回.</p>\n</blockquote>\n<p>这里的示例代码使用中间件函数将当前认证的用户放入上下文中,以便远程方法可以使用它:</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// -- Add your pre-processing middleware here --</span></span><br><span class=\"line\">app.use(LoopBackContext.perRequest());</span><br><span class=\"line\">app.use(loopback.token());</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCurrentUser</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!req.accessToken) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  app.models.UserModel.findById(req.accessToken.userId, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!user) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> next(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'No user with this access token was found.'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loopbackContext = LoopBackContext.getCurrentContext();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loopbackContext) &#123;</span><br><span class=\"line\">      loopbackContext.set(<span class=\"string\">'currentUser'</span>, user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// boot scripts mount components like REST API</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>/common/models/YourModel.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loopback = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> LoopBackContext = <span class=\"built_in\">require</span>(<span class=\"string\">'loopback-context'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">YourModel</span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">//remote method</span></span><br><span class=\"line\">  YourModel.someRemoteMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = LoopBackContext.getCurrentContext();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentUser = ctx &amp;&amp; ctx.get(<span class=\"string\">'currentUser'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'currentUser.username: '</span>, currentUser.username); <span class=\"comment\">// voila!</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    cb(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"5.6\"> 5.6 事件 </h4>\n\n<p>LoopBack app对象是一个Node EventEmitter,因此具有app.emit()和app.on()方法.</p>\n<p>除了标准的Node事件,LoopBack应用程序和模型还能发起其他事件.</p>\n<h5 id=\"应用程序事件\"><a href=\"#应用程序事件\" class=\"headerlink\" title=\"应用程序事件\"></a>应用程序事件</h5><p>默认情况下,使用应用程序生成器创建的应用程序在运行引导脚本后启动时会发出”started”事件.</p>\n<h5 id=\"模型事件\"><a href=\"#模型事件\" class=\"headerlink\" title=\"模型事件\"></a>模型事件</h5><p>所有模型发出以下事件:</p>\n<p>默认情况下,基本的LoopBack模型对象具有属性和方法”mixed in”:</p>\n<ul>\n<li>包含对象 - 允许您加载多个对象的关系并优化请求数.</li>\n<li>可验证对象 - 提供验证方法.请参阅验证模型数据。</li>\n</ul>\n<p>当定义模型之间的关系时,RelationMixin对象对象也会混合到模型对象中.</p>\n<p><strong>附件</strong></p>\n<p><code>Model</code>已附加到<code>app</code>后发出.</p>\n<p><strong>dataSourceAttached</strong></p>\n<p>在<code>Model</code>已附加到<code>DataSource</code>之后发出.</p>\n<p><strong>set(设置)</strong></p>\n<p>设置模型属性时发出,参数:inst,模型实例,对象.</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModel.on(<span class=\"string\">'set'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">inst</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'model with id %s has been changed'</span>, inst.id);</span><br><span class=\"line\">  <span class=\"comment\">// =&gt; model with id 1 has been changed</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Arguments: data, an object.</p>\n<h5 id=\"PersistedModel事件\"><a href=\"#PersistedModel事件\" class=\"headerlink\" title=\"PersistedModel事件\"></a>PersistedModel事件</h5><p>PersistedModels还有一个更改的事件,监听模型更改.</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPersistedModel.on(<span class=\"string\">'changed'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">// =&gt; the changed model</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"User模型事件\"><a href=\"#User模型事件\" class=\"headerlink\" title=\"User模型事件\"></a>User模型事件</h5><p><code>User</code>模型User.resetPassword()方法发出了”resetPasswordRequest”事件.</p>\n<hr>\n<h4 id=\"5.7\"> 5.7 使用promises </h4>\n\n<p>暂不翻译……</p>\n<p>–</p>\n<h4 id=\"6\"> 6 管理用户 </h4>\n\n<blockquote>\n<p> 概要: LoopBack的内置用户模型提供基本的用户管理功能.</p>\n</blockquote>\n<h5 id=\"概述-24\"><a href=\"#概述-24\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>LoopBack的内置用户模型提供基本的用户管理功能,如:</p>\n<ul>\n<li>通过电子邮件注册和确认.</li>\n<li>登录和注销.</li>\n<li>创建访问令牌.</li>\n<li>重设密码.</li>\n</ul>\n<blockquote>\n<p> 重要: 您必须创建自己的自定义模型(命名为”客户”或”客户端”),它扩展了内置用户模型,而不是直接使用内置用户模型.内置的用户模型提供了大量常用的功能,您可以通过您的自定义模型使用.此外,LoopBack在单个应用程序中不支持基于用户模型的多个模型.也就是说,在单个应用程序中,不能有多个模型从内置User模型派生.</p>\n</blockquote>\n<h5 id=\"创建和验证-授权-用户\"><a href=\"#创建和验证-授权-用户\" class=\"headerlink\" title=\"创建和验证(授权)用户\"></a>创建和验证(授权)用户</h5><p>创建和验证用户的基本过程是:</p>\n<ol>\n<li>使用User.create()方法注册一个新用户,继承自通用的PersistedModel对象.有关详细信息,请参阅注册用户.</li>\n<li>通过调用User.login()登录用户以获取访问令牌.有关详细信息,请参阅登录用户.</li>\n<li>使用访问令牌进行后续的API调用.在HTTP头中提供访问令牌或作为REST API调用的查询参数,如使用访问令牌进行身份验证请求中所示.</li>\n</ol>\n<p><strong>性能提示</strong></p>\n<p>要在登录和创建用户期间提高性能,请尝试本地化安装bcrypt.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save bcrypt</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"理解内置User模型\"><a href=\"#理解内置User模型\" class=\"headerlink\" title=\"理解内置User模型\"></a>理解内置User模型</h5><p>默认情况下,LoopBack应用程序具有由user.json定义的内置用户模型(此文件是LoopBack框架的一部分,不要修改它,而是遵循扩展内置模型中的过程).</p>\n<blockquote>\n<p> 提示:有关LoopBack用户模型如何执行身份验证的基本介绍，请参阅用户模型身份验证简介.</p>\n</blockquote>\n<p><strong>默认访问控制</strong></p>\n<p>内置的User模型有如下的ACL:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"User\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"properties\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"acls\": [&#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"DENY\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"create\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$owner\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"deleteById\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"login\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"logout\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$owner\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"findById\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$owner\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"updateAttributes\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"confirm\"</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      \"principalType\": \"ROLE\",</span><br><span class=\"line\">      \"principalId\": \"$everyone\",</span><br><span class=\"line\">      \"permission\": \"ALLOW\",</span><br><span class=\"line\">      \"property\": \"resetPassword\",</span><br><span class=\"line\">      \"accessType\": \"EXECUTE\"</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    //...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述ACL拒绝所有操作,然后选择性地允许:</p>\n<ul>\n<li>任何人都创建一个新用户(用户实例).</li>\n<li>任何人登录,注销,确认其身份,并重置自己的密码.</li>\n<li>用户对自己的用户记录(实例)执行deleteById,findById和updateAttributes.</li>\n</ul>\n<blockquote>\n<p> 重要提示: 无法使用ACL生成器直接修改内置模型(例如User模型).但是,您可以创建扩展内置用户模型的自定义模型,然后使用ACL生成器定义添加到默认用户模型的访问控制.例如,您可以创建扩展内置用户模型的客户或客户端模型,然后使用该工具修改该模型的ACL.由于模型不从其基本模型继承ACL,因此必须为新的自定义模型定义ACL.</p>\n</blockquote>\n<p><strong>User领域</strong></p>\n<p>see <a href=\"http://loopback.io/doc/en/lb3/Partitioning-users-with-realms.html\" target=\"_blank\" rel=\"noopener\">Partitioning users with realms</a>.</p>\n<hr>\n<h4 id=\"6.1\"> 6.1 注册用户 </h4>\n\n<blockquote>\n<p> 概要: 内置用户模型提供了注册新用户并确认其电子邮件地址的方法.</p>\n</blockquote>\n<p>LoopBack用户模型提供了注册新用户和确认其电子邮件地址的方法.您还可以使用loopback-component-passport模块将登录信息与Facebook,Google和其他第三方提供商集成.</p>\n<h5 id=\"使用LoopBack-User模型注册用户\"><a href=\"#使用LoopBack-User模型注册用户\" class=\"headerlink\" title=\"使用LoopBack User模型注册用户\"></a>使用LoopBack User模型注册用户</h5><p><strong>创建新用户</strong></p>\n<p>通过添加模型实例创建用户(注册用户),与任何其他模型相同,电子邮件和密码是唯一必需的属性.</p>\n<p><strong>/boot/server/my-boot-script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> User = app.models.User;</span><br><span class=\"line\">  User.create(&#123;<span class=\"attr\">email</span>: <span class=\"string\">'foo@bar.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'bar'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, userInstance</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(userInstance);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>通过REST,使用<code>POST / users</code>端点来创建新的用户实例,例如:</p>\n<p><strong>REST</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -H &quot;Content-Type:application/json&quot;         \\</span><br><span class=\"line\">-d &apos;&#123;&quot;email&quot;: &quot;me@domain.com&quot;, &quot;password&quot;: &quot;secret&quot;&#125;&apos;   \\</span><br><span class=\"line\">http://localhost:3000/api/users</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加其他注册约束</strong></p>\n<p>通常,您可能希望在注册过程中添加方法,例如查看给定的用户名是否可用,或者电子邮件地址是否已注册.一个好的方法是在User对象上添加方法作为beforeRemote钩子.有关详细信息,请参阅远程钩子.</p>\n<p><strong>验证邮件地址</strong></p>\n<p>通常,应用程序将要求用户在能够登录之前验证其电子邮件地址.这将向用户发送一封电子邮件,其中包含用于验证其地址的链接.一旦用户跟随链接,他们将被重定向到web根(“/“),并将能够正常登录.</p>\n<p>要强制实施此约束,请将emailVerificationRequired用户模型属性设置为true,在server/model-config.json中.</p>\n<p><strong>server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\"user\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"db\",</span><br><span class=\"line\">    \"public\": true,</span><br><span class=\"line\">    \"options\": &#123;</span><br><span class=\"line\">      \"emailVerificationRequired\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>在REST上,使用GET /users/confirm端点来验证用户的电子邮件地址.有关详细信息,请参阅用户REST API.</p>\n<p>此示例在调用create()方法后执行的User模型上创建remote钩子.</p>\n<blockquote>\n<p> 重要: 在使用下面的示例之前,您必须设置User模型以及Mail数据源.</p>\n</blockquote>\n<p><strong>/common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../../server/config.json'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//send verification email after registration</span></span><br><span class=\"line\">  user.afterRemote(<span class=\"string\">'create'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, userInstance, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; user.afterRemote triggered'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">      type: <span class=\"string\">'email'</span>,</span><br><span class=\"line\">      to: userInstance.email,</span><br><span class=\"line\">      <span class=\"keyword\">from</span>: <span class=\"string\">'noreply@loopback.com'</span>,</span><br><span class=\"line\">      subject: <span class=\"string\">'Thanks for registering.'</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">'../../server/views/verify.ejs'</span>),</span><br><span class=\"line\">      redirect: <span class=\"string\">'/verified'</span>,</span><br><span class=\"line\">      user: user</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    userInstance.verify(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, response, next</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; verification email sent:'</span>, response);</span><br><span class=\"line\"></span><br><span class=\"line\">      context.res.render(<span class=\"string\">'response'</span>, &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Signed up successfully'</span>,</span><br><span class=\"line\">        content: <span class=\"string\">'Please check your email and click on the verification link '</span> -</span><br><span class=\"line\">            <span class=\"string\">'before logging in.'</span>,</span><br><span class=\"line\">        redirectTo: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        redirectToLinkText: <span class=\"string\">'Log in'</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过第三方系统注册用户\"><a href=\"#通过第三方系统注册用户\" class=\"headerlink\" title=\"通过第三方系统注册用户\"></a>通过第三方系统注册用户</h5><p>使用LoopBack Passport组件(loopback-component-passport)使用户能够使用以下来源的现有凭据注册和登录应用程序:</p>\n<ul>\n<li>Facebook</li>\n<li>Google</li>\n<li>Twitter</li>\n</ul>\n<p>有关详细信息,请参阅<a href=\"http://loopback.io/doc/en/lb3/Third-party-login-using-Passport.html\" target=\"_blank\" rel=\"noopener\">使用Passport进行第三方登录</a></p>\n<hr>\n<h4 id=\"6.2\"> 6.2 用户登录 </h4>\n\n<blockquote>\n<p> 概要:内置用户模型提供登录用户,注销用户和重置用户密码的方法.</p>\n</blockquote>\n<h5 id=\"使用LoopBack-User模型\"><a href=\"#使用LoopBack-User模型\" class=\"headerlink\" title=\"使用LoopBack User模型\"></a>使用LoopBack User模型</h5><p><strong>登录</strong></p>\n<p>通过调用User.login()方法登录(验证)用户,并提供包含密码和电子邮件或用户名属性作为第一个参数的对象.该方法返回访问令牌.</p>\n<p>此示例在引导脚本中创建一个路由以处理登录请求:</p>\n<p><strong>/server/boot/routes.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">app.post(<span class=\"string\">'/login'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  User.login(&#123;</span><br><span class=\"line\">    email: req.body.email,</span><br><span class=\"line\">    password: req.body.password</span><br><span class=\"line\">  &#125;, <span class=\"string\">'user'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, token</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      res.render(<span class=\"string\">'response'</span>, &#123; <span class=\"comment\">//render view named 'response.ejs'</span></span><br><span class=\"line\">        title: <span class=\"string\">'Login failed'</span>,</span><br><span class=\"line\">        content: err,</span><br><span class=\"line\">        redirectTo: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        redirectToLinkText: <span class=\"string\">'Try again'</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.render(<span class=\"string\">'home'</span>, &#123; <span class=\"comment\">//login user and render 'home' view</span></span><br><span class=\"line\">      email: req.body.email,</span><br><span class=\"line\">      accessToken: token.id</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 重要: User.login()有一个可选的第二个参数,它是一个字符串或一个字符串数组.为此参数传入”user”以包括用户信息.对于REST apis,使用?include = user.</p>\n</blockquote>\n<p>有关完整的示例,请参阅loopback-example-user-management中的routes.js.</p>\n<p>您还可以通过提供具有以秒为单位的值的ttl属性来指定访问令牌的有效期.</p>\n<p>例如:</p>\n<p><strong>Boot script</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> TWO_WEEKS = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\">User.login(&#123;</span><br><span class=\"line\">  email: <span class=\"string\">'me@domain.com'</span>,           <span class=\"comment\">// must provide email or \"username\"</span></span><br><span class=\"line\">  password: <span class=\"string\">'secret'</span>,               <span class=\"comment\">// required by default</span></span><br><span class=\"line\">  ttl: TWO_WEEKS                    <span class=\"comment\">// keep the AccessToken alive for at least two weeks</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, accessToken</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accessToken.id);      <span class=\"comment\">// =&gt; GOkZRwg... the access token</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accessToken.ttl);     <span class=\"comment\">// =&gt; 1209600 time to live</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accessToken.created); <span class=\"comment\">// =&gt; 2013-12-20T21:10:20.377Z</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accessToken.userId);  <span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果登录尝试不成功,将按以下格式返回错误.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \"status\": 401,             // or 400 if the credentails object is invalid</span><br><span class=\"line\">  \"message\": \"login failed\"  // could also be \"realm is required\" or \"username or email is required\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过REST,使用POST /users/login端点.</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -H <span class=\"string\">\"Content-Type:application/json\"</span> \\</span><br><span class=\"line\">-d <span class=\"string\">'&#123;\"email\": \"me@domain.com\", \"password\": \"secret\", \"ttl\": 1209600000&#125;'</span> \\</span><br><span class=\"line\">http://localhost:3000/api/users/login</span><br></pre></td></tr></table></figure>\n\n<p>返回值是具有id属性的JSON对象,该属性是在后续请求中使用的访问令牌.</p>\n<p>例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"GOkZRwgZ61q0XXVxvxlB8TS1D6lrG7Vb9V8YwRDfy3YGAN7TM7EnxWHqdbIZfheZ\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ttl\"</span>: <span class=\"number\">1209600</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"created\"</span>: <span class=\"string\">\"2013-12-20T21:10:20.377Z\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"userId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>登出</strong></p>\n<p>使用User.logout()方法登出用户,提供用户的访问令牌作为参数.</p>\n<p>在下面的示例中,创建了处理登出请求的路由:</p>\n<p><strong>/server/boot/routes.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"comment\">//log a user out</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/logout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!req.accessToken) <span class=\"keyword\">return</span> res.sendStatus(<span class=\"number\">401</span>); <span class=\"comment\">//return 401:unauthorized if accessToken is not present</span></span><br><span class=\"line\">  User.logout(req.accessToken.id, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);</span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/'</span>); <span class=\"comment\">//on successful logout, redirect</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>通过REST,使用POST /users/logout端点,再次在POST有效内容的sid属性中提供用户的访问令牌.</p>\n<p>要通过REST API销毁访问令牌，请使用POST /users/logout端点.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK</span><br><span class=\"line\">VERB=POST <span class=\"comment\"># any verb is allowed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authorization Header</span></span><br><span class=\"line\">curl -X VERB -H <span class=\"string\">\"Authorization: <span class=\"variable\">$ACCESS_TOKEN</span>\"</span> \\</span><br><span class=\"line\">http://localhost:3000/api/users/<span class=\"built_in\">logout</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Query Parameter</span></span><br><span class=\"line\">curl -X VERB http://localhost:3000/api/users/<span class=\"built_in\">logout</span>?access_token=<span class=\"variable\">$ACCESS_TOKEN</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"重置用户密码\"><a href=\"#重置用户密码\" class=\"headerlink\" title=\"重置用户密码\"></a>重置用户密码</h5><p>使用User.resetPassword()方法重置用户的密码.此方法为临时登录创建一个短期访问令牌,允许用户在忘记时更改密码.</p>\n<p>例如,在下面的routes.js(在loopback-example-user-management中),创建一个路由: /request-password-reset来处理密码重置请求:</p>\n<p><strong>/server/boot/routes.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//send an email with instructions to reset an existing user's password</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/request-password-reset'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  User.resetPassword(&#123;</span><br><span class=\"line\">    email: req.body.email</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.status(<span class=\"number\">401</span>).send(err);</span><br><span class=\"line\">    res.render(<span class=\"string\">'response'</span>, &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Password reset requested'</span>,</span><br><span class=\"line\">      content: <span class=\"string\">'Check your email for further instructions'</span>,</span><br><span class=\"line\">      redirectTo: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">      redirectToLinkText: <span class=\"string\">'Log in'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>您必须处理”resetPasswordRequest”事件,才能将包含由resertPassword()方法生成的短期访问令牌的重置电子邮件发送给正确的用户(请参见下面的示例):</p>\n<blockquote>\n<p> 重要: 下面的示例假设您已经设置了User模型和Mail数据源.</p>\n</blockquote>\n<p><strong>/common/models/user.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"comment\">//send password reset link when password reset requested</span></span><br><span class=\"line\">user.on(<span class=\"string\">'resetPasswordRequest'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">info</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"string\">'http://'</span> - config.host - <span class=\"string\">':'</span> - config.port - <span class=\"string\">'/reset-password'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> html = <span class=\"string\">'Click &lt;a href=\"'</span> - url - <span class=\"string\">'?access_token='</span> -</span><br><span class=\"line\">      info.accessToken.id - <span class=\"string\">'\"&gt;here&lt;/a&gt; to reset your password'</span>;</span><br><span class=\"line\">  <span class=\"comment\">//'here' in above html is linked to : 'http://&lt;host:port&gt;/reset-password?access_token=&lt;short-lived/temporary access token&gt;'</span></span><br><span class=\"line\">  user.app.models.Email.send(&#123;</span><br><span class=\"line\">    to: info.email,</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: info.email,</span><br><span class=\"line\">    subject: <span class=\"string\">'Password reset'</span>,</span><br><span class=\"line\">    html: html</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; error sending password reset email'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; sending password reset email to:'</span>, info.email);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>并且当用户按照链接重置密码时,临时访问令牌用于使用updateAttribute()方法查找用户和更新密码,如下所示:</p>\n<p><strong>/server/boot/routes.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">User.findById(req.accessToken.userId, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.sendStatus(<span class=\"number\">404</span>);</span><br><span class=\"line\">   user.updateAttribute(<span class=\"string\">'password'</span>, req.body.password, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.sendStatus(<span class=\"number\">404</span>);</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'&gt; password reset processed successfully'</span>);</span><br><span class=\"line\">     res.render(<span class=\"string\">'response'</span>, &#123;</span><br><span class=\"line\">       title: <span class=\"string\">'Password reset success'</span>,</span><br><span class=\"line\">       content: <span class=\"string\">'Your password has been reset successfully'</span>,</span><br><span class=\"line\">       redirectTo: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">       redirectToLinkText: <span class=\"string\">'Log in'</span></span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<p>了解详细的例子,请看loopback-example-user-management中的routes.js.</p>\n<h5 id=\"通过第三方系统账号登录\"><a href=\"#通过第三方系统账号登录\" class=\"headerlink\" title=\"通过第三方系统账号登录\"></a>通过第三方系统账号登录</h5><p>您可以与支持OAuth的第三方系统(例如Google,Facebook或Twitter)集成,而不必使用LoopBack的用户系统.</p>\n<p>了解更多信息,请看 <a href=\"http://loopback.io/doc/en/lb3/Third-party-login-using-Passport.html\" target=\"_blank\" rel=\"noopener\">Third-party login using Passport</a>.</p>\n<hr>\n<h4 id=\"6.3\"> 6.3 使用领域来分区用户 </h4>\n\n<p>默认情况下,LoopBack用户模型管理全局命名空间中的所有用户.它不隔离不同的应用程序.在某些情况下,您可能需要将用户划分到多个命名空间,以使不同的应用程序具有单独的用户.LoopBack使用领域来支持:</p>\n<ul>\n<li>属于单个全局域(或无域)的用户和应用程序.</li>\n<li>将用户和应用程序分布到多个领域.用户或应用程序只能属于一个领域.每个领域可以有很多用户和许多应用程序.</li>\n<li>每个应用程序是唯一的领域,每个用户属于应用程序(通过领域).</li>\n</ul>\n<p>每个应用程序或用户实例在领域中仍具有唯一的ID.当应用程序/用户注册时,它可以分配到一个领域.<code>User.login()</code>函数:</p>\n<ul>\n<li>Honors the realm property from the user credential(<em>译注:保留原文</em>).</li>\n<li>允许从用户名/电子邮件的前缀中提取领域.</li>\n</ul>\n<p>User模型中的两个设置控制领域：</p>\n<ul>\n<li>realmRequired(Boolean): 默认值为false.</li>\n<li>realmDelimiter(string): 如果配置,电子邮件或用户名可以前缀为<realm><realmdelimiter>&lt;username或email&gt;,例如myRealm: john或myRealm:<a href=\"mailto:john@sample.com\" target=\"_blank\" rel=\"noopener\">john@sample.com</a>.如果不存在,将不检查用户名或电子邮件的前缀.</realmdelimiter></realm></li>\n</ul>\n<p>例如:</p>\n<p><strong>server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"User\": &#123;</span><br><span class=\"line\">  \"dataSource\": \"db\",</span><br><span class=\"line\">  \"options\": &#123;</span><br><span class=\"line\">    \"realmRequired\": true,</span><br><span class=\"line\">    \"realmDelimiter\": \":\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>启用领域时,必须在调用User.create()时提供领域属性,例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.create(&#123;</span><br><span class=\"line\">  realm: <span class=\"string\">'myRealm'</span>,</span><br><span class=\"line\">  username: <span class=\"string\">'john'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'john@sample.com'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'my-password'</span></span><br><span class=\"line\">&#125;, callback);</span><br></pre></td></tr></table></figure>\n\n<p>要登录领域内的用户,凭证还应包括领域属性.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.login(&#123;</span><br><span class=\"line\">  realm: <span class=\"string\">'myRealm'</span>,</span><br><span class=\"line\">  username: <span class=\"string\">'john'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'my-password'</span></span><br><span class=\"line\">&#125;, callback);</span><br></pre></td></tr></table></figure>\n\n<p>如果配置了realmDelimiter(例如,”:”),则登录名允许将领域作为前缀传递给用户名或电子邮件.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.login(&#123;</span><br><span class=\"line\">  username: <span class=\"string\">'myRealm:john'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'my-password'</span></span><br><span class=\"line\">&#125;, callback);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7\"> 7. 身份验证,授权和权限 </h4>\n\n<blockquote>\n<p> 概要:LoopBack包括内置的基于令牌的身份验证.</p>\n</blockquote>\n<p>大多数应用程序需要控制谁可以访问数据或调用服务.通常,这涉及要求用户登录以访问受保护的数据,或者需要用于其他应用的授权令牌以访问受保护的数据.</p>\n<p>LoopBack应用程序通过模型访问数据,因此控制对数据的访问意味着对模型施加限制.也就是说,指定谁或什么可以读/写数据或在模型上执行方法.</p>\n<p>当您使用LoopBack应用程序生成器(application generator)创建应用程序时,将自动启用访问控制,除非您选择”empty-server”应用程序类型.要为”empty-server”应用程序启用访问控制,必须添加调用enableAuth()的引导脚本.例如,在server/boot/authentication.js中:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enableAuthentication</span>(<span class=\"params\">server</span>) </span>&#123;</span><br><span class=\"line\">  server.enableAuth();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"访问控制概念\"><a href=\"#访问控制概念\" class=\"headerlink\" title=\"访问控制概念\"></a>访问控制概念</h5><p>LoopBack的访问控制系统围绕几个核心概念构建,如下表所示.</p>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Description</th>\n<th>Responsibility</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Principal</td>\n<td>An entity that can be identified or authenticated.</td>\n<td>Represents identities of a request to protected resources.</td>\n<td>A user <br> An application <br> A role (please note a role is also a principal)</td>\n</tr>\n<tr>\n<td>Role</td>\n<td>A group of principals with the same permissions.</td>\n<td>Organizes principals into groups so they can be used.</td>\n<td><strong>Dynamic role</strong>: <br><code>$everyone</code> (for all users) <br><code>$unauthenticated</code> (unauthenticated users) <br> <code>$owner</code> (the principal is owner of the model instance), which can be:<br>&nbsp;&nbsp;&#9702; A simple property called <code>userId</code><br>&nbsp;&nbsp;&#9702; A simple property called <code>owner</code><br>&nbsp;&nbsp;&#9702; A relation to a model that extends User.  <br><br> <strong>Static role</strong>: admin (a defined role for administrators)</td>\n</tr>\n<tr>\n<td>RoleMapping</td>\n<td>Assign principals to roles</td>\n<td>Statically assigns principals to roles.</td>\n<td>Assign user with id 1 to role 1 <br> Assign role ‘admin’ to role 1</td>\n</tr>\n<tr>\n<td>ACL</td>\n<td>Access control list</td>\n<td>Controls if a principal can perform a certain operation against a model.</td>\n<td>Deny everyone to access the project model.<br> Allow ‘admin’ role to execute <code>find()</code> method on the project model.</td>\n</tr>\n</tbody></table>\n<h5 id=\"一般过程\"><a href=\"#一般过程\" class=\"headerlink\" title=\"一般过程\"></a>一般过程</h5><p>实现应用程序访问控制的一般过程是:</p>\n<ol>\n<li><p><strong>Specify user roles</strong>(指定用户角色):定义应用程序需要的用户角色.例如,您可以为匿名用户,授权用户和管理员创建角色.</p>\n</li>\n<li><p><strong>Define access for each role and model method</strong>(为每个角色和模型方法定义访问权限):例如,您可以允许匿名用户读取银行列表,但不允许他们执行其他操作.LoopBack模型具有一组内置方法,每个方法映射到READ或WRITE访问类型.实质上,此步骤等于指定是否允许每个角色和每个模型被访问,如下面的示例所示.</p>\n</li>\n<li><p><strong>Implement authentication</strong>(实现身份验证):在应用程序中,添加创建(注册)新用户,登录用户(获取和使用身份验证令牌)和注销用户的代码.</p>\n</li>\n</ol>\n<h5 id=\"公开和隐藏模型-方法和端点\"><a href=\"#公开和隐藏模型-方法和端点\" class=\"headerlink\" title=\"公开和隐藏模型,方法和端点\"></a>公开和隐藏模型,方法和端点</h5><p>要通过REST公开模型,请在/server/model-config.json中将public属性设置为true:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  \"Role\": &#123;</span><br><span class=\"line\">    \"dataSource\": \"db\",</span><br><span class=\"line\">    \"public\": false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏method和REST endpoints</strong></p>\n<p>如果不想公开某些创建,检索,更新和删除操作.则可以通过在模型上调用disableRemoteMethod()来轻松隐藏它们.例如,按照前面的例子,按照约定,自定义模型代码将放在文件common/models/location.js中.您将添加以下行以”隐藏”预定义的远程方法之一:</p>\n<p><strong>common/models/location.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isStatic = <span class=\"literal\">true</span>;</span><br><span class=\"line\">MyModel.disableRemoteMethod(<span class=\"string\">'deleteById'</span>, isStatic);</span><br></pre></td></tr></table></figure>\n\n<p>现在,deleteById()操作和相应的REST端点将不会公开.</p>\n<p>对于原型对象的方法,如updateAttributes():</p>\n<p><strong>common/models/location.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isStatic = <span class=\"literal\">false</span>;</span><br><span class=\"line\">MyModel.disableRemoteMethod(<span class=\"string\">'updateAttributes'</span>, isStatic);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 重要:确保在您自己的自定义模型上调用disableRemoteMethod(),而不是一个内置模型.在下面的示例中,例如,调用是MyUser.disableRemoteMethod(),而不是User.disableRemoteMethod().</p>\n</blockquote>\n<p>这里有一个隐藏<code>MyUser</code>模型的所有方法的例子,除了<code>login</code>和<code>logout</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"create\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"upsert\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"updateAll\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"updateAttributes\"</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"find\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"findById\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"findOne\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"deleteById\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"confirm\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"count\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"exists\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">\"resetPassword\"</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__count__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__create__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__delete__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__destroyById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__findById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__get__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">MyUser.disableRemoteMethod(<span class=\"string\">'__updateById__accessTokens'</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Read-Only endpoints例子</strong></p>\n<p>您可能希望仅在模型上公开只读操作,隐藏所有POST,PUT,DELETE动词.</p>\n<p><strong>common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'create'</span>, <span class=\"literal\">true</span>);\t\t<span class=\"comment\">// Removes (POST) /products</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'upsert'</span>, <span class=\"literal\">true</span>);\t\t<span class=\"comment\">// Removes (PUT) /products</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'deleteById'</span>, <span class=\"literal\">true</span>);\t<span class=\"comment\">// Removes (DELETE) /products/:id</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">\"updateAll\"</span>, <span class=\"literal\">true</span>);\t\t<span class=\"comment\">// Removes (POST) /products/update</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">\"updateAttributes\"</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// Removes (PUT) /products/:id</span></span><br><span class=\"line\">Product.disableRemoteMethod(<span class=\"string\">'createChangeStream'</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// removes (GET|POST) /products/change-stream</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>隐藏相关模型的endpoints</strong></p>\n<p>要为相关模型方法禁用REST端点,请使用disableRemoteMethod().</p>\n<p>例如,如果有post和tag模型,其中post有多个标签,请将以下代码添加到/common/models/post.js以禁用相关模型和相应REST端点的远程方法:</p>\n<p><strong>common/models/model.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Post</span>) </span>&#123;</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__get__tags'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__create__tags'</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__destroyById__accessTokens'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// DELETE</span></span><br><span class=\"line\">  Post.disableRemoteMethod(<span class=\"string\">'__updateById__accessTokens'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// PUT</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.1\"> 7.1 用户模型认证简介 </h4>\n\n<p><strong>相关文章:</strong></p>\n<p>LoopBack为认证和授权提供了一个全功能的解决方案.按照此处的步骤,使用StrongLoop API Explorer查看内置用户模型的工作原理概述.</p>\n<p>首先,如果你没有这样做,请按照LoopBack入门中的第一步,下载loopback-getting-started应用程序并运行它.</p>\n<p>打开<a href=\"http://localhost:3000/explorer,查看StrongLoop\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/explorer,查看StrongLoop</a> API Explorer.然后:</p>\n<h5 id=\"创建新用户\"><a href=\"#创建新用户\" class=\"headerlink\" title=\"创建新用户\"></a>创建新用户</h5><p>点击<code>POST /Users</code>创建新用户</p>\n<p><img src=\"img/cuser.jpg\" alt=\"cuser\"></p>\n<p>在<code>Parameters</code>下,单击<code>data</code>字段并输入具有电子邮件和密码属性的JSON对象,例如:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"foo@bar.com\"</span>,</span><br><span class=\"line\">   <span class=\"attr\">\"password\"</span>: <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>基本用户模型验证电子邮件是否具有电子邮件地址的标准格式,并且密码不为空.</p>\n<p><img src=\"img/cuserdata.jpg\" alt=\"cuserdata\"></p>\n<p>点击<code>Try it Out!</code>提交. </p>\n<p>你会收到值为200的响应代码,并且在Response Body中会显示新建用户的邮件地址和主键id.</p>\n<p><img src=\"img/cuserres.jpg\" alt=\"cuserres\"></p>\n<h5 id=\"使用新用户登录\"><a href=\"#使用新用户登录\" class=\"headerlink\" title=\"使用新用户登录\"></a>使用新用户登录</h5><p>现在点击<code>POST /Users/login</code>登录.将包含您之前输入的电子邮件和密码的相同JSON复制并传递到凭据字段,然后点击<code>Try it Out!</code></p>\n<p><img src=\"img/loginuser.jpg\" alt=\"loginuser\"></p>\n<p>现在,响应将包含用户的授权令牌:</p>\n<p><img src=\"img/logintoken.jpg\" alt=\"logintoken\"></p>\n<h5 id=\"设置access-token\"><a href=\"#设置access-token\" class=\"headerlink\" title=\"设置access token\"></a>设置access token</h5><p>选择并复制响应正文中id属性的值,并将其粘贴到API Explorer窗口右上角的accessToken字段中:</p>\n<p><img src=\"img/settoken.jpg\" alt=\"settoken\"></p>\n<p>执行此操作后,消息将更改为令牌集.此时,您创建的用户现在已登录并向应用程序进行身份验证.</p>\n<p>现在可以执行某些REST操作,例如:单击GET /Users/{id},在id字段中输入1,然后单击Try It Out！ 以获取您自己的用户记录的用户模型实例数据:</p>\n<blockquote>\n<p> 注意:某些操作受到限制,即使您已通过身份验证.例如,您无法查看其他用户的记录.</p>\n</blockquote>\n<hr>\n<h4 id=\"7.2\"> 7.2 控制数据访问 </h4>\n\n<blockquote>\n<p> 概要: LoopBack使用访问控制列表(ACL)来控制谁可以访问什么数据.</p>\n</blockquote>\n<h5 id=\"启用身份验证\"><a href=\"#启用身份验证\" class=\"headerlink\" title=\"启用身份验证\"></a>启用身份验证</h5><p>当您使用LoopBack应用程序生成器创建应用程序时,将自动启用访问控制,除非您选择”empty-server”应用程序类型.要为”empty-server”应用程序启用访问控制,必须添加调用enableAuth()的引导脚本.例如,在server/boot/authentication.js中:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enableAuthentication</span>(<span class=\"params\">server</span>) </span>&#123;</span><br><span class=\"line\">  server.enableAuth();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"指定用户角色\"><a href=\"#指定用户角色\" class=\"headerlink\" title=\"指定用户角色\"></a>指定用户角色</h5><p>指定用户角色的第一步是确定应用程序需要的角色.大多数应用程序将有未经身份验证或匿名的用户(未登录的用户)和经过身份验证的用户(已登录的用户).此外,许多应用程序将具有提供广泛访问权限的管理角色.并且应用可以具有任何数量的附加用户角色.</p>\n<p>例如,startkicker应用程序由四种类型的用户组成:来宾,所有者,团队成员和管理员.每个用户类型都可以根据其角色和我们定义的访问控制列表(ACL)访问应用程序的各个部分.</p>\n<p><strong>用户访问类型</strong></p>\n<p>LoopBack提供了一个内置的User模型,具有相应的REST API,继承了PersistedModel对象的所有”CRUD”方法.LoopBack用户模型的每个CRUD方法映射到READ或WRITE访问类型,如下所示:</p>\n<p>READ:</p>\n<ul>\n<li>exists - 确定用户是否存在的布尔方法.</li>\n<li>findById - 按ID查找用户.</li>\n<li>find - 查找符合指定条件的所有用户.</li>\n<li>findOne - 查找与指定条件匹配的单个用户实例.</li>\n<li>count - 返回与指定条件匹配的用户数.</li>\n</ul>\n<p>WRITE:</p>\n<ul>\n<li>create - 创建新用户.</li>\n<li>updateAttributes(update) - 更新用户记录.</li>\n<li>upsert(更新或插入) - 更新或插入新的用户记录.</li>\n<li>destroyById(相当于removeById或deleteById) - 删除具有指定ID的用户.</li>\n</ul>\n<p>对于其他方法,默认访问类型为EXECUTE.例如,自定义方法映射到EXECUTE访问类型.</p>\n<h5 id=\"定义访问控制\"><a href=\"#定义访问控制\" class=\"headerlink\" title=\"定义访问控制\"></a>定义访问控制</h5><p>使用ACL生成器为应用程序设置访问控制.在这之前,你必须清楚地知道如何为你的应用程序配置访问控制.</p>\n<p>例如,以下是loopback-example-access-control如何设置用户及其权限:</p>\n<ul>\n<li><p>Guest - Guest</p>\n<ul>\n<li>Role = $ everyone，$ unauthenticated</li>\n<li>有权访问”List projects”功能,但没有其他</li>\n</ul>\n</li>\n<li><p>John - 项目所有者</p>\n<ul>\n<li>Role = $ everyone，$ authenticated，teamMember，$ owner</li>\n<li>可以访问除”View all projects”之外的所有功能</li>\n</ul>\n</li>\n<li><p>Jane - 项目团队成员</p>\n<ul>\n<li>Role = $ everyone，$ authenticated，teamMember</li>\n<li>可以访问所有功能,除了“View all projects”和“Withdraw”</li>\n</ul>\n</li>\n<li><p>Bob - 管理员</p>\n<ul>\n<li>Role = $ everyone，$ authenticated，admin</li>\n<li>可以访问除”Withdraw”之外的所有功能</li>\n</ul>\n</li>\n</ul>\n<p>一旦你创建了这种规范,你可以很容易地构造命令来设置访问控制,如下所示.</p>\n<h5 id=\"使用ACL生成器定义访问控制\"><a href=\"#使用ACL生成器定义访问控制\" class=\"headerlink\" title=\"使用ACL生成器定义访问控制\"></a>使用ACL生成器定义访问控制</h5><p>为应用程序定义访问控制的最简单方法是使用ACL生成器.这使您能够在运行时之前创建静态定义.生成器会提示您输入所有必要的信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ slc loopback:acl</span><br></pre></td></tr></table></figure>\n\n<p><strong>例子</strong></p>\n<p>例如,以下是为loopback-example-access-control示例定义ACL条目的提示的答案.</p>\n<p>Deny access to all project REST endpoints</p>\n<ul>\n<li>Select the model to apply the ACL entry to: All existing models</li>\n<li>Select the ACL scope: All methods and properties</li>\n<li>Select the access type: All (match all types)</li>\n<li>Select the role: All users</li>\n<li>Select the permission to apply: Explicitly deny access</li>\n</ul>\n<p>Allow unrestricted access to GET <code>/api/projects/listProjects</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: listProjects</li>\n<li>Select the access type: Execute</li>\n<li>Select the role: All users</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<p>Only allow admin unrestricted access to GET <code>/api/projects</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: find</li>\n<li>Select the access type: Read</li>\n<li>Select the role: other</li>\n<li>Enter the role name: admin</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<p>Only allow team members access to GET <code>/api/projects/:id</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: findById</li>\n<li>Select the access type: Read</li>\n<li>Select the role: other</li>\n<li>Enter the role name: teamMember</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<p>Allow authenticated users to access POST <code>/api/projects/donate</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: donate</li>\n<li>Select the access type: Execute</li>\n<li>Select the role: Any authenticated user</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<p>Allow owners access to POST <code>/api/projects/withdraw</code></p>\n<ul>\n<li>Select the model to apply the ACL entry to: project</li>\n<li>Select the ACL scope: A single method</li>\n<li>Enter the method name: withdraw</li>\n<li>Select the access type: Execute</li>\n<li>Select the role: The user owning the object</li>\n<li>Select the permission to apply: Explicitly grant access</li>\n</ul>\n<h5 id=\"应用访问控制规则\"><a href=\"#应用访问控制规则\" class=\"headerlink\" title=\"应用访问控制规则\"></a>应用访问控制规则</h5><p>每个传入请求都映射到具有三个属性的对象:</p>\n<ul>\n<li>model - 目标模型名称,例如’order’</li>\n<li>property - 目标方法名称,例如’find’.您还可以指定一个方法名称数组,以对所有方法应用相同的约束.</li>\n<li>accessType - 访问类型,’EXECUTE’,’READ’和’WRITE’</li>\n</ul>\n<p>ACL规则被描述为一个对象数组,每个对象由在Model definition JSON file - ACLs中列出的属性组成.</p>\n<ol>\n<li>model</li>\n<li>property</li>\n<li>accessType</li>\n<li>principalType<ol>\n<li>USER</li>\n<li>APP</li>\n<li>ROLE<ol>\n<li>custom roles</li>\n<li>$owner</li>\n<li>$authenticated</li>\n<li>$unauthenticated</li>\n<li>$everyone</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>permission<ol>\n<li>DENY</li>\n<li>ALLOW</li>\n</ol>\n</li>\n</ol>\n<p><strong>ACL规则优先级</strong></p>\n<p>单个模型可能应用了多个ACL:基本模型(或模型)的ACL和模型本身的ACL,在模型定义JSON文件中定义. LoopBack通过添加具有权限和访问类型的优先级规则的所有适用的ACL来解决任何冲突,从而确定最终ACL.</p>\n<p>权限优先级按此顺序应用:</p>\n<ol>\n<li>DENY</li>\n<li>ALLOW</li>\n<li>DEFAULT</li>\n</ol>\n<p>因此,例如,某个操作和用户组的DENY规则优先于同一操作和组的ALLOW规则.</p>\n<p>按照以下顺序应用访问类型优先级(按特殊性顺序):</p>\n<ol>\n<li>Type (read, write, replicate, update)</li>\n<li>Method name</li>\n<li>Wildcard(通配符)</li>\n</ol>\n<p>一般来说,更具体的规则将优先于更一般的规则.例如,拒绝访问经过身份验证的用户的操作的规则将优先于拒绝对所有用户的访问的规则.</p>\n<p>LoopBack通过将请求与每个规则匹配的细节来对多个规则进行排序.它通过按照属性的分级顺序对每个ACL规则检查访问请求来计算细节.</p>\n<p>在每个级别,匹配产生三点:</p>\n<ol>\n<li>完全匹配</li>\n<li>通配符匹配（’*’）</li>\n<li>无匹配</li>\n</ol>\n<p>较高级别的匹配优先于较低级别的匹配.例如,在模型级别的完全匹配将超过通配符匹配.</p>\n<p>例如,考虑以下访问请求:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  model: 'order',</span><br><span class=\"line\">  property: 'find',</span><br><span class=\"line\">  accessType: 'EXECUTE'</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设定义了以下ACL规则:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  // Rule #<span class=\"number\">1</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    model: '*',</span><br><span class=\"line\">    property: 'find',</span><br><span class=\"line\">    accessType: 'EXECUTE',</span><br><span class=\"line\">    principalType: 'ROLE',</span><br><span class=\"line\">    principalId: '$authenticated',</span><br><span class=\"line\">    permission: 'ALLOW'</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // Rule #2</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    model: 'order',</span><br><span class=\"line\">    property: '*',</span><br><span class=\"line\">    accessType: '*',</span><br><span class=\"line\">    principalType: 'ROLE',</span><br><span class=\"line\">    principalId: '$authenticated',</span><br><span class=\"line\">    permission: 'ALLOW'</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // Rule #3</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    model: 'order',</span><br><span class=\"line\">    property: 'find',</span><br><span class=\"line\">    accessType: '*',</span><br><span class=\"line\">    principalType: 'ROLE',</span><br><span class=\"line\">    principalId: '$authenticated',</span><br><span class=\"line\">    permission: 'DENY'</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>ACL规则的顺序将是＃3,＃2,＃1.因此,请求将被拒绝,因为规则＃3设置的权限是”DENY”.</p>\n<hr>\n<h4 id=\"7.3\"> 7.3 进行身份验证请求 </h4>\n\n<p>应用程序创建和验证用户的基本过程是:</p>\n<ol>\n<li>使用User.create()方法注册一个新用户,继承自PersistedModel对象.</li>\n<li>调用User.login()从客户端应用程序代表用户请求访问令牌.</li>\n<li>使用访问令牌调用API.在HTTP标头中提供访问令牌,或作为REST API调用的查询参数,如下所示.</li>\n</ol>\n<h5 id=\"使用访问令牌进行身份验证请求\"><a href=\"#使用访问令牌进行身份验证请求\" class=\"headerlink\" title=\"使用访问令牌进行身份验证请求\"></a>使用访问令牌进行身份验证请求</h5><p>一旦用户登录,LoopBack创建一个新的AccessToken引用用户.在为访问控制系统进行后续REST请求以验证用户可以调用给定模型上的方法时,需要此令牌.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACCESS_TOKEN=6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Authorization Header</span></span><br><span class=\"line\">curl -X GET -H <span class=\"string\">\"Authorization: <span class=\"variable\">$ACCESS_TOKEN</span>\"</span> \\</span><br><span class=\"line\">http://localhost:3000/api/widgets</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Query Parameter</span></span><br><span class=\"line\">curl -X GET http://localhost:3000/api/widgets?access_token=<span class=\"variable\">$ACCESS_TOKEN</span></span><br></pre></td></tr></table></figure>\n\n<p>要使用cookie进行身份验证,请将以下内容添加到server.js(引导前):</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(loopback.token(&#123;</span><br><span class=\"line\">    model: app.models.accessToken</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"将当前用户标识用作REST的URL中的文字\"><a href=\"#将当前用户标识用作REST的URL中的文字\" class=\"headerlink\" title=\"将当前用户标识用作REST的URL中的文字\"></a>将当前用户标识用作REST的URL中的文字</h5><p>要允许REST API当前登录的用户标识,请使用currentUserLiteral选项配置标记中间件.</p>\n<p><strong>/server/server.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(loopback.token(&#123;</span><br><span class=\"line\">    model: app.models.accessToken,</span><br><span class=\"line\">    currentUserLiteral: <span class=\"string\">'me'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>currentUserLiteral定义了可以在REST API的URL中使用的特殊标记，例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X GET http://localhost:3000/api/users/me/orders?access_token=<span class=\"variable\">$ACCESS_TOKEN</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意,URL将被重写为如下:</p>\n<p><code>http://localhost:3000/api/users/&lt;currentLoggedInUserId&gt;/orders?access_token=$ACCESS_TOKEN</code></p>\n<h5 id=\"删除访问令牌\"><a href=\"#删除访问令牌\" class=\"headerlink\" title=\"删除访问令牌\"></a>删除访问令牌</h5><p>通过删除在登录时发出的访问令牌,用户将被有效地注销.这仅影响指定的访问令牌,附加到用户的其他令牌仍将有效.</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> USER_ID = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ACCESS_TOKEN = <span class=\"string\">'6Nb2ti5QEXIoDBS5FQGWIz4poRFiBCMMYJbYXSGHWuulOuy0GTEuGx2VCEVvbpBK'</span>;</span><br><span class=\"line\"><span class=\"comment\">// remove just the token</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> token = <span class=\"keyword\">new</span> AccessToken(&#123;</span><br><span class=\"line\">  id: ACCESS_TOKEN</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">token.destroy();</span><br><span class=\"line\"><span class=\"comment\">// remove all user tokens</span></span><br><span class=\"line\">AccessToken.destroyAll(&#123;</span><br><span class=\"line\">  where: &#123;</span><br><span class=\"line\">    userId: USER_ID</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.4\"> 7.4 定义和使用角色 </h4>\n\n<p>LoopBack允许您定义静态和动态角色.静态角色存储在数据源中,并映射到用户.相反,动态角色不分配给用户,而是在访问期间确定.</p>\n<h5 id=\"静态角色\"><a href=\"#静态角色\" class=\"headerlink\" title=\"静态角色\"></a>静态角色</h5><p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.create([</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'john@doe.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'Jane'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'jane@doe.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'Bob'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'bob@projects.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;</span><br><span class=\"line\">  ], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> cb(err);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//create the admin role</span></span><br><span class=\"line\">    Role.create(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'admin'</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, role</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) cb(err);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//make bob an admin</span></span><br><span class=\"line\">      role.principals.create(&#123;</span><br><span class=\"line\">        principalType: RoleMapping.USER,</span><br><span class=\"line\">        principalId: users[<span class=\"number\">2</span>].id</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, principal</span>) </span>&#123;</span><br><span class=\"line\">        cb(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>现在你可以使用上面定义的角色在访问控制中.例如,将以下内容添加到common/models/project.json中,以使”admin”角色的用户能够调用所有REST API.</p>\n<p><strong>/common/models/model.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"accessType\"</span>: <span class=\"string\">\"EXECUTE\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"find\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态角色\"><a href=\"#动态角色\" class=\"headerlink\" title=\"动态角色\"></a>动态角色</h5><p>有时静态角色不够灵活.LoopBack还使您能够定义在运行时定义的动态角色.</p>\n<p>LoopBack提供以下内置动态角色.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Role object property</th>\n      <th>String value</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>Role.OWNER</td>\n      <td>$owner</td>\n      <td>Owner of the object</td>\n    </tr>\n    <tr>\n      <td>Role.AUTHENTICATED</td>\n      <td>$authenticated</td>\n      <td>authenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.UNAUTHENTICATED</td>\n      <td>$unauthenticated</td>\n      <td>Unauthenticated user</td>\n    </tr>\n    <tr>\n      <td>Role.EVERYONE</td>\n      <td>$everyone</td>\n      <td>Everyone</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>第一个示例使用<code>$owner</code>动态角色来允许访问所请求的项目模型的所有者.</p>\n<blockquote>\n<p> 注意: 为了限定<code>$owner</code>,目标模型需要具有与User模型(或者从User扩展的模型)和属性匹配目标模型实例的外键的belongsTo关系.对<code>$owner</code>的检查仅对路径上有’:id’的远程方法执行,例如GET /api/users/:id.</p>\n</blockquote>\n<p>使用Role.registerResolver()在引导脚本中设置自定义角色处理程序.此函数有两个参数:</p>\n<ol>\n<li>角色的字符串名称。</li>\n<li>确定主体是否处于指定角色的函数.函数签名必须是function(role, context, callback).</li>\n</ol>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">app</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Role = app.models.Role;</span><br><span class=\"line\"></span><br><span class=\"line\">  Role.registerResolver(<span class=\"string\">'teamMember'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">role, context, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Q: Is the current request accessing a Project?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.modelName !== <span class=\"string\">'project'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// A: No. This role is only for projects: callback with FALSE</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Q: Is the user logged in? (there will be an accessToken with an ID if so)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> userId = context.accessToken.userId;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!userId) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//A: No, user is NOT logged in: callback with FALSE</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Q: Is the current logged-in user associated with this Project?</span></span><br><span class=\"line\">    <span class=\"comment\">// Step 1: lookup the requested project</span></span><br><span class=\"line\">    context.model.findById(context.modelId, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, project</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// A: The datastore produced an error! Pass error to callback</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> cb(err);</span><br><span class=\"line\">      <span class=\"comment\">// A: There's no project by this ID! Pass error to callback</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!project) <span class=\"keyword\">return</span> cb(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Project not found\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 2: check if User is part of the Team associated with this Project</span></span><br><span class=\"line\">      <span class=\"comment\">// (using count() because we only want to know if such a record exists)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> Team = app.models.Team;</span><br><span class=\"line\">      Team.count(&#123;</span><br><span class=\"line\">        ownerId: project.ownerId,</span><br><span class=\"line\">        memberId: userId</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, count</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// A: The datastore produced an error! Pass error to callback</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> cb(err);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">          <span class=\"comment\">// A: YES. At least one Team associated with this User AND Project</span></span><br><span class=\"line\">          <span class=\"comment\">// callback with TRUE, user is role:`teamMember`</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// A: NO, User is not in this Project's Team</span></span><br><span class=\"line\">          <span class=\"comment\">// callback with FALSE, user is NOT role:`teamMember`</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 注意:关于process.nextTick()的注释.在上面的代码中,我们将一些回调调用包装在process.nextTick( () =&gt; cb(…) ),但不是其他.为什么?在这样的异步函数中,它需要一个回调并在稍后的时间将结果传递给它,重要的是要确保我们总是调用稍后回调,而不是立即调用它(同步).我们从传递给process.nextTick的函数调用回调函数,否则会被同步调用.来自findById或count回调的调用已经保证在稍后访问数据库时发生,这是异步操作,因此我们不需要在process.nextTick中包装这些调用.</p>\n</blockquote>\n<p>使用上面定义的动态角色,我们可以限制项目信息访问作为项目团队成员的用户.</p>\n<p><strong>/common/models/model.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"accessType\"</span>: <span class=\"string\">\"READ\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"teamMember\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"findById\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.5\"> 7.5 访问相关模型 </h4>\n\n<blockquote>\n<p> 重要:在访问相关模型时,活动ACL仍然是您调用的模型的ACL.因此,即使您的模型设置了DENY ALL权限,如果与其相关的模型没有ACL,则所有关系端点都将打开.这可能是一个安全风险,因为例如GET /OpenModel/{id}/ ACLSecuredModel将允许通过OpenModel关系对ACLSecuredModel的完全访问.</p>\n</blockquote>\n<h5 id=\"限制对相关模型的访问\"><a href=\"#限制对相关模型的访问\" class=\"headerlink\" title=\"限制对相关模型的访问\"></a>限制对相关模型的访问</h5><p>当两个模型之间存在关系(参见创建模型关系)时,LoopBack会自动创建一组相关的模型方法,这些方法与为关系定义的API路由相对应.</p>\n<p>在下面的列表中,modelName是相关模型的名称,而modelNamePlural是相关模型名称的复数形式.</p>\n<blockquote>\n<p> 注意:在下面的方法名称中,分隔符是双下划线__.</p>\n</blockquote>\n<p><strong>belongsTo</strong>:</p>\n<ul>\n<li>__get__<em>relatedModelName</em></li>\n</ul>\n<p><strong>hasOne</strong>:</p>\n<ul>\n<li>__create__<em>relatedModelName</em></li>\n<li>__get__<em>relatedModelName</em></li>\n<li>__update__<em>relatedModelName</em></li>\n<li>__destroy__<em>relatedModelName</em></li>\n</ul>\n<p><strong>hasMany</strong>:</p>\n<ul>\n<li>__count__<em>relatedModelNamePlural</em></li>\n<li>__create__<em>relatedModelNamePlural</em></li>\n<li>__delete__<em>relatedModelNamePlural</em></li>\n<li>__destroyById__<em>relatedModelNamePlural</em></li>\n<li>__findById__<em>relatedModelNamePlural</em></li>\n<li>__get__<em>relatedModelNamePlural</em></li>\n<li>__updateById__<em>relatedModelNamePlural</em></li>\n</ul>\n<p><strong>hasManyThrough</strong>:</p>\n<ul>\n<li>__count__<em>relatedModelNamePlural</em></li>\n<li>__create__<em>relatedModelNamePlural</em></li>\n<li>__delete__<em>relatedModelNamePlural</em></li>\n<li>__destroyById__<em>relatedModelNamePlural</em></li>\n<li>__exists__<em>relatedModelNamePlural</em> (through only)</li>\n<li>__findById__<em>relatedModelNamePlural</em></li>\n<li>__get__<em>relatedModelNamePlural</em></li>\n<li>__link__<em>relatedModelNamePlural</em> (through only)</li>\n<li>__updateById__<em>relatedModelNamePlural</em></li>\n<li>__unlink__<em>relatedModelNamePlural</em> (through only)</li>\n</ul>\n<p><strong>hasAndBelongsToMany</strong>:</p>\n<ul>\n<li>__link__<em>relatedModelNamePlural</em></li>\n<li>__unlink__<em>relatedModelNamePlural</em></li>\n</ul>\n<p>您可以使用这些相关的模型方法来控制对相关路由的访问.</p>\n<p>例如,如果用户有多个项目,LoopBack创建这些路由(以及其他)和相应的相关模型方法:</p>\n<ul>\n<li><code>/api/users/count</code> - standard method is <code>count</code></li>\n<li><code>/api/users/:id/projects</code> - related model method is <code>__get__projects</code></li>\n<li><code>/api/users/:id/projects/count</code> - related model method is <code>__count__projects</code></li>\n</ul>\n<blockquote>\n<p> 重要: 如果模型具有DENY ALL权限(例如,内置模型,如用户模型),但相关模型没有ACL,则仍然无法通过User模型访问相关模型.因此,例如,即使图书模型的默认ACL是GET /books的ALLOW $ authenticated,路由GET /user/{id}/books default仍将是DENY ALL.</p>\n</blockquote>\n<p>要配置对这些路由的访问控制,请在模型定义JSON文件中设置相关模型方法的权限.例如,这些路由的用户模型定义JSON文件(user.json)的ACL可能如下所示,例如:</p>\n<p><strong>/common/models/user.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"acls\": [&#123;</span><br><span class=\"line\">  \"principalType\": \"ROLE\",</span><br><span class=\"line\">  \"principalId\": \"$authenticated\",</span><br><span class=\"line\">  \"permission\": \"ALLOW\",</span><br><span class=\"line\">  \"property\": \"count\"</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  \"principalType\": \"ROLE\",</span><br><span class=\"line\">  \"principalId\": \"$owner\",</span><br><span class=\"line\">  \"permission\": \"ALLOW\",</span><br><span class=\"line\">  \"property\": \"__get__projects\"</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  \"principalType\": \"ROLE\",</span><br><span class=\"line\">  \"principalId\": \"$authenticated\",</span><br><span class=\"line\">  \"permission\": \"ALLOW\",</span><br><span class=\"line\">  \"property\": \"__count__projects\"</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查询相关模型\"><a href=\"#查询相关模型\" class=\"headerlink\" title=\"查询相关模型\"></a>查询相关模型</h5><p>查询模型时,您可能还需要从其相关模型返回数据.</p>\n<p>例如,假设您有三个模型: User,Report和LineItem,其中:</p>\n<ul>\n<li>用户可以有多个报告.也就是说,在User和Report(User hasMany Report)之间有一个HasMany关系.</li>\n<li>报表可以有多个订单项.也就是说,在Report和Lineitem之间有一个HasMany关系(Report hasMany LineItem).</li>\n</ul>\n<p>此外,ReportModel还配置了以下ACL,以便经过身份验证的用户可以创建新记录,并且用户可以更新自己的记录:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"$everyone\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"DENY\"</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"$owner\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"findById\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>假设LineItem模型具有定义的相同ACL.</p>\n<p>现在,假设您要获取您的用户拥有的模型,并获取其相关模型.下面是如何使用findById()使用Node API:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Report.findById(&#123;</span><br><span class=\"line\">  id: <span class=\"number\">1</span>,</span><br><span class=\"line\">  filter: &#123;</span><br><span class=\"line\">    include: <span class=\"string\">'lineitems'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Using the REST API:</p>\n<p><code>GET /api/Reports/110?filter={&quot;include&quot;:[&quot;lineItems&quot;]}</code></p>\n<p>Example results:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"january report - bob\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">110</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"userId\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"lineItemModels\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"lunch\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"reportModelId\"</span>: <span class=\"number\">110</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"dinner\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">112</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"reportModelId\"</span>: <span class=\"number\">110</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.6\"> 7.6 创建默认管理员账号 </h4>\n\n<p>LoopBack没有定义默认管理员用户,但是您可以在应用程序启动时定义一个,如loopback-example-access-control示例中所示.具体来说,该示例包括server/boot/sample-models.js中的代码:</p>\n<ul>\n<li>创建多个用户,以及其他模型的实例.</li>\n<li>定义模型之间的关系.</li>\n<li>定义管理角色.</li>\n<li>添加角色映射以将其中一个用户分配给管理角色.</li>\n</ul>\n<p>因为此脚本在<code>server/boot</code>,它是在应用程序启动时执行的,所以管理员用户将始终存在一次应用程序初始化.</p>\n<p>以下代码创建了名为”John”,”Jane”和”Bob”的三个用户,然后(跳过创建项目,项目所有者和项目团队成员的代码)定义了”管理”角色,并且制定Bob为管理员.</p>\n<p><strong>/server/boot/script.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.create([</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'john@doe.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'Jane'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'jane@doe.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">username</span>: <span class=\"string\">'Bob'</span>, <span class=\"attr\">email</span>: <span class=\"string\">'bob@projects.com'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'opensesame'</span>&#125;</span><br><span class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, users</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> debug(<span class=\"string\">'%j'</span>, err);</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">// Create projects, assign project owners and project team members</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">// Create the admin role</span></span><br><span class=\"line\">    Role.create(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'admin'</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, role</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> debug(err);</span><br><span class=\"line\">      debug(role);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Make Bob an admin</span></span><br><span class=\"line\">      role.principals.create(&#123;</span><br><span class=\"line\">        principalType: RoleMapping.USER,</span><br><span class=\"line\">        principalId: users[<span class=\"number\">2</span>].id</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, principal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> debug(err);</span><br><span class=\"line\">        debug(principal);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>模型JSON(由ACL生成器创建)文件指定管理角色具有查看项目(GET /api/projects)的不受限制的访问权限:</p>\n<p><strong>/common/models/model.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"accessType\"</span>: <span class=\"string\">\"READ\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalType\"</span>: <span class=\"string\">\"ROLE\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"principalId\"</span>: <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"permission\"</span>: <span class=\"string\">\"ALLOW\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"property\"</span>: <span class=\"string\">\"find\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"7.7\"> 7.7 安全注意事项 </h4>\n\n<h5 id=\"Model-REST-APIs\"><a href=\"#Model-REST-APIs\" class=\"headerlink\" title=\"Model REST APIs\"></a>Model REST APIs</h5><p>默认情况下,您创建的LoopBack模型会为CRUD操作公开一组标准的HTTP端点.model-config.json中的public属性指定是否公开模型的REST API,例如:</p>\n<p><strong>/server/model-config.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  \"MyModel\": &#123;</span><br><span class=\"line\">    \"public\": true,</span><br><span class=\"line\">    \"dataSource\": \"db\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>要隐藏模型的REST API,只需将public更改为false即可.</p>\n<h5 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h5><p>LoopBack应用程序使用cors中间件软件包进行跨源资源共享(CORS),但对于使用应用程序生成器创建的应用程序,它默认禁用.</p>\n<p>要启用CORS,请编辑server/config.json中的远程部分并将cors设置为true:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"remoting\": &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"cors\": true,  // false by default</span><br><span class=\"line\">    \"handleErrors\": false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要配置CORS设置,请编辑server/middleware.json文件中的<code>initial</code>部分:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  \"initial\": &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    \"cors\": &#123;</span><br><span class=\"line\">      \"params\": &#123;</span><br><span class=\"line\">        \"origin\": true,</span><br><span class=\"line\">        \"credentials\": true,</span><br><span class=\"line\">        \"maxAge\": 86400</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在客户端上启用CORS</p>\n<p>如果您使用的是JavaScript客户端,则还必须在客户端启用CORS.例如,使用AngularJS启用它的一种方法是:</p>\n<p><strong>/client/app.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myApp = angular.module(<span class=\"string\">'myApp'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'myAppApiService'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">myApp.config([<span class=\"string\">'$httpProvider'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$httpProvider</span>) </span>&#123;</span><br><span class=\"line\">        $httpProvider.defaults.useXDomain = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> $httpProvider.defaults.headers.common[<span class=\"string\">'X-Requested-With'</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>剧终!</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1r9cm0v0005nw9wlnc875jr","category_id":"ck1r9cm0y0007nw9wg4tduwha","_id":"ck1r9cm13000bnw9w1f7bqwrk"},{"post_id":"ck1r9cm1m000inw9wkbez792n","category_id":"ck1r9cm0y0007nw9wg4tduwha","_id":"ck1r9cm1p000lnw9wgi6ed5u7"},{"post_id":"ck1r9cm1n000jnw9wlp0tbrsv","category_id":"ck1r9cm0y0007nw9wg4tduwha","_id":"ck1r9cm1p000mnw9wv4xykxkm"},{"post_id":"ck1r9cm310012nw9wuq9u7u96","category_id":"ck1r9cm0y0007nw9wg4tduwha","_id":"ck1r9cm330015nw9w9pbm6e4q"},{"post_id":"ck1r9cm6p0018nw9wgj4a983h","category_id":"ck1r9cm6q0019nw9w6l8alyrr","_id":"ck1r9cm6r001anw9wpykt4mjx"},{"post_id":"ck1r9cm7h001bnw9wmwxclcoo","category_id":"ck1r9cm6q0019nw9w6l8alyrr","_id":"ck1r9cm7i001dnw9wmlqpfqju"}],"PostTag":[{"post_id":"ck1r9cm0v0005nw9wlnc875jr","tag_id":"ck1r9cm110008nw9w5423cqo9","_id":"ck1r9cm13000dnw9wkhtahl28"},{"post_id":"ck1r9cm0v0005nw9wlnc875jr","tag_id":"ck1r9cm12000anw9w2g263d2w","_id":"ck1r9cm14000enw9wsim7guqr"},{"post_id":"ck1r9cm0x0006nw9wyhzvzwqx","tag_id":"ck1r9cm13000cnw9wjl6ps9gu","_id":"ck1r9cm14000gnw9w8xmivq8n"},{"post_id":"ck1r9cm110009nw9w4y140ihq","tag_id":"ck1r9cm14000fnw9w1vnytv5w","_id":"ck1r9cm14000hnw9w29qm6oqg"},{"post_id":"ck1r9cm1m000inw9wkbez792n","tag_id":"ck1r9cm1p000knw9wd7a8x9o0","_id":"ck1r9cm1s000rnw9wgn94noh4"},{"post_id":"ck1r9cm1m000inw9wkbez792n","tag_id":"ck1r9cm1p000nnw9w7nh99pbg","_id":"ck1r9cm1s000snw9wssv1twn7"},{"post_id":"ck1r9cm1m000inw9wkbez792n","tag_id":"ck1r9cm1q000onw9wksxmtj1r","_id":"ck1r9cm1t000unw9we4t6qdr4"},{"post_id":"ck1r9cm1m000inw9wkbez792n","tag_id":"ck1r9cm1q000pnw9wek25w6vg","_id":"ck1r9cm1t000vnw9wzy79iold"},{"post_id":"ck1r9cm1n000jnw9wlp0tbrsv","tag_id":"ck1r9cm1p000knw9wd7a8x9o0","_id":"ck1r9cm1u000ynw9wrbrxv4wo"},{"post_id":"ck1r9cm1n000jnw9wlp0tbrsv","tag_id":"ck1r9cm1p000nnw9w7nh99pbg","_id":"ck1r9cm1u000znw9wgp34embx"},{"post_id":"ck1r9cm1n000jnw9wlp0tbrsv","tag_id":"ck1r9cm1q000onw9wksxmtj1r","_id":"ck1r9cm1u0010nw9w7ga8kv47"},{"post_id":"ck1r9cm1n000jnw9wlp0tbrsv","tag_id":"ck1r9cm1q000pnw9wek25w6vg","_id":"ck1r9cm1u0011nw9w140c70at"},{"post_id":"ck1r9cm310012nw9wuq9u7u96","tag_id":"ck1r9cm1p000knw9wd7a8x9o0","_id":"ck1r9cm330013nw9wd91ch5yx"},{"post_id":"ck1r9cm310012nw9wuq9u7u96","tag_id":"ck1r9cm1p000nnw9w7nh99pbg","_id":"ck1r9cm330014nw9wh8on98nv"},{"post_id":"ck1r9cm310012nw9wuq9u7u96","tag_id":"ck1r9cm1q000onw9wksxmtj1r","_id":"ck1r9cm330016nw9ww9d1d16t"},{"post_id":"ck1r9cm310012nw9wuq9u7u96","tag_id":"ck1r9cm1q000pnw9wek25w6vg","_id":"ck1r9cm330017nw9w97wk4wmu"},{"post_id":"ck1r9cm7h001bnw9wmwxclcoo","tag_id":"ck1r9cm7i001cnw9wiprmg8l8","_id":"ck1r9cm7i001enw9w0e0d3wzz"},{"post_id":"ck1r9cm7h001bnw9wmwxclcoo","tag_id":"ck1r9cm1p000nnw9w7nh99pbg","_id":"ck1r9cm7i001fnw9ww7pugpyz"},{"post_id":"ck1r9cm7h001bnw9wmwxclcoo","tag_id":"ck1r9cm1q000onw9wksxmtj1r","_id":"ck1r9cm7i001gnw9wruaccu4x"},{"post_id":"ck1r9cm7h001bnw9wmwxclcoo","tag_id":"ck1r9cm1q000pnw9wek25w6vg","_id":"ck1r9cm7i001hnw9wovkj07jt"}],"Tag":[{"name":"Drupal 8","_id":"ck1r9cm110008nw9w5423cqo9"},{"name":"Docker","_id":"ck1r9cm12000anw9w2g263d2w"},{"name":"vue","_id":"ck1r9cm13000cnw9wjl6ps9gu"},{"name":"休闲","_id":"ck1r9cm14000fnw9w1vnytv5w"},{"name":"loopBack","_id":"ck1r9cm1p000knw9wd7a8x9o0"},{"name":"nodejs","_id":"ck1r9cm1p000nnw9w7nh99pbg"},{"name":"express","_id":"ck1r9cm1q000onw9wksxmtj1r"},{"name":"RESTful","_id":"ck1r9cm1q000pnw9wek25w6vg"},{"name":"loopback","_id":"ck1r9cm7i001cnw9wiprmg8l8"}]}}